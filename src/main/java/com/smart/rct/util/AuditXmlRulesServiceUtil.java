package com.smart.rct.util;

import java.io.IOException;
import java.io.StringReader;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.stream.Collectors;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.smart.rct.common.entity.CustomerDetailsEntity;
import com.smart.rct.common.entity.NetworkConfigEntity;
import com.smart.rct.common.models.CiqMapValuesModel;
import com.smart.rct.constants.AuditConstants;
import com.smart.rct.constants.XmlCommandsConstants;
import com.smart.rct.migration.entity.RunTestEntity;
import com.smart.rct.migration.entity.XmlElementEntity;
import com.smart.rct.postmigration.entity.Audit5GCbandFirmwareDetailsEntity;
import com.smart.rct.postmigration.entity.Audit5GMMHardwareDetailsEntity;
import com.smart.rct.postmigration.entity.AuditCbandHardwareDetailsEntity;
import com.smart.rct.postmigration.entity.AuditConstantsEntity;
import com.smart.rct.postmigration.entity.AuditCriticalParamsSummaryEntity;
import com.smart.rct.postmigration.entity.AuditFirmwareDetailsEntity;
import com.smart.rct.postmigration.entity.AuditHardwareDetailsEntity;
import com.smart.rct.postmigration.repository.Audit5GCbandFirmwareDetailsRepository;
import com.smart.rct.postmigration.repository.AuditCbandHardwareDetailsRepository;
import com.smart.rct.postmigration.repository.AuditConstantsRepository;
import com.smart.rct.postmigration.repository.AuditFirmwareDetailsRepository;
import com.smart.rct.postmigration.repository.AuditHardwareDetailsRepository;
import com.smart.rct.postmigration.service.Audit4GFsuSummaryService;
import com.smart.rct.postmigration.service.Audit4GSummaryService;
import com.smart.rct.postmigration.service.Audit5GCBandSummaryService;
import com.smart.rct.postmigration.service.Audit5GDSSSummaryService;
import com.smart.rct.postmigration.service.AuditCriticalParamsService;
import com.smart.rct.premigration.entity.Ip;
import com.smart.rct.premigration.entity.NeMappingEntity;
import com.smart.rct.premigration.models.CIQDetailsModel;
import com.smart.rct.premigration.models.NeMappingModel;
import com.smart.rct.premigration.repositoryImpl.GenerateCsvRepositoryImpl;
import com.smart.rct.premigration.service.NeMappingService;

@Component
public class AuditXmlRulesServiceUtil {

	final static Logger logger = LoggerFactory.getLogger(AuditXmlRulesServiceUtil.class);

	@Autowired
	MongoTemplate mongoTemplate;
	
	@Autowired
	NeMappingService neMappingService;
	
	@Autowired
	GenerateCsvRepositoryImpl generateCsvRepository;

	@Autowired
	Audit4GSummaryService audit4GSummaryService;
	
	@Autowired
	Audit4GFsuSummaryService audit4GFsuSummaryService;
	
	@Autowired
	AuditHardwareDetailsRepository auditHardwareDetailsRepository;
	
	@Autowired
	AuditFirmwareDetailsRepository auditFirmwareDetailsRepository;
	
	@Autowired
	AuditConstantsRepository auditConstantsRepository;
	
	@Autowired
	Audit5GCBandSummaryService audit5GCBandSummaryService;
	
	@Autowired
	Audit5GDSSSummaryService audit5GDSSSummaryService;
	
	@Autowired
	AuditCbandHardwareDetailsRepository auditCbandHardwareDetailsRepository;
	
	@Autowired
	Audit5GCbandFirmwareDetailsRepository audit5GCbandFirmwareDetailsRepository;
	
	@Autowired
	AuditCriticalParamsService auditCriticalParamsService;
	
	public StringBuilder getCommandHtmlEnbFunctionCallTraceCslInfo(String fullOutputLog, String command, String enbId) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("csl-info");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("csl-ip-ver");
			headerList.add("csl-server-ipv6");
			headerList.add("udp-ack-control");
			headerList.add("csl-report-control");

			LinkedHashMap<String, String> tabelData = new LinkedHashMap<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					tabelData.put("csl-ip-ver", getXmlElementData(element, "csl-ip-ver"));
					tabelData.put("csl-server-ipv6", getXmlElementData(element, "csl-server-ipv6"));
					tabelData.put("udp-ack-control", getXmlElementData(element, "udp-ack-control"));
					tabelData.put("csl-report-control", getXmlElementData(element, "csl-report-control"));

					htmlContent.append(
							"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
					htmlContent.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command
							+ "</b></td></tr>\n");

					String tableHeader = "";
					tableHeader = tableHeader + "<tr>\n";
					for (String headerName : headerList) {
						tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
					}

					tableHeader = tableHeader + "</tr>\n";
					String tableData = "";
					tableData = tableData + "<tr>\n";
					for (Map.Entry<String, String> resultTableData : tabelData.entrySet()) {

						if ("csl-server-ipv6".equalsIgnoreCase(resultTableData.getKey())) {
							if (enbId.startsWith("72") || enbId.startsWith("73")) {
								if ("2001:4888:0a1f:c223:01b4:01a2:0000:0003"
										.equalsIgnoreCase(resultTableData.getValue())
										|| "2001:4888:a1f:c223:01b4:01a2:0:3"
												.equalsIgnoreCase(resultTableData.getValue())
										|| "2001:4888:a1f:c223:1b4:1a2:0:3".equalsIgnoreCase(resultTableData.getValue())
										|| "0000:0000:0000:0000:0000:0000:0000:0000"
												.equalsIgnoreCase(resultTableData.getValue())) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}

							} else if (enbId.startsWith("74")) {

								if ("2001:4888:0a1f:c223:01b4:01a2:0000:0012"
										.equalsIgnoreCase(resultTableData.getValue())
										|| "2001:4888:a1f:c223:1b4:1a2:0:12"
												.equalsIgnoreCase(resultTableData.getValue())
										|| "0000:0000:0000:0000:0000:0000:0000:0000"
												.equalsIgnoreCase(resultTableData.getValue())) {

									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}

							} else if (enbId.startsWith("70") || enbId.startsWith("71")) {

								if ("2001:4888:0a1f:c223:01b4:01a2:0000:0022"
										.equalsIgnoreCase(resultTableData.getValue())
										|| "2001:4888:a1f:c223:1b4:1a2:0:22"
												.equalsIgnoreCase(resultTableData.getValue())
										|| "0000:0000:0000:0000:0000:0000:0000:0000"
												.equalsIgnoreCase(resultTableData.getValue())) {

									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}

							} else if (enbId.startsWith("59") || enbId.startsWith("60") || enbId.startsWith("68")) {

								if ("2001:4888:0a1f:c223:01b4:01a2:0000:0006"
										.equalsIgnoreCase(resultTableData.getValue())
										|| "2001:4888:a1f:c223:01b4:01a2:0:6"
												.equalsIgnoreCase(resultTableData.getValue())
										|| "0000:0000:0000:0000:0000:0000:0000:0000"
												.equalsIgnoreCase(resultTableData.getValue())) {

									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}

							} else if (enbId.startsWith("61") || enbId.startsWith("64") || enbId.startsWith("66")) {
								if ("2001:4888:0a1f:c223:01b4:01a2:0000:0009"
										.equalsIgnoreCase(resultTableData.getValue())
										|| "2001:4888:a1f:c223:01b4:01a2:0:9"
												.equalsIgnoreCase(resultTableData.getValue())
										|| "0000:0000:0000:0000:0000:0000:0000:0000"
												.equalsIgnoreCase(resultTableData.getValue())) {

									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}

							} else if (enbId.startsWith("56") || enbId.startsWith("57")) {

								if ("2001:4888:0a1f:c223:01b4:01a2:0000:0012"
										.equalsIgnoreCase(resultTableData.getValue())
										|| "2001:4888:a1f:c223:01b4:01a2:0:12"
												.equalsIgnoreCase(resultTableData.getValue())
										|| "0000:0000:0000:0000:0000:0000:0000:0000"
												.equalsIgnoreCase(resultTableData.getValue())) {

									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}

							} else if (enbId.startsWith("58") || enbId.startsWith("62")) {
								if ("2001:4888:0a1f:c223:01b4:01a2:0000:0015"
										.equalsIgnoreCase(resultTableData.getValue())
										|| "2001:4888:a1f:c223:01b4:01a2:0:15"
												.equalsIgnoreCase(resultTableData.getValue())
										|| "0000:0000:0000:0000:0000:0000:0000:0000"
												.equalsIgnoreCase(resultTableData.getValue())) {

									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}

							} else if (enbId.startsWith("65")) {

								if ("2001:4888:0a1f:c223:01b4:01a2:0000:0022"
										.equalsIgnoreCase(resultTableData.getValue())
										|| "2001:4888:a1f:c223:1b4:1a2:0:22"
												.equalsIgnoreCase(resultTableData.getValue())
										|| "0000:0000:0000:0000:0000:0000:0000:0000"
												.equalsIgnoreCase(resultTableData.getValue())) {

									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}

							}
						} else if ("csl-report-control".equalsIgnoreCase(resultTableData.getKey())) {
							if ("on".equalsIgnoreCase(resultTableData.getValue())) {

								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}

						} else {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						}

					}
					tableData = tableData + "</tr>\n";
					htmlContent.append(tableHeader);
					htmlContent.append(tableData);
					htmlContent.append("</table>\n");

				}

			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public String getXmlElementData(Element element, String elementName) {
		String outPut = null;
		if (element.getElementsByTagName(elementName) != null
				&& element.getElementsByTagName(elementName).getLength() > 0) {
			outPut = element.getElementsByTagName(elementName).item(0).getTextContent();

		} else {
			outPut = "-";
		}
		return outPut;
	}

	public StringBuilder getCommandHtmlEnbFunctionPathControl(String fullOutputLog, String command, String enbId) {

		StringBuilder htmlContent = new StringBuilder();
		try {

			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("radio-unit-info");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("connected-digital-unit-board-type");
			headerList.add("connected-digital-unit-board-id");
			headerList.add("connected-digital-unit-port-id");
			headerList.add("cascade-radio-unit-id");
			headerList.add("path");
			headerList.add("carrier-index");
			headerList.add("current-carrier-tx-switch");
			headerList.add("current-carrier-rx-switch");
			headerList.add("carrier-rssi");
			headerList.add("carrier-rssi-iq-level");
			headerList.add("carrier-rssi-iq-level");
			headerList.add("current-carrier-tx-attenuation");
			headerList.add("carrier-control");
			headerList.add("operational-state");
			headerList.add("current-amp-state");
			headerList.add("temperature");
			headerList.add("tx-rf-power");
			headerList.add("return-loss");
			headerList.add("vswr");
			headerList.add("current-ald-power-feeding-switch");
			headerList.add("pim-power");
			headerList.add("pim-cancellation-level");
			headerList.add("path-energy-saving-state");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("path-control");
					for (int j = 0; j < childNodeList.getLength(); j++) {
						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childControlNodeList = elementchild.getElementsByTagName("carrier-control");
							for (int k = 0; k < childControlNodeList.getLength(); k++) {
								Node ChildControlNode = childControlNodeList.item(k);
								if (Node.ELEMENT_NODE == ChildControlNode.getNodeType()) {
									Element elementControlchild = (Element) ChildControlNode;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();

									objtableData.put("connected-digital-unit-board-type",
											getXmlElementData(element, "connected-digital-unit-board-type"));
									objtableData.put("connected-digital-unit-board-id",
											getXmlElementData(element, "connected-digital-unit-board-id"));
									objtableData.put("connected-digital-unit-port-id",
											getXmlElementData(element, "connected-digital-unit-port-id"));
									objtableData.put("cascade-radio-unit-id",
											getXmlElementData(element, "cascade-radio-unit-id"));

									objtableData.put("path", getXmlElementData(elementchild, "path"));

									objtableData.put("carrier-index",
											getXmlElementData(elementControlchild, "carrier-index"));
									objtableData.put("current-carrier-tx-switch",
											getXmlElementData(elementControlchild, "current-carrier-tx-switch"));
									objtableData.put("current-carrier-rx-switch",
											getXmlElementData(elementControlchild, "current-carrier-rx-switch"));
									objtableData.put("carrier-rssi",
											getXmlElementData(elementControlchild, "carrier-rssi"));
									objtableData.put("carrier-rssi-iq-level",
											getXmlElementData(elementControlchild, "carrier-rssi-iq-level"));
									objtableData.put("carrier-tssi-iq-level",
											getXmlElementData(elementControlchild, "carrier-tssi-iq-level"));
									objtableData.put("current-carrier-tx-attenuation",
											getXmlElementData(elementControlchild, "current-carrier-tx-attenuation"));

									objtableData.put("operational-state",
											getXmlElementData(elementchild, "operational-state"));
									objtableData.put("current-amp-state",
											getXmlElementData(elementchild, "current-amp-state"));
									objtableData.put("temperature", getXmlElementData(elementchild, "temperature"));
									objtableData.put("tx-rf-power", getXmlElementData(elementchild, "tx-rf-power"));
									objtableData.put("return-loss", getXmlElementData(elementchild, "return-loss"));

									objtableData.put("vswr", getXmlElementData(elementchild, "vswr"));
									objtableData.put("current-ald-power-feeding-switch",
											getXmlElementData(elementchild, "current-ald-power-feeding-switche"));

									objtableData.put("pim-power", getXmlElementData(elementchild, "pim-power"));
									objtableData.put("pim-cancellation-level",
											getXmlElementData(elementchild, "pim-cancellation-level"));
									objtableData.put("path-energy-saving-state",
											getXmlElementData(elementchild, "path-energy-saving-state"));
									tabelData.add(objtableData);

								}
							}

						}
					}

				}

			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
				}
				tableData = tableData + "</tr>\n";

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getCommandHtmlRadioUnitCarrierControlInfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {

		StringBuilder htmlContent = new StringBuilder();
		try {

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidation(enbId, dbcollectionFileName);
			LinkedHashMap<String, LinkedHashMap<String, String>> objfinalHashMap = new LinkedHashMap<>();

			if (!ObjectUtils.isEmpty(listOfCiqDetails))

			{
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {

					LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();
					LinkedHashMap<String, String> trackingDetails = new LinkedHashMap<>();
					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")) {
						trackingDetails.put("cell-number", objMapDetails.get("Cell_ID").getHeaderValue());

						if (objMapDetails.containsKey("Output_Power(dBm)")) {

							trackingDetails.put("dl-max-tx-power",
									objMapDetails.get("Output_Power(dBm)").getHeaderValue());
						} else {
							trackingDetails.put("dl-max-tx-power", null);
						}
						if (objMapDetails.containsKey("antennaPathDelayDL")) {

							trackingDetails.put("tx-attenuation-per-carrier-per-path",
									objMapDetails.get("antennaPathDelayDL").getHeaderValue());
						} else {
							trackingDetails.put("tx-attenuation-per-carrier-per-path", null);
						}

						objfinalHashMap.put(objMapDetails.get("Cell_ID").getHeaderValue(), trackingDetails);

					}

				}

			}
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("radio-unit-info");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("connected-digital-unit-board-type");
			headerList.add("connected-digital-unit-board-id");
			headerList.add("connected-digital-unit-port-id");
			headerList.add("cascade-radio-unit-id");
			headerList.add("carrier-index");
			headerList.add("dl-max-tx-power");
			headerList.add("cell-number");
			headerList.add("nb-iot-cell-number");
			headerList.add("cell-radio-unit-port-id");
			headerList.add("carrier-mapping-number");
			headerList.add("current-carrier-bandwidth");
			headerList.add("current-tx-earfcn");
			headerList.add("current-rx-earfcn");
			headerList.add("synchronization-advanced-value");
			headerList.add("nb-iot-flag");
			headerList.add("tx-attenuation-per-carrier-per-path");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("carrier-control-info");
					for (int j = 0; j < childNodeList.getLength(); j++) {
						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Element elementchild = (Element) ChildNode;
							objtableData.put("connected-digital-unit-board-type",
									getXmlElementData(element, "connected-digital-unit-board-type"));
							objtableData.put("connected-digital-unit-board-id",
									getXmlElementData(element, "connected-digital-unit-board-id"));
							objtableData.put("connected-digital-unit-port-id",
									getXmlElementData(element, "connected-digital-unit-port-id"));
							objtableData.put("cascade-radio-unit-id",
									getXmlElementData(element, "cascade-radio-unit-id"));

							objtableData.put("carrier-index", getXmlElementData(elementchild, "carrier-index"));
							objtableData.put("dl-max-tx-power", getXmlElementData(elementchild, "dl-max-tx-power"));
							objtableData.put("cell-number", getXmlElementData(elementchild, "cell-number"));
							objtableData.put("nb-iot-cell-number",
									getXmlElementData(elementchild, "nb-iot-cell-number"));
							objtableData.put("cell-radio-unit-port-id",
									getXmlElementData(elementchild, "cell-radio-unit-port-id"));
							objtableData.put("carrier-mapping-number",
									getXmlElementData(elementchild, "carrier-mapping-number"));
							objtableData.put("current-carrier-bandwidth",
									getXmlElementData(elementchild, "current-carrier-bandwidth"));
							objtableData.put("current-tx-earfcn", getXmlElementData(elementchild, "current-tx-earfcn"));
							objtableData.put("current-rx-earfcn", getXmlElementData(elementchild, "current-rx-earfcn"));
							objtableData.put("synchronization-advanced-value",
									getXmlElementData(elementchild, "synchronization-advanced-value"));
							objtableData.put("nb-iot-flag", getXmlElementData(elementchild, "nb-iot-flag"));
							objtableData.put("tx-attenuation-per-carrier-per-path",
									getXmlElementData(elementchild, "tx-attenuation-per-carrier-per-path"));

							tabelData.add(objtableData);

						}
					}

				}

			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					if (objfinalHashMap.containsKey(tdData.get("cell-number"))) {

						if ("dl-max-tx-power".equalsIgnoreCase(resultTableData.getKey())) {

							String maxPower = objfinalHashMap.get(tdData.get("cell-number")).get("dl-max-tx-power");
							if (StringUtils.isNotEmpty(maxPower) && NumberUtils.isNumber(maxPower)
									&& NumberUtils.isNumber(resultTableData.getValue())) {
								Double resultOutPuts = Double.parseDouble(maxPower) * 10;
								Double auditOutMaxpower = Double.parseDouble(resultTableData.getValue());
								if (resultOutPuts.doubleValue() == auditOutMaxpower) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}

							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}

						} else if ("tx-attenuation-per-carrier-per-path".equalsIgnoreCase(resultTableData.getKey())) {
							if (resultTableData.getValue()
									.equalsIgnoreCase(objfinalHashMap.get(tdData.get("cell-number"))
											.get("tx-attenuation-per-carrier-per-path"))
									|| "0".equalsIgnoreCase(resultTableData.getValue())) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						}

					} else {
						tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
								+ "</td>\n";
					}

				}
				tableData = tableData + "</tr>\n";

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getCommandHtmlRadioUnitCpriPort(String fullOutputLog, String command, String enbId, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("radio-unit-info");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("connected-digital-unit-board-type");
			headerList.add("connected-digital-unit-board-id");
			headerList.add("connected-digital-unit-port-id");
			headerList.add("cascade-radio-unit-id");
			headerList.add("port-id");
			headerList.add("tx-wavelength");
			headerList.add("tx-power");
			headerList.add("rx-power");
			headerList.add("bit-rate");
			headerList.add("bit-error");
			headerList.add("observed-bits");
			headerList.add("config-tx-delay");
			headerList.add("config-rx-delay");
			headerList.add("current-tx-delay");
			headerList.add("current-rx-delay");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("cpri-port-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {
						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Element elementchild = (Element) ChildNode;
							objtableData.put("connected-digital-unit-board-type",
									getXmlElementData(element, "connected-digital-unit-board-type"));
							objtableData.put("connected-digital-unit-board-id",
									getXmlElementData(element, "connected-digital-unit-board-id"));
							objtableData.put("connected-digital-unit-port-id",
									getXmlElementData(element, "connected-digital-unit-port-id"));
							objtableData.put("cascade-radio-unit-id",
									getXmlElementData(element, "cascade-radio-unit-id"));

							objtableData.put("port-id", getXmlElementData(elementchild, "port-id"));
							objtableData.put("tx-wavelength", getXmlElementData(elementchild, "tx-wavelength"));
							objtableData.put("tx-power", getXmlElementData(elementchild, "tx-power"));
							objtableData.put("rx-power", getXmlElementData(elementchild, "rx-power"));
							objtableData.put("bit-rate", getXmlElementData(elementchild, "bit-rate"));
							objtableData.put("bit-error", getXmlElementData(elementchild, "bit-error"));
							objtableData.put("observed-bits", getXmlElementData(elementchild, "observed-bits"));
							objtableData.put("config-tx-delay", getXmlElementData(elementchild, "config-tx-delay"));
							objtableData.put("config-rx-delay", getXmlElementData(elementchild, "config-rx-delay"));
							objtableData.put("current-tx-delay", getXmlElementData(elementchild, "current-tx-delay"));
							objtableData.put("current-rx-delay", getXmlElementData(elementchild, "current-rx-delay"));

							tabelData.add(objtableData);

						}
					}

				}

			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			StringBuilder rxpowerAuditIssue = new StringBuilder();
			StringBuilder txpowerAuditIssue = new StringBuilder();
			
			StringBuilder auditIssueAll = new StringBuilder();
			

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if ("tx-power".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double txPower = Double.parseDouble(resultTableData.getValue());
							if (txPower >= -4 && txPower <= +1.0) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
								txpowerAuditIssue.append( " tx-power : " 
										+ tdData.get("tx-power") + "\n");
							}
						} else if ("-".equalsIgnoreCase(resultTableData.getValue())
								|| "_".equalsIgnoreCase(resultTableData.getValue())) {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
							txpowerAuditIssue.append( " tx-power : " 
									+ tdData.get("tx-power") + "\n");
						}

					} else if ("rx-power".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double rxPower = Double.parseDouble(resultTableData.getValue());
							if (rxPower >= -5 && rxPower <= +1.5) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							}else if(rxPower >= -8 && rxPower < -5){
								tableData = tableData + "<td align=center bgcolor ='#FFFF00'>"
										+ resultTableData.getValue() + "</td>\n";
								rxpowerAuditIssue.append( " rx-power : " 
										+ tdData.get("rx-power") + "\n");
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
								rxpowerAuditIssue.append( " rx-power : " 
										+ tdData.get("rx-power") + "\n");
							}
						} else if ("-".equalsIgnoreCase(resultTableData.getValue())
								|| "_".equalsIgnoreCase(resultTableData.getValue())) {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
							rxpowerAuditIssue.append( " rx-power : " 
									+ tdData.get("rx-power") + "\n");
						}

					} else {
						tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
					}
				}
				tableData = tableData + "</tr>\n";

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(rxpowerAuditIssue);
			auditIssueAll.append(txpowerAuditIssue);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData, auditIssueAll);
			if(rxpowerAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(8, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						rxpowerAuditIssue.toString());
			}
			if(txpowerAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(50, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						txpowerAuditIssue.toString());
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getCommandHtmlRadioUnitAntenaLineDevice(String fullOutputLog, String command, String enbId) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("radio-unit-info");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("connected-digital-unit-board-type");
			headerList.add("connected-digital-unit-board-id");
			headerList.add("connected-digital-unit-port-id");
			headerList.add("cascade-radio-unit-id");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					objtableData.put("connected-digital-unit-board-type",
							getXmlElementData(element, "connected-digital-unit-board-type"));
					objtableData.put("connected-digital-unit-board-id",
							getXmlElementData(element, "connected-digital-unit-board-id"));
					objtableData.put("connected-digital-unit-port-id",
							getXmlElementData(element, "connected-digital-unit-port-id"));
					objtableData.put("cascade-radio-unit-id", getXmlElementData(element, "cascade-radio-unit-id"));

					tabelData.add(objtableData);

				}

			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
				}
				tableData = tableData + "</tr>\n";

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getCommandHtmlCiprPortDetails(String fullOutputLog, String command, String enbId) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("digital-unit-entries");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("unit-type");
			headerList.add("unit-id");
			headerList.add("port-id");
			headerList.add("connected-radio-unit-type");
			headerList.add("tx-wavelength");
			headerList.add("tx-power");
			headerList.add("rx-power");
			headerList.add("bit-rate");
			headerList.add("cpri-speed-saved");
			headerList.add("cpri-speed-running");
			headerList.add("cpri-compression-running");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childcpiPortList = element.getElementsByTagName("cpri-port");
					for (int j = 0; j < childcpiPortList.getLength(); j++) {
						Node ChildCpiPortNode = childcpiPortList.item(j);
						if (Node.ELEMENT_NODE == ChildCpiPortNode.getNodeType()) {

							Element elementCpiPorchild = (Element) ChildCpiPortNode;

							NodeList childNodeCpriPortEntriesList = elementCpiPorchild
									.getElementsByTagName("cpri-port-entries");

							if (childNodeCpriPortEntriesList != null && childNodeCpriPortEntriesList.getLength() > 0) {

								for (int k = 0; k < childNodeCpriPortEntriesList.getLength(); k++) {
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Node ChildCpriPortEntriesNode = childNodeCpriPortEntriesList.item(k);
									if (Node.ELEMENT_NODE == ChildCpriPortEntriesNode.getNodeType()) {
										Element elementCpriPortEntrieschild = (Element) ChildCpriPortEntriesNode;

										objtableData.put("unit-type", getXmlElementData(element, "unit-type"));
										objtableData.put("unit-id", getXmlElementData(element, "unit-id"));
										objtableData.put("port-id",
												getXmlElementData(elementCpriPortEntrieschild, "port-id"));
										objtableData.put("connected-radio-unit-type", getXmlElementData(
												elementCpriPortEntrieschild, "connected-radio-unit-type"));
										objtableData.put("tx-wavelength",
												getXmlElementData(elementCpriPortEntrieschild, "tx-wavelength"));

										objtableData.put("tx-power",
												getXmlElementData(elementCpriPortEntrieschild, "tx-power"));
										objtableData.put("rx-power",
												getXmlElementData(elementCpriPortEntrieschild, "rx-power"));
										objtableData.put("bit-rate",
												getXmlElementData(elementCpriPortEntrieschild, "bit-rate"));
										objtableData.put("cpri-speed-saved",
												getXmlElementData(elementCpriPortEntrieschild, "cpri-speed-saved"));
										objtableData.put("cpri-speed-running",
												getXmlElementData(elementCpriPortEntrieschild, "cpri-speed-running"));
										objtableData.put("cpri-compression-running", getXmlElementData(
												elementCpriPortEntrieschild, "cpri-compression-running"));

										tabelData.add(objtableData);

									}
								}
							} else {
								LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
								objtableData.put("unit-type", getXmlElementData(element, "unit-type"));
								objtableData.put("unit-id", getXmlElementData(element, "unit-id"));
								objtableData.put("port-id", "-");
								objtableData.put("connected-radio-unit-type", "-");
								objtableData.put("tx-wavelength", "-");

								objtableData.put("tx-power", "-");
								objtableData.put("rx-power", "-");
								objtableData.put("bit-rate", "-");
								objtableData.put("cpri-speed-saved", "-");
								objtableData.put("cpri-speed-running", "-");
								objtableData.put("cpri-compression-running", "-");
								tabelData.add(objtableData);

							}

						}
					}

				}

			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if ("tx-power".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double txPower = Double.parseDouble(resultTableData.getValue());

							if (txPower >= -5 && txPower <= 1) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else if ("-".equalsIgnoreCase(resultTableData.getValue())
								|| "_".equalsIgnoreCase(resultTableData.getValue())) {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
						}

					} else if ("rx-power".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double rxPower = Double.parseDouble(resultTableData.getValue());
							if (rxPower >= -14 && rxPower <= 0.5) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else if ("-".equalsIgnoreCase(resultTableData.getValue())
								|| "_".equalsIgnoreCase(resultTableData.getValue())) {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
						}

					} else {
						tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
					}
				}
				tableData = tableData + "</tr>\n";

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getCommandHtmlImsEmergency(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();

		try {
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidation(enbId, dbcollectionFileName);
			LinkedHashMap<String, String> trackingDetails = new LinkedHashMap<>();

			if (!ObjectUtils.isEmpty(listOfCiqDetails))

			{
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {

					LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();

					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")
							&& objMapDetails.containsKey("TAC")) {

						trackingDetails.put(objMapDetails.get("Cell_ID").getHeaderValue(),
								objMapDetails.get("TAC").getHeaderValue());
					}

				}

			}
			LinkedHashMap<String, String> trackingDetails2 = new LinkedHashMap<>();

			if (!ObjectUtils.isEmpty(listOfCiqDetails))

			{
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {

					LinkedHashMap<String, CiqMapValuesModel> objMapDetails2 = ciqDetailsModel.getCiqMap();

					if (!ObjectUtils.isEmpty(objMapDetails2) && objMapDetails2.containsKey("Cell_ID")
							&& objMapDetails2.containsKey("BandName")) {

						trackingDetails2.put(objMapDetails2.get("Cell_ID").getHeaderValue(),
								objMapDetails2.get("BandName").getHeaderValue());
					}

				}

			}

			String sourceTag = "eutran-cell-fdd-tdd";
			List<String> objCommandsList = new ArrayList<>();

			objCommandsList.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-cell-info ims-emergency-support | display xml");
			objCommandsList.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-cell-info tracking-area-code | display xml");

			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMap = new LinkedHashMap<>();
			for (String cmd : objCommandsList) {
				getXmlHtmlContent(fullOutputLog, cmd, sourceTag, objHashMap);
			}
			if (objHashMap.size() > 0) {

				Set<String> headerList = objHashMap.get(objHashMap.keySet().toArray()[0]).keySet();
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append(
						"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				LinkedHashMap<String, String> sdlsupport=getsdlsupport(fullOutputLog,command,"hello");
				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}
				StringBuilder auditIssue1 = new StringBuilder();
				StringBuilder auditIssueAll = new StringBuilder();
				
				tableHeader = tableHeader + "</tr>\n";
				String tableData = "";
            
				for (Map.Entry<String, LinkedHashMap<String, String>> finalresult : objHashMap.entrySet())

				{
					tableData = tableData + "<tr>\n";
					
					LinkedHashMap<String, String> objresults = finalresult.getValue();
					

					for (Map.Entry<String, String> resultTableData : objresults.entrySet()) {
						if (trackingDetails.containsKey(finalresult.getKey())
								&& "tracking-area-code".equalsIgnoreCase(resultTableData.getKey())) {
							if (resultTableData.getValue()
									.equalsIgnoreCase(trackingDetails.get(finalresult.getKey()))) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else if ("ims-emergency-support".equalsIgnoreCase(resultTableData.getKey())) {
							if (trackingDetails2.containsKey(finalresult.getKey())
									&& sdlsupport.containsKey(finalresult.getKey())) {
								if (!("true".equalsIgnoreCase(resultTableData.getValue()))
										&& (!(trackingDetails2.get(finalresult.getKey()).equalsIgnoreCase("CBRS") 
												|| trackingDetails2.get(finalresult.getKey()).equalsIgnoreCase("LAA"))
												&& sdlsupport.get(finalresult.getKey()).equalsIgnoreCase("false"))) {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
									auditIssue1.append("cell-num : " + finalresult.getKey()+" ims-emergency-support : "
											+ resultTableData.getValue() + "\n");
								} else if (!("false".equalsIgnoreCase(resultTableData.getValue()))
										&& (trackingDetails2.get(finalresult.getKey()).equalsIgnoreCase("CBRS")
												|| trackingDetails2.get(finalresult.getKey()).equalsIgnoreCase("LAA")
												|| sdlsupport.get(finalresult.getKey()).equalsIgnoreCase("true"))) {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
									auditIssue1.append("cell-num : " + finalresult.getKey()+" ims-emergency-support : "
											+ resultTableData.getValue() + "\n");
								} else {
									tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
								}
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						}

					}
					tableData = tableData + "</tr>\n";

				}

				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
						.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
				auditIssueAll.append(auditIssue1);
				
				List<LinkedHashMap<String, String>> objresults1 = new ArrayList<>();
				objresults1.add(trackingDetails2);
				auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, objresults1, auditIssueAll);
				if (auditIssue1.length() != 0) {
					audit4GSummaryService.createAudit4GSummaryEntity(82, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				}
				htmlContent.append("</table>\n");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	private LinkedHashMap<String, String> getsdlsupport(String fullOutputLog, String command, String cellnum) {
		LinkedHashMap<String, String> sdlMap = new LinkedHashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("eutran-cell-fdd-tdd");
			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementParent = (Element) inChildNode;

					NodeList childNodeCellConfIdleList = elementParent.getElementsByTagName("eutran-cell-conf-idle");

					if (childNodeCellConfIdleList != null && childNodeCellConfIdleList.getLength() > 0) {

						for (int j = 0; j < childNodeCellConfIdleList.getLength(); j++) {
							Node cellConfIdleChildNode = childNodeCellConfIdleList.item(j);
							if (Node.ELEMENT_NODE == cellConfIdleChildNode.getNodeType()) {

								Element elementcellConfId = (Element) cellConfIdleChildNode;
								LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
								objtableData.put("cell-num", getXmlElementData(elementParent, "cell-num"));
								objtableData.put("sdl-support", getXmlElementData(elementcellConfId, "sdl-support"));

								tabelData.add(objtableData);
							}
						}

					}

				}

			}
			for (LinkedHashMap<String, String> tdData : tabelData) {
				if (tdData.containsKey("cell-num") && tdData.containsKey("sdl-support")) {
					sdlMap.put(tdData.get("cell-num"), tdData.get("sdl-support"));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return sdlMap;

	}

	public List<CIQDetailsModel> getCiqDetailsForRuleValidation(String enbId, String dbcollectionFileName) {
		List<CIQDetailsModel> resultList = null;
		Query query = new Query();
		query.addCriteria(Criteria.where("eNBId").is(enbId));
		try {
			resultList = mongoTemplate.find(query, CIQDetailsModel.class, dbcollectionFileName);

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return resultList;
	}

	public void getXmlHtmlContent(String fullOutputLog, String command, String sourceTag,
			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName(sourceTag);
			System.out.println(nodeList.getLength());
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					if (!objHashMap.containsKey(getXmlElementData(element, "cell-num"))) {
						if (command.contains("ims-emergency-support")) {
							LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<>();
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("ims-emergency-support",
									getXmlElementData(element, "ims-emergency-support"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						} else if (command.contains("tracking-area-code")) {
							LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<>();
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("tracking-area-code", getXmlElementData(element, "tracking-area-code"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						}

					} else {

						if (command.contains("ims-emergency-support")) {
							LinkedHashMap<String, String> objParamsMap = objHashMap
									.get(getXmlElementData(element, "cell-num"));
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("ims-emergency-support",
									getXmlElementData(element, "ims-emergency-support"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);

						} else if (command.contains("tracking-area-code")) {

							LinkedHashMap<String, String> objParamsMap = objHashMap
									.get(getXmlElementData(element, "cell-num"));
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("tracking-area-code", getXmlElementData(element, "tracking-area-code"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						}

					}
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public StringBuilder getCommandHtmlCellDlTotalPower(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {

		StringBuilder htmlContent = new StringBuilder();
		try {

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidation(enbId, dbcollectionFileName);
			LinkedHashMap<String, String> trackingDetails = new LinkedHashMap<>();

			if (!ObjectUtils.isEmpty(listOfCiqDetails))

			{
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {

					LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();

					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")
							&& objMapDetails.containsKey("DAS_OUTPUT_POWER")) {

						trackingDetails.put(objMapDetails.get("Cell_ID").getHeaderValue(),
								objMapDetails.get("DAS_OUTPUT_POWER").getHeaderValue());
					}

				}

			}

			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("eutran-cell-fdd-tdd");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("cell-num");
			headerList.add("cell-dl-total-power");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					objtableData.put("cell-num", getXmlElementData(element, "cell-num"));
					objtableData.put("cell-dl-total-power", getXmlElementData(element, "cell-dl-total-power"));

					tabelData.add(objtableData);

				}

			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					/*if ("cell-dl-total-power".equalsIgnoreCase(resultTableData.getKey())) {
						if (trackingDetails.containsKey(tdData.get("cell-num"))) {
							if ((resultTableData.getValue()
									.equalsIgnoreCase(trackingDetails.get(tdData.get("cell-num"))))
									|| ("0".equalsIgnoreCase(resultTableData.getValue())
											&& StringUtils.isEmpty(trackingDetails.get(tdData.get("cell-num"))))) {

								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
						}
					} else {*/
						tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
					//}
				}
				tableData = tableData + "</tr>\n";

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getCommandHtmlCellConfIdle(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidation(enbId, dbcollectionFileName);
			LinkedHashMap<String, LinkedHashMap<String, String>> objfinalHashMap = new LinkedHashMap<>();

			if (!ObjectUtils.isEmpty(listOfCiqDetails))

			{
				StringBuilder diversitBuilder = new StringBuilder();
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {

					LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();
					LinkedHashMap<String, String> trackingDetails = new LinkedHashMap<>();
					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")) {
						trackingDetails.put("cell-num", objMapDetails.get("Cell_ID").getHeaderValue());

						if (objMapDetails.containsKey("PCI")) {

							trackingDetails.put("physical-cell-id", objMapDetails.get("PCI").getHeaderValue());
						} else {
							trackingDetails.put("physical-cell-id", null);
						}

						if (objMapDetails.containsKey("Tx_Diversity")) {
							diversitBuilder.setLength(0);
							diversitBuilder.append("n");
							diversitBuilder.append(objMapDetails.get("Tx_Diversity").getHeaderValue());
							diversitBuilder.append("-tx-antenna-count");

							trackingDetails.put("dl-antenna-count", diversitBuilder.toString());
						} else {
							trackingDetails.put("dl-antenna-count", null);
						}
						if (objMapDetails.containsKey("Rx_Diveristy")) {
							diversitBuilder.setLength(0);
							diversitBuilder.append("n");
							diversitBuilder.append(objMapDetails.get("Rx_Diveristy").getHeaderValue());
							diversitBuilder.append("-rx-antenna-count");

							trackingDetails.put("ul-antenna-count", diversitBuilder.toString());
						} else {
							trackingDetails.put("ul-antenna-count", null);
						}
						if (objMapDetails.containsKey("EARFCN_DL")) {

							trackingDetails.put("earfcn-dl", objMapDetails.get("EARFCN_DL").getHeaderValue());
						} else {
							trackingDetails.put("earfcn-dl", null);
						}
						if (objMapDetails.containsKey("EARFCN_UL")) {

							trackingDetails.put("earfcn-ul", objMapDetails.get("EARFCN_UL").getHeaderValue());
						} else {
							trackingDetails.put("earfcn-ul", null);
						}

						objfinalHashMap.put(objMapDetails.get("Cell_ID").getHeaderValue(), trackingDetails);

					}

				}

				List<String> dlCrsPortCount = new ArrayList<>();
				dlCrsPortCount.add("2");
				dlCrsPortCount.add("n2");
				dlCrsPortCount.add("4");
				dlCrsPortCount.add("n4");

				LinkedHashMap<String, String> bandwidthDetails = new LinkedHashMap<>();
				bandwidthDetails.put("system-bandwidth-n50", "10MHz");
				bandwidthDetails.put("system-bandwidth-n6", "1.4MHz");
				bandwidthDetails.put("system-bandwidth-n15", "3MHz");
				bandwidthDetails.put("system-bandwidth-n25", "5MHz");
				bandwidthDetails.put("system-bandwidth-n100", "20MHz");
				bandwidthDetails.put("system-bandwidth-n75", "15MHz");

				String outputLog = StringUtils.substringAfter(fullOutputLog, command);
				outputLog = StringUtils.substringBefore(outputLog, "[ok]");
				outputLog = StringUtils.substringAfter(outputLog, "<");
				outputLog = "<" + outputLog;
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
				DocumentBuilder builder = factory.newDocumentBuilder();
				outputLog = "<parent>" + outputLog + "</parent>";
				Document document = builder.parse(new InputSource(new StringReader(outputLog)));
				NodeList nodeList = document.getElementsByTagName("eutran-cell-fdd-tdd");

				LinkedHashSet<String> headerList = new LinkedHashSet<>();
				headerList.add("cell-num");
				headerList.add("physical-cell-id");
				headerList.add("cell-type");
				headerList.add("duplex-type");
				headerList.add("dl-antenna-count");
				headerList.add("ul-antenna-count");
				headerList.add("earfcn-dl");
				headerList.add("earfcn-ul");
				headerList.add("dl-bandwidth");
				headerList.add("ul-bandwidth");
				headerList.add("frequency-band-indicator");
				headerList.add("group-id");
				headerList.add("subframe-assignment");
				headerList.add("special-subframe-patterns");
				headerList.add("dl-crs-port-count");
				headerList.add("pci-alloc-status");
				headerList.add("emtc-switch");
				headerList.add("emtc-volte-usage");
				headerList.add("sdl-support");

				List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
				for (int i = 0; i < nodeList.getLength(); i++) {
					Node inChildNode = nodeList.item(i);
					if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

						Element elementParent = (Element) inChildNode;

						NodeList childNodeCellConfIdleList = elementParent
								.getElementsByTagName("eutran-cell-conf-idle");

						if (childNodeCellConfIdleList != null && childNodeCellConfIdleList.getLength() > 0) {

							for (int j = 0; j < childNodeCellConfIdleList.getLength(); j++) {
								Node cellConfIdleChildNode = childNodeCellConfIdleList.item(j);
								if (Node.ELEMENT_NODE == cellConfIdleChildNode.getNodeType()) {

									Element elementcellConfId = (Element) cellConfIdleChildNode;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									objtableData.put("cell-num", getXmlElementData(elementParent, "cell-num"));
									objtableData.put("physical-cell-id",
											getXmlElementData(elementcellConfId, "physical-cell-id"));

									objtableData.put("cell-type", getXmlElementData(elementcellConfId, "cell-type"));

									objtableData.put("duplex-type",
											getXmlElementData(elementcellConfId, "duplex-type"));

									objtableData.put("dl-antenna-count",
											getXmlElementData(elementcellConfId, "dl-antenna-count"));
									objtableData.put("ul-antenna-count",
											getXmlElementData(elementcellConfId, "ul-antenna-count"));
									objtableData.put("earfcn-dl", getXmlElementData(elementcellConfId, "earfcn-dl"));
									objtableData.put("earfcn-ul", getXmlElementData(elementcellConfId, "earfcn-ul"));
									objtableData.put("dl-bandwidth",
											getXmlElementData(elementcellConfId, "dl-bandwidth"));

									objtableData.put("ul-bandwidth",
											getXmlElementData(elementcellConfId, "ul-bandwidth"));
									objtableData.put("frequency-band-indicator",
											getXmlElementData(elementcellConfId, "frequency-band-indicator"));

									objtableData.put("group-id", getXmlElementData(elementcellConfId, "group-id"));
									objtableData.put("subframe-assignment",
											getXmlElementData(elementcellConfId, "subframe-assignment"));
									objtableData.put("special-subframe-patterns",
											getXmlElementData(elementcellConfId, "special-subframe-patterns"));

									objtableData.put("dl-crs-port-count",
											getXmlElementData(elementcellConfId, "dl-crs-port-count"));
									objtableData.put("pci-alloc-status",
											getXmlElementData(elementcellConfId, "pci-alloc-status"));
									objtableData.put("emtc-switch",
											getXmlElementData(elementcellConfId, "emtc-switch"));
									objtableData.put("emtc-volte-usage",
											getXmlElementData(elementcellConfId, "emtc-volte-usage"));
									objtableData.put("sdl-support",
											getXmlElementData(elementcellConfId, "sdl-support"));

									tabelData.add(objtableData);
								}
							}

						}

					}

				}
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append(
						"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				String tableData = "";
				for (LinkedHashMap<String, String> tdData : tabelData) {
					tableData = tableData + "<tr>\n";

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

						if (objfinalHashMap.containsKey(tdData.get("cell-num"))) {

							if ("physical-cell-id".equalsIgnoreCase(resultTableData.getKey())) {
								if (resultTableData.getValue().equalsIgnoreCase(
										objfinalHashMap.get(tdData.get("cell-num")).get("physical-cell-id"))) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else if ("dl-antenna-count".equalsIgnoreCase(resultTableData.getKey())) {
								if (resultTableData.getValue().equalsIgnoreCase(
										objfinalHashMap.get(tdData.get("cell-num")).get("dl-antenna-count"))) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else if ("ul-antenna-count".equalsIgnoreCase(resultTableData.getKey())) {
								if (resultTableData.getValue().equalsIgnoreCase(
										objfinalHashMap.get(tdData.get("cell-num")).get("ul-antenna-count"))) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else if ("earfcn-dl".equalsIgnoreCase(resultTableData.getKey()) && tdData.get("duplex-type").equals("fdd") ) {
								if (resultTableData.getValue().equalsIgnoreCase(
										objfinalHashMap.get(tdData.get("cell-num")).get("earfcn-dl"))) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else if ("earfcn-ul".equalsIgnoreCase(resultTableData.getKey()) && tdData.get("duplex-type").equals("fdd")) {
								if (resultTableData.getValue().equalsIgnoreCase(
										objfinalHashMap.get(tdData.get("cell-num")).get("earfcn-ul"))) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} /*else if ("dl-crs-port-count".equalsIgnoreCase(resultTableData.getKey())) {
								if (dlCrsPortCount.contains(resultTableData.getValue())) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							}*/ else if ("emtc-switch".equalsIgnoreCase(resultTableData.getKey())) {

								if ("5230".equalsIgnoreCase(tdData.get("earfcn-dl"))
										&& "23230".equalsIgnoreCase(tdData.get("earfcn-ul"))
										&& "system-bandwidth-n50".equalsIgnoreCase(tdData.get("dl-bandwidth"))
										&& "system-bandwidth-n50".equalsIgnoreCase(tdData.get("ul-bandwidth"))) {
									if ("enable".equalsIgnoreCase(resultTableData.getValue())) {
										tableData = tableData + "<td align=center>" + resultTableData.getValue()
												+ "</td>\n";
									} else {
										tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
												+ resultTableData.getValue() + "</td>\n";
									}
								}

								else if ("OFF".equalsIgnoreCase(resultTableData.getValue())
										|| "disable".equalsIgnoreCase(resultTableData.getValue())) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else if ("dl-bandwidth".equalsIgnoreCase(resultTableData.getKey())
									|| "ul-bandwidth".equalsIgnoreCase(resultTableData.getKey())) {
								if (bandwidthDetails.containsKey(resultTableData.getValue())) {
									tableData = tableData + "<td align=center>"
											+ bandwidthDetails.get(resultTableData.getValue()) + "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							}

						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
						}

					}
					tableData = tableData + "</tr>\n";

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				htmlContent.append("</table>\n");

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getCommandHtmlStaticRoute(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidation(enbId, dbcollectionFileName);

			List<String> dataGateWayEnbOamIpsList = new ArrayList<>();
			LinkedHashMap<String, List<String>> dataEnbOamIpsList = new LinkedHashMap<>();

			if (!ObjectUtils.isEmpty(listOfCiqDetails))

			{
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {

					if ("IPPLAN".equalsIgnoreCase(ciqDetailsModel.getSheetAliasName())) {
						LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();

						if (!ObjectUtils.isEmpty(objMapDetails)) {
							if (objMapDetails.containsKey("OAM_Gateway_IP_/eNB_S&B_Gateway IP")) {
								dataGateWayEnbOamIpsList
										.add(objMapDetails.get("OAM_Gateway_IP_/eNB_S&B_Gateway IP").getHeaderValue());
							}

							if (objMapDetails.containsKey("eNB_OAM_IP&eNB_S&B_IP")
									&& objMapDetails.containsKey("eNB_OAM/S&B_VLAN_prefix(/30)")) {

								if (dataEnbOamIpsList.containsKey(
										objMapDetails.get("eNB_OAM/S&B_VLAN_prefix(/30)").getHeaderValue())) {
									List<String> dataOam = dataEnbOamIpsList
											.get(objMapDetails.get("eNB_OAM/S&B_VLAN_prefix(/30)").getHeaderValue());
									dataOam.add(objMapDetails.get("eNB_OAM_IP&eNB_S&B_IP").getHeaderValue());
									dataEnbOamIpsList.put(
											objMapDetails.get("eNB_OAM/S&B_VLAN_prefix(/30)").getHeaderValue(),
											dataOam);

								} else {
									List<String> dataOam = new ArrayList<>();
									dataOam.add(objMapDetails.get("eNB_OAM_IP&eNB_S&B_IP").getHeaderValue());
									dataEnbOamIpsList.put(
											objMapDetails.get("eNB_OAM/S&B_VLAN_prefix(/30)").getHeaderValue(),
											dataOam);
								}

							}
						}
					}

				}

			}

			List<String> validation96List = new ArrayList<>();
			validation96List.add("2001:4888:0A1F:C223:01B4:01A2:0000:0000");
			validation96List.add("2001:4888:A1F:C223:1B4:1A2:0:0");
			validation96List.add("2001:4888:A1F:C223:1B4:1A2::");
			validation96List.add("0000:0000:0000:0000:0000:0000:0000:0000");
			List<String> validation128List = new ArrayList<>();
			validation128List.add("2001:4888:a13:3161:123:216:0:601c");
			validation128List.add("2001:4888:a1f:c223:1b4:1a1:0:110");
			validation128List.add("2001:4888:2a1f:5030:1b1:292:0:100");
			validation128List.add("2001:4888:2a1f:6030:1b4:292:0:100");
			validation128List.add("2001:4888:a13:3161:123:216:0:601d");
			validation128List.add("2001:4888:a13:3161:123:216::601d");
			validation128List.add("0000:0000:0000:0000:0000:0000:0000:0000");
			validation128List.add("2404:180:1001:1:cf:500:1001:10");

			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("ipv6-static-route");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("vr-id");
			headerList.add("prefix");
			headerList.add("prefix-len");
			headerList.add("gateway");
			headerList.add("interface-name");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Element elementParent = (Element) inChildNode;
					objtableData.put("vr-id", getXmlElementData(elementParent, "vr-id"));
					objtableData.put("prefix", getXmlElementData(elementParent, "prefix"));
					objtableData.put("gateway", getXmlElementData(elementParent, "gateway"));
					objtableData.put("interface-name", getXmlElementData(elementParent, "interface-name"));

					tabelData.add(objtableData);

				}
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					if ("prefix".equalsIgnoreCase(resultTableData.getKey()))

					{

						String prefixAndLength = resultTableData.getValue();
						if (StringUtils.isNotEmpty(prefixAndLength) && prefixAndLength.contains("/")) {
							String[] data = prefixAndLength.split("/");
							String prefix = data[0];
							String prefixLength = data[1];
							
							tableData = tableData + "<td align=center>" + prefix + "</td>\n";
							tableData = tableData + "<td align=center>" + prefixLength + "</td>\n";

						}

					} else if ("gateway".equalsIgnoreCase(resultTableData.getKey())) {
						if (getIpv6Validation(dataGateWayEnbOamIpsList, resultTableData.getValue())) {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
							auditIssue1.append("vr-id : " + tdData.get("vr-id") + " prefix : "
									+ tdData.get("prefix") + "gateway : " + tdData.get("gateway") + "\n");
						}
					} else {
						tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
					}

				}
				tableData = tableData + "</tr>\n";

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData, auditIssueAll);
			
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(64, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getCommandHtmlOperationalState(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {

			LinkedHashMap<String, String> elementRulesValidation = new LinkedHashMap<>();
			elementRulesValidation.put("operational-state", "enabled");
			elementRulesValidation.put("usage-state", "active");
			elementRulesValidation.put("administrative-state", "unlocked");

			List<String> objCommandsList = new ArrayList<>();

			objCommandsList.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd operational-state | display xml");
			objCommandsList.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd usage-state | display xml");
			objCommandsList.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd administrative-state | display xml");
			objCommandsList.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd channel-card-id | display xml");
			objCommandsList.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd dsp-id | display xml");

			objCommandsList.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd dsp-logical-cell-number | display xml");

			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMap = new LinkedHashMap<>();
			String sourceTag = "eutran-cell-fdd-tdd";
			for (String cmd : objCommandsList) {
				getOperationCellStatusDetails(fullOutputLog, cmd, sourceTag, objHashMap);
			}
			if (objHashMap.size() > 0) {

				Set<String> headerList = objHashMap.get(objHashMap.keySet().toArray()[0]).keySet();

				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append(
						"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				String tableData = "";
				StringBuilder operationalStateIssue = new StringBuilder();
				for (Map.Entry<String, LinkedHashMap<String, String>> finalresult : objHashMap.entrySet())

				{
					tableData = tableData + "<tr>\n";
					LinkedHashMap<String, String> objresults = finalresult.getValue();

					for (Map.Entry<String, String> resultTableData : objresults.entrySet()) {
						if (elementRulesValidation.containsKey(resultTableData.getKey())) {
							if (resultTableData.getValue()
									.equalsIgnoreCase(elementRulesValidation.get(resultTableData.getKey()))) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
								if(resultTableData.getKey().equalsIgnoreCase("operational-state")) {
									operationalStateIssue.append("cell-num : " + objresults.get("cell-num") + 
											", operational-state : " + objresults.get("operational-state") + "\n");
								}
							}
						} else {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						}

					}
					tableData = tableData + "</tr>\n";

				}

				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				htmlContent.append("</table>\n");
				
				if(operationalStateIssue.length() == 0) {
					
				}

			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public void getOperationCellStatusDetails(String fullOutputLog, String command, String sourceTag,
			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName(sourceTag);
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					if (!objHashMap.containsKey(element.getElementsByTagName("cell-num").item(0).getTextContent())) {
						if (command.contains("operational-state")) {
							LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<>();
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("operational-state", getXmlElementData(element, "operational-state"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						} else if (command.contains("usage-state")) {
							LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<>();
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("usage-state", getXmlElementData(element, "usage-state"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						} else if (command.contains("administrative-state")) {
							LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<>();
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("administrative-state",
									getXmlElementData(element, "administrative-state"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						} else if (command.contains("channel-card-id")) {
							LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<>();
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("channel-card-id", getXmlElementData(element, "channel-card-id"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						} else if (command.contains("dsp-id")) {
							LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<>();
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("dsp-id", getXmlElementData(element, "dsp-id"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						} else if (command.contains("dsp-logical-cell-number")) {
							LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<>();
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("dsp-logical-cell-number",
									getXmlElementData(element, "dsp-logical-cell-number"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						}

					} else {

						if (command.contains("operational-state")) {
							LinkedHashMap<String, String> objParamsMap = objHashMap
									.get(getXmlElementData(element, "cell-num"));
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("operational-state", getXmlElementData(element, "operational-state"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);

						} else if (command.contains("usage-state")) {

							LinkedHashMap<String, String> objParamsMap = objHashMap
									.get(getXmlElementData(element, "cell-num"));
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("usage-state", getXmlElementData(element, "usage-state"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						} else if (command.contains("administrative-state")) {

							LinkedHashMap<String, String> objParamsMap = objHashMap
									.get(getXmlElementData(element, "cell-num"));
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("administrative-state",
									getXmlElementData(element, "administrative-state"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);

						} else if (command.contains("channel-card-id")) {

							LinkedHashMap<String, String> objParamsMap = objHashMap
									.get(getXmlElementData(element, "cell-num"));
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
							objParamsMap.put("channel-card-id", getXmlElementData(element, "channel-card-id"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);

						} else if (command.contains("dsp-id")) {

							LinkedHashMap<String, String> objParamsMap = objHashMap
									.get(getXmlElementData(element, "cell-num"));
							objParamsMap.put("cell-num",
									element.getElementsByTagName("cell-num").item(0).getTextContent());
							objParamsMap.put("dsp-id", getXmlElementData(element, "dsp-id"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						} else if (command.contains("dsp-logical-cell-number")) {

							LinkedHashMap<String, String> objParamsMap = objHashMap
									.get(element.getElementsByTagName("cell-num").item(0).getTextContent());
							objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));

							objParamsMap.put("dsp-logical-cell-number",
									getXmlElementData(element, "dsp-logical-cell-number"));
							objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);
						}

					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public StringBuilder getCommandHtmlMmeUsage(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidation(enbId, dbcollectionFileName);
			List<String> sheetAliasNamesList = listOfCiqDetails.stream()
					.filter(x -> StringUtils.isNotEmpty(x.getSheetAliasName())).map(y -> y.getSheetAliasName())
					.collect(Collectors.toList());
			Map<String, List<String>> mmeIpsMap = null;
			if (!ObjectUtils.isEmpty(sheetAliasNamesList)) {
				if (sheetAliasNamesList.contains("CIQUpstateNY")) {
					mmeIpsMap = getUpStateIps();

				} else if (sheetAliasNamesList.contains("CIQNewEngland")) {
					mmeIpsMap = getNewEnglandIps();
				}
			}
			List<CIQDetailsModel> listCIQDetailsModels = getciqDetailsList("MME IP'S", "UNY", dbcollectionFileName);
			HashMap<String, String> mmeIpMap = getMmeIpMap(enbId, listCIQDetailsModels);

			/*
			 * List<CIQDetailsModel> listOfCiqDetails =
			 * getCiqDetailsForRuleValidation(enbId, dbcollectionFileName); List<String>
			 * dataGateWayEnbOamIpsList = new ArrayList<>(); if
			 * (!ObjectUtils.isEmpty(listOfCiqDetails))
			 * 
			 * { for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {
			 * 
			 * if ("IPPLAN".equalsIgnoreCase(ciqDetailsModel.getSheetAliasName())) {
			 * LinkedHashMap<String, CiqMapValuesModel> objMapDetails =
			 * ciqDetailsModel.getCiqMap();
			 * 
			 * if (!ObjectUtils.isEmpty(objMapDetails)) { if
			 * (objMapDetails.containsKey("OAM_Gateway_IP_/eNB_S&B_Gateway IP")) {
			 * dataGateWayEnbOamIpsList
			 * .add(objMapDetails.get("OAM_Gateway_IP_/eNB_S&B_Gateway IP").getHeaderValue()
			 * ); }
			 * 
			 * } }
			 * 
			 * }
			 * 
			 * }
			 */
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("term-point-to-mme");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("mme-index");
			headerList.add("mme-usage");
			headerList.add("ip-ver");
			headerList.add("mme-ipv6");
			headerList.add("administrative-status");
			headerList.add("sctp-state");
			headerList.add("interface-state");

			headerList.add("mcc");
			headerList.add("mnc");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Element element = (Element) inChildNode;
					objtableData.put("mme-index", getXmlElementData(element, "mme-index"));
					objtableData.put("mme-usage", getXmlElementData(element, "mme-usage"));
					objtableData.put("ip-ver", getXmlElementData(element, "ip-ver"));
					objtableData.put("mme-ipv6", getXmlElementData(element, "mme-ipv6"));
					objtableData.put("administrative-status", getXmlElementData(element, "administrative-status"));
					objtableData.put("sctp-state", getXmlElementData(element, "sctp-state"));
					objtableData.put("interface-state", getXmlElementData(element, "interface-state"));
					objtableData.put("mcc", getXmlElementData(element, "mcc"));
					objtableData.put("mnc", getXmlElementData(element, "mnc"));
					tabelData.add(objtableData);
				}

			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";
			for (LinkedHashMap<String, String> tdData : tabelData) {
				String mme_index = "";
				if (tdData.containsKey("mme-index")) {
					mme_index = tdData.get("mme-index").trim();
				}
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if ("mme-ipv6".equalsIgnoreCase(resultTableData.getKey())) {
						try {
							InetAddress ip1 = InetAddress.getByName(mmeIpMap.get(mme_index));
							InetAddress ip2 = InetAddress.getByName(resultTableData.getValue().trim());
							if (ip1.equals(ip2)) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor=fa8c8c>" + resultTableData.getValue()
										+ "</td>\n";
							}
						} catch (Exception e) {
							tableData = tableData + "<td align=center bgcolor=fa8c8c>" + resultTableData.getValue()
									+ "</td>\n";
						}
					} else if ("sctp-state".equalsIgnoreCase(resultTableData.getKey())) {
						try {

							if (resultTableData.getValue().trim().equalsIgnoreCase("enable-ins")) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								auditIssue1.append("mme-index : " + tdData.get("mme-index") + " mme-ipv6: "
										+ tdData.get("mme-ipv6") + "sctp-state : " + tdData.get("sctp-state") + "\n");
								tableData = tableData + "<td align=center bgcolor=fa8c8c>" + resultTableData.getValue()
										+ "</td>\n";
							}
						} catch (Exception e) {
							tableData = tableData + "<td align=center bgcolor=fa8c8c>" + resultTableData.getValue()
									+ "</td>\n";
						}
					} else if ("interface-state".equalsIgnoreCase(resultTableData.getKey())) {
						try {

							if (resultTableData.getValue().trim().equalsIgnoreCase("enable-ins")) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								auditIssue2.append("mme-index : " + tdData.get("mme-index") + " mme-ipv6: "
										+ tdData.get("mme-ipv6") + "interface-state : " + tdData.get("interface-state") + "\n");
								tableData = tableData + "<td align=center bgcolor=fa8c8c>" + resultTableData.getValue()
										+ "</td>\n";
							}
						} catch (Exception e) {
							tableData = tableData + "<td align=center bgcolor=fa8c8c>" + resultTableData.getValue()
									+ "</td>\n";
						}
					} else {
						tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
					}
				}
				tableData = tableData + "</tr>\n";

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData, auditIssueAll);
			
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(60, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
			}
			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(61, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	private List<String> getMmeIpList() {
		List<String> objIpList = new ArrayList();

		try {
			objIpList.add("2001:4888:2011:5001:01b1:028a:0000:0000");
			objIpList.add("2001:4888:2011:6001:01b4:028a:0000:0000");
			objIpList.add("2001:4888:2011:5001:01b1:028a:0000:0001");
			objIpList.add("2001:4888:2011:6001:01b4:028a:0000:0001");
			objIpList.add("2001:4888:2011:5092:01b1:028a:0000:0002");
			objIpList.add("2001:4888:2011:5092:01b1:028a:0000:0022");
			objIpList.add("2001:4888:2011:6092:01b4:028a:0000:0002");
			objIpList.add("2001:4888:2011:6092:01b4:028a:0000:0022");
			objIpList.add("2001:4888:2010:11:106:28A:0:0");
			objIpList.add("2001:4888:2010:5011:123:28A:0:0");
			objIpList.add("2001:4888:2010:5011:123:28A:0:1");
			objIpList.add("2001:4888:2010:11:106:28A:0:1");
			objIpList.add("2001:4888:2010:11:106:28A:0:2");
			objIpList.add("2001:4888:2010:5011:123:28A:0:2");
			objIpList.add("2001:4888:2010:92:106:28a:0:2");
			objIpList.add("2001:4888:2010:92:106:28a:0:22");
			objIpList.add("2001:4888:2010:92:106:28a:0:32");
			objIpList.add("2001:4888:2010:92:106:28a:0:42");
			objIpList.add("2001:4888:2010:5092:123:28a:0:2");
			objIpList.add("2001:4888:2010:5092:123:28a:0:22");
			objIpList.add("2001:4888:2010:5092:123:28a:0:32");
			objIpList.add("2001:4888:2010:5092:123:28a:0:42");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return objIpList;
	}

	public StringBuilder getCommandHtmlRequestThroughput(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("cell-throughput-data");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("cell-number");
			headerList.add("rlc-dl-throughput");
			headerList.add("rlc-ul-throughput");
			headerList.add("mac-dl-throughput");
			headerList.add("mac-ul-throughput");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Element elementParent = (Element) inChildNode;
					objtableData.put("cell-number", getXmlElementData(elementParent, "cell-number"));
					objtableData.put("rlc-dl-throughput", getXmlElementData(elementParent, "rlc-dl-throughput"));
					objtableData.put("rlc-ul-throughput", getXmlElementData(elementParent, "rlc-ul-throughput"));
					objtableData.put("mac-dl-throughput", getXmlElementData(elementParent, "mac-dl-throughput"));
					objtableData.put("mac-ul-throughput", getXmlElementData(elementParent, "mac-ul-throughput"));

					tabelData.add(objtableData);

				}
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData.append("<tr>\n");
				String cellnum = "";
				String earfcn = "";
				String fuseid = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("Cell_ID") && ciqData.getCiqMap().get("Cell_ID")
								.getHeaderValue().trim().equals(tdData.get("cell-number").trim())) {
							cellnum = tdData.get("cell-number");
							if (ciqData.getCiqMap().containsKey("administrative-state")) {
								earfcn = ciqData.getCiqMap().get("administrative-state").getHeaderValue().trim();
							}

						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-number")) {
						if (value.equals(cellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("rlc-dl-throughput") || key.equals("rlc-ul-throughput")
							|| key.equals("mac-dl-throughput") || key.equals("mac-ul-throughput")) {
						if (("0.0".equalsIgnoreCase(value) || "0".equalsIgnoreCase(value))
								&& ((earfcn.contains("unlocked")) )) {

							auditIssue1
									.append("cell-number : " + tdData.get("cell-number") + " " + key + "  :" + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData, auditIssueAll);
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}


	public Map<String, List<String>> getUpStateIps() {

		LinkedHashMap<String, List<String>> objHashMap = new LinkedHashMap<>();
		try {

			ArrayList<String> ipIndex0 = new ArrayList<>();
			ipIndex0.add("2001:4888:2011:5001:01b1:028a:0000:0000");
			ipIndex0.add("2001:4888:2011:5001:1b1:28a:0:0");
			ipIndex0.add("2001:4888:2011:5001:1b1:28a::");

			ArrayList<String> ipIndex1 = new ArrayList<>();
			ipIndex1.add("2001:4888:2011:6001:01b4:028a:0000:0000");
			ipIndex1.add("2001:4888:2011:6001:1b4:28a:0:0");
			ipIndex1.add("2001:4888:2011:6001:1b4:28a::");

			ArrayList<String> ipIndex2 = new ArrayList<>();
			ipIndex2.add("2001:4888:2011:5001:01b1:028a:0000:0001");
			ipIndex2.add("2001:4888:2011:5001:1b1:28a:0:1");
			ipIndex2.add("2001:4888:2011:5001:1b1:28a::1");

			ArrayList<String> ipIndex3 = new ArrayList<>();
			ipIndex3.add("2001:4888:2011:6001:01b4:028a:0000:0001");
			ipIndex3.add("2001:4888:2011:6001:1b4:28a:0:1");
			ipIndex3.add("2001:4888:2011:6001:1b4:28a::1");

			ArrayList<String> ipIndex4 = new ArrayList<>();
			ipIndex4.add("2001:4888:2011:5092:01b1:028a:0000:0002");
			ipIndex4.add("2001:4888:2011:5092:1b1:28a:0:2");
			ipIndex4.add("2001:4888:2011:5092:1b1:28a::2");

			ArrayList<String> ipIndex5 = new ArrayList<>();
			ipIndex5.add("2001:4888:2011:5092:1b1:28a:0:22");
			ipIndex5.add("2001:4888:2011:5092:1b1:28a::22");
			ipIndex5.add("2001:4888:2011:5092:01b1:028a:0000:0022");

			ArrayList<String> ipIndex6 = new ArrayList<>();
			ipIndex6.add("2001:4888:2011:6092:1b4:28a:0:2");
			ipIndex6.add("2001:4888:2011:6092:1b4:28a::2");
			ipIndex6.add("2001:4888:2011:6092:01b4:028a:0000:0002");

			ArrayList<String> ipIndex7 = new ArrayList<>();
			ipIndex7.add("2001:4888:2011:6092:01b4:028a:0000:0022");
			ipIndex7.add("2001:4888:2011:6092:1b4:28a:0:22");
			ipIndex7.add("2001:4888:2011:6092:1b4:28a::22");

			objHashMap.put("0", ipIndex0);
			objHashMap.put("1", ipIndex1);
			objHashMap.put("2", ipIndex2);
			objHashMap.put("3", ipIndex3);
			objHashMap.put("4", ipIndex4);
			objHashMap.put("5", ipIndex5);
			objHashMap.put("6", ipIndex6);
			objHashMap.put("7", ipIndex7);

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}

		return objHashMap;

	}

	public Map<String, List<String>> getNewEnglandIps() {

		LinkedHashMap<String, List<String>> objHashMap = new LinkedHashMap<>();
		try {

			ArrayList<String> ipIndex0 = new ArrayList<>();
			ipIndex0.add("2001:4888:2010:11:106:28A:0:0");

			ArrayList<String> ipIndex1 = new ArrayList<>();
			ipIndex1.add("2001:4888:2010:5011:123:28A:0:0");

			ArrayList<String> ipIndex2 = new ArrayList<>();
			ipIndex2.add("2001:4888:2010:5011:123:28A:0:1");

			ArrayList<String> ipIndex3 = new ArrayList<>();
			ipIndex3.add("2001:4888:2010:11:106:28A:0:1");

			ArrayList<String> ipIndex4 = new ArrayList<>();
			ipIndex4.add("2001:4888:2010:11:106:28A:0:2");

			ArrayList<String> ipIndex5 = new ArrayList<>();
			ipIndex5.add("2001:4888:2010:5011:123:28A:0:2");

			ArrayList<String> ipIndex6 = new ArrayList<>();
			ipIndex6.add("2001:4888:2010:92:106:28a:0:2");

			ArrayList<String> ipIndex7 = new ArrayList<>();
			ipIndex7.add("2001:4888:2010:92:106:28a:0:22");

			ArrayList<String> ipIndex8 = new ArrayList<>();
			ipIndex8.add("2001:4888:2010:92:106:28a:0:32");

			ArrayList<String> ipIndex9 = new ArrayList<>();
			ipIndex9.add("2001:4888:2010:92:106:28a:0:42");

			ArrayList<String> ipIndex10 = new ArrayList<>();
			ipIndex10.add("2001:4888:2010:5092:123:28a:0:2");

			ArrayList<String> ipIndex11 = new ArrayList<>();
			ipIndex11.add("2001:4888:2010:5092:123:28a:0:22");

			ArrayList<String> ipIndex12 = new ArrayList<>();
			ipIndex12.add("2001:4888:2010:5092:123:28a:0:32");

			ArrayList<String> ipIndex13 = new ArrayList<>();
			ipIndex13.add("2001:4888:2010:5092:123:28a:0:42");

			objHashMap.put("0", ipIndex0);
			objHashMap.put("1", ipIndex1);
			objHashMap.put("2", ipIndex2);
			objHashMap.put("3", ipIndex3);
			objHashMap.put("4", ipIndex4);
			objHashMap.put("5", ipIndex5);
			objHashMap.put("6", ipIndex6);
			objHashMap.put("7", ipIndex7);
			objHashMap.put("8", ipIndex8);
			objHashMap.put("9", ipIndex9);
			objHashMap.put("10", ipIndex10);
			objHashMap.put("11", ipIndex11);
			objHashMap.put("12", ipIndex12);
			objHashMap.put("13", ipIndex13);

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}

		return objHashMap;

	}

	public List<String> deListCommands() {
		List<String> deListHtmlCommands = new ArrayList<>();
		try {
			deListHtmlCommands.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd dsp-id | display xml");
			deListHtmlCommands.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd dsp-logical-cell-number | display xml");
			deListHtmlCommands.add(
					"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd channel-card-id | display xml");

			// cbrs delist
			deListHtmlCommands.add(
					"show managed-element hardware-management radio-unit radio-unit-info antenna-unit | display xml");
			deListHtmlCommands
					.add("show managed-element hardware-management radio-unit radio-unit-info cbrs | display xml");
			deListHtmlCommands.add("show managed-element enb-function cbrs | display xml");
			deListHtmlCommands.add(
					"show managed-element hardware-management radio-unit radio-unit-info radio-unit-serial-number | display xml");
			deListHtmlCommands.add("request retrieve-radio-unit-inventory unit-type rrh | display xml");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return deListHtmlCommands;
	}

	public StringBuilder getCommandHtmlRadioUnitAntenaLineDeviceRetInfo(String fullOutputLog, String command,
			String enbId) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("radio-unit-info");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("connected-digital-unit-board-type");
			headerList.add("connected-digital-unit-board-id");
			headerList.add("connected-digital-unit-port-id");
			headerList.add("cascade-radio-unit-id");
			headerList.add("antenna-line-device-id");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("antenna-line-device-info");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("connected-digital-unit-board-type",
									getXmlElementData(element, "connected-digital-unit-board-type"));
							objtableData.put("connected-digital-unit-board-id",
									getXmlElementData(element, "connected-digital-unit-board-id"));
							objtableData.put("connected-digital-unit-port-id",
									getXmlElementData(element, "connected-digital-unit-port-id"));
							objtableData.put("cascade-radio-unit-id",
									getXmlElementData(element, "cascade-radio-unit-id"));
							objtableData.put("antenna-line-device-id",
									getXmlElementData(elementchild, "antenna-line-device-id"));

							tabelData.add(objtableData);
						}
					}

				}

			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
				}
				tableData = tableData + "</tr>\n";

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getCommandHtmlCbrsInfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {

			String command1 = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cbrs-info | display xml";
			String command2 = "show managed-element hardware-management radio-unit radio-unit-info carrier-control-info | display xml";
			String command3 = "show managed-element hardware-management radio-unit radio-unit-info antenna-unit | display xml";
			String command4 = "show managed-element hardware-management radio-unit radio-unit-info cbrs | display xml";
			String command5 = "show managed-element enb-function cbrs | display xml";
			String command6 = "show managed-element hardware-management radio-unit radio-unit-info radio-unit-serial-number | display xml";
			String command7 = "request retrieve-radio-unit-inventory unit-type rrh | display xml";

			LinkedHashMap<String, String> preferedEarfnDetails = new LinkedHashMap<>();

			LinkedHashMap<String, String> crossPolarizationAntenaDetails = new LinkedHashMap<>();
			LinkedHashMap<String, String> crossAntenaGainDetails = new LinkedHashMap<>();

			LinkedHashMap<String, String> fccIdDetails = new LinkedHashMap<>();
			LinkedHashMap<String, String> cbrsCategoryDetails = new LinkedHashMap<>();

			LinkedHashMap<String, String> cbrsUserIdDetails = new LinkedHashMap<>();

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidation(enbId, dbcollectionFileName);

			if (!ObjectUtils.isEmpty(listOfCiqDetails))

			{
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {

					LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();

					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")
							&& objMapDetails.containsKey("Preferred_Earfcn")) {

						preferedEarfnDetails.put(objMapDetails.get("Cell_ID").getHeaderValue(),
								objMapDetails.get("Preferred_Earfcn").getHeaderValue());
					}
					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")
							&& objMapDetails.containsKey("CBRS_user_id")) {

						cbrsUserIdDetails.put(objMapDetails.get("Cell_ID").getHeaderValue(),
								objMapDetails.get("CBRS_user_id").getHeaderValue());
					}
					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")
							&& objMapDetails.containsKey("CBSD_Category")) {

						cbrsCategoryDetails.put(objMapDetails.get("Cell_ID").getHeaderValue(),
								objMapDetails.get("CBSD_Category").getHeaderValue());
					}

					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")
							&& objMapDetails.containsKey("CBRS_FCC_ID")) {

						fccIdDetails.put(objMapDetails.get("Cell_ID").getHeaderValue(),
								objMapDetails.get("CBRS_FCC_ID").getHeaderValue());
					}

					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")
							&& objMapDetails.containsKey("ANTENNA_GAIN_DBI")) {

						crossAntenaGainDetails.put(objMapDetails.get("Cell_ID").getHeaderValue(),
								objMapDetails.get("ANTENNA_GAIN_DBI").getHeaderValue());
					}

					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")
							&& objMapDetails.containsKey("X_Pole_Antenna")) {

						if ("1".equalsIgnoreCase(objMapDetails.get("X_Pole_Antenna").getHeaderValue())
								|| "true".equalsIgnoreCase(objMapDetails.get("X_Pole_Antenna").getHeaderValue())) {
							crossPolarizationAntenaDetails.put(objMapDetails.get("Cell_ID").getHeaderValue(), "true");
						} else {
							crossPolarizationAntenaDetails.put(objMapDetails.get("Cell_ID").getHeaderValue(), "false");
						}
					}
				}

			}

			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMap = new LinkedHashMap<>();
			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMapAntenaUnit = new LinkedHashMap<>();
			LinkedHashMap<String, LinkedHashMap<String, String>> objCbrsHashMap = new LinkedHashMap<>();
			LinkedHashMap<String, String> objCbrsUserDetailsHashMap = new LinkedHashMap<>();
			LinkedHashMap<String, String> objHashMapSerialNum = new LinkedHashMap<>();

			LinkedHashMap<String, String> objHashMapUnitTypeRrh = new LinkedHashMap<>();

			getXmlHtmlContentCommand1(fullOutputLog, command1, objHashMap);
			getXmlHtmlContentCommand3(fullOutputLog, command3, objHashMapAntenaUnit);
			getXmlHtmlContentCommand4(fullOutputLog, command4, objCbrsHashMap);
			getXmlHtmlContentCommand5(fullOutputLog, command5, objCbrsUserDetailsHashMap);
			getXmlHtmlContentCommand6(fullOutputLog, command6, objHashMapSerialNum);
			getXmlHtmlContentCommand7(fullOutputLog, command7, objHashMapUnitTypeRrh);
			getXmlHtmlContentCommand2(fullOutputLog, command2, objHashMap, objHashMapAntenaUnit, objCbrsHashMap,
					objCbrsUserDetailsHashMap, objHashMapSerialNum);
			if (objHashMap.size() > 0) {
				LinkedHashSet<String> headerList = new LinkedHashSet<>();
				headerList.add("cell-num");
				headerList.add("cbsd-id");
				headerList.add("grant-id");
				headerList.add("cbsd-state");
				headerList.add("grant-state");
				headerList.add("preferred-earfcn-info");
				headerList.add("connected-digital-unit-board-type");
				headerList.add("connected-digital-unit-board-id");
				headerList.add("connected-digital-unit-port-id");
				headerList.add("cascade-radio-unit-id");
				headerList.add("cross-polarization-antenna");
				headerList.add("antenna-gain");
				headerList.add("fcc-id");
				headerList.add("call-sign");
				headerList.add("cbsd-category");
				headerList.add("cbrs-mode");
				headerList.add("user-id");
				headerList.add("radio-unit-serial-number");

				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command1
						+ "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				String tableData = "";

				for (Map.Entry<String, LinkedHashMap<String, String>> finalresult : objHashMap.entrySet())

				{
					tableData = tableData + "<tr>\n";
					LinkedHashMap<String, String> objresults = finalresult.getValue();

					for (Map.Entry<String, String> resultTableData : objresults.entrySet()) {
						if ("preferred-earfcn-info".equalsIgnoreCase(resultTableData.getKey())) {
							if (preferedEarfnDetails.containsKey(objresults.get("cell-num"))) {
								if (resultTableData.getValue().trim()
										.equalsIgnoreCase(preferedEarfnDetails.get(objresults.get("cell-num")))) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else if ("cross-polarization-antenna".equalsIgnoreCase(resultTableData.getKey())) {
							if (crossPolarizationAntenaDetails.containsKey(objresults.get("cell-num"))) {
								if (resultTableData.getValue().trim().equalsIgnoreCase(
										crossPolarizationAntenaDetails.get(objresults.get("cell-num")))) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						}

						else if ("antenna-gain".equalsIgnoreCase(resultTableData.getKey())) {
							if (crossAntenaGainDetails.containsKey(objresults.get("cell-num"))) {
								if (StringUtils.isNotEmpty(crossAntenaGainDetails.get(objresults.get("cell-num")))
										&& NumberUtils.isNumber(crossAntenaGainDetails.get(objresults.get("cell-num")))
										&& NumberUtils.isNumber(resultTableData.getValue().trim())) {
									Double resultOutPuts = Double
											.parseDouble(crossAntenaGainDetails.get(objresults.get("cell-num"))) * 10;
									Double antenGain = Double.parseDouble(resultTableData.getValue().trim());
									if (resultOutPuts.doubleValue() == antenGain) {
										tableData = tableData + "<td align=center>" + resultTableData.getValue()
												+ "</td>\n";
									} else {
										tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
												+ resultTableData.getValue() + "</td>\n";
									}

								}
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else if ("fcc-id".equalsIgnoreCase(resultTableData.getKey())) {
							if (fccIdDetails.containsKey(objresults.get("cell-num"))) {
								if (resultTableData.getValue().trim()
										.equalsIgnoreCase(fccIdDetails.get(objresults.get("cell-num")))) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else if ("cbsd-category".equalsIgnoreCase(resultTableData.getKey())) {
							if (cbrsCategoryDetails.containsKey(objresults.get("cell-num"))) {
								if (resultTableData.getValue().trim()
										.equalsIgnoreCase(cbrsCategoryDetails.get(objresults.get("cell-num")))) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else if ("user-id".equalsIgnoreCase(resultTableData.getKey())) {
							if (cbrsUserIdDetails.containsKey(objresults.get("cell-num"))) {
								if (resultTableData.getValue().trim()
										.equalsIgnoreCase(cbrsUserIdDetails.get(objresults.get("cell-num")))) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
								}
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else if ("radio-unit-serial-number".equalsIgnoreCase(resultTableData.getKey())) {
							StringBuilder objStringBuilder = new StringBuilder();
							objStringBuilder.append(objresults.get("connected-digital-unit-board-id"));
							objStringBuilder.append("_");
							objStringBuilder.append(objresults.get("connected-digital-unit-port-id"));
							objStringBuilder.append("_");
							objStringBuilder.append(objresults.get("cascade-radio-unit-id"));

							if (objHashMapUnitTypeRrh.containsKey(objStringBuilder.toString()) && objHashMapUnitTypeRrh
									.get(objStringBuilder.toString()).equalsIgnoreCase(resultTableData.getValue())) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {

								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						}

					}
					tableData = tableData + "</tr>\n";

				}

				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				htmlContent.append("</table>\n");

			} else {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public void getXmlHtmlContentCommand1(String fullOutputLog, String command,
			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("eutran-cell-fdd-tdd");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("cbrs-info");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							if (("cbrs-registered".equalsIgnoreCase(getXmlElementData(elementchild, "cbsd-state"))
									&& "cbrs-authorized"
											.equalsIgnoreCase(getXmlElementData(elementchild, "grant-state")))
									|| ("cbrs-unregistered"
											.equalsIgnoreCase(getXmlElementData(elementchild, "cbsd-state"))
											&& "cbrs-idle".equalsIgnoreCase(
													getXmlElementData(elementchild, "grant-state")))) {
								LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<>();
								objParamsMap.put("cell-num", getXmlElementData(element, "cell-num"));
								objParamsMap.put("cbsd-id", getXmlElementData(elementchild, "cbsd-id"));

								objParamsMap.put("grant-id", getXmlElementData(elementchild, "grant-id"));
								objParamsMap.put("cbsd-state", getXmlElementData(elementchild, "cbsd-state"));
								objParamsMap.put("grant-state", getXmlElementData(elementchild, "grant-state"));
								objParamsMap.put("preferred-earfcn-info",
										getXmlElementData(elementchild, "preferred-earfcn-info"));

								objHashMap.put(getXmlElementData(element, "cell-num"), objParamsMap);

							}
						}

					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public void getXmlHtmlContentCommand2(String fullOutputLog, String command,
			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMap,
			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMapAntenaUnit,
			LinkedHashMap<String, LinkedHashMap<String, String>> objCbrsHashMap,
			LinkedHashMap<String, String> objCbrsUserDetailsHashMap,
			LinkedHashMap<String, String> objHashMapSerialNum) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("carrier-control-info");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							if (objHashMap.containsKey(getXmlElementData(elementchild, "cell-number"))) {
								LinkedHashMap<String, String> objParamsMap = objHashMap
										.get(getXmlElementData(elementchild, "cell-number"));
								objParamsMap.put("connected-digital-unit-board-type",
										getXmlElementData(element, "connected-digital-unit-board-type"));
								objParamsMap.put("connected-digital-unit-board-id",
										getXmlElementData(element, "connected-digital-unit-board-id"));
								objParamsMap.put("connected-digital-unit-port-id",
										getXmlElementData(element, "connected-digital-unit-port-id"));
								objParamsMap.put("cascade-radio-unit-id",
										getXmlElementData(element, "cascade-radio-unit-id"));

								StringBuilder objStringBuilder = new StringBuilder();
								objStringBuilder
										.append(getXmlElementData(element, "connected-digital-unit-board-type"));
								objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-id"));
								objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-port-id"));
								objStringBuilder.append(getXmlElementData(element, "cascade-radio-unit-id"));

								if (objHashMapAntenaUnit.containsKey(objStringBuilder.toString())) {

									objParamsMap.put("cross-polarization-antenna", objHashMapAntenaUnit
											.get(objStringBuilder.toString()).get("cross-polarization-antenna"));
									objParamsMap.put("antenna-gain",
											objHashMapAntenaUnit.get(objStringBuilder.toString()).get("antenna-gain"));
								} else {
									objParamsMap.put("cross-polarization-antenna", "-");
									objParamsMap.put("antenna-gain", "-");
								}

								if (objCbrsHashMap.containsKey(objStringBuilder.toString())) {

									objParamsMap.put("fcc-id",
											objCbrsHashMap.get(objStringBuilder.toString()).get("fcc-id"));
									objParamsMap.put("call-sign",
											objCbrsHashMap.get(objStringBuilder.toString()).get("call-sign"));
									objParamsMap.put("cbsd-category",
											objCbrsHashMap.get(objStringBuilder.toString()).get("cbsd-category"));
								} else {
									objParamsMap.put("fcc-id", "-");
									objParamsMap.put("call-sign", "-");
									objParamsMap.put("cbsd-category", "-");
								}

								if (!ObjectUtils.isEmpty(objCbrsUserDetailsHashMap)) {

									objParamsMap.put("cbrs-mode", objCbrsUserDetailsHashMap.get("cbrs-mode"));
									objParamsMap.put("user-id", objCbrsUserDetailsHashMap.get("user-id"));

								} else {
									objParamsMap.put("cbrs-mode", "-");
									objParamsMap.put("user-id", "-");

								}
								if (objHashMapSerialNum.containsKey(objStringBuilder.toString())) {

									objParamsMap.put("radio-unit-serial-number",
											objHashMapSerialNum.get(objStringBuilder.toString()));
								} else {
									objParamsMap.put("radio-unit-serial-number", "-");
								}

								objHashMap.put(getXmlElementData(elementchild, "cell-number"), objParamsMap);
							}

						}

					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public void getXmlHtmlContentCommand3(String fullOutputLog, String command,
			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("antenna-unit");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							LinkedHashMap<String, String> polarizationgainDetailsMap = new LinkedHashMap<>();
							Element elementchild = (Element) ChildNode;
							StringBuilder objStringBuilder = new StringBuilder();
							objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-type"));
							objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-id"));
							objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-port-id"));
							objStringBuilder.append(getXmlElementData(element, "cascade-radio-unit-id"));

							polarizationgainDetailsMap.put("cross-polarization-antenna",
									getXmlElementData(elementchild, "cross-polarization-antenna"));
							polarizationgainDetailsMap.put("antenna-gain",
									getXmlElementData(elementchild, "antenna-gain"));
							objHashMap.put(objStringBuilder.toString(), polarizationgainDetailsMap);

						}

					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public void getXmlHtmlContentCommand4(String fullOutputLog, String command,
			LinkedHashMap<String, LinkedHashMap<String, String>> objHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("cbrs");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> cbrsDetailsMap = new LinkedHashMap<>();
							StringBuilder objStringBuilder = new StringBuilder();
							objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-type"));
							objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-id"));
							objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-port-id"));
							objStringBuilder.append(getXmlElementData(element, "cascade-radio-unit-id"));

							cbrsDetailsMap.put("fcc-id", getXmlElementData(elementchild, "fcc-id"));
							cbrsDetailsMap.put("call-sign", getXmlElementData(elementchild, "call-sign"));
							cbrsDetailsMap.put("cbsd-category", getXmlElementData(elementchild, "cbsd-category"));
							objHashMap.put(objStringBuilder.toString(), cbrsDetailsMap);

						}

					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public void getXmlHtmlContentCommand5(String fullOutputLog, String command,
			LinkedHashMap<String, String> objCbrsUserDetailsHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("cbrs");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					objCbrsUserDetailsHashMap.put("cbrs-mode", getXmlElementData(element, "cbrs-mode"));
					objCbrsUserDetailsHashMap.put("user-id", getXmlElementData(element, "user-id"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public void getXmlHtmlContentCommand6(String fullOutputLog, String command,
			LinkedHashMap<String, String> objHashMapSerialNum) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					StringBuilder objStringBuilder = new StringBuilder();
					objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-type"));
					objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-id"));
					objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-port-id"));
					objStringBuilder.append(getXmlElementData(element, "cascade-radio-unit-id"));

					objHashMapSerialNum.put(objStringBuilder.toString(),
							getXmlElementData(element, "radio-unit-serial-number"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public void getXmlHtmlContentCommand7(String fullOutputLog, String command,
			LinkedHashMap<String, String> objHashMapUnitTypeRrh) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("radio-unit-inventory-list");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					StringBuilder objStringBuilder = new StringBuilder();
					objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-id"));
					objStringBuilder.append("_");
					objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-port-id"));
					objStringBuilder.append("_");
					objStringBuilder.append(getXmlElementData(element, "cascade-radio-unit-id"));

					objHashMapUnitTypeRrh.put(objStringBuilder.toString(), getXmlElementData(element, "serial-number"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public StringBuilder getCommandHtmlRadioUnitCarrierControlInfoCpriInfo(String fullOutputLog, String command,
			String enbId, String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidation(enbId, dbcollectionFileName);
			LinkedHashMap<String, LinkedHashMap<String, String>> objfinalHashMap = new LinkedHashMap<>();

			if (!ObjectUtils.isEmpty(listOfCiqDetails))

			{
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {

					LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();
					LinkedHashMap<String, String> trackingDetails = new LinkedHashMap<>();
					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("Cell_ID")) {
						trackingDetails.put("cell-number", objMapDetails.get("Cell_ID").getHeaderValue());

						if (objMapDetails.containsKey("Output_Power(dBm)")) {

							trackingDetails.put("dl-max-tx-power",
									objMapDetails.get("Output_Power(dBm)").getHeaderValue());
						} else {
							trackingDetails.put("dl-max-tx-power", null);
						}
						if (objMapDetails.containsKey("antennaPathDelayDL")) {

							trackingDetails.put("tx-attenuation-per-carrier-per-path",
									objMapDetails.get("antennaPathDelayDL").getHeaderValue());
						} else {
							trackingDetails.put("tx-attenuation-per-carrier-per-path", null);
						}
						if (objMapDetails.containsKey("administrative-state")) {

							trackingDetails.put("administrative-state",
									objMapDetails.get("administrative-state").getHeaderValue());
						} else {
							trackingDetails.put("administrative-state", null);
						}

						objfinalHashMap.put(objMapDetails.get("Cell_ID").getHeaderValue(), trackingDetails);

					}

				}

			}

			String command1 = "show managed-element hardware-management radio-unit radio-unit-info carrier-control-info | display xml";
			String command2 = "show managed-element hardware-management radio-unit radio-unit-info external-port cpri-port | display xml";

			LinkedHashMap<String, List<LinkedHashMap<String, String>>> objHashMap = new LinkedHashMap<>();
			LinkedHashMap<String, List<LinkedHashMap<String, String>>> objcipriHashMap2 = new LinkedHashMap<>();
			List<LinkedHashMap<String, String>> tableDataList = new ArrayList<>();
			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("cell-number");
			headerList.add("connected-digital-unit-board-type");
			headerList.add("connected-digital-unit-board-id");
			headerList.add("connected-digital-unit-port-id");
			headerList.add("cascade-radio-unit-id");
			headerList.add("dl-max-tx-power");
			headerList.add("tx-attenuation-per-carrier-per-path");
			headerList.add("port-id");
			headerList.add("config-tx-delay");
			headerList.add("config-rx-delay");
			getXmlHtmlContentcipriInfo(fullOutputLog, command2, objcipriHashMap2);
			getXmlHtmlContentCarrierInfo(fullOutputLog, command1, objHashMap, objcipriHashMap2);
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command1 + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";

			for (Map.Entry<String, List<LinkedHashMap<String, String>>> objTotDetailsInfo : objHashMap.entrySet()) {

				List<LinkedHashMap<String, String>> objTableList = objTotDetailsInfo.getValue();

				for (LinkedHashMap<String, String> detailTable : objTableList) {
					tableDataList.add(detailTable);
					tableData = tableData + "<tr>\n";

					for (Map.Entry<String, String> resultTableData : detailTable.entrySet()) {

						if ("dl-max-tx-power".equalsIgnoreCase(resultTableData.getKey())
								&& objfinalHashMap.containsKey(detailTable.get("cell-number"))) {

							String maxPower = objfinalHashMap.get(detailTable.get("cell-number"))
									.get("dl-max-tx-power");
							if (StringUtils.isNotEmpty(maxPower) && NumberUtils.isNumber(maxPower)
									&& NumberUtils.isNumber(resultTableData.getValue())) {
								Double resultOutPuts = Double.parseDouble(maxPower) * 10;
								Double auditOutMaxpower = Double.parseDouble(resultTableData.getValue());
								if (resultOutPuts.doubleValue() == auditOutMaxpower) {
									tableData = tableData + "<td align=center>" + resultTableData.getValue()
											+ "</td>\n";
								} else {
									tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
											+ resultTableData.getValue() + "</td>\n";
									auditIssue1.append( " cell-number:  "
											+ detailTable.get("cell-number") + " dl-max-tx-power:  " + detailTable.get("dl-max-tx-power") + "\n");
								}

							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}

						} /*else if ("tx-attenuation-per-carrier-per-path".equalsIgnoreCase(resultTableData.getKey())
								&& objfinalHashMap.containsKey(detailTable.get("cell-number"))) {
							if (!(resultTableData.getValue()
									.equalsIgnoreCase(objfinalHashMap.get(detailTable.get("cell-number"))
											.get("tx-attenuation-per-carrier-per-path"))
									|| "0".equalsIgnoreCase(resultTableData.getValue()))  ) {
								
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
								auditIssue2.append( " cell-number:  "
										+ detailTable.get("cell-number") + " tx-attenuation-per-carrier-per-path:  " + detailTable.get("tx-attenuation-per-carrier-per-path") + "\n");
							} else {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							}
						}*/ else {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						}

					}
					tableData = tableData + "</tr>\n";

				}

			}

			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tableDataList, auditIssueAll);
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(62, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
			}
			/*if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(63, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
			}*/

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public void getXmlHtmlContentCarrierInfo(String fullOutputLog, String command,
			LinkedHashMap<String, List<LinkedHashMap<String, String>>> objHashMap,
			LinkedHashMap<String, List<LinkedHashMap<String, String>>> objCpriHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("carrier-control-info");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							StringBuilder objStringBuilder = new StringBuilder();
							objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-type"));
							objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-id"));
							objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-port-id"));
							objStringBuilder.append(getXmlElementData(element, "cascade-radio-unit-id"));

							if (objCpriHashMap.containsKey(objStringBuilder.toString())
									&& !ObjectUtils.isEmpty(objCpriHashMap.get(objStringBuilder.toString()))) {
								List<LinkedHashMap<String, String>> objListCpri = objCpriHashMap
										.get(objStringBuilder.toString());

								for (LinkedHashMap<String, String> objLocalCpri : objListCpri)

								{
									LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<String, String>();
									objParamsMap.put("cell-number", getXmlElementData(elementchild, "cell-number"));
									objParamsMap.put("connected-digital-unit-board-type",
											getXmlElementData(element, "connected-digital-unit-board-type"));
									objParamsMap.put("connected-digital-unit-board-id",
											getXmlElementData(element, "connected-digital-unit-board-id"));
									objParamsMap.put("connected-digital-unit-port-id",
											getXmlElementData(element, "connected-digital-unit-port-id"));
									objParamsMap.put("cascade-radio-unit-id",
											getXmlElementData(element, "cascade-radio-unit-id"));

									objParamsMap.put("dl-max-tx-power",
											getXmlElementData(elementchild, "dl-max-tx-power"));
									objParamsMap.put("tx-attenuation-per-carrier-per-path",
											getXmlElementData(elementchild, "tx-attenuation-per-carrier-per-path"));

									for (Map.Entry<String, String> resultTableData : objLocalCpri.entrySet()) {

										if ("port-id".equalsIgnoreCase(resultTableData.getKey())) {
											objParamsMap.put("port-id", resultTableData.getValue());
										} else if ("config-tx-delay".equalsIgnoreCase(resultTableData.getKey())) {
											objParamsMap.put("config-tx-delay", resultTableData.getValue());
										} else if ("config-rx-delay".equalsIgnoreCase(resultTableData.getKey())) {
											objParamsMap.put("config-rx-delay", resultTableData.getValue());
										}

									}

									if (objHashMap.containsKey(getXmlElementData(elementchild, "cell-number"))) {
										List<LinkedHashMap<String, String>> objExistParamsMapList = objHashMap
												.get(getXmlElementData(elementchild, "cell-number"));

										objExistParamsMapList.add(objParamsMap);

										objHashMap.put(getXmlElementData(elementchild, "cell-number"),
												objExistParamsMapList);
									} else {
										List<LinkedHashMap<String, String>> objExistParamsMapList = new ArrayList<>();

										objExistParamsMapList.add(objParamsMap);

										objHashMap.put(getXmlElementData(elementchild, "cell-number"),
												objExistParamsMapList);
									}

								}

							} else {
								LinkedHashMap<String, String> objParamsMap = new LinkedHashMap<String, String>();
								objParamsMap.put("cell-number", getXmlElementData(elementchild, "cell-number"));
								objParamsMap.put("connected-digital-unit-board-type",
										getXmlElementData(element, "connected-digital-unit-board-type"));
								objParamsMap.put("connected-digital-unit-board-id",
										getXmlElementData(element, "connected-digital-unit-board-id"));
								objParamsMap.put("connected-digital-unit-port-id",
										getXmlElementData(element, "connected-digital-unit-port-id"));
								objParamsMap.put("cascade-radio-unit-id",
										getXmlElementData(element, "cascade-radio-unit-id"));

								objParamsMap.put("dl-max-tx-power", getXmlElementData(elementchild, "dl-max-tx-power"));
								objParamsMap.put("tx-attenuation-per-carrier-per-path",
										getXmlElementData(elementchild, "tx-attenuation-per-carrier-per-path"));
								objParamsMap.put("port-id", "-");
								objParamsMap.put("config-tx-delay", "-");
								objParamsMap.put("config-rx-delay", "-");
								List<LinkedHashMap<String, String>> objExistParamsMapList = new ArrayList<>();

								objExistParamsMapList.add(objParamsMap);

								objHashMap.put(getXmlElementData(elementchild, "cell-number"), objExistParamsMapList);

							}

						}

					}

				}

			}
		}

		catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public void getXmlHtmlContentcipriInfo(String fullOutputLog, String command,
			LinkedHashMap<String, List<LinkedHashMap<String, String>>> objHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("cpri-port-entries");
					List<LinkedHashMap<String, String>> cpriInfoList = new ArrayList<>();
					for (int j = 0; j < childNodeList.getLength(); j++) {
						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Element elementchild = (Element) ChildNode;

							objtableData.put("port-id", getXmlElementData(elementchild, "port-id"));
							objtableData.put("config-tx-delay", getXmlElementData(elementchild, "config-tx-delay"));
							objtableData.put("config-rx-delay", getXmlElementData(elementchild, "config-rx-delay"));

							cpriInfoList.add(objtableData);

						}
					}

					StringBuilder objStringBuilder = new StringBuilder();
					objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-type"));
					objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-board-id"));
					objStringBuilder.append(getXmlElementData(element, "connected-digital-unit-port-id"));
					objStringBuilder.append(getXmlElementData(element, "cascade-radio-unit-id"));

					objHashMap.put(objStringBuilder.toString(), cpriInfoList);

				}

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public boolean getIpv6Validation(List<String> data, String realData) {
		AtomicBoolean statusAtomic = new AtomicBoolean();
		try {
			if (!ObjectUtils.isEmpty(data) && StringUtils.isNotEmpty(realData)) {
				for (String localValue : data) {
					String lowercaseDyanmic = localValue.toLowerCase();
					String lowercaseRealData = realData.toLowerCase();

					if (lowercaseRealData.endsWith(":")) {
						lowercaseRealData = lowercaseRealData.substring(0, lowercaseRealData.length() - 1) + ":0";
					}
					if (lowercaseDyanmic.endsWith(":")) {
						lowercaseDyanmic = lowercaseDyanmic.substring(0, lowercaseDyanmic.length() - 1) + ":0";
					}
					lowercaseRealData = lowercaseRealData.replaceAll("::", ":0:");
					lowercaseDyanmic = lowercaseDyanmic.replaceAll("::", ":0:");
					String[] dataValuesRealData = lowercaseRealData.split(":");
					String[] dataValuesDyanmic = lowercaseDyanmic.split(":");

					if (dataValuesRealData.length == dataValuesDyanmic.length) {

						boolean individualStatus = false;
						for (int i = 0; i <= dataValuesRealData.length - 1; i++) {
							String splitString1 = dataValuesRealData[i].replaceAll("^0+(?!$)", "");// starting zero
																									// zero's removing
							String splitString2 = dataValuesDyanmic[i].replaceAll("^0+(?!$)", "");// starting zero's
																									// removing
							if (splitString1.length() == splitString2.length()
									&& splitString1.equalsIgnoreCase(splitString2)) {
								individualStatus = true;
								continue;

							} else if (splitString1.length() == splitString2.length()
									&& (StringUtils.isEmpty(splitString1) || StringUtils.isEmpty(splitString2))) {
								individualStatus = true;
								continue;

							} else {
								individualStatus = false;
								break;
							}

						}

						if (individualStatus) {
							statusAtomic.getAndSet(true);
							break;
						}

					} else {
						statusAtomic.getAndSet(false);
						continue;
					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return statusAtomic.get();
	}

	public StringBuilder getACPFX2E1F1checks(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			LinkedHashSet<String> headerF1List = new LinkedHashSet<>();
			headerF1List.add("end-point-f1-index");
			headerF1List.add("gnb-du-id");
			headerF1List.add("remote-ip-address");
			headerF1List.add("secondary-remote-ip-address");

			headerF1List.add("sctp-state");
			headerF1List.add("f1-ap-state");

			LinkedHashSet<String> headerX2List = new LinkedHashSet<>();
			headerX2List.add("x2-neighbor-index");
			headerX2List.add("remote-ip-address");
			headerX2List.add("enb-id");
			headerX2List.add("mcc");
			headerX2List.add("mnc");
			headerX2List.add("sctp-state");
			headerX2List.add("x2-ap-state");

			LinkedHashSet<String> headerE1List = new LinkedHashSet<>();
			headerE1List.add("end-point-e1-index");
			headerE1List.add("cu-up-id");
			headerE1List.add("remote-ip-address");
			headerE1List.add("sctp-state");
			headerE1List.add("e1-ap-state");

			String sourceTagf1 = "end-point-f1c-entries";
			String sourceTagx2 = "end-point-x2-entries";
			String sourceTage1 = "end-point-e1-entries";

			List<LinkedHashMap<String, String>> objHashMap = new ArrayList<>();
			List<LinkedHashMap<String, String>> objHashMapX2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> objHashMapE1 = new ArrayList<>();
			getXmlHtmlContentF1Details(fullOutputLog, command, sourceTagf1, objHashMap);

			getXmlHtmlContentX2Details(fullOutputLog, command, sourceTagx2, objHashMapX2);
			getXmlHtmlContentE1Details(fullOutputLog, command, sourceTage1, objHashMapE1);

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerX2List.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerF1List) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";

			for (LinkedHashMap<String, String> resultTableDataList : objHashMap) {
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : resultTableDataList.entrySet()) {

					if ("sctp-state".equalsIgnoreCase(resultTableData.getKey())) {
						if ("enabled".equalsIgnoreCase(resultTableData.getValue())) {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
						}
					} else if ("f1-ap-state".equalsIgnoreCase(resultTableData.getKey())) {
						if ("enabled".equalsIgnoreCase(resultTableData.getValue())) {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
						}
					} else {
						tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
					}

				}

				tableData = tableData + "</tr>\n";

			}

			String tableHeaderX2 = "";
			tableHeaderX2 = tableHeaderX2 + "<tr>\n";
			for (String headerName : headerX2List) {
				tableHeaderX2 = tableHeaderX2 + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeaderX2 = tableHeaderX2 + "</tr>\n";
			String tableDataX2 = "";

			for (LinkedHashMap<String, String> resultTableDataList : objHashMapX2) {
				tableDataX2 = tableDataX2 + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : resultTableDataList.entrySet()) {

					if ("sctp-state".equalsIgnoreCase(resultTableData.getKey())) {
						if ("enabled".equalsIgnoreCase(resultTableData.getValue())) {
							tableDataX2 = tableDataX2 + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableDataX2 = tableDataX2 + "<td align=center bgcolor ='#fa8c8c'>"
									+ resultTableData.getValue() + "</td>\n";
						}
					} else if ("x2-ap-state".equalsIgnoreCase(resultTableData.getKey())) {
						if ("enabled".equalsIgnoreCase(resultTableData.getValue())) {
							tableDataX2 = tableDataX2 + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableDataX2 = tableDataX2 + "<td align=center bgcolor ='#fa8c8c'>"
									+ resultTableData.getValue() + "</td>\n";
						}
					} else {
						tableDataX2 = tableDataX2 + "<td align=center>" + resultTableData.getValue() + "</td>\n";
					}

				}

				tableDataX2 = tableDataX2 + "</tr>\n";

			}

			String tableHeaderE1 = "";
			tableHeaderE1 = tableHeaderE1 + "<tr>\n";
			for (String headerName : headerE1List) {
				tableHeaderE1 = tableHeaderE1 + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeaderE1 = tableHeaderE1 + "</tr>\n";
			String tableDataE1 = "";

			for (LinkedHashMap<String, String> resultTableDataList : objHashMapE1) {
				tableDataE1 = tableDataE1 + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : resultTableDataList.entrySet()) {

					if ("sctp-state".equalsIgnoreCase(resultTableData.getKey())) {
						if ("enabled".equalsIgnoreCase(resultTableData.getValue())) {
							tableDataE1 = tableDataE1 + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableDataE1 = tableDataE1 + "<td align=center bgcolor ='#fa8c8c'>"
									+ resultTableData.getValue() + "</td>\n";
						}
					} else if ("e1-ap-state".equalsIgnoreCase(resultTableData.getKey())) {
						if ("enabled".equalsIgnoreCase(resultTableData.getValue())) {
							tableDataE1 = tableDataE1 + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableDataE1 = tableDataE1 + "<td align=center bgcolor ='#fa8c8c'>"
									+ resultTableData.getValue() + "</td>\n";
						}
					} else {
						tableDataE1 = tableDataE1 + "<td align=center>" + resultTableData.getValue() + "</td>\n";
					}

				}

				tableDataE1 = tableDataE1 + "</tr>\n";

			}

			String f1Entries = "<tr><td colspan=" + headerF1List.size() + " bgcolor=#EEEEEE><b>" + sourceTagf1
					+ "</b></td></tr>\n";
			String x2Entries = "<tr><td colspan=" + headerX2List.size() + " bgcolor=#EEEEEE><b>" + sourceTagx2
					+ "</b></td></tr>\n";
			String e1Entries = "<tr><td colspan=" + headerE1List.size() + " bgcolor=#EEEEEE><b>" + sourceTage1
					+ "</b></td></tr>\n";

			htmlContent.append(x2Entries);
			htmlContent.append(tableHeaderX2);
			htmlContent.append(tableDataX2);
			htmlContent.append(f1Entries);
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append(e1Entries);
			htmlContent.append(tableHeaderE1);
			htmlContent.append(tableDataE1);
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public void getXmlHtmlContentF1Details(String fullOutputLog, String command, String sourceTag,
			List<LinkedHashMap<String, String>> objHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName(sourceTag);
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					LinkedHashMap<String, String> objDataHashMap = new LinkedHashMap<>();

					objDataHashMap.put("end-point-f1-index", getXmlElementData(element, "end-point-f1-index"));
					objDataHashMap.put("gnb-du-id", getXmlElementData(element, "gnb-du-id"));
					objDataHashMap.put("remote-ip-address", getXmlElementData(element, "remote-ip-address"));
					objDataHashMap.put("secondary-remote-ip-address",
							getXmlElementData(element, "secondary-remote-ip-address"));
					objDataHashMap.put("sctp-state", getXmlElementData(element, "sctp-state"));
					objDataHashMap.put("f1-ap-state", getXmlElementData(element, "f1-ap-state"));
					objHashMap.add(objDataHashMap);

				}

			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public void getXmlHtmlContentX2Details(String fullOutputLog, String command, String sourceTag,
			List<LinkedHashMap<String, String>> objHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName(sourceTag);
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					LinkedHashMap<String, String> objDataHashMap = new LinkedHashMap<>();

					objDataHashMap.put("x2-neighbor-index", getXmlElementData(element, "x2-neighbor-index"));
					objDataHashMap.put("remote-ip-address", getXmlElementData(element, "remote-ip-address"));
					objDataHashMap.put("enb-id", getXmlElementData(element, "enb-id"));
					objDataHashMap.put("mcc", getXmlElementData(element, "mcc"));
					objDataHashMap.put("mnc", getXmlElementData(element, "mnc"));
					objDataHashMap.put("sctp-state", getXmlElementData(element, "sctp-state"));
					objDataHashMap.put("x2-ap-state", getXmlElementData(element, "x2-ap-state"));
					objHashMap.add(objDataHashMap);

				}

			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public void getXmlHtmlContentE1Details(String fullOutputLog, String command, String sourceTag,
			List<LinkedHashMap<String, String>> objHashMap) {
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName(sourceTag);
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);

				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					LinkedHashMap<String, String> objDataHashMap = new LinkedHashMap<>();

					objDataHashMap.put("end-point-e1-index", getXmlElementData(element, "end-point-e1-index"));
					objDataHashMap.put("cu-up-id", getXmlElementData(element, "cu-up-id"));
					objDataHashMap.put("remote-ip-address", getXmlElementData(element, "remote-ip-address"));
					objDataHashMap.put("sctp-state", getXmlElementData(element, "sctp-state"));
					objDataHashMap.put("e1-ap-state", getXmlElementData(element, "e1-ap-state"));
					objHashMap.add(objDataHashMap);

				}

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public StringBuilder getAUPFCslServerSettings(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, LinkedHashMap<String, XmlElementEntity> ruleMapDetails) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			List<LinkedHashMap<String, String>> objHashMap = new ArrayList<>();

			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("csl-tce-ems-server-port");
			headerList.add("csl-tce-ems-option");
			headerList.add("csl-tce-server-ip-address");
			headerList.add("csl-tce-server-port");
			headerList.add("csl-tce-option");

			NodeList nodeList = document.getElementsByTagName("csl-configuration");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("csl-tce-ems-server");
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					for (int j = 0; j < childNodeList.getLength(); j++) {
						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							objtableData.put("csl-tce-ems-server-port",
									getXmlElementData(elementchild, "csl-tce-ems-server-port"));
							objtableData.put("csl-tce-ems-option",
									getXmlElementData(elementchild, "csl-tce-ems-option"));

						}
					}

					NodeList childNodeList2 = element.getElementsByTagName("csl-tce-server");
					for (int j = 0; j < childNodeList2.getLength(); j++) {
						Node ChildNode = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							objtableData.put("csl-tce-server-ip-address",
									getXmlElementData(elementchild, "csl-tce-server-ip-address"));
							objtableData.put("csl-tce-server-port",
									getXmlElementData(elementchild, "csl-tce-server-port"));

							objtableData.put("csl-tce-option", getXmlElementData(elementchild, "csl-tce-option"));

						}
					}
					objHashMap.add(objtableData);

				}

				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append(
						"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				String tableData = "";
				for (LinkedHashMap<String, String> tdData : objHashMap) {
					tableData = tableData + "<tr>\n";

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

						if (ruleMapDetails.containsKey(resultTableData.getKey())) {
							XmlElementEntity ruleEntity = ruleMapDetails.get(resultTableData.getKey());
							boolean status = getVailiDation(ruleEntity, resultTableData.getValue());
							if (status) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						}

					}
					tableData = tableData + "</tr>\n";

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				htmlContent.append("</table>\n");

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	private boolean getVailiDation(XmlElementEntity ruleEntity, String value) {
		// TODO Auto-generated method stub

		boolean status = true;

		try {
			if (StringUtils.isNotEmpty(value) && "CONTAINS".equalsIgnoreCase(ruleEntity.getOperator())) {

				if (!value.contains(ruleEntity.getElementValue())) {
					status = false;
				}

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return status;
	}

	public StringBuilder getACPFCslServerSettings(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, LinkedHashMap<String, XmlElementEntity> ruleMapDetails) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			List<LinkedHashMap<String, String>> objHashMap = new ArrayList<>();

			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("csl-tce-ems-server-port");
			headerList.add("csl-tce-ems-option");
			headerList.add("csl-tce-server-ip-address");
			headerList.add("csl-tce-server-port");
			headerList.add("csl-tce-option");

			NodeList nodeList = document.getElementsByTagName("csl-configuration");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("csl-tce-ems-server");
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					for (int j = 0; j < childNodeList.getLength(); j++) {
						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							objtableData.put("csl-tce-ems-server-port",
									getXmlElementData(elementchild, "csl-tce-ems-server-port"));
							objtableData.put("csl-tce-ems-option",
									getXmlElementData(elementchild, "csl-tce-ems-option"));

						}
					}

					NodeList childNodeList2 = element.getElementsByTagName("csl-tce-server");
					for (int j = 0; j < childNodeList2.getLength(); j++) {
						Node ChildNode = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							objtableData.put("csl-tce-server-ip-address",
									getXmlElementData(elementchild, "csl-tce-server-ip-address"));
							objtableData.put("csl-tce-server-port",
									getXmlElementData(elementchild, "csl-tce-server-port"));

							objtableData.put("csl-tce-option", getXmlElementData(elementchild, "csl-tce-option"));

						}
					}
					objHashMap.add(objtableData);
				}

				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append(
						"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				String tableData = "";
				for (LinkedHashMap<String, String> tdData : objHashMap) {
					tableData = tableData + "<tr>\n";

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						if (ruleMapDetails.containsKey(resultTableData.getKey())) {
							XmlElementEntity ruleEntity = ruleMapDetails.get(resultTableData.getKey());
							boolean status = getVailiDation(ruleEntity, resultTableData.getValue());
							if (status) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						}
					}
					tableData = tableData + "</tr>\n";

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				htmlContent.append("</table>\n");

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getAuAddtnlParamChecks(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, LinkedHashMap<String, XmlElementEntity> ruleMapDetails) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			List<LinkedHashMap<String, String>> objHashMap = new ArrayList<>();

			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("config-type");
			headerList.add("qci");
			headerList.add("gnb-timer-poll-retransmit");
			headerList.add("gnb-poll-pdu");
			headerList.add("gnb-poll-byte");
			headerList.add("gnb-max-retransmission-threshold");
			headerList.add("ue-timer-poll-retransmit");
			headerList.add("ue-poll-pdu");
			headerList.add("ue-poll-byte");
			headerList.add("ue-t-reassembly");
			headerList.add("ue-max-retransmission-threshold");
			headerList.add("ue-timer-status-prohibit");
			headerList.add("sn-field-length-ul-um");
			headerList.add("sn-field-length-ul-am");
			headerList.add("sn-field-length-dl-um");
			headerList.add("sn-field-length-dl-am");

			NodeList nodeList = document.getElementsByTagName("drb-rlc-info-func");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();

					objtableData.put("config-type", getXmlElementData(element, "config-type"));
					objtableData.put("qci", getXmlElementData(element, "qci"));
					objtableData.put("gnb-timer-poll-retransmit",
							getXmlElementData(element, "gnb-timer-poll-retransmit"));
					objtableData.put("gnb-poll-pdu", getXmlElementData(element, "gnb-poll-pdu"));
					objtableData.put("gnb-poll-byte", getXmlElementData(element, "gnb-poll-byte"));
					objtableData.put("gnb-max-retransmission-threshold",
							getXmlElementData(element, "gnb-max-retransmission-threshold"));
					objtableData.put("ue-timer-poll-retransmit",
							getXmlElementData(element, "ue-timer-poll-retransmit"));
					objtableData.put("ue-poll-pdu", getXmlElementData(element, "ue-poll-pdu"));
					objtableData.put("ue-poll-byte", getXmlElementData(element, "ue-poll-byte"));
					objtableData.put("ue-t-reassembly", getXmlElementData(element, "ue-t-reassembly"));
					objtableData.put("ue-max-retransmission-threshold",
							getXmlElementData(element, "ue-max-retransmission-threshold"));
					objtableData.put("ue-timer-status-prohibit",
							getXmlElementData(element, "ue-timer-status-prohibit"));
					objtableData.put("sn-field-length-ul-um", getXmlElementData(element, "sn-field-length-ul-um"));
					objtableData.put("sn-field-length-ul-am", getXmlElementData(element, "sn-field-length-ul-am"));
					objtableData.put("sn-field-length-dl-um", getXmlElementData(element, "sn-field-length-dl-um"));
					objtableData.put("sn-field-length-dl-am", getXmlElementData(element, "sn-field-length-dl-am"));

					objHashMap.add(objtableData);

				}

				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append(
						"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				String tableData = "";
				for (LinkedHashMap<String, String> tdData : objHashMap) {
					tableData = tableData + "<tr>\n";

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

						if (ruleMapDetails.containsKey(resultTableData.getKey())) {
							XmlElementEntity ruleEntity = ruleMapDetails.get(resultTableData.getKey());
							boolean status = getVailiDation(ruleEntity, resultTableData.getValue());
							if (status) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
							}
						} else {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						}

					}
					tableData = tableData + "</tr>\n";

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				htmlContent.append("</table>\n");

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getACPFA1A2A3Checks(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			// For a1-report-config entries
			String entry = "a1-report-config";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("index");
			headerList1.add("a1-threshold-rsrp");
			headerList1.add("a1-time-to-trigger");
			headerList1.add("a1-purpose");
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("cell-identity");
			headerList2.add("index");
			headerList2.add("a2-threshold-rsrp");
			headerList2.add("a2-time-to-trigger");
			headerList2.add("a2-purpose");
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("cell-identity");
			headerList3.add("index");
			headerList3.add("a3-time-to-trigger");
			headerList3.add("a3-purpose");

			NodeList nodeList = document.getElementsByTagName("gutran-cu-cell");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("gutran-cu-cell-entries");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("report-config-entries");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("a1-report-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild, "cell-identity"));
											objtableData.put("index", getXmlElementData(elementchild1, "index"));
											objtableData.put("a1-threshold-rsrp",
													getXmlElementData(elementchild2, "a1-threshold-rsrp"));
											objtableData.put("a1-time-to-trigger",
													getXmlElementData(elementchild2, "a1-time-to-trigger"));
											objtableData.put("a1-purpose",
													getXmlElementData(elementchild2, "a1-purpose"));

											tabelData1.add(objtableData);
										}
									}

									childNodeList2 = elementchild1.getElementsByTagName("a2-report-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild, "cell-identity"));
											objtableData.put("index", getXmlElementData(elementchild1, "index"));
											objtableData.put("a2-threshold-rsrp",
													getXmlElementData(elementchild2, "a2-threshold-rsrp"));
											objtableData.put("a2-time-to-trigger",
													getXmlElementData(elementchild2, "a2-time-to-trigger"));
											objtableData.put("a2-purpose",
													getXmlElementData(elementchild2, "a2-purpose"));

											tabelData2.add(objtableData);
										}
									}

									childNodeList2 = elementchild1.getElementsByTagName("a3-report-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild, "cell-identity"));
											objtableData.put("index", getXmlElementData(elementchild1, "index"));
											objtableData.put("a1-time-to-trigger",
													getXmlElementData(elementchild2, "a3-time-to-trigger"));
											objtableData.put("a1-purpose",
													getXmlElementData(elementchild2, "a3-purpose"));

											tabelData3.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>"
					+ "ACPF_A1_A2_A3_Incl_NR_UL_checks" + "</b></td></tr>\n");

			Set<Integer> cellIdset = getcellIds(enbId, dbcollectionFileName, "5GNRCIQAU", "eNBId");
			trimTabledata(tabelData1, cellIdset, "cell-identity");
			htmlContent.append(createHtmltable(headerList1, entry, tabelData1));

			entry = "a2-report-config";
			trimTabledata(tabelData2, cellIdset, "cell-identity");
			htmlContent.append(createHtmltable(headerList2, entry, tabelData2));

			entry = "a3-report-config";
			trimTabledata(tabelData3, cellIdset, "cell-identity");
			htmlContent.append(createHtmltable(headerList3, entry, tabelData3));

			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + "ACPF_A1_A2_A3_Incl_NR_UL_checks" + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder createHtmltable(LinkedHashSet<String> headerList, String command,
			List<LinkedHashMap<String, String>> tabelData) {
		StringBuilder htmlContent = new StringBuilder();

		htmlContent
				.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData) {
			tableData.append("<tr>\n");

			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				/*if (command.contains("a1") && resultTableData.getKey().equals("index")
						&& !resultTableData.getValue().equals("3") && !resultTableData.getValue().equals("5")) {
					tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
				} else if (command.contains("a2") && resultTableData.getKey().equals("index")
						&& !resultTableData.getValue().equals("1") && !resultTableData.getValue().equals("4")
						&& !resultTableData.getValue().equals("6")) {
					tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
				} else if (command.contains("a3") && resultTableData.getKey().equals("index")
						&& !resultTableData.getValue().equals("2")) {
					tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
				} else {
					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
				}*/
				tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);

		return htmlContent;
	}

	public StringBuilder getAU20AParamCheckHtml(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("ul-su-mimo-switch");
			headerList1.add("ul-mu-mimo-switch");
			headerList1.add("dynamic-srs-port-adaptation");
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("cell-identity");
			headerList2.add("p0-nominal-with-grant");
			headerList2.add("p0-nominal-pucch");
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("cell-identity");
			headerList3.add("dl-mu-mimo-switch");
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cell-identity");
			headerList4.add("nsa-call-threshold");
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-identity");
			headerList5.add("coloc-covered-cell-num");
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cell-identity");
			headerList6.add("ca-available-type");
			headerList6.add("p-cell-only-flag");
			headerList6.add("max-dl-ca-cc-num");
			headerList6.add("max-ul-ca-cc-num");
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("cell-identity");
			headerList7.add("preamble-receiver-target-power");
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("qci");
			headerList8.add("prioritised-bitrate");
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("csl-tce-ems-server-port");
			headerList9.add("csl-tce-ems-option");
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("csl-tce-server-ip-address");
			headerList10.add("csl-tce-server-port");
			headerList10.add("csl-tce-option");
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("modem-id");
			headerList11.add("cell-num");
			headerList11.add("path");
			headerList11.add("tssi");

			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("cell-identity");
			headerList12.add("ssb-freq-offset");
			headerList12.add("ssb-freq-config-mode");

			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("cell-identity");
			headerList13.add("drx-cycle");
			headerList13.add("drx-on-duration-timer-msec-normal");
			headerList13.add("drx-inactivity-timer-normal");

			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("config-type");
			headerList14.add("qci");
			headerList14.add("gnb-timer-poll-retransmit");
			headerList14.add("ue-t-reassembly");
			headerList14.add("ue-timer-status-prohibit");

			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("index");
			headerList15.add("band-indicator-index");
			headerList15.add("band-indicator-eutra");
			headerList15.add("ca-bandwidth-class-dl-eutra");
			headerList15.add("ca-bandwidth-class-ul-eutra");

			LinkedHashSet<String> headerList16 = new LinkedHashSet<>();
			headerList16.add("index");
			headerList16.add("band-indicator-index");
			headerList16.add("band-indicator-nr");
			headerList16.add("ca-bandwidth-class-dl-nr");
			headerList16.add("ca-bandwidth-class-ul-nr");

			NodeList nodeList = document.getElementsByTagName("gnb-du-function");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData16 = new ArrayList<>();

			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("gutran-du-cell");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("gutran-du-cell-entries");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("ul-mimo-configuration");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild1, "cell-identity"));
											objtableData.put("ul-su-mimo-switch",
													getXmlElementData(elementchild2, "ul-su-mimo-switch"));
											objtableData.put("ul-mu-mimo-switch",
													getXmlElementData(elementchild2, "ul-mu-mimo-switch"));
											objtableData.put("dynamic-srs-port-adaptation",
													getXmlElementData(elementchild2, "dynamic-srs-port-adaptation"));

											tabelData1.add(objtableData);
										}
									}

									childNodeList2 = elementchild1.getElementsByTagName("ul-power-control-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild1, "cell-identity"));
											objtableData.put("p0-nominal-with-grant",
													getXmlElementData(elementchild2, "p0-nominal-with-grant"));
											objtableData.put("p0-nominal-pucch",
													getXmlElementData(elementchild2, "p0-nominal-pucch"));

											tabelData2.add(objtableData);
										}
									}

									childNodeList2 = elementchild1.getElementsByTagName("beam-management");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild1, "cell-identity"));
											objtableData.put("dl-mu-mimo-switch",
													getXmlElementData(elementchild2, "dl-mu-mimo-switch"));

											tabelData3.add(objtableData);
										}
									}

									childNodeList2 = elementchild1.getElementsByTagName("cell-cac-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild1, "cell-identity"));
											objtableData.put("nsa-call-threshold",
													getXmlElementData(elementchild2, "nsa-call-threshold"));

											tabelData4.add(objtableData);
										}
									}

									childNodeList2 = elementchild1.getElementsByTagName("nr-carrier-aggregation");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											for (int z = 0; z < elementchild2
													.getElementsByTagName("coloc-covered-cell-num").getLength(); z++) {
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("cell-identity",
														getXmlElementData(elementchild1, "cell-identity"));
												objtableData.put("coloc-covered-cell-num",
														elementchild2.getElementsByTagName("coloc-covered-cell-num")
																.item(z).getTextContent());
												tabelData5.add(objtableData);
											}
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild1, "cell-identity"));
											objtableData.put("ca-available-type",
													getXmlElementData(elementchild2, "ca-available-type"));
											objtableData.put("p-cell-only-flag",
													getXmlElementData(elementchild2, "p-cell-only-flag").toUpperCase());
											objtableData.put("max-dl-ca-cc-num",
													getXmlElementData(elementchild2, "max-dl-ca-cc-num"));
											objtableData.put("max-ul-ca-cc-num",
													getXmlElementData(elementchild2, "max-ul-ca-cc-num"));

											tabelData6.add(objtableData);

										}
									}

									childNodeList2 = elementchild1.getElementsByTagName("prach-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild1, "cell-identity"));
											objtableData.put("preamble-receiver-target-power",
													getXmlElementData(elementchild2, "preamble-receiver-target-power"));

											tabelData7.add(objtableData);
										}
									}

									childNodeList2 = elementchild1.getElementsByTagName("ssb-configuration");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild1, "cell-identity"));
											objtableData.put("ssb-freq-offset",
													getXmlElementData(elementchild2, "ssb-freq-offset"));
											objtableData.put("ssb-freq-config-mode",
													getXmlElementData(elementchild2, "ssb-freq-config-mode"));

											tabelData12.add(objtableData);
										}
									}

									childNodeList2 = elementchild1.getElementsByTagName("drx-config-du-cell");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											NodeList childNodeList2x = elementchild2
													.getElementsByTagName("drx-profile-du");
											for (int jx = 0; jx < childNodeList2x.getLength(); jx++) {

												Node ChildNode2x = childNodeList2x.item(jx);
												if (Node.ELEMENT_NODE == ChildNode2x.getNodeType()) {

													Element elementchild2x = (Element) ChildNode2x;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													objtableData.put("cell-identity",
															getXmlElementData(elementchild1, "cell-identity"));
													objtableData.put("drx-cycle",
															getXmlElementData(elementchild2x,
																	"drx-cycle"));
													objtableData.put("drx-on-duration-timer-msec-normal",
															getXmlElementData(elementchild2x,
																	"drx-on-duration-timer-msec-normal"));
													objtableData.put("drx-inactivity-timer-normal", getXmlElementData(
															elementchild2x, "drx-inactivity-timer-normal"));

													tabelData13.add(objtableData);
												}
											}

										}
									}

								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("gutran-du-qci");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("qci", getXmlElementData(elementchild, "qci"));
							objtableData.put("prioritised-bitrate",
									getXmlElementData(elementchild, "prioritised-bitrate"));

							tabelData8.add(objtableData);

						}
					}

					childNodeList = element.getElementsByTagName("rlc-functions");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeListx = elementchild.getElementsByTagName("drb-rlc-info-func");

							for (int jx = 0; jx < childNodeListx.getLength(); jx++) {

								Node ChildNodex = childNodeListx.item(jx);
								if (Node.ELEMENT_NODE == ChildNodex.getNodeType()) {

									Element elementchildx = (Element) ChildNodex;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									objtableData.put("config-type",
											getXmlElementData(elementchildx, "config-type"));
									objtableData.put("qci",
											getXmlElementData(elementchildx, "qci"));
									objtableData.put("gnb-timer-poll-retransmit",
											getXmlElementData(elementchildx, "gnb-timer-poll-retransmit"));
									objtableData.put("ue-t-reassembly",
											getXmlElementData(elementchildx, "ue-t-reassembly"));
									objtableData.put("ue-timer-status-prohibit",
											getXmlElementData(elementchildx, "ue-timer-status-prohibit"));

									tabelData14.add(objtableData);

								}
							}

						}
					}

					childNodeList = element.getElementsByTagName("endc-bc-information");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode2x = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode2x.getNodeType()) {

							Element elementchild = (Element) ChildNode2x;

							NodeList childNodeListx = elementchild.getElementsByTagName("endc-bc-information-entries");

							for (int jx = 0; jx < childNodeListx.getLength(); jx++) {

								Node ChildNodex = childNodeListx.item(jx);
								if (Node.ELEMENT_NODE == ChildNodex.getNodeType()) {

									Element elementchildx = (Element) ChildNodex;

									NodeList childNodeList2x = elementchildx.getElementsByTagName("band-parameters-nr");

									for (int jy = 0; jy < childNodeList2x.getLength(); jy++) {

										Node ChildNode2y = childNodeList2x.item(jy);
										if (Node.ELEMENT_NODE == ChildNode2y.getNodeType()) {

											Element elementchildkx = (Element) ChildNode2y;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("index",
													getXmlElementData(elementchildx, "index"));
											objtableData.put("band-indicator-index",
													getXmlElementData(elementchildkx, "band-indicator-index"));
											objtableData.put("band-indicator-nr",
													getXmlElementData(elementchildkx, "band-indicator-nr"));
											objtableData.put("ca-bandwidth-class-dl-nr",
													getXmlElementData(elementchildkx, "ca-bandwidth-class-dl-nr"));
											objtableData.put("ca-bandwidth-class-ul-nr",
													getXmlElementData(elementchildkx, "ca-bandwidth-class-ul-nr"));


											tabelData16.add(objtableData);

										}
									}

								}
							}

						}
					}
					
					
					
					

					childNodeList = element.getElementsByTagName("endc-bc-information");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode2x = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode2x.getNodeType()) {

							Element elementchild = (Element) ChildNode2x;

							NodeList childNodeListx = elementchild.getElementsByTagName("endc-bc-information-entries");

							for (int jx = 0; jx < childNodeListx.getLength(); jx++) {

								Node ChildNodex = childNodeListx.item(jx);
								if (Node.ELEMENT_NODE == ChildNodex.getNodeType()) {

									Element elementchildx = (Element) ChildNodex;

									NodeList childNodeList2x = elementchildx.getElementsByTagName("band-parameters-eutra");

									for (int jy = 0; jy < childNodeList2x.getLength(); jy++) {

										Node ChildNode2y = childNodeList2x.item(jy);
										if (Node.ELEMENT_NODE == ChildNode2y.getNodeType()) {

											Element elementchildkx = (Element) ChildNode2y;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("index",
													getXmlElementData(elementchildx, "index"));
											objtableData.put("band-indicator-index",
													getXmlElementData(elementchildkx, "band-indicator-index"));
											objtableData.put("band-indicator-eutra",
													getXmlElementData(elementchildkx, "band-indicator-eutra"));
											objtableData.put("ca-bandwidth-class-dl-eutra",
													getXmlElementData(elementchildkx, "ca-bandwidth-class-dl-eutra"));
											objtableData.put("ca-bandwidth-class-ul-eutra",
													getXmlElementData(elementchildkx, "ca-bandwidth-class-ul-eutra"));


											tabelData15.add(objtableData);

										}
									}

								}
							}

						}
					}
					
					

				}

			}

			nodeList = document.getElementsByTagName("csl-configuration");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("csl-tce-ems-server");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("csl-tce-ems-server-port",
									getXmlElementData(elementchild, "csl-tce-ems-server-port"));
							objtableData.put("csl-tce-ems-server-option",
									getXmlElementData(elementchild, "csl-tce-ems-option"));

							tabelData9.add(objtableData);
						}
					}

					childNodeList = element.getElementsByTagName("csl-tce-server");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("csl-tce-server-ip-address",
									getXmlElementData(elementchild, "csl-tce-server-ip-address"));
							objtableData.put("csl-tce-server-port",
									getXmlElementData(elementchild, "csl-tce-server-port"));
							objtableData.put("csl-tce-option", getXmlElementData(elementchild, "csl-tce-option"));

							tabelData10.add(objtableData);
						}
					}
				}
			}

			nodeList = document.getElementsByTagName("tssi");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("tssi-info");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("modem-id", getXmlElementData(elementchild, "modem-id"));
							objtableData.put("cell-num", getXmlElementData(elementchild, "cell-num"));
							objtableData.put("path", getXmlElementData(elementchild, "path"));
							objtableData.put("tssi", getXmlElementData(elementchild, "tssi"));

							tabelData11.add(objtableData);
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "AU_20A_Param_Checks"
					+ "</b></td></tr>\n");

			String entry = "ul-mimo-configuration";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList1, entry, tabelData1));

			entry = "ul-power-control-config";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList2, entry, tabelData2));

			entry = "beam-management";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList3, entry, tabelData3));

			entry = "cell-cac-info";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList4, entry, tabelData4));

			entry = "coloc-covered-cell-num";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList5, entry, tabelData5));

			entry = "nr-carrier-aggregation";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList6, entry, tabelData6));

			entry = "prach-config";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList7, entry, tabelData7));

			entry = "logical-channel-config";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList8, entry, tabelData8));

			entry = "csl-tce-ems-server";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList9, entry, tabelData9));

			entry = "csl-tce-server";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList10, entry, tabelData10));

			entry = "tssi-info";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList11, entry, tabelData11));

			entry = "ssb-configuration";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList12, entry, tabelData12));
			entry = "drx-config-du-cell";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList13, entry, tabelData13));

			entry = "rlc-functions";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList14, entry, tabelData14));
			
			entry = "band-parameters-eutra";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList15, entry, tabelData15));
			
			entry = "band-parameters-nr";
			htmlContent.append(createHtmltableAU20AParamCheck(headerList16, entry, tabelData16));

			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + "ACPF_A1_A2_A3_Incl_NR_UL_checks" + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	StringBuilder createHtmltableAU20AParamCheck(LinkedHashSet<String> headerList, String command,
			List<LinkedHashMap<String, String>> tabelData) {
		StringBuilder htmlContent = new StringBuilder();

		htmlContent
				.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData) {
			tableData.append("<tr>\n");

			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

				tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);

		return htmlContent;
	}

	public StringBuilder getEndc20A0SwVersion(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);

			LinkedHashSet<String> enbSites = getEnbsiteIds(enbId, dbcollectionFileName);

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("</table>\n");
			if (!ObjectUtils.isEmpty(enbSites)) {
				for (String enbSite : enbSites) {
					String commandName = "eNB_" + enbSite;
					enbDetailsHtml(outputLog, htmlContent, commandName);
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public void enbDetailsHtml(String outputLog, StringBuilder htmlContent, String command) {

		try {
			String outputEnbLog = StringUtils.substringAfter(outputLog, command);
			outputEnbLog = StringUtils.substringBefore(outputEnbLog, XmlCommandsConstants.ENDTEXT5GENB);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputEnbLog = "<parent>" + outputEnbLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputEnbLog)));
			String sourceTagf1 = "external-new-radio-cell";
			String sourceTagx2 = "term-point-to-gnb";

			List<String> externalNewRadioCellHeaderParamList = new ArrayList<>();
			externalNewRadioCellHeaderParamList.add("cell-num");
			externalNewRadioCellHeaderParamList.add("relation-index");
			externalNewRadioCellHeaderParamList.add("gnb-id-bit-length");
			externalNewRadioCellHeaderParamList.add("gnb-id");
			externalNewRadioCellHeaderParamList.add("target-cell-id-nr");
			externalNewRadioCellHeaderParamList.add("mcc");
			externalNewRadioCellHeaderParamList.add("mnc");
			externalNewRadioCellHeaderParamList.add("phy-cell-id-nr");
			externalNewRadioCellHeaderParamList.add("duplex-type");
			externalNewRadioCellHeaderParamList.add("arfcn-ul");
			externalNewRadioCellHeaderParamList.add("arfcn-dl");
			externalNewRadioCellHeaderParamList.add("bandwidth-ul-scs");
			externalNewRadioCellHeaderParamList.add("bandwidth-dl-scs");
			externalNewRadioCellHeaderParamList.add("bandwidth-ul-nrb");
			externalNewRadioCellHeaderParamList.add("bandwidth-dl-nrb");
			externalNewRadioCellHeaderParamList.add("is-remove-allowed");
			externalNewRadioCellHeaderParamList.add("is-en-dc-allowed");
			externalNewRadioCellHeaderParamList.add("owner-type");
			externalNewRadioCellHeaderParamList.add("current-rank");
			externalNewRadioCellHeaderParamList.add("previous-rank");
			externalNewRadioCellHeaderParamList.add("is-colocated");

			List<LinkedHashMap<String, String>> externalNewRadioCellList = new ArrayList<>();
			NodeList nodeListNewRadio = document.getElementsByTagName("external-new-radio-cell");
			for (int i = 0; i < nodeListNewRadio.getLength(); i++) {
				Node inChildNode = nodeListNewRadio.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					if (!(element.getElementsByTagName("plmn-identity-list").getLength() > 0)) {

						LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
						for (String headerName : externalNewRadioCellHeaderParamList) {
							objtableData.put(headerName, getXmlElementData(element, headerName));
						}
						externalNewRadioCellList.add(objtableData);
					}

				}
			}

			List<String> termPointToGnbHeaderList = new ArrayList<>();
			termPointToGnbHeaderList.add("neighbor-gnb-index");
			termPointToGnbHeaderList.add("no-x2");
			termPointToGnbHeaderList.add("gnb-id-bit-length");
			termPointToGnbHeaderList.add("gnb-id");
			termPointToGnbHeaderList.add("mcc");
			termPointToGnbHeaderList.add("mnc");
			termPointToGnbHeaderList.add("ip-ver");
			termPointToGnbHeaderList.add("neighbor-gnb-ipv6");
			termPointToGnbHeaderList.add("secondary-neighbor-gnb-ipv6");
			termPointToGnbHeaderList.add("owner-type");
			termPointToGnbHeaderList.add("current-x2-rank");
			termPointToGnbHeaderList.add("previous-x2-rank");
			termPointToGnbHeaderList.add("no-remove");
			termPointToGnbHeaderList.add("is-samsung-gnb");

			List<LinkedHashMap<String, String>> termPointToGnbList = new ArrayList<>();
			NodeList termPointToGnb = document.getElementsByTagName("term-point-to-gnb");
			for (int i = 0; i < termPointToGnb.getLength(); i++) {
				Node inChildNode = termPointToGnb.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					for (String headerName : termPointToGnbHeaderList) {
						objtableData.put(headerName, getXmlElementData(element, headerName));
					}
					termPointToGnbList.add(objtableData);

				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + externalNewRadioCellHeaderParamList.size() + " bgcolor=#EEEEEE><b>"
					+ command + "</b></td></tr>\n");

			String tableHeaderExternalNewRadio = "";
			tableHeaderExternalNewRadio = tableHeaderExternalNewRadio + "<tr>\n";
			for (String headerName : externalNewRadioCellHeaderParamList) {
				tableHeaderExternalNewRadio = tableHeaderExternalNewRadio + "<th align=center>" + headerName
						+ "</th>\n";
			}

			tableHeaderExternalNewRadio = tableHeaderExternalNewRadio + "</tr>\n";
			String tableDataExternalNewRadio = "";

			for (LinkedHashMap<String, String> resultTableDataList : externalNewRadioCellList) {
				tableDataExternalNewRadio = tableDataExternalNewRadio + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : resultTableDataList.entrySet()) {

					tableDataExternalNewRadio = tableDataExternalNewRadio + "<td align=center>"
							+ resultTableData.getValue() + "</td>\n";

				}
				tableDataExternalNewRadio = tableDataExternalNewRadio + "</tr>\n";

			}

			String tableHeadertermpoint = "";
			tableHeadertermpoint = tableHeadertermpoint + "<tr>\n";
			for (String headerName : termPointToGnbHeaderList) {
				tableHeadertermpoint = tableHeadertermpoint + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeadertermpoint = tableHeadertermpoint + "</tr>\n";
			String tableDatatermpoint = "";

			for (LinkedHashMap<String, String> resultTableDataList : termPointToGnbList) {
				tableDatatermpoint = tableDatatermpoint + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : resultTableDataList.entrySet()) {

					tableDatatermpoint = tableDatatermpoint + "<td align=center>" + resultTableData.getValue()
							+ "</td>\n";

				}
				tableDatatermpoint = tableDatatermpoint + "</tr>\n";

			}

			String newRadioEntries = "<tr><td colspan=" + externalNewRadioCellHeaderParamList.size()
					+ " bgcolor=#EEEEEE><b>" + sourceTagf1 + "</b></td></tr>\n";
			String termPointEntries = "<tr><td colspan=" + externalNewRadioCellHeaderParamList.size()
					+ " bgcolor=#EEEEEE><b>" + sourceTagx2 + "</b></td></tr>\n";

			htmlContent.append(newRadioEntries);
			htmlContent.append(tableHeaderExternalNewRadio);
			htmlContent.append(tableDataExternalNewRadio);

			htmlContent.append(termPointEntries);
			htmlContent.append(tableHeadertermpoint);
			htmlContent.append(tableDatatermpoint);
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
	}

	private LinkedHashSet<String> getEnbsiteIds(String neId, String dbcollectionFileName) {
		LinkedHashSet<String> neIdList = new LinkedHashSet<>();

		try {

			List<CIQDetailsModel> listCIQDetailsModel = getCiqDetailsForRuleValidation(neId, dbcollectionFileName);

			if (!ObjectUtils.isEmpty(listCIQDetailsModel)
					&& listCIQDetailsModel.get(0).getCiqMap().containsKey("NE ID AU")) {
				String neidau = listCIQDetailsModel.get(0).getCiqMap().get("NE ID AU").getHeaderValue();

				List<CIQDetailsModel> listCIQDetailsModelDetails = getCiqDetailsForRuleValidation(neidau,
						dbcollectionFileName);

				if (!ObjectUtils.isEmpty(listCIQDetailsModelDetails)) {

					for (CIQDetailsModel objCIQDetailsModel : listCIQDetailsModelDetails) {

						if (objCIQDetailsModel.getCiqMap().containsKey("eNB_ID") && StringUtils
								.isNotEmpty(objCIQDetailsModel.getCiqMap().get("eNB_ID").getHeaderValue())) {
							neIdList.add(objCIQDetailsModel.getCiqMap().get("eNB_ID").getHeaderValue()
									.replaceAll("^0+(?!$)", ""));
						}
					}

					if (ObjectUtils.isEmpty(neIdList)) {
						for (CIQDetailsModel objCIQDetailsModel : listCIQDetailsModelDetails) {

							if (objCIQDetailsModel.getCiqMap().containsKey("Samsung eNB_ID") && StringUtils.isNotEmpty(
									objCIQDetailsModel.getCiqMap().get("Samsung eNB_ID").getHeaderValue())) {
								neIdList.add(objCIQDetailsModel.getCiqMap().get("Samsung eNB_ID").getHeaderValue()
										.replaceAll("^0+(?!$)", ""));
							}
						}
					}

					if (ObjectUtils.isEmpty(neIdList)) {
						for (CIQDetailsModel objCIQDetailsModel : listCIQDetailsModelDetails) {

							if (objCIQDetailsModel.getCiqMap().containsKey("Nokia eNB_ID") && StringUtils
									.isNotEmpty(objCIQDetailsModel.getCiqMap().get("Nokia eNB_ID").getHeaderValue())) {
								neIdList.add(objCIQDetailsModel.getCiqMap().get("Nokia eNB_ID").getHeaderValue()
										.replaceAll("^0+(?!$)", ""));
							}
						}
					}
				}

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}

		return neIdList;

	}

	public StringBuilder getEndc20B0SwVersion(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);

			LinkedHashSet<String> enbSites = getEnbsiteIds(enbId, dbcollectionFileName);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("</table>\n");
			if (!ObjectUtils.isEmpty(enbSites)) {
				for (String enbSite : enbSites) {
					String commandName = "eNB_" + enbSite;
					enbDetails20BHtml(outputLog, htmlContent, commandName);
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public void enbDetails20BHtml(String outputLog, StringBuilder htmlContent, String command) {

		try {
			String outputEnbLog = StringUtils.substringAfter(outputLog, command);
			outputEnbLog = StringUtils.substringBefore(outputEnbLog, XmlCommandsConstants.ENDTEXT5GENB);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputEnbLog = "<parent>" + outputEnbLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputEnbLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("neighbor-gnb-index");
			headerList1.add("no-x2");
			headerList1.add("gnb-id-bit-length");
			headerList1.add("gnb-id");
			headerList1.add("ip-ver");
			headerList1.add("neighbor-gnb-ipv6");
			headerList1.add("secondary-neighbor-gnb-ipv6");
			headerList1.add("owner-type");
			headerList1.add("current-x2-rank");
			headerList1.add("previous-x2-rank");
			headerList1.add("no-remove");
			headerList1.add("is-samsung-gnb");
			headerList1.add("interface-state");
			headerList1.add("mcc");
			headerList1.add("mnc");
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("dc-index");
			headerList2.add("bearer-type-usage");
			headerList2.add("qci");
			headerList2.add("arp");
			headerList2.add("bearer-type");
			headerList2.add("nr-band-freq");
			headerList2.add("priority");
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("cell-num");
			headerList3.add("non-gbr-qci");
			headerList3.add("nr-band-freq");
			headerList3.add("priority");
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("requested-frequency-band1");
			headerList4.add("requested-frequency-band2");
			headerList4.add("requested-frequency-band3");
			headerList4.add("requested-frequency-band4");
			headerList4.add("requested-frequency-band5");
			headerList4.add("requested-frequency-band6");
			headerList4.add("requested-frequency-band7");
			headerList4.add("requested-frequency-band8");
			headerList4.add("requested-frequency-band9");
			headerList4.add("requested-frequency-band10");
			headerList4.add("requested-frequency-band11");
			headerList4.add("requested-frequency-band12");
			headerList4.add("requested-frequency-band13");
			headerList4.add("requested-frequency-band14");
			headerList4.add("requested-frequency-band15");
			headerList4.add("requested-frequency-band16");
			headerList4.add("requested-nr-band1");
			headerList4.add("requested-nr-band2");
			headerList4.add("requested-nr-band3");
			headerList4.add("requested-nr-band4");
			headerList4.add("requested-nr-band5");
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-num");
			headerList5.add("fa-index");
			headerList5.add("duplex-type");
			headerList5.add("arfcn-nr-dl");
			headerList5.add("arfcn-nr-ul");
			headerList5.add("mtc-ssb-nr-period");
			headerList5.add("mtc-ssb-nr-offset");
			headerList5.add("mtc-ssb-nr-duration");
			headerList5.add("sub-carrier-spacing-ssb");
			headerList5.add("abs-thresh-rs-index-rsrp");
			headerList5.add("abs-thresh-rs-index-rsrq");
			headerList5.add("abs-thresh-rs-index-sinr");
			headerList5.add("max-rs-index-cell-qual");
			headerList5.add("quantity-config-set");
			headerList5.add("nr-band");
			headerList5.add("offset-freq");
			headerList5.add("preference0");
			headerList5.add("preference1");
			headerList5.add("preference2");
			headerList5.add("preference3");
			headerList5.add("preference4");
			headerList5.add("preference5");
			headerList5.add("min-nrt-ratio-carrier");
			headerList5.add("anr-ue-search-rate");
			headerList5.add("arfcn-point-a-nr-ul");
			headerList5.add("arfcn-point-a-nr-dl");
			headerList5.add("mo-priority");
			headerList5.add("nr-frequency-low");
			headerList5.add("nr-frequency-high");
			headerList5.add("endc-priority-group");
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cell-num");
			headerList6.add("plmn-index");
			headerList6.add("plmn-usage");
			headerList6.add("user-plane-optimization-emtc-enable");
			headerList6.add("control-plane-optimization-emtc-enable");
			headerList6.add("attach-without-pdn-connectivity");
			headerList6.add("upper-layer-indication");
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("cell-num");
			headerList7.add("endc-support");
			headerList7.add("endc-operation-mode");
			headerList7.add("freq-distribute-option");
			headerList7.add("num-lte-freq-for-fr1");
			headerList7.add("num-lte-freq-for-fr2");
			headerList7.add("harmonics-imd-nr-fr");
			headerList7.add("endc-anchor-type");
			headerList7.add("data-traffic-threshold");
			headerList7.add("imd-option");
			headerList7.add("gnb-conf-volte-regular");
			headerList7.add("gnb-conf-volte-emergency");
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("cell-num");
			headerList8.add("purpose");
			headerList8.add("fa-index");
			headerList8.add("qci-group-index");
			headerList8.add("b1-enable");
			headerList8.add("b1-threshold-nr-rsrp");
			headerList8.add("b1-threshold-nr-rsrq");
			headerList8.add("b1-threshold-nr-sinr");
			headerList8.add("hysteresis");
			headerList8.add("time-to-trigger");
			headerList8.add("trigger-quantity");
			headerList8.add("report-quantity-cell-nr-ss-rsrp");
			headerList8.add("report-quantity-cell-nr-ss-rsrq");
			headerList8.add("report-quantity-cell-nr-ss-sinr");
			headerList8.add("max-report-rs-index");
			headerList8.add("report-quantity-rs-index-nr-ss-rsrp");
			headerList8.add("report-quantity-rs-index-nr-ss-rsrq");
			headerList8.add("report-quantity-rs-index-nr-ss-sinr");
			headerList8.add("report-interval");
			headerList8.add("report-amount");
			headerList8.add("b1-report-on-leave");
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("cell-num");
			headerList9.add("relation-index");
			headerList9.add("gnb-id-bit-length");
			headerList9.add("gnb-id");
			headerList9.add("target-cell-id-nr");
			headerList9.add("phy-cell-id-nr");
			headerList9.add("five-gs-tac");
			headerList9.add("configured-tac");
			headerList9.add("duplex-type");
			headerList9.add("arfcn-ul");
			headerList9.add("arfcn-dl");
			headerList9.add("bandwidth-ul-scs");
			headerList9.add("bandwidth-dl-scs");
			headerList9.add("bandwidth-ul-nrb");
			headerList9.add("bandwidth-dl-nrb");
			headerList9.add("ul-nr-frequency-band-0");
			headerList9.add("dl-nr-frequency-band-0");
			headerList9.add("ul-nr-frequency-band-1");
			headerList9.add("dl-nr-frequency-band-1");
			headerList9.add("ul-nr-frequency-band-2");
			headerList9.add("dl-nr-frequency-band-2");
			headerList9.add("ul-nr-frequency-band-3");
			headerList9.add("dl-nr-frequency-band-3");
			headerList9.add("is-remove-allowed");
			headerList9.add("is-en-dc-allowed");
			headerList9.add("owner-type");
			headerList9.add("current-rank");
			headerList9.add("previous-rank");
			headerList9.add("is-colocated");
			headerList9.add("is-colocated-for-es-cell-off");
			headerList9.add("ssb-frequency");
			headerList9.add("mcc");
			headerList9.add("mnc");
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("cell-num");
			headerList10.add("relation-index");
			headerList10.add("plmn-identity-list-index");
			headerList10.add("mcc");
			headerList10.add("mnc");
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("cell-num");
			headerList11.add("cell-size");
			headerList11.add("hnb-name");
			headerList11.add("additional-spectrum-emission");
			headerList11.add("ims-emergency-support");
			headerList11.add("barring-state");
			headerList11.add("category-0-allowed");
			headerList11.add("tracking-area-code");
			headerList11.add("cell-dl-total-power");
			headerList11.add("plmn-info-list-r15-usage");
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("config-type");
			headerList12.add("qci");
			headerList12.add("rlc-mode");
			
			/*
			 * headerList12.add("enb-timer-poll-retransmit");
			 * headerList12.add("enb-poll-pdu"); headerList12.add("enb-poll-byte");
			 * headerList12.add("enb-max-retx-threshold");
			 * headerList12.add("enb-timer-reordering");
			 * headerList12.add("enb-timer-status-prohibit");
			 * headerList12.add("ue-timer-poll-retransmit");
			 * headerList12.add("ue-poll-pdu"); headerList12.add("ue-poll-byte");
			 * headerList12.add("ue-max-retx-threshold");
			 * headerList12.add("ue-timer-reordering");
			 * headerList12.add("ue-timer-status-prohibit");
			 * headerList12.add("sn-field-length");
			 */
			 

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// term-point-to-gnb entries
					NodeList childNodeList = element.getElementsByTagName("term-point-to-gnb");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							headerList1.forEach(header -> {
								objtableData.put(header, getXmlElementData(elementchild, header));
							});
							tabelData1.add(objtableData);
						}
					}

					childNodeList = element.getElementsByTagName("new-radio-network");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// dc-control-param entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("dc-control-param");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList2.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData2.add(objtableData);
								}
							}

							// external-new-radio-cell entries
							childNodeList1 = elementchild.getElementsByTagName("external-new-radio-cell");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList9.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData9.add(objtableData);

									// plmn-identity-list entries
									NodeList childNodeList2 = elementchild1.getElementsByTagName("plmn-identity-list");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData1 = new LinkedHashMap<>();
											Iterator<String> itr = headerList10.iterator();
											String header = itr.next();
											objtableData1.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData1.put(header, getXmlElementData(elementchild1, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData1.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData10.add(objtableData1);
										}
									}
								}
							}

						}
					}

					childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("cell-endc-function");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											// en-dc-meas-priority entries
											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("en-dc-meas-priority");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList3.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData3.add(objtableData);
												}
											}

											// endc-cell-info entries
											childNodeList3 = elementchild2.getElementsByTagName("endc-cell-info");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList7.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData7.add(objtableData);
												}
											}
										}
									}

									// nr-fa-prior-info-func entries
									childNodeList2 = elementchild1.getElementsByTagName("nr-frequency-relation");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("nr-fa-information");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;
													NodeList childNodeList4 = elementchild3
															.getElementsByTagName("nr-fa-prior-info-func");

													for (int n = 0; n < childNodeList4.getLength(); n++) {
														Node ChildNode4 = childNodeList4.item(n);

														if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
															Element elementchild4 = (Element) ChildNode4;

															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															Iterator<String> itr = headerList5.iterator();
															String header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild1, header));

															header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild3, header));

															while (itr.hasNext()) {
																header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild4, header));
															}
															tabelData5.add(objtableData);

														}
													}
												}
											}
										}
									}

									// cell-plmn-info entries
									childNodeList2 = elementchild1.getElementsByTagName("cell-plmn-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList6.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData6.add(objtableData);
										}
									}

									// nr-b1-criteria-info entries
									childNodeList2 = elementchild1.getElementsByTagName("ue-measurement-control");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("nr-b1-criteria-info");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList8.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData8.add(objtableData);

												}
											}
										}
									}

									// cell-plmn-info entries
									childNodeList2 = elementchild1.getElementsByTagName("eutran-cell-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList11.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData11.add(objtableData);
										}
									}
								}
							}
						}
					}

					// ca-requested-frequency-band-inf entries
					childNodeList = element.getElementsByTagName("carrier-aggregation");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild
									.getElementsByTagName("ca-requested-frequency-band-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList4.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData4.add(objtableData);
								}
							}
						}
					}

					childNodeList = element.getElementsByTagName("rlc");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// dc-control-param entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("rlc-info-func");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList12.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData12.add(objtableData);
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String entry = "term-point-to-gnb";
			HashMap<String, List<String>> validationMap = new HashMap<>();
			validationMap.put("no-x2", Arrays.asList("false", "0"));
			validationMap.put("no-remove", Arrays.asList("remove-allowed"));
			validationMap.put("is-samsung-gnb", Arrays.asList("1", "true"));
			htmlContent.append(createHtmltableendc(headerList1, entry, tabelData1, validationMap));

			entry = "dc-control-param";
			validationMap = new HashMap<>();
			validationMap.put("bearer-type-usage", Arrays.asList("use"));
			validationMap.put("priority", Arrays.asList("7"));
			htmlContent.append(createHtmltableendc(headerList2, entry, tabelData2, validationMap));

			entry = "en-dc-meas-priority";
			validationMap = new HashMap<>();
			htmlContent.append(createHtmltableendc(headerList3, entry, tabelData3, validationMap));

			entry = "ca-requested-frequency-band-info";
			validationMap = new HashMap<>();
			validationMap.put("requested-nr-band1", Arrays.asList("261"));
			validationMap.put("requested-nr-band2", Arrays.asList("260", "5"));
			validationMap.put("requested-nr-band3", Arrays.asList("5"));
			htmlContent.append(createHtmltableendc(headerList4, entry, tabelData4, validationMap));

			entry = "nr-fa-prior-info-func";
			LinkedHashMap<String, LinkedHashMap<String, String>> validationMap1prim = new LinkedHashMap<>();
			LinkedHashMap<String, String> temp = new LinkedHashMap<>();
			temp.put("nr-band", "261");
			validationMap1prim.put("0", temp);
			temp = new LinkedHashMap<>();
			temp.put("nr-band", "260");
			validationMap1prim.put("1", temp);
			htmlContent.append(createHtmltableDSS1prim(headerList5, entry, "fa-index", tabelData5, validationMap1prim));

			entry = "cell-plmn-info";
			validationMap = new HashMap<>();
			validationMap.put("plmn-usage", Arrays.asList("enable"));
			validationMap.put("upper-layer-indication", Arrays.asList("enable"));
			htmlContent.append(createHtmltableendc(headerList6, entry, tabelData6, validationMap));

			entry = "endc-cell-info";
			validationMap = new HashMap<>();
			validationMap.put("endc-support", Arrays.asList("true"));
			htmlContent.append(createHtmltableendc(headerList7, entry, tabelData7, validationMap));

			entry = "nr-b1-criteria-info";
			validationMap = new HashMap<>();
			validationMap.put("hysteresis", Arrays.asList("0"));
			validationMap.put("b1-threshold-nr-rsrp", Arrays.asList("51"));
			htmlContent.append(createHtmltableendc(headerList8, entry, tabelData8, validationMap));

			entry = "external-new-radio-cell";
			validationMap = new HashMap<>();
			htmlContent.append(createHtmltableendc(headerList9, entry, tabelData9, validationMap));

			entry = "plmn-identity-list";
			validationMap = new HashMap<>();
			htmlContent.append(createHtmltableendc(headerList10, entry, tabelData10, validationMap));

			entry = "eutran-cell-info";
			validationMap = new HashMap<>();
			validationMap.put("plmn-info-list-r15-usage", Arrays.asList("use"));
			htmlContent.append(createHtmltableendc(headerList11, entry, tabelData11, validationMap));

			entry = "rlc-info-func";
			validationMap = new HashMap<>();
			validationMap.put("qci", Arrays.asList("8", "9"));
			htmlContent.append(createHtmltableendc(headerList12, entry, tabelData12, validationMap));

			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + "ACPF_A1_A2_A3_Incl_NR_UL_checks" + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
	}

	StringBuilder createHtmltableendc(LinkedHashSet<String> headerList, String command,
			List<LinkedHashMap<String, String>> tabelData, HashMap<String, List<String>> validationMap) {
		StringBuilder htmlContent = new StringBuilder();

		htmlContent
				.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData) {
			tableData.append("<tr>\n");

			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (validationMap.containsKey(key)) {
					if (validationMap.get(key).contains(value)) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);

		return htmlContent;
	}

	public StringBuilder getvDUAudit(String fullOutputLog, String command, String enbId, String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry9 = "pod entries sync";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("pod-type");
			headerList9.add("pod-id");
			headerList9.add("holdover-timer-threshold");
			headerList9.add("sync-state");

			String entry6 = "end-point-dss";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("dss-index");
			headerList6.add("enb-id");
			headerList6.add("remote-ip-address");
			headerList6.add("secondary-remote-ip-address");
			headerList6.add("sctp-state");

			String entry8 = "gutran-du-cell-entries";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("cell-identity");
			headerList8.add("cell-num");
			headerList8.add("administrative-state");
			headerList8.add("operational-state");
			headerList8.add("activation-state");
			headerList8.add("dpp-id");
			headerList8.add("user-label");
			headerList8.add("test-flag");
			headerList8.add("subcarrier-spacing-common");
			headerList8.add("dl-subcarrier-spacing");
			headerList8.add("ul-subcarrier-spacing");

			String entry5 = "dss-interface-conf-idle";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-identity");
			headerList5.add("target-enb-cell-identity");

			String entry2 = "dl-dmrs-config-idle";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("cell-identity");
			headerList2.add("dmrs-additional-position");

			String entry11 = "ul-dmrs-config-idle";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("cell-identity");
			headerList11.add("dmrs-additional-position-ul");

			String entry3 = "dl-harq-config";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("cell-identity");
			headerList3.add("max-num-harq-transmission-dl");
			headerList3.add("max-num-harq-transmission-msg4");

			String entry12 = "ul-harq-config";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("cell-identity");
			headerList12.add("max-num-harq-transmission-ul");
			headerList12.add("max-num-harq-transmission-msg3");
			headerList12.add("ul-harq-ir-support");

			String entry1 = "ul-link-adaptation-config";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("ul-256qam-enable");

			String entry13 = "ul-scheduling-common-config";
			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("cell-identity");
			headerList13.add("periodic-bsr-timer");

			String entry10 = "spectrum-sharing-scheduler-config";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("cell-identity");
			headerList10.add("spectrum-sharing");
			headerList10.add("dl-prb-usage-threshold-for-increasing-nr-resource");
			headerList10.add("ul-prb-usage-threshold-for-increasing-nr-resource");
			headerList10.add("dl-pdcch-fail-threshold-for-increasing-nr-resource");
			headerList10.add("ul-pdcch-fail-threshold-for-increasing-nr-resource");

			String entry4 = "dl-scheduling-priority";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("priority-level-index-dl");
			headerList4.add("non-gbr-pf-weight-dl");

			String entry7 = "end-point-f1c";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("gnb-cu-cp-name");
			headerList7.add("remote-ip-address");
			headerList7.add("secondary-remote-ip-address");
			headerList7.add("sctp-state");
			headerList7.add("f1-ap-state");

			String entry14 = "pod entries";
			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("pod-type");
			headerList14.add("pod-id");
			headerList14.add("pod-object-id");
			headerList14.add("operational-state");

			String entry15 = "active-alarm-entries";
			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("alarm-unit-type");
			headerList15.add("alarm-type");
			headerList15.add("location");
			headerList15.add("raised-time");
			headerList15.add("alarm-group");
			headerList15.add("probable-cause");
			headerList15.add("specific-problem");
			headerList15.add("severity");
			headerList15.add("alarm-code");
			headerList15.add("sequence-number");
			headerList15.add("time-info");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("sync");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															objtableData.put("pod-type",
																	getXmlElementData(elementchild5, "pod-type"));
															objtableData.put("pod-id",
																	getXmlElementData(elementchild5, "pod-id"));
															objtableData.put("holdover-timer-threshold",
																	getXmlElementData(elementchild6,
																			"holdover-timer-threshold"));
															objtableData.put("sync-state",
																	getXmlElementData(elementchild6, "sync-state"));
															tabelData9.add(objtableData);
														}
													}
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													objtableData.put("pod-type",
															getXmlElementData(elementchild5, "pod-type"));
													objtableData.put("pod-id",
															getXmlElementData(elementchild5, "pod-id"));
													objtableData.put("pod-object-id",
															getXmlElementData(elementchild5, "pod-object-id"));
													objtableData.put("operational-state",
															getXmlElementData(elementchild5, "operational-state"));
													if (!getXmlElementData(elementchild5, "pod-object-id")
															.equalsIgnoreCase("-")) {
														tabelData14.add(objtableData);
													}
												}
											}
										}
									}
								}
							}
						}
					}
					childNodeList2 = elementchild1.getElementsByTagName("gnb-du-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("end-point-dss");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									objtableData.put("dss-index", getXmlElementData(elementchild3, "dss-index"));
									objtableData.put("enb-id", getXmlElementData(elementchild3, "enb-id"));
									objtableData.put("remote-ip-address",
											getXmlElementData(elementchild3, "remote-ip-address"));
									objtableData.put("secondary-remote-ip-address",
											getXmlElementData(elementchild3, "secondary-remote-ip-address"));
									objtableData.put("sctp-state", getXmlElementData(elementchild3, "sctp-state"));
									tabelData6.add(objtableData);
								}
							}
							childNodeList3 = elementchild2.getElementsByTagName("gutran-du-cell");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3
											.getElementsByTagName("gutran-du-cell-entries");
									for (int m = 0; m < childNodeList4.getLength(); m++) {
										Node ChildNode4 = childNodeList4.item(m);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4
													.getElementsByTagName("dss-interface-conf-idle");
											for (int f = 0; f < childNodeList5.getLength(); f++) {
												Node ChildNode5 = childNodeList5.item(f);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													objtableData.put("cell-identity",
															getXmlElementData(elementchild4, "cell-identity"));
													objtableData.put("target-enb-cell-identity", getXmlElementData(
															elementchild5, "target-enb-cell-identity"));
													tabelData5.add(objtableData);
												}
											}

											childNodeList5 = elementchild4
													.getElementsByTagName("dl-physical-resource-config");
											for (int a = 0; a < childNodeList5.getLength(); a++) {
												Node ChildNode5 = childNodeList5.item(a);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("dl-dmrs-config-idle");
													for (int b = 0; b < childNodeList6.getLength(); b++) {
														Node ChildNode6 = childNodeList6.item(b);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															objtableData.put("cell-identity",
																	getXmlElementData(elementchild4, "cell-identity"));
															objtableData.put("dmrs-additional-position",
																	getXmlElementData(elementchild6,
																			"dmrs-additional-position"));
															tabelData2.add(objtableData);
														}
													}

												}
											}

											childNodeList5 = elementchild4
													.getElementsByTagName("ul-physical-resource-config");
											for (int a = 0; a < childNodeList5.getLength(); a++) {
												Node ChildNode5 = childNodeList5.item(a);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList9 = elementchild5
															.getElementsByTagName("ul-dmrs-config-idle");
													for (int b = 0; b < childNodeList9.getLength(); b++) {
														Node ChildNode7 = childNodeList9.item(b);
														if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
															Element elementchild6 = (Element) ChildNode7;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															objtableData.put("cell-identity",
																	getXmlElementData(elementchild4, "cell-identity"));
															objtableData.put("dmrs-additional-position-ul",
																	getXmlElementData(elementchild6,
																			"dmrs-additional-position-ul"));
															tabelData11.add(objtableData);

														}
													}

												}
											}
											childNodeList5 = elementchild4.getElementsByTagName("dl-scheduling-config");
											for (int a = 0; a < childNodeList5.getLength(); a++) {
												Node ChildNode5 = childNodeList5.item(a);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList7 = elementchild5
															.getElementsByTagName("dl-harq-config");
													for (int b = 0; b < childNodeList7.getLength(); b++) {
														Node ChildNode7 = childNodeList7.item(b);
														if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
															Element elementchild6 = (Element) ChildNode7;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															objtableData.put("cell-identity",
																	getXmlElementData(elementchild4, "cell-identity"));
															objtableData.put("max-num-harq-transmission-dl",
																	getXmlElementData(elementchild6,
																			"max-num-harq-transmission-dl"));
															objtableData.put("max-num-harq-transmission-msg4",
																	getXmlElementData(elementchild6,
																			"max-num-harq-transmission-msg4"));
															tabelData3.add(objtableData);

														}
													}

												}
											}

											childNodeList5 = elementchild4.getElementsByTagName("ul-scheduling-config");
											for (int a = 0; a < childNodeList5.getLength(); a++) {
												Node ChildNode5 = childNodeList5.item(a);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList10 = elementchild5
															.getElementsByTagName("ul-harq-config");
													for (int b = 0; b < childNodeList10.getLength(); b++) {
														Node ChildNode7 = childNodeList10.item(b);
														if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
															Element elementchild6 = (Element) ChildNode7;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															objtableData.put("cell-identity",
																	getXmlElementData(elementchild4, "cell-identity"));
															objtableData.put("max-num-harq-transmission-ul",
																	getXmlElementData(elementchild6,
																			"max-num-harq-transmission-ul"));
															objtableData.put("max-num-harq-transmission-msg3",
																	getXmlElementData(elementchild6,
																			"max-num-harq-transmission-msg3"));
															objtableData.put("ul-harq-ir-support", getXmlElementData(
																	elementchild6, "ul-harq-ir-support"));
															tabelData12.add(objtableData);

														}
													}

													childNodeList10 = elementchild5
															.getElementsByTagName("ul-link-adaptation-config");
													for (int b = 0; b < childNodeList10.getLength(); b++) {
														Node ChildNode7 = childNodeList10.item(b);
														if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
															Element elementchild6 = (Element) ChildNode7;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															objtableData.put("cell-identity",
																	getXmlElementData(elementchild4, "cell-identity"));
															objtableData.put("ul-256qam-enable", getXmlElementData(
																	elementchild6, "ul-256qam-enable"));
															tabelData1.add(objtableData);

														}
													}
													childNodeList10 = elementchild5
															.getElementsByTagName("ul-scheduling-common-config");
													for (int b = 0; b < childNodeList10.getLength(); b++) {
														Node ChildNode7 = childNodeList10.item(b);
														if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
															Element elementchild6 = (Element) ChildNode7;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															objtableData.put("cell-identity",
																	getXmlElementData(elementchild4, "cell-identity"));
															objtableData.put("periodic-bsr-timer", getXmlElementData(
																	elementchild6, "periodic-bsr-timer"));
															tabelData13.add(objtableData);

														}
													}

													childNodeList5 = elementchild4
															.getElementsByTagName("spectrum-sharing-scheduler-config");
													for (int r = 0; r < childNodeList5.getLength(); r++) {
														Node ChildNode5x = childNodeList5.item(a);
														if (Node.ELEMENT_NODE == ChildNode5x.getNodeType()) {
															Element elementchild5x = (Element) ChildNode5x;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															objtableData.put("cell-identity",
																	getXmlElementData(elementchild4, "cell-identity"));
															objtableData.put("spectrum-sharing", getXmlElementData(
																	elementchild5x, "spectrum-sharing"));

															objtableData.put(
																	"dl-prb-usage-threshold-for-increasing-nr-resource",
																	getXmlElementData(elementchild5x,
																			"dl-prb-usage-threshold-for-increasing-nr-resource"));

															objtableData.put(
																	"ul-prb-usage-threshold-for-increasing-nr-resource",
																	getXmlElementData(elementchild5x,
																			"ul-prb-usage-threshold-for-increasing-nr-resource"));

															objtableData.put(
																	"dl-pdcch-fail-threshold-for-increasing-nr-resource",
																	getXmlElementData(elementchild5x,
																			"dl-pdcch-fail-threshold-for-increasing-nr-resource"));

															objtableData.put(
																	"ul-pdcch-fail-threshold-for-increasing-nr-resource",
																	getXmlElementData(elementchild5x,
																			"ul-pdcch-fail-threshold-for-increasing-nr-resource"));

															tabelData10.add(objtableData);
														}
													}
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													objtableData.put("cell-identity",
															getXmlElementData(elementchild4, "cell-identity"));
													objtableData.put("cell-num",
															getXmlElementData(elementchild4, "cell-num"));
													objtableData.put("administrative-state",
															getXmlElementData(elementchild4, "administrative-state"));
													objtableData.put("operational-state",
															getXmlElementData(elementchild4, "operational-state"));
													objtableData.put("activation-state",
															getXmlElementData(elementchild4, "activation-state"));
													objtableData.put("dpp-id",
															getXmlElementData(elementchild4, "dpp-id"));
													objtableData.put("user-label",
															getXmlElementData(elementchild4, "user-label"));
													objtableData.put("test-flag",
															getXmlElementData(elementchild4, "test-flag"));
													objtableData.put("subcarrier-spacing-common", getXmlElementData(
															elementchild4, "subcarrier-spacing-common"));
													objtableData.put("dl-subcarrier-spacing",
															getXmlElementData(elementchild4, "dl-subcarrier-spacing"));
													objtableData.put("ul-subcarrier-spacing",
															getXmlElementData(elementchild4, "ul-subcarrier-spacing"));
													tabelData8.add(objtableData);
												}

											}
										}

									}

								}
							}
						}
					}

					NodeList nodelist = elementchild1.getElementsByTagName("dl-scheduling-parameter-config");
					for (int k = 0; k < nodelist.getLength(); k++) {
						Node ChildNode = nodelist.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							NodeList nodelist1 = elementchild6.getElementsByTagName("dl-scheduling-priority");
							for (int a = 0; a < nodelist1.getLength(); a++) {
								Node ChildNodex = nodelist1.item(a);
								if (Node.ELEMENT_NODE == ChildNodex.getNodeType()) {
									Element elementchild7 = (Element) ChildNodex;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									objtableData.put("priority-level-index-dl",
											getXmlElementData(elementchild7, "priority-level-index-dl"));
									objtableData.put("non-gbr-pf-weight-dl",
											getXmlElementData(elementchild7, "non-gbr-pf-weight-dl"));

									tabelData4.add(objtableData);

								}
							}
						}

					}

					NodeList nodelist1 = elementchild1.getElementsByTagName("end-point-f1c");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("gnb-cu-cp-name", getXmlElementData(elementchild6, "gnb-cu-cp-name"));
							objtableData.put("remote-ip-address",
									getXmlElementData(elementchild6, "remote-ip-address"));
							objtableData.put("secondary-remote-ip-address",
									getXmlElementData(elementchild6, "secondary-remote-ip-address"));
							objtableData.put("sctp-state", getXmlElementData(elementchild6, "sctp-state"));
							objtableData.put("f1-ap-state", getXmlElementData(elementchild6, "f1-ap-state"));
							tabelData7.add(objtableData);

						}

					}

					childNodeList2 = elementchild1.getElementsByTagName("fault-management");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("active-alarm");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3
											.getElementsByTagName("active-alarm-entries");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											for (String header : headerList15) {
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData15.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String gnbid = "";
			String neid = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("gNBID")) {
					gnbid = listOfCiqDetails.get(0).getCiqMap().get("gNBID").getHeaderValue();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue();
				}
			}

			List<String> keys = new ArrayList<>();
			keys.add("ul-256qam-enable");
			LinkedHashMap<String, LinkedHashMap<String, String>> validationMap = returnValidationList1prim("cellId",
					keys, "DSS_MOP_Parameters-2", gnbid, dbcollectionFileName, Arrays.asList("ul-256qam-enable"),
					"eNBId");

			htmlContent
					.append(createHtmltableDSS1prim(headerList1, entry1, "cell-identity", tabelData1, validationMap));

			HashMap<String, List<String>> validationMap1 = new LinkedHashMap<>();
			htmlContent.append(createHtmltableDSS(headerList2, entry2, tabelData2, validationMap1));

			keys = new ArrayList<>();
			keys.add("max-num-harq-transmission-dl");
			keys.add("max-num-harq-transmission-msg4");
			validationMap = returnValidationList1prim("cellId", keys, "DSS_MOP_Parameters-2", gnbid,
					dbcollectionFileName,
					Arrays.asList("max-num-harq-transmission-dl", "max-num-harq-transmission-msg4"), "eNBId");
			htmlContent
					.append(createHtmltableDSS1prim(headerList3, entry3, "cell-identity", tabelData3, validationMap));

			List<CIQDetailsModel> listOfCiqDetails1 = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"DSS_MOP_Parameters-1", "eNBName");

			validationMap = new LinkedHashMap<>();
			LinkedHashMap<String, String> validationMap0prim = returnValidationList0prim(
					Arrays.asList("priority-level-index-dl1", "non-gbr-pf-weight-dl1"), "DSS_MOP_Parameters-1", neid,
					dbcollectionFileName, Arrays.asList("priority-level-index-dl", "non-gbr-pf-weight-dl"), "eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails1)) {
				if (listOfCiqDetails1.get(0).getCiqMap().containsKey("priority-level-index-dl1")) {
					validationMap.put(
							listOfCiqDetails1.get(0).getCiqMap().get("priority-level-index-dl1").getHeaderValue(),
							validationMap0prim);
				}
			}
			validationMap0prim = returnValidationList0prim(
					Arrays.asList("priority-level-index-dl2", "non-gbr-pf-weight-dl2"), "DSS_MOP_Parameters-1", neid,
					dbcollectionFileName, Arrays.asList("priority-level-index-dl", "non-gbr-pf-weight-dl"), "eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails1)) {
				if (listOfCiqDetails1.get(0).getCiqMap().containsKey("priority-level-index-dl2")) {
					validationMap.put(
							listOfCiqDetails1.get(0).getCiqMap().get("priority-level-index-dl2").getHeaderValue(),
							validationMap0prim);
				}
			}

			htmlContent.append(
					createHtmltableDSS1prim(headerList4, entry4, "priority-level-index-dl", tabelData4, validationMap));

			keys = new ArrayList<>();
			keys.add("target-enb-cell-identity");
			validationMap = returnValidationList1prim("cellId", keys, "DSS_MOP_Parameters-2", gnbid,
					dbcollectionFileName, Arrays.asList("target-enb-cell-identity"), "eNBId");
			htmlContent
					.append(createHtmltableDSS1prim(headerList5, entry5, "cell-identity", tabelData5, validationMap));

			List<List<String>> keyss = new ArrayList<>();
			keyss.add(Arrays.asList("dss-index1", "remote-ip-address"));
			LinkedHashMap<String, LinkedHashMap<String, LinkedHashMap<String, String>>> validationMap3 = returnValidationList2prim(
					"enb-id", keyss, "DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("dss-index1", "remote-ip-address"), "eNBName");
			htmlContent.append(
					createHtmltableDSS2prim(headerList6, entry6, "enb-id", "dss-index", tabelData6, validationMap3));

			htmlContent.append(createHtmltableDSS(headerList7, entry7, tabelData7, validationMap1));

			keys = new ArrayList<>();
			keys.add("administrative-state");
			validationMap = returnValidationList1prim("cellId", keys, "DSS_MOP_Parameters-2", gnbid,
					dbcollectionFileName, Arrays.asList("administrative-state"), "eNBId");

			htmlContent
					.append(createHtmltableDSS1prim(headerList8, entry8, "cell-identity", tabelData8, validationMap));

			keyss = new ArrayList<>();
			keyss.add(Arrays.asList("pod-id", "holdover-timer-threshold"));
			validationMap3 = returnValidationList2prim("pod-type", keyss, "DSS_MOP_Parameters-1", neid,
					dbcollectionFileName, Arrays.asList("pod-id", "holdover-timer-threshold"), "eNBName");
			htmlContent.append(
					createHtmltableDSS2prim(headerList9, entry9, "pod-type", "pod-id", tabelData9, validationMap3));

			validationMap1 = new LinkedHashMap<>();
			htmlContent.append(createHtmltableDSS(headerList14, entry14, tabelData14, validationMap1));
			
			keys = new ArrayList<>();
			keys.add("spectrum-sharing");
			validationMap = returnValidationList1prim("cellId", keys, "DSS_MOP_Parameters-2", gnbid,
					dbcollectionFileName, Arrays.asList("spectrum-sharing"), "eNBId");

			htmlContent.append(
					createHtmltableDSS1prim(headerList10, entry10, "cell-identity", tabelData10, validationMap));

			keys = new ArrayList<>();
			keys.add("dmrs-additional-position-ul");
			validationMap = returnValidationList1prim("cellId", keys, "DSS_MOP_Parameters-2", gnbid,
					dbcollectionFileName, Arrays.asList("dmrs-additional-position-ul"), "eNBId");

			htmlContent.append(
					createHtmltableDSS1prim(headerList11, entry11, "cell-identity", tabelData11, validationMap));

			keys = new ArrayList<>();
			keys.add("max-num-harq-transmission-msg3");
			validationMap = returnValidationList1prim("cellId", keys, "DSS_MOP_Parameters-2", gnbid,
					dbcollectionFileName, Arrays.asList("max-num-harq-transmission-msg3"), "eNBId");

			htmlContent.append(
					createHtmltableDSS1prim(headerList12, entry12, "cell-identity", tabelData12, validationMap));

			keys = new ArrayList<>();
			keys.add("periodic-bsr-timer");
			validationMap = returnValidationList1prim("cellId", keys, "DSS_MOP_Parameters-2", gnbid,
					dbcollectionFileName, Arrays.asList("periodic-bsr-timer"), "eNBId");

			htmlContent.append(
					createHtmltableDSS1prim(headerList13, entry13, "cell-identity", tabelData13, validationMap));
			
			validationMap1 = new LinkedHashMap<>();
			htmlContent.append(createHtmltableDSS(headerList15, entry15, tabelData15, validationMap1));

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder getEnbEndcAudit(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "outputends");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			// For a1-report-config entries
			String entry = "ca-requested-frequency-band-info";
			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("requested-nr-band1");
			headerList.add("requested-nr-band2");
			headerList.add("requested-nr-band3");
			headerList.add("requested-nr-band4");
			headerList.add("requested-nr-band5");

			String entry1 = "en-dc-ue-type-for-load-balancing";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("plmn-index");
			headerList1.add("ue-type-index");
			headerList1.add("type-priority");
			headerList1.add("nr-band-0-usage");
			headerList1.add("bandIndicator-0");
			headerList1.add("nr-band-1-usage");
			headerList1.add("bandIndicator-1");
			headerList1.add("nr-band-2-usage");
			headerList1.add("bandIndicator-2");
			headerList1.add("nr-band-3-usage");
			headerList1.add("bandIndicator-3");
			headerList1.add("nr-band-4-usage");
			headerList1.add("bandIndicator-4");
			headerList1.add("earfcn-dl-0");
			headerList1.add("search-rate-0");
			headerList1.add("weight-for-imc-0");
			headerList1.add("earfcn-dl-1");
			headerList1.add("search-rate-1");
			headerList1.add("weight-for-imc-1");
			headerList1.add("earfcn-dl-2");
			headerList1.add("search-rate-2");
			headerList1.add("weight-for-imc-2");
			headerList1.add("earfcn-dl-3");
			headerList1.add("search-rate-3");
			headerList1.add("weight-for-imc-3");
			headerList1.add("earfcn-dl-4");
			headerList1.add("search-rate-4");
			headerList1.add("weight-for-imc-4");

			String entry2 = "en-dc-option";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("requested-nr-band-usage");
			headerList2.add("intra-lte-ho-sgnb-option");
			headerList2.add("sgnb-activity-notification-mode");
			headerList2.add("nr-measurement-gap-usage");
			headerList2.add("ue-ambr-mn-dl-ratio");
			headerList2.add("ue-ambr-mn-ul-ratio");
			headerList2.add("nr-restrict-for-all-fr");

			String entry3 = "nr-data-usage-report";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("nr-data-usage-report-enable");
			headerList3.add("periodic-report-support");
			headerList3.add("procedure-based-report-support");

			String entry4 = "eutran-cell-fdd-tdd";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cell-num");
			headerList4.add("internal-cell-num");
			headerList4.add("administrative-state");
			headerList4.add("battery-saving-option");
			headerList4.add("channel-card-id");
			headerList4.add("cell-band-carrier");
			headerList4.add("user-label");
			headerList4.add("test-flag");
			headerList4.add("operational-state");
			headerList4.add("usage-state");
			headerList4.add("resource-state");
			headerList4.add("cell-setup-state");
			headerList4.add("s1-ap-state");
			headerList4.add("cbrs-op-state");
			headerList4.add("cell-tx-path-type");
			headerList4.add("crsic-support-cell-conf");
			headerList4.add("dsp-id");
			headerList4.add("dsp-logical-cell-number");
			headerList4.add("emtc-edrx-switch");
			headerList4.add("lte-edrx-switch");
			headerList4.add("measurement-quantity-cdma2000");
			headerList4.add("multi-carrier-type");
			headerList4.add("traffic-control-prb-threshold");
			headerList4.add("virtual-rf-port-mapping-switch");
			headerList4.add("auto-unlock-flag");

			String entry5 = "dss-interface-conf-idle";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-num");
			headerList5.add("target-gnodeb-id-length");
			headerList5.add("target-gnodeb-id");
			headerList5.add("target-gnb-du-id");
			headerList5.add("target-cell-identity");

			String entry6 = "cell-cac-info-func";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cell-num");
			headerList6.add("emergency-arp-priority");

			String entry7 = "endc-cell-info";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("cell-num");
			headerList7.add("endc-support");
			headerList7.add("endc-operation-mode");

			String entry8 = "cell-plmn-info";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("cell-num");
			headerList8.add("plmn-index");
			headerList8.add("plmn-usage");
			headerList8.add("user-plane-optimization-emtc-enable");
			headerList8.add("upper-layer-indication");

			String entry9 = "traffic-manage-func-cell-control";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("cell-num");
			headerList9.add("idle-mode-endc-support-enable");

			String entry10 = "eutran-cell-info";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("cell-num");
			headerList10.add("plmn-info-list-r15-usage");

			String entry11 = "eutra-a4-criteria-info";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("cell-num");
			headerList11.add("purpose");
			headerList11.add("fa-index");
			headerList11.add("qci-group-index");
			headerList11.add("a4-enable");
			headerList11.add("a4-threshold-rsrp");
			headerList11.add("a4-threshold-rsrq");

			String entry12 = "nr-b1-criteria-info";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("cell-num");
			headerList12.add("purpose");
			headerList12.add("fa-index");
			headerList12.add("qci-group-index");
			headerList12.add("b1-enable");
			headerList12.add("b1-threshold-nr-rsrp");
			headerList12.add("b1-threshold-nr-rsrq");
			headerList12.add("b1-threshold-nr-sinr");
			headerList12.add("hysteresis");
			headerList12.add("time-to-trigger");
			headerList12.add("trigger-quantity");
			headerList12.add("max-report-rs-index");

			String entry13 = "dl-phy-channel-power-config-idle";
			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("cell-num");
			headerList13.add("dl-power-option");

			String entry14 = "en-dc-scheduler-func";
			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("cell-num");
			headerList14.add("p-max-eutra-ratio-fr1");
			headerList14.add("lte-ul-out-max-tbs-threshold-fr1");

			String entry15 = "en-dc-power-sharing-idle";
			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("cell-num");
			headerList15.add("dps-support");

			String entry16 = "pusch-config-logic";
			LinkedHashSet<String> headerList16 = new LinkedHashSet<>();
			headerList16.add("cell-num");
			headerList16.add("pusch-hopping-enabled");
			headerList16.add("coordinated-cellnum");

			String entry17 = "trch-info-func";
			LinkedHashSet<String> headerList17 = new LinkedHashSet<>();
			headerList17.add("cell-num");
			headerList17.add("max-ttib-ue-num-thresh");

			String entry18 = "spectrum-sharing-scheduler-config-idle";
			LinkedHashSet<String> headerList18 = new LinkedHashSet<>();
			headerList18.add("cell-num");
			headerList18.add("spectrum-sharing-lte");
			headerList18.add("rb-blanking-case-for-spectrum-sharing");
			headerList18.add("resource-pattern-change-period");
			headerList18.add("minimum-number-of-nr-slots");
			headerList18.add("maximum-number-of-nr-slots");
			headerList18.add("target-number-of-nr-slots");
			headerList18.add("initial-number-of-nr-slots");
			headerList18.add("resource-pattern-out-of-synch-determination-count-threshold");
			headerList18.add("dl-prb-usage-threshold-for-increasing-lte-resource");
			headerList18.add("ul-prb-usage-threshold-for-increasing-lte-resource");

			String entry19 = "nr-fa-information";
			LinkedHashSet<String> headerList19 = new LinkedHashSet<>();
			headerList19.add("cell-num");
			headerList19.add("fa-index");

			String entry20 = "nr-fa-prior-info-func";
			LinkedHashSet<String> headerList20 = new LinkedHashSet<>();
			headerList20.add("cell-num");
			headerList20.add("fa-index");
			headerList20.add("duplex-type");
			headerList20.add("arfcn-nr-dl");
			headerList20.add("arfcn-nr-ul");
			headerList20.add("mtc-ssb-nr-period");
			headerList20.add("mtc-ssb-nr-offset");
			headerList20.add("mtc-ssb-nr-duration");
			headerList20.add("sub-carrier-spacing-ssb");
			headerList20.add("abs-thresh-rs-index-rsrp");
			headerList20.add("abs-thresh-rs-index-rsrq");
			headerList20.add("abs-thresh-rs-index-sinr");
			headerList20.add("max-rs-index-cell-qual");
			headerList20.add("quantity-config-set");
			headerList20.add("nr-band");
			headerList20.add("offset-freq");
			headerList20.add("preference0");
			headerList20.add("preference1");
			headerList20.add("preference2");
			headerList20.add("preference3");
			headerList20.add("preference4");
			headerList20.add("preference5");
			headerList20.add("min-nrt-ratio-carrier");
			headerList20.add("anr-ue-search-rate");
			headerList20.add("arfcn-point-a-nr-ul");
			headerList20.add("arfcn-point-a-nr-dl");
			headerList20.add("mo-priority");
			headerList20.add("nr-frequency-low");
			headerList20.add("nr-frequency-high");
			headerList20.add("endc-priority-group");

			String entry21 = "dc-control-param";
			LinkedHashSet<String> headerList21 = new LinkedHashSet<>();
			headerList21.add("dc-index");
			headerList21.add("bearer-type-usage");
			headerList21.add("qci");
			headerList21.add("arp");
			headerList21.add("bearer-type");
			headerList21.add("nr-band-freq");
			headerList21.add("priority");

			String entry22 = "idle-mode-load-balancing-conf";
			LinkedHashSet<String> headerList22 = new LinkedHashSet<>();
			headerList22.add("idle-load-balancing-enter-threshold");
			headerList22.add("number-of-neighbor-for-idle-load-balancing");
			headerList22.add("period-for-idle-load-balancing");
			headerList22.add("imc-for-endc-operation-mode");
			headerList22.add("per-endc-ue-type-option");
			headerList22.add("imd-avoid-for-endc-option");

			String entry23 = "term-point-to-gnb";
			LinkedHashSet<String> headerList23 = new LinkedHashSet<>();
			headerList23.add("neighbor-gnb-index");
			headerList23.add("no-x2");
			headerList23.add("gnb-id-bit-length");
			headerList23.add("gnb-id");
			headerList23.add("mcc");
			headerList23.add("mnc");
			headerList23.add("ip-ver");
			headerList23.add("neighbor-gnb-ipv4");
			headerList23.add("neighbor-gnb-ipv6");
			headerList23.add("secondary-neighbor-gnb-ipv4");
			headerList23.add("secondary-neighbor-gnb-ipv6");
			headerList23.add("owner-type");
			headerList23.add("current-x2-rank");
			headerList23.add("previous-x2-rank");
			headerList23.add("no-remove");
			headerList23.add("is-samsung-gnb");
			headerList23.add("interface-state");

			String entry24 = "digital-unit-entries";
			LinkedHashSet<String> headerList24 = new LinkedHashSet<>();
			headerList24.add("unit-type");
			headerList24.add("unit-id");

			String entry25 = "cpri-port-entries";
			LinkedHashSet<String> headerList25 = new LinkedHashSet<>();
			headerList25.add("unit-type");
			headerList25.add("unit-id");
			headerList25.add("port-id");
			headerList25.add("administrative-state");
			headerList25.add("connected-radio-unit-type");
			headerList25.add("auto-speed-configuration");
			headerList25.add("cpri-speed-saved");
			headerList25.add("cpri-speed-running");
			headerList25.add("cpri-compression-saved");
			headerList25.add("cpri-compression-running");
			headerList25.add("cpri-connection-type");
			headerList25.add("bit-rate");
			headerList25.add("tx-wavelength");
			headerList25.add("tx-power");
			headerList25.add("rx-power");

			String entry26 = "fsu-connection-info";
			LinkedHashSet<String> headerList26 = new LinkedHashSet<>();
			headerList26.add("unit-type");
			headerList26.add("unit-id");
			headerList26.add("port-id");
			headerList26.add("fsu-internode-id");
			headerList26.add("fsu-du-cpri-port-id");

			/*
			 * String entry27 = "eutran-cell-fdd-tdd"; LinkedHashSet<String> headerList27 =
			 * new LinkedHashSet<>(); headerList27.add("cell-num");
			 * headerList27.add("administrative-state");
			 */

			String entry27 = "eutran-dedicated-priority-info-func";
			LinkedHashSet<String> headerList27 = new LinkedHashSet<>();
			headerList27.add("plmn-index");
			headerList27.add("fa-index");
			headerList27.add("spid-index");
			headerList27.add("spid");
			headerList27.add("dedicated-priority");
			headerList27.add("spid-mobility-option");
			headerList27.add("spid-measure-option");

			String entry28 = "nb-iot-cell";
			LinkedHashSet<String> headerList28 = new LinkedHashSet<>();
			headerList28.add("cell-num");
			headerList28.add("administrative-state");

			String entry29 = "en-dc-meas-priority";
			LinkedHashSet<String> headerList29 = new LinkedHashSet<>();
			headerList29.add("cell-num");
			headerList29.add("non-gbr-qci");
			headerList29.add("nr-band-freq");
			headerList29.add("priority");

			String entry30 = "prach-config-logic";
			LinkedHashSet<String> headerList30 = new LinkedHashSet<>();
			headerList30.add("high-speed-flag");
			headerList30.add("zero-correlation-zone-config");
			headerList30.add("prach-config-index");
			headerList30.add("root-sequence-index");
			headerList30.add("dedicated-preamble-timer");
			headerList30.add("prach-position");

			String entry31 = "endc-band-combination-info";
			LinkedHashSet<String> headerList31 = new LinkedHashSet<>();
			headerList31.add("band-combination-list-index");
			headerList31.add("status");
			headerList31.add("band0-for-dl-usage");
			headerList31.add("band0-for-ul-usage");
			headerList31.add("band-indicator0");
			headerList31.add("ca-bandwidth-class-dl0");
			headerList31.add("ca-bandwidth-class-ul0");
			headerList31.add("band1-for-dl-usage");
			headerList31.add("band1-for-ul-usage");
			headerList31.add("band-indicator1");
			headerList31.add("ca-bandwidth-class-dl1");
			headerList31.add("ca-bandwidth-class-ul1");
			headerList31.add("band2-for-dl-usage");
			headerList31.add("band2-for-ul-usage");
			headerList31.add("band-indicator2");
			headerList31.add("ca-bandwidth-class-dl2");
			headerList31.add("ca-bandwidth-class-ul2");
			headerList31.add("band3-for-dl-usage");
			headerList31.add("band3-for-ul-usage");
			headerList31.add("band-indicator3");
			headerList31.add("ca-bandwidth-class-dl3");
			headerList31.add("ca-bandwidth-class-ul3");
			headerList31.add("band4-for-dl-usage");
			headerList31.add("band4-for-ul-usage");
			headerList31.add("band-indicator4");
			headerList31.add("ca-bandwidth-class-dl4");
			headerList31.add("ca-bandwidth-class-ul4");
			headerList31.add("band5-for-dl-usage");
			headerList31.add("band5-for-ul-usage");
			headerList31.add("band-indicator5");
			headerList31.add("ca-bandwidth-class-dl5");
			headerList31.add("ca-bandwidth-class-ul5");
			headerList31.add("band6-for-dl-usage");
			headerList31.add("band6-for-ul-usage");
			headerList31.add("band-indicator6");
			headerList31.add("ca-bandwidth-class-dl6");
			headerList31.add("ca-bandwidth-class-ul6");
			headerList31.add("band7-for-dl-usage");
			headerList31.add("band7-for-ul-usage");
			headerList31.add("band-indicator7");
			headerList31.add("ca-bandwidth-class-dl7");
			headerList31.add("ca-bandwidth-class-ul7");
			headerList31.add("band8-for-dl-usage");
			headerList31.add("band8-for-ul-usage");
			headerList31.add("band-indicator8");
			headerList31.add("ca-bandwidth-class-dl8");
			headerList31.add("ca-bandwidth-class-ul8");

			String entry33 = "external-new-radio-cell";
			LinkedHashSet<String> headerList33 = new LinkedHashSet<>();
			headerList33.add("cell-num");
			headerList33.add("relation-index");
			headerList33.add("gnb-id-bit-length");
			headerList33.add("gnb-id");
			headerList33.add("target-cell-id-nr");
			headerList33.add("mcc");
			headerList33.add("mnc");
			headerList33.add("phy-cell-id-nr");
			headerList33.add("five-gs-tac");
			headerList33.add("configured-tac");
			headerList33.add("duplex-type");
			headerList33.add("arfcn-ul");
			headerList33.add("arfcn-dl");
			headerList33.add("bandwidth-ul-scs");
			headerList33.add("bandwidth-dl-scs");
			headerList33.add("bandwidth-ul-nrb");
			headerList33.add("bandwidth-dl-nrb");
			headerList33.add("ul-nr-frequency-band-0");
			headerList33.add("dl-nr-frequency-band-0");
			headerList33.add("ul-nr-frequency-band-1");
			headerList33.add("dl-nr-frequency-band-1");
			headerList33.add("ul-nr-frequency-band-2");
			headerList33.add("dl-nr-frequency-band-2");
			headerList33.add("ul-nr-frequency-band-3");
			headerList33.add("dl-nr-frequency-band-3");
			headerList33.add("is-remove-allowed");
			headerList33.add("is-en-dc-allowed");
			headerList33.add("owner-type");
			headerList33.add("current-rank");
			headerList33.add("previous-rank");
			headerList33.add("is-colocated");
			headerList33.add("is-colocated-for-es-cell-off");
			headerList33.add("ssb-frequency");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData16 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData17 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData18 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData19 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData20 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData21 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData22 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData23 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData24 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData25 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData26 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData27 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData28 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData29 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData30 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData31 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData32 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData33 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");

			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);

				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild5 = (Element) ChildNode1;

					NodeList childNodeList3 = elementchild5.getElementsByTagName("enb-function");
					for (int q = 0; q < childNodeList3.getLength(); q++) {
						if (q == 0) {
							Node ChildNode4 = childNodeList3.item(q);
							if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {

								Element elementchild1 = (Element) ChildNode4;

								NodeList childNodeList = elementchild1.getElementsByTagName("carrier-aggregation");

								for (int j = 0; j < childNodeList.getLength(); j++) {

									Node ChildNode = childNodeList.item(j);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild
												.getElementsByTagName("ca-requested-frequency-band-info");
										for (int l = 0; l < childNodeList1.getLength(); l++) {

											Node ChildNode2 = childNodeList1.item(l);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("requested-nr-band1",
														getXmlElementData(elementchild2, "requested-nr-band1"));
												objtableData.put("requested-nr-band2",
														getXmlElementData(elementchild2, "requested-nr-band2"));
												objtableData.put("requested-nr-band3",
														getXmlElementData(elementchild2, "requested-nr-band3"));
												objtableData.put("requested-nr-band4",
														getXmlElementData(elementchild2, "requested-nr-band4"));
												objtableData.put("requested-nr-band5",
														getXmlElementData(elementchild2, "requested-nr-band5"));

												tabelData1.add(objtableData);
											}
										}

									}
								}

								childNodeList = elementchild1.getElementsByTagName("en-dc-ue-type-for-load-balancing");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode2 = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

										Element elementchild2 = (Element) ChildNode2;
										LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
										objtableData.put("plmn-index", getXmlElementData(elementchild2, "plmn-index"));
										objtableData.put("ue-type-index",
												getXmlElementData(elementchild2, "ue-type-index"));
										objtableData.put("type-priority",
												getXmlElementData(elementchild2, "type-priority"));
										objtableData.put("nr-band-0-usage",
												getXmlElementData(elementchild2, "nr-band-0-usage"));
										objtableData.put("bandIndicator-0",
												getXmlElementData(elementchild2, "bandIndicator-0"));
										objtableData.put("nr-band-1-usage",
												getXmlElementData(elementchild2, "nr-band-1-usage"));
										objtableData.put("bandIndicator-1",
												getXmlElementData(elementchild2, "bandIndicator-1"));
										objtableData.put("nr-band-2-usage",
												getXmlElementData(elementchild2, "nr-band-2-usage"));
										objtableData.put("bandIndicator-2",
												getXmlElementData(elementchild2, "bandIndicator-2"));
										objtableData.put("nr-band-3-usage",
												getXmlElementData(elementchild2, "nr-band-3-usage"));
										objtableData.put("bandIndicator-3",
												getXmlElementData(elementchild2, "bandIndicator-3"));
										objtableData.put("nr-band-4-usage",
												getXmlElementData(elementchild2, "nr-band-4-usage"));
										objtableData.put("bandIndicator-4",
												getXmlElementData(elementchild2, "bandIndicator-4"));
										objtableData.put("earfcn-dl-0",
												getXmlElementData(elementchild2, "earfcn-dl-0"));
										objtableData.put("search-rate-0",
												getXmlElementData(elementchild2, "search-rate-0"));
										objtableData.put("weight-for-imc-0",
												getXmlElementData(elementchild2, "weight-for-imc-0"));
										objtableData.put("earfcn-dl-1",
												getXmlElementData(elementchild2, "earfcn-dl-1"));
										objtableData.put("search-rate-1",
												getXmlElementData(elementchild2, "search-rate-1"));
										objtableData.put("weight-for-imc-1",
												getXmlElementData(elementchild2, "weight-for-imc-1"));
										objtableData.put("earfcn-dl-2",
												getXmlElementData(elementchild2, "earfcn-dl-2"));
										objtableData.put("search-rate-2",
												getXmlElementData(elementchild2, "search-rate-2"));
										objtableData.put("weight-for-imc-2",
												getXmlElementData(elementchild2, "weight-for-imc-2"));
										objtableData.put("earfcn-dl-3",
												getXmlElementData(elementchild2, "earfcn-dl-3"));
										objtableData.put("search-rate-3",
												getXmlElementData(elementchild2, "search-rate-3"));
										objtableData.put("weight-for-imc-3",
												getXmlElementData(elementchild2, "weight-for-imc-3"));
										objtableData.put("earfcn-dl-4",
												getXmlElementData(elementchild2, "earfcn-dl-4"));
										objtableData.put("search-rate-4",
												getXmlElementData(elementchild2, "search-rate-4"));
										objtableData.put("weight-for-imc-4",
												getXmlElementData(elementchild2, "weight-for-imc-4"));

										tabelData2.add(objtableData);
									}
								}

								childNodeList = elementchild1.getElementsByTagName("eutra-nr-dual-connectivity");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild.getElementsByTagName("en-dc-option");
										for (int k = 0; k < childNodeList1.getLength(); k++) {

											Node ChildNode2 = childNodeList1.item(k);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("requested-nr-band-usage",
														getXmlElementData(elementchild2, "requested-nr-band-usage"));
												objtableData.put("intra-lte-ho-sgnb-option",
														getXmlElementData(elementchild2, "intra-lte-ho-sgnb-option"));
												objtableData.put("sgnb-activity-notification-mode", getXmlElementData(
														elementchild2, "sgnb-activity-notification-mode"));
												objtableData.put("nr-measurement-gap-usage",
														getXmlElementData(elementchild2, "nr-measurement-gap-usage"));
												objtableData.put("ue-ambr-mn-dl-ratio",
														getXmlElementData(elementchild2, "ue-ambr-mn-dl-ratio"));
												objtableData.put("ue-ambr-mn-ul-ratio",
														getXmlElementData(elementchild2, "ue-ambr-mn-ul-ratio"));
												objtableData.put("nr-restrict-for-all-fr",
														getXmlElementData(elementchild2, "nr-restrict-for-all-fr"));

												tabelData3.add(objtableData);
											}
										}

										NodeList childNodeList2 = elementchild
												.getElementsByTagName("endc-band-combination-info");
										for (int k = 0; k < childNodeList2.getLength(); k++) {

											Node ChildNode2 = childNodeList2.item(k);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("band-combination-list-index", getXmlElementData(
														elementchild2, "band-combination-list-index"));
												objtableData.put("status", getXmlElementData(elementchild2, "status"));
												objtableData.put("band0-for-dl-usage",
														getXmlElementData(elementchild2, "band0-for-dl-usage"));
												objtableData.put("band0-for-ul-usage",
														getXmlElementData(elementchild2, "band0-for-ul-usage"));
												objtableData.put("band-indicator0",
														getXmlElementData(elementchild2, "band-indicator0"));
												objtableData.put("ca-bandwidth-class-dl0",
														getXmlElementData(elementchild2, "ca-bandwidth-class-dl0"));
												objtableData.put("ca-bandwidth-class-ul0",
														getXmlElementData(elementchild2, "ca-bandwidth-class-ul0"));

												objtableData.put("band1-for-dl-usage",
														getXmlElementData(elementchild2, "band1-for-dl-usage"));
												objtableData.put("band1-for-ul-usage",
														getXmlElementData(elementchild2, "band1-for-ul-usage"));
												objtableData.put("band-indicator1",
														getXmlElementData(elementchild2, "band-indicator1"));
												objtableData.put("ca-bandwidth-class-dl1",
														getXmlElementData(elementchild2, "ca-bandwidth-class-dl1"));
												objtableData.put("ca-bandwidth-class-ul1",
														getXmlElementData(elementchild2, "ca-bandwidth-class-ul1"));

												objtableData.put("band2-for-dl-usage",
														getXmlElementData(elementchild2, "band2-for-dl-usage"));
												objtableData.put("band2-for-ul-usage",
														getXmlElementData(elementchild2, "band2-for-ul-usage"));
												objtableData.put("band-indicator2",
														getXmlElementData(elementchild2, "band-indicator2"));
												objtableData.put("ca-bandwidth-class-dl2",
														getXmlElementData(elementchild2, "ca-bandwidth-class-dl2"));
												objtableData.put("ca-bandwidth-class-ul2",
														getXmlElementData(elementchild2, "ca-bandwidth-class-ul2"));

												objtableData.put("band3-for-dl-usage",
														getXmlElementData(elementchild2, "band3-for-dl-usage"));
												objtableData.put("band3-for-ul-usage",
														getXmlElementData(elementchild2, "band3-for-ul-usage"));
												objtableData.put("band-indicator3",
														getXmlElementData(elementchild2, "band-indicator3"));
												objtableData.put("ca-bandwidth-class-dl3",
														getXmlElementData(elementchild2, "ca-bandwidth-class-dl3"));
												objtableData.put("ca-bandwidth-class-ul3",
														getXmlElementData(elementchild2, "ca-bandwidth-class-ul3"));

												objtableData.put("band4-for-dl-usage",
														getXmlElementData(elementchild2, "band4-for-dl-usage"));
												objtableData.put("band4-for-ul-usage",
														getXmlElementData(elementchild2, "band4-for-ul-usage"));
												objtableData.put("band-indicator4",
														getXmlElementData(elementchild2, "band-indicator4"));
												objtableData.put("ca-bandwidth-class-dl4",
														getXmlElementData(elementchild2, "ca-bandwidth-class-dl4"));
												objtableData.put("ca-bandwidth-class-ul4",
														getXmlElementData(elementchild2, "ca-bandwidth-class-ul4"));

												objtableData.put("band5-for-dl-usage",
														getXmlElementData(elementchild2, "band5-for-dl-usage"));
												objtableData.put("band5-for-ul-usage",
														getXmlElementData(elementchild2, "band5-for-ul-usage"));
												objtableData.put("band-indicator5",
														getXmlElementData(elementchild2, "band-indicator5"));
												objtableData.put("ca-bandwidth-class-dl5",
														getXmlElementData(elementchild2, "ca-bandwidth-class-dl5"));
												objtableData.put("ca-bandwidth-class-ul5",
														getXmlElementData(elementchild2, "ca-bandwidth-class-ul5"));

												objtableData.put("band6-for-dl-usage",
														getXmlElementData(elementchild2, "band6-for-dl-usage"));
												objtableData.put("band6-for-ul-usage",
														getXmlElementData(elementchild2, "band6-for-ul-usage"));
												objtableData.put("band-indicator6",
														getXmlElementData(elementchild2, "band-indicator6"));
												objtableData.put("ca-bandwidth-class-dl6",
														getXmlElementData(elementchild2, "ca-bandwidth-class-dl6"));
												objtableData.put("ca-bandwidth-class-ul6",
														getXmlElementData(elementchild2, "ca-bandwidth-class-ul6"));

												objtableData.put("band7-for-dl-usage",
														getXmlElementData(elementchild2, "band7-for-dl-usage"));
												objtableData.put("band7-for-ul-usage",
														getXmlElementData(elementchild2, "band7-for-ul-usage"));
												objtableData.put("band-indicator7",
														getXmlElementData(elementchild2, "band-indicator7"));
												objtableData.put("ca-bandwidth-class-dl7",
														getXmlElementData(elementchild2, "ca-bandwidth-class-dl7"));
												objtableData.put("ca-bandwidth-class-ul7",
														getXmlElementData(elementchild2, "ca-bandwidth-class-ul7"));

												objtableData.put("band8-for-dl-usage",
														getXmlElementData(elementchild2, "band8-for-dl-usage"));
												objtableData.put("band8-for-ul-usage",
														getXmlElementData(elementchild2, "band8-for-ul-usage"));
												objtableData.put("band-indicator8",
														getXmlElementData(elementchild2, "band-indicator8"));
												objtableData.put("ca-bandwidth-class-dl8",
														getXmlElementData(elementchild2, "ca-bandwidth-class-dl8"));
												objtableData.put("ca-bandwidth-class-ul8",
														getXmlElementData(elementchild2, "ca-bandwidth-class-ul8"));

												tabelData32.add(objtableData);
											}
										}

									}
								}

								childNodeList = elementchild1.getElementsByTagName("nr-data-usage-report");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode2 = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

										Element elementchild2 = (Element) ChildNode2;
										LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
										objtableData.put("nr-data-usage-report-enable",
												getXmlElementData(elementchild2, "nr-data-usage-report-enable"));
										objtableData.put("periodic-report-support",
												getXmlElementData(elementchild2, "periodic-report-support"));
										objtableData.put("procedure-based-report-support",
												getXmlElementData(elementchild2, "procedure-based-report-support"));

										tabelData4.add(objtableData);
									}
								}

								childNodeList = elementchild1.getElementsByTagName("eutran-generic-cell");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild
												.getElementsByTagName("eutran-cell-fdd-tdd");
										for (int k = 0; k < childNodeList1.getLength(); k++) {

											Node ChildNode2 = childNodeList1.item(k);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												NodeList childNodeList2 = elementchild2
														.getElementsByTagName("dss-interface-conf-idle");
												for (int j = 0; j < childNodeList2.getLength(); j++) {

													Node ChildNode3 = childNodeList2.item(j);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
														objtableData.put("cell-num",
																getXmlElementData(elementchild2, "cell-num"));
														objtableData.put("target-gnodeb-id-length", getXmlElementData(
																elementchild3, "target-gnodeb-id-length"));
														objtableData.put("target-gnodeb-id",
																getXmlElementData(elementchild3, "target-gnodeb-id"));
														objtableData.put("target-gnb-du-id",
																getXmlElementData(elementchild3, "target-gnb-du-id"));
														objtableData.put("target-cell-identity", getXmlElementData(
																elementchild3, "target-cell-identity"));

														tabelData6.add(objtableData);
													}
												}
												childNodeList2 = elementchild2
														.getElementsByTagName("cell-admission-control");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("cell-cac-info-func");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																objtableData.put("cell-num",
																		getXmlElementData(elementchild2, "cell-num"));
																objtableData.put("emergency-arp-priority",
																		getXmlElementData(elementchild4,
																				"emergency-arp-priority"));
																tabelData7.add(objtableData);

															}
														}

													}
												}
												childNodeList2 = elementchild2
														.getElementsByTagName("cell-endc-function");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("endc-cell-info");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																objtableData.put("cell-num",
																		getXmlElementData(elementchild2, "cell-num"));
																objtableData.put("endc-support", getXmlElementData(
																		elementchild4, "endc-support"));
																objtableData.put("endc-operation-mode",
																		getXmlElementData(elementchild4,
																				"endc-operation-mode"));

																tabelData8.add(objtableData);

															}
														}
														childNodeList4 = elementchild3
																.getElementsByTagName("en-dc-meas-priority");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																objtableData.put("cell-num",
																		getXmlElementData(elementchild2, "cell-num"));
																objtableData.put("non-gbr-qci", getXmlElementData(
																		elementchild4, "non-gbr-qci"));
																objtableData.put("nr-band-freq", getXmlElementData(
																		elementchild4, "nr-band-freq"));
																objtableData.put("priority",
																		getXmlElementData(elementchild4, "priority"));
																tabelData30.add(objtableData);

															}
														}
													}
												}
												childNodeList2 = elementchild2.getElementsByTagName("cell-plmn-info");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
														objtableData.put("cell-num",
																getXmlElementData(elementchild2, "cell-num"));
														objtableData.put("plmn-index",
																getXmlElementData(elementchild3, "plmn-index"));
														objtableData.put("plmn-usage",
																getXmlElementData(elementchild3, "plmn-usage"));
														objtableData.put("user-plane-optimization-emtc-enable",
																getXmlElementData(elementchild3,
																		"user-plane-optimization-emtc-enable"));
														objtableData.put("upper-layer-indication", getXmlElementData(
																elementchild3, "upper-layer-indication"));

														tabelData9.add(objtableData);
													}
												}
												childNodeList2 = elementchild2.getElementsByTagName("cell-son");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("cell-load-balancing");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																NodeList childNodeList5 = elementchild4
																		.getElementsByTagName(
																				"traffic-manage-func-cell-control");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		objtableData.put("cell-num", getXmlElementData(
																				elementchild2, "cell-num"));
																		objtableData.put(
																				"idle-mode-endc-support-enable",
																				getXmlElementData(elementchild6,
																						"idle-mode-endc-support-enable"));

																		tabelData10.add(objtableData);

																	}
																}

															}
														}

													}
												}
												childNodeList2 = elementchild2.getElementsByTagName("eutran-cell-info");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
														objtableData.put("cell-num",
																getXmlElementData(elementchild2, "cell-num"));
														objtableData.put("plmn-info-list-r15-usage", getXmlElementData(
																elementchild3, "plmn-info-list-r15-usage"));

														tabelData11.add(objtableData);
													}
												}

												childNodeList2 = elementchild2
														.getElementsByTagName("rat-frequency-priority");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3.getElementsByTagName(
																"eutran-dedicated-priority-info-func");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																objtableData.put("plmn-index",
																		getXmlElementData(elementchild2, "plmn-index"));
																objtableData.put("fa-index",
																		getXmlElementData(elementchild4, "fa-index"));
																objtableData.put("spid-index",
																		getXmlElementData(elementchild4, "spid-index"));
																objtableData.put("spid",
																		getXmlElementData(elementchild4, "spid"));
																objtableData.put("dedicated-priority",
																		getXmlElementData(elementchild4,
																				"dedicated-priority"));
																objtableData.put("spid-mobility-option",
																		getXmlElementData(elementchild4,
																				"spid-mobility-option"));
																objtableData.put("spid-measure-option",
																		getXmlElementData(elementchild4,
																				"spid-measure-option"));
																tabelData28.add(objtableData);

															}
														}
													}
												}

												childNodeList2 = elementchild2
														.getElementsByTagName("ue-measurement-control");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("eutra-a4-criteria-info");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																objtableData.put("cell-num",
																		getXmlElementData(elementchild2, "cell-num"));
																objtableData.put("purpose",
																		getXmlElementData(elementchild4, "purpose"));
																objtableData.put("fa-index",
																		getXmlElementData(elementchild4, "fa-index"));
																objtableData.put("qci-group-index", getXmlElementData(
																		elementchild4, "qci-group-index"));
																objtableData.put("a4-enable",
																		getXmlElementData(elementchild4, "a4-enable"));
																objtableData.put("a4-threshold-rsrp", getXmlElementData(
																		elementchild4, "a4-threshold-rsrp"));
																objtableData.put("a4-threshold-rsrq", getXmlElementData(
																		elementchild4, "a4-threshold-rsrq"));

																tabelData12.add(objtableData);

															}
														}
														childNodeList4 = elementchild3
																.getElementsByTagName("nr-b1-criteria-info");
														for (int o = 0; o < childNodeList4.getLength(); o++) {

															Node ChildNode5 = childNodeList4.item(o);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																objtableData.put("cell-num",
																		getXmlElementData(elementchild2, "cell-num"));
																objtableData.put("purpose",
																		getXmlElementData(elementchild4, "purpose"));
																objtableData.put("fa-index",
																		getXmlElementData(elementchild4, "fa-index"));
																objtableData.put("qci-group-index", getXmlElementData(
																		elementchild4, "qci-group-index"));
																objtableData.put("b1-enable",
																		getXmlElementData(elementchild4, "b1-enable"));
																objtableData.put("b1-threshold-nr-rsrp",
																		getXmlElementData(elementchild4,
																				"b1-threshold-nr-rsrp"));
																objtableData.put("b1-threshold-nr-rsrq",
																		getXmlElementData(elementchild4,
																				"b1-threshold-nr-rsrq"));
																objtableData.put("b1-threshold-nr-sinr",
																		getXmlElementData(elementchild4,
																				"b1-threshold-nr-sinr"));
																objtableData.put("hysteresis",
																		getXmlElementData(elementchild4, "hysteresis"));
																objtableData.put("time-to-trigger", getXmlElementData(
																		elementchild4, "time-to-trigger"));
																objtableData.put("trigger-quantity", getXmlElementData(
																		elementchild4, "trigger-quantity"));
																objtableData.put("max-report-rs-index",
																		getXmlElementData(elementchild4,
																				"max-report-rs-index"));

																tabelData13.add(objtableData);

															}
														}

													}
												}
												childNodeList2 = elementchild2
														.getElementsByTagName("scheduling-config");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("physical-resource-config");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																NodeList childNodeList5 = elementchild4
																		.getElementsByTagName(
																				"dl-phy-channel-power-config-idle");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		objtableData.put("cell-num", getXmlElementData(
																				elementchild2, "cell-num"));
																		objtableData.put("dl-power-option",
																				getXmlElementData(elementchild6,
																						"dl-power-option"));

																		tabelData14.add(objtableData);

																	}
																}

																childNodeList5 = elementchild4
																		.getElementsByTagName("prach-config-logic");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		objtableData.put("high-speed-flag",
																				getXmlElementData(elementchild2,
																						"high-speed-flag"));
																		objtableData.put("zero-correlation-zone-config",
																				getXmlElementData(elementchild2,
																						"zero-correlation-zone-config"));
																		objtableData.put("prach-config-index",
																				getXmlElementData(elementchild2,
																						"prach-config-index"));
																		objtableData.put("root-sequence-index",
																				getXmlElementData(elementchild2,
																						"root-sequence-index"));
																		objtableData.put("dedicated-preamble-timer",
																				getXmlElementData(elementchild2,
																						"dedicated-preamble-timer"));
																		objtableData.put("prach-position",
																				getXmlElementData(elementchild6,
																						"prach-position"));
																		tabelData31.add(objtableData);

																	}
																}

															}
														}
														childNodeList4 = elementchild3
																.getElementsByTagName("uplink-downlink-common");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																NodeList childNodeList5 = elementchild4
																		.getElementsByTagName("en-dc-scheduler-func");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		objtableData.put("cell-num", getXmlElementData(
																				elementchild2, "cell-num"));
																		objtableData.put("p-max-eutra-ratio-fr1",
																				getXmlElementData(elementchild6,
																						"p-max-eutra-ratio-fr1"));
																		objtableData.put(
																				"lte-ul-out-max-tbs-threshold-fr1",
																				getXmlElementData(elementchild6,
																						"lte-ul-out-max-tbs-threshold-fr1"));

																		tabelData15.add(objtableData);

																	}
																}
																childNodeList4 = elementchild4.getElementsByTagName(
																		"en-dc-power-sharing-idle");
																for (int p = 0; p < childNodeList4.getLength(); p++) {

																	Node ChildNode6 = childNodeList4.item(p);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		objtableData.put("cell-num", getXmlElementData(
																				elementchild2, "cell-num"));
																		objtableData.put("dps-support",
																				getXmlElementData(elementchild6,
																						"dps-support"));
																		tabelData16.add(objtableData);

																	}
																}

															}
														}
														childNodeList4 = elementchild3
																.getElementsByTagName("uplink-scheduling-config");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																NodeList childNodeList5 = elementchild4
																		.getElementsByTagName("pusch-config-logic");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		objtableData.put("cell-num", getXmlElementData(
																				elementchild2, "cell-num"));
																		objtableData.put("pusch-hopping-enabled",
																				getXmlElementData(elementchild6,
																						"pusch-hopping-enabled"));
																		objtableData.put("coordinated-cellnum",
																				getXmlElementData(elementchild6,
																						"coordinated-cellnum"));

																		tabelData17.add(objtableData);

																	}
																}
																childNodeList4 = elementchild4
																		.getElementsByTagName("trch-info-func");
																for (int o = 0; o < childNodeList4.getLength(); o++) {

																	Node ChildNode6 = childNodeList4.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		objtableData.put("cell-num", getXmlElementData(
																				elementchild2, "cell-num"));
																		objtableData.put("max-ttib-ue-num-thresh",
																				getXmlElementData(elementchild6,
																						"max-ttib-ue-num-thresh"));
																		tabelData18.add(objtableData);

																	}
																}

															}
														}

													}
												}
												childNodeList2 = elementchild2
														.getElementsByTagName("spectrum-sharing-scheduler-config-idle");
												for (int n = 0; n < childNodeList2.getLength(); n++) {

													Node ChildNode3 = childNodeList2.item(n);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
														objtableData.put("cell-num",
																getXmlElementData(elementchild2, "cell-num"));
														objtableData.put("spectrum-sharing-lte", getXmlElementData(
																elementchild3, "spectrum-sharing-lte"));
														objtableData.put("rb-blanking-case-for-spectrum-sharing",
																getXmlElementData(elementchild3,
																		"rb-blanking-case-for-spectrum-sharing"));
														objtableData.put("resource-pattern-change-period",
																getXmlElementData(elementchild3,
																		"resource-pattern-change-period"));
														objtableData.put("minimum-number-of-nr-slots",
																getXmlElementData(elementchild3,
																		"minimum-number-of-nr-slots"));
														objtableData.put("maximum-number-of-nr-slots",
																getXmlElementData(elementchild3,
																		"maximum-number-of-nr-slots"));
														objtableData.put("target-number-of-nr-slots", getXmlElementData(
																elementchild3, "target-number-of-nr-slots"));
														objtableData.put("initial-number-of-nr-slots",
																getXmlElementData(elementchild3,
																		"initial-number-of-nr-slots"));
														objtableData.put(
																"resource-pattern-out-of-synch-determination-count-threshold",
																getXmlElementData(elementchild3,
																		"resource-pattern-out-of-synch-determination-count-threshold"));
														objtableData.put(
																"dl-prb-usage-threshold-for-increasing-lte-resource",
																getXmlElementData(elementchild3,
																		"dl-prb-usage-threshold-for-increasing-lte-resource"));
														objtableData.put(
																"ul-prb-usage-threshold-for-increasing-lte-resource",
																getXmlElementData(elementchild3,
																		"ul-prb-usage-threshold-for-increasing-lte-resource"));

														tabelData19.add(objtableData);
													}
												}
												childNodeList2 = elementchild2
														.getElementsByTagName("nr-frequency-relation");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("nr-fa-information");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																NodeList childNodeList5 = elementchild3
																		.getElementsByTagName("nr-fa-prior-info-func");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;

																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		objtableData.put("cell-num", getXmlElementData(
																				elementchild2, "cell-num"));
																		objtableData.put("fa-index", getXmlElementData(
																				elementchild4, "fa-index"));
																		objtableData.put("duplex-type",
																				getXmlElementData(elementchild6,
																						"duplex-type"));
																		objtableData.put("arfcn-nr-dl",
																				getXmlElementData(elementchild6,
																						"arfcn-nr-dl"));
																		objtableData.put("arfcn-nr-ul",
																				getXmlElementData(elementchild6,
																						"arfcn-nr-ul"));
																		objtableData.put("mtc-ssb-nr-period",
																				getXmlElementData(elementchild6,
																						"mtc-ssb-nr-period"));
																		objtableData.put("mtc-ssb-nr-offset",
																				getXmlElementData(elementchild6,
																						"mtc-ssb-nr-offset"));
																		objtableData.put("mtc-ssb-nr-duration",
																				getXmlElementData(elementchild6,
																						"mtc-ssb-nr-duration"));
																		objtableData.put("sub-carrier-spacing-ssb",
																				getXmlElementData(elementchild6,
																						"sub-carrier-spacing-ssb"));
																		objtableData.put("abs-thresh-rs-index-rsrp",
																				getXmlElementData(elementchild6,
																						"abs-thresh-rs-index-rsrp"));
																		objtableData.put("abs-thresh-rs-index-rsrq",
																				getXmlElementData(elementchild6,
																						"abs-thresh-rs-index-rsrq"));
																		objtableData.put("abs-thresh-rs-index-sinr",
																				getXmlElementData(elementchild6,
																						"abs-thresh-rs-index-sinr"));
																		objtableData.put("max-rs-index-cell-qual",
																				getXmlElementData(elementchild6,
																						"max-rs-index-cell-qual"));
																		objtableData.put("quantity-config-set",
																				getXmlElementData(elementchild6,
																						"quantity-config-set"));
																		objtableData.put("nr-band", getXmlElementData(
																				elementchild6, "nr-band"));
																		objtableData.put("offset-freq",
																				getXmlElementData(elementchild6,
																						"offset-freq"));
																		objtableData.put("preference0",
																				getXmlElementData(elementchild6,
																						"preference0"));
																		objtableData.put("preference1",
																				getXmlElementData(elementchild6,
																						"preference1"));
																		objtableData.put("preference2",
																				getXmlElementData(elementchild6,
																						"preference2"));
																		objtableData.put("preference3",
																				getXmlElementData(elementchild6,
																						"preference3"));
																		objtableData.put("preference4",
																				getXmlElementData(elementchild6,
																						"preference4"));
																		objtableData.put("preference5",
																				getXmlElementData(elementchild6,
																						"preference5"));
																		objtableData.put("min-nrt-ratio-carrier",
																				getXmlElementData(elementchild6,
																						"min-nrt-ratio-carrier"));
																		objtableData.put("anr-ue-search-rate",
																				getXmlElementData(elementchild6,
																						"anr-ue-search-rate"));
																		objtableData.put("arfcn-point-a-nr-ul",
																				getXmlElementData(elementchild6,
																						"arfcn-point-a-nr-ul"));
																		objtableData.put("arfcn-point-a-nr-dl",
																				getXmlElementData(elementchild6,
																						"arfcn-point-a-nr-dl"));
																		objtableData.put("mo-priority",
																				getXmlElementData(elementchild6,
																						"mo-priority"));
																		objtableData.put("nr-frequency-low",
																				getXmlElementData(elementchild6,
																						"nr-frequency-low"));
																		objtableData.put("nr-frequency-high",
																				getXmlElementData(elementchild6,
																						"nr-frequency-high"));
																		objtableData.put("endc-priority-group",
																				getXmlElementData(elementchild6,
																						"endc-priority-group"));

																		tabelData21.add(objtableData);
																	}
																}
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																objtableData.put("cell-num",
																		getXmlElementData(elementchild2, "cell-num"));
																objtableData.put("fa-index",
																		getXmlElementData(elementchild4, "fa-index"));
																tabelData20.add(objtableData);

															}
														}

													}
												}
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("cell-num",
														getXmlElementData(elementchild2, "cell-num"));
												objtableData.put("internal-cell-num",
														getXmlElementData(elementchild2, "internal-cell-num"));
												objtableData.put("administrative-state",
														getXmlElementData(elementchild2, "administrative-state"));
												objtableData.put("battery-saving-option",
														getXmlElementData(elementchild2, "battery-saving-option"));
												objtableData.put("channel-card-id",
														getXmlElementData(elementchild2, "channel-card-id"));
												objtableData.put("cell-band-carrier",
														getXmlElementData(elementchild2, "cell-band-carrier"));
												objtableData.put("user-label",
														getXmlElementData(elementchild2, "user-label"));
												objtableData.put("test-flag",
														getXmlElementData(elementchild2, "test-flag"));
												objtableData.put("operational-state",
														getXmlElementData(elementchild2, "operational-state"));
												objtableData.put("administrative-state",
														getXmlElementData(elementchild2, "administrative-state"));
												objtableData.put("usage-state",
														getXmlElementData(elementchild2, "usage-state"));
												objtableData.put("resource-state",
														getXmlElementData(elementchild2, "resource-state"));
												objtableData.put("cell-setup-state",
														getXmlElementData(elementchild2, "cell-setup-state"));
												objtableData.put("s1-ap-state",
														getXmlElementData(elementchild2, "s1-ap-state"));
												objtableData.put("cbrs-op-state",
														getXmlElementData(elementchild2, "cbrs-op-state"));
												objtableData.put("cell-tx-path-type",
														getXmlElementData(elementchild2, "cell-tx-path-type"));
												objtableData.put("crsic-support-cell-conf",
														getXmlElementData(elementchild2, "crsic-support-cell-conf"));
												objtableData.put("dsp-id", getXmlElementData(elementchild2, "dsp-id"));
												objtableData.put("dsp-logical-cell-number",
														getXmlElementData(elementchild2, "dsp-logical-cell-number"));
												objtableData.put("emtc-edrx-switch",
														getXmlElementData(elementchild2, "emtc-edrx-switch"));
												objtableData.put("lte-edrx-switch",
														getXmlElementData(elementchild2, "lte-edrx-switch"));
												objtableData.put("measurement-quantity-cdma2000", getXmlElementData(
														elementchild2, "measurement-quantity-cdma2000"));
												objtableData.put("multi-carrier-type",
														getXmlElementData(elementchild2, "multi-carrier-type"));
												objtableData.put("traffic-control-prb-threshold", getXmlElementData(
														elementchild2, "traffic-control-prb-threshold"));
												objtableData.put("virtual-rf-port-mapping-switch", getXmlElementData(
														elementchild2, "virtual-rf-port-mapping-switch"));
												objtableData.put("auto-unlock-flag",
														getXmlElementData(elementchild2, "auto-unlock-flag"));

												tabelData5.add(objtableData);
											}

										}

									}
								}
								childNodeList = elementchild1.getElementsByTagName("new-radio-network");
								for (int m = 0; m < childNodeList.getLength(); m++) {

									Node ChildNode = childNodeList.item(m);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild.getElementsByTagName("dc-control-param");
										for (int n = 0; n < childNodeList1.getLength(); n++) {

											Node ChildNode2 = childNodeList1.item(n);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("dc-index",
														getXmlElementData(elementchild2, "dc-index"));
												objtableData.put("bearer-type-usage",
														getXmlElementData(elementchild2, "bearer-type-usage"));
												objtableData.put("qci", getXmlElementData(elementchild2, "qci"));
												objtableData.put("arp", getXmlElementData(elementchild2, "arp"));
												objtableData.put("bearer-type",
														getXmlElementData(elementchild2, "bearer-type"));
												objtableData.put("nr-band-freq",
														getXmlElementData(elementchild2, "nr-band-freq"));
												objtableData.put("priority",
														getXmlElementData(elementchild2, "priority"));

												tabelData22.add(objtableData);
											}
										}
										NodeList childNodeList1X = elementchild
												.getElementsByTagName("external-new-radio-cell");
										for (int s = 0; s < childNodeList1X.getLength(); s++) {
											Node ChildNode8 = childNodeList1X.item(s);
											if (Node.ELEMENT_NODE == ChildNode8.getNodeType()) {

												Element elementchild9 = (Element) ChildNode8;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("cell-num",
														getXmlElementData(elementchild9, "cell-num"));
												objtableData.put("relation-index",
														getXmlElementData(elementchild9, "relation-index"));
												objtableData.put("gnb-id-bit-length",
														getXmlElementData(elementchild9, "gnb-id-bit-length"));

												objtableData.put("gnb-id", getXmlElementData(elementchild9, "gnb-id"));
												objtableData.put("target-cell-id-nr",
														getXmlElementData(elementchild9, "target-cell-id-nr"));

												objtableData.put("mcc", getXmlElementData(elementchild9, "mcc"));

												objtableData.put("mnc", getXmlElementData(elementchild9, "mnc"));

												objtableData.put("phy-cell-id-nr",
														getXmlElementData(elementchild9, "phy-cell-id-nr"));
												objtableData.put("five-gs-tac",
														getXmlElementData(elementchild9, "five-gs-tac"));

												objtableData.put("configured-tac",
														getXmlElementData(elementchild9, "configured-tac"));

												objtableData.put("duplex-type",
														getXmlElementData(elementchild9, "duplex-type"));

												objtableData.put("arfcn-ul",
														getXmlElementData(elementchild9, "arfcn-ul"));

												objtableData.put("arfcn-dl",
														getXmlElementData(elementchild9, "arfcn-dl"));

												objtableData.put("bandwidth-ul-scs",
														getXmlElementData(elementchild9, "bandwidth-ul-scs"));

												objtableData.put("bandwidth-dl-scs",
														getXmlElementData(elementchild9, "bandwidth-dl-scs"));

												objtableData.put("bandwidth-ul-nrb",
														getXmlElementData(elementchild9, "bandwidth-ul-nrb"));
												objtableData.put("bandwidth-dl-nrb",
														getXmlElementData(elementchild9, "bandwidth-dl-nrb"));

												objtableData.put("ul-nr-frequency-band-0",
														getXmlElementData(elementchild9, "ul-nr-frequency-band-0"));

												objtableData.put("dl-nr-frequency-band-0",
														getXmlElementData(elementchild9, "dl-nr-frequency-band-0"));

												objtableData.put("ul-nr-frequency-band-1",
														getXmlElementData(elementchild9, "ul-nr-frequency-band-1"));

												objtableData.put("dl-nr-frequency-band-1",
														getXmlElementData(elementchild9, "dl-nr-frequency-band-1"));

												objtableData.put("ul-nr-frequency-band-2",
														getXmlElementData(elementchild9, "ul-nr-frequency-band-2"));
												objtableData.put("dl-nr-frequency-band-2",
														getXmlElementData(elementchild9, "dl-nr-frequency-band-2"));

												objtableData.put("ul-nr-frequency-band-3",
														getXmlElementData(elementchild9, "ul-nr-frequency-band-3"));

												objtableData.put("dl-nr-frequency-band-3",
														getXmlElementData(elementchild9, "dl-nr-frequency-band-3"));

												objtableData.put("is-remove-allowed",
														getXmlElementData(elementchild9, "is-remove-allowed"));
												objtableData.put("is-en-dc-allowed",
														getXmlElementData(elementchild9, "is-en-dc-allowed"));

												objtableData.put("owner-type",
														getXmlElementData(elementchild9, "owner-type"));

												objtableData.put("current-rank",
														getXmlElementData(elementchild9, "current-rank"));

												objtableData.put("previous-rank",
														getXmlElementData(elementchild9, "previous-rank"));

												objtableData.put("is-colocated",
														getXmlElementData(elementchild9, "is-colocated"));

												objtableData.put("is-colocated-for-es-cell-off", getXmlElementData(
														elementchild9, "is-colocated-for-es-cell-off"));

												objtableData.put("ssb-frequency",
														getXmlElementData(elementchild9, "ssb-frequency"));

												tabelData33.add(objtableData);
											}
										}

									}
								}
								childNodeList = elementchild1.getElementsByTagName("son");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild.getElementsByTagName("load-balancing");
										for (int m = 0; m < childNodeList1.getLength(); m++) {

											Node ChildNode2 = childNodeList1.item(m);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												NodeList childNodeList2 = elementchild2
														.getElementsByTagName("idle-mode-load-balancing-conf");
												for (int n = 0; n < childNodeList2.getLength(); n++) {

													Node ChildNode3 = childNodeList2.item(n);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
														Element elementchild3 = (Element) ChildNode3;
														LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
														objtableData.put("idle-load-balancing-enter-threshold",
																getXmlElementData(elementchild3,
																		"idle-load-balancing-enter-threshold"));
														objtableData.put("number-of-neighbor-for-idle-load-balancing",
																getXmlElementData(elementchild3,
																		"number-of-neighbor-for-idle-load-balancing"));
														objtableData.put("period-for-idle-load-balancing",
																getXmlElementData(elementchild3,
																		"period-for-idle-load-balancing"));
														objtableData.put("imc-for-endc-operation-mode",
																getXmlElementData(elementchild3,
																		"imc-for-endc-operation-mode"));
														objtableData.put("per-endc-ue-type-option", getXmlElementData(
																elementchild3, "per-endc-ue-type-option"));
														objtableData.put("imd-avoid-for-endc-option", getXmlElementData(
																elementchild3, "imd-avoid-for-endc-option"));

														tabelData23.add(objtableData);
													}
												}

											}
										}

									}
								}
								childNodeList = elementchild1.getElementsByTagName("term-point-to-gnb");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode2 = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

										Element elementchild2 = (Element) ChildNode2;
										LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
										objtableData.put("neighbor-gnb-index",
												getXmlElementData(elementchild2, "neighbor-gnb-index"));
										objtableData.put("no-x2", getXmlElementData(elementchild2, "no-x2"));
										objtableData.put("gnb-id-bit-length",
												getXmlElementData(elementchild2, "gnb-id-bit-length"));
										objtableData.put("gnb-id", getXmlElementData(elementchild2, "gnb-id"));
										objtableData.put("mcc", getXmlElementData(elementchild2, "mcc"));
										objtableData.put("mnc", getXmlElementData(elementchild2, "mnc"));
										objtableData.put("ip-ver", getXmlElementData(elementchild2, "ip-ver"));
										objtableData.put("neighbor-gnb-ipv4",
												getXmlElementData(elementchild2, "neighbor-gnb-ipv4"));
										objtableData.put("neighbor-gnb-ipv6",
												getXmlElementData(elementchild2, "neighbor-gnb-ipv6"));
										objtableData.put("secondary-neighbor-gnb-ipv4",
												getXmlElementData(elementchild2, "secondary-neighbor-gnb-ipv4"));
										objtableData.put("secondary-neighbor-gnb-ipv6",
												getXmlElementData(elementchild2, "secondary-neighbor-gnb-ipv6"));
										objtableData.put("owner-type", getXmlElementData(elementchild2, "owner-type"));
										objtableData.put("current-x2-rank",
												getXmlElementData(elementchild2, "current-x2-rank"));
										objtableData.put("previous-x2-rank",
												getXmlElementData(elementchild2, "previous-x2-rank"));
										objtableData.put("no-remove", getXmlElementData(elementchild2, "no-remove"));
										objtableData.put("is-samsung-gnb",
												getXmlElementData(elementchild2, "is-samsung-gnb"));
										objtableData.put("interface-state",
												getXmlElementData(elementchild2, "interface-state"));

										tabelData24.add(objtableData);
									}
								}
							}
						}
						if (q == 1) {

							Node ChildNode2 = childNodeList3.item(q);
							if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
								Element elementchild2 = (Element) ChildNode2;
								NodeList childNodeList2 = elementchild2.getElementsByTagName("eutran-generic-cell");
								for (int n = 0; n < childNodeList2.getLength(); n++) {
									Node ChildNode3 = childNodeList2.item(n);
									if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
										Element elementchild3 = (Element) ChildNode3;
										NodeList childNodeList4 = elementchild3
												.getElementsByTagName("eutran-cell-fdd-tdd");
										for (int o = 0; o < childNodeList4.getLength(); o++) {

											Node ChildNode4 = childNodeList4.item(o);
											if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {

												Element elementchild4 = (Element) ChildNode4;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("cell-num",
														getXmlElementData(elementchild4, "cell-num"));
												objtableData.put("administrative-state",
														getXmlElementData(elementchild4, "administrative-state"));
												// tabelData28.add(objtableData);
											}
										}
									}
								}
								childNodeList2 = elementchild2.getElementsByTagName("nb-iot");
								for (int o = 0; o < childNodeList2.getLength(); o++) {
									Node ChildNode3 = childNodeList2.item(o);
									if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
										Element elementchild3 = (Element) ChildNode3;
										NodeList childNodeList4 = elementchild3.getElementsByTagName("nb-iot-cell");
										for (int p = 0; p < childNodeList4.getLength(); p++) {
											Node ChildNode4 = childNodeList4.item(p);
											if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {

												Element elementchild4 = (Element) ChildNode4;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("cell-num",
														getXmlElementData(elementchild4, "cell-num"));
												objtableData.put("administrative-state",
														getXmlElementData(elementchild4, "administrative-state"));
												tabelData29.add(objtableData);
											}

										}
									}
								}

							}
						}
					}
					childNodeList3 = elementchild5.getElementsByTagName("hardware-management");
					for (int l = 0; l < childNodeList3.getLength(); l++) {
						Node ChildNode2 = childNodeList3.item(l);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList2 = elementchild2.getElementsByTagName("digital-unit");
							for (int n = 0; n < childNodeList2.getLength(); n++) {
								Node ChildNode3 = childNodeList2.item(n);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3
											.getElementsByTagName("digital-unit-entries");
									for (int o = 0; o < childNodeList4.getLength(); o++) {

										Node ChildNode4 = childNodeList4.item(o);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {

											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4
													.getElementsByTagName("external-port");
											for (int p = 0; p < childNodeList5.getLength(); p++) {
												Node ChildNode5 = childNodeList5.item(p);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild8 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild8
															.getElementsByTagName("cpri-port");
													for (int q = 0; q < childNodeList6.getLength(); q++) {
														Node ChildNode6 = childNodeList6.item(q);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															NodeList childNodeList7 = elementchild6
																	.getElementsByTagName("cpri-port-entries");
															for (int r = 0; r < childNodeList7.getLength(); r++) {

																Node ChildNode7 = childNodeList7.item(r);
																if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {

																	Element elementchild7 = (Element) ChildNode7;
																	NodeList childNodeList8 = elementchild7
																			.getElementsByTagName(
																					"fsu-connection-info");
																	for (int s = 0; s < childNodeList8
																			.getLength(); s++) {
																		Node ChildNode8 = childNodeList8.item(s);
																		if (Node.ELEMENT_NODE == ChildNode8
																				.getNodeType()) {

																			Element elementchild9 = (Element) ChildNode8;
																			LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																			objtableData.put("unit-type",
																					getXmlElementData(elementchild4,
																							"unit-type"));
																			objtableData.put("unit-id",
																					getXmlElementData(elementchild4,
																							"unit-id"));
																			objtableData.put("port-id",
																					getXmlElementData(elementchild7,
																							"port-id"));
																			objtableData.put("fsu-internode-id",
																					getXmlElementData(elementchild9,
																							"fsu-internode-id"));
																			objtableData.put("fsu-du-cpri-port-id",
																					getXmlElementData(elementchild9,
																							"fsu-du-cpri-port-id"));
																			tabelData27.add(objtableData);
																		}
																	}
																	LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																	objtableData.put("unit-type", getXmlElementData(
																			elementchild4, "unit-type"));
																	objtableData.put("unit-id", getXmlElementData(
																			elementchild4, "unit-id"));
																	objtableData.put("port-id", getXmlElementData(
																			elementchild7, "port-id"));
																	objtableData.put("administrative-state",
																			getXmlElementData(elementchild7,
																					"administrative-state"));
																	objtableData.put("connected-radio-unit-type",
																			getXmlElementData(elementchild7,
																					"connected-radio-unit-type"));
																	objtableData.put("auto-speed-configuration",
																			getXmlElementData(elementchild7,
																					"auto-speed-configuration"));
																	objtableData.put("cpri-speed-saved",
																			getXmlElementData(elementchild7,
																					"cpri-speed-saved"));
																	objtableData.put("cpri-speed-running",
																			getXmlElementData(elementchild7,
																					"cpri-speed-running"));
																	objtableData.put("cpri-compression-saved",
																			getXmlElementData(elementchild7,
																					"cpri-compression-saved"));
																	objtableData.put("cpri-compression-running",
																			getXmlElementData(elementchild7,
																					"cpri-compression-running"));
																	objtableData.put("cpri-connection-type",
																			getXmlElementData(elementchild7,
																					"cpri-connection-type"));
																	objtableData.put("bit-rate", getXmlElementData(
																			elementchild7, "bit-rate"));
																	objtableData.put("tx-wavelength", getXmlElementData(
																			elementchild7, "tx-wavelength"));
																	objtableData.put("tx-power", getXmlElementData(
																			elementchild7, "tx-power"));
																	objtableData.put("rx-power", getXmlElementData(
																			elementchild7, "rx-power"));
																	tabelData26.add(objtableData);
																}
															}
														}
													}

												}

											}

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("unit-type",
													getXmlElementData(elementchild4, "unit-type"));
											objtableData.put("unit-id", getXmlElementData(elementchild4, "unit-id"));

											tabelData25.add(objtableData);
										}
									}
								}
							}
						}
					}

				}
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String enbid4g = "";
			String neid = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enbid4g = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue();
				}
			}

			HashMap<String, List<String>> validationMap = new HashMap<>();
			LinkedHashMap<String, String> validationMap0prim = returnValidationList0prim(
					Arrays.asList("requested-nr-band1", "requested-nr-band2", "requested-nr-band3"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("requested-nr-band1", "requested-nr-band2", "requested-nr-band3"), "eNBName");
			htmlContent.append(createHtmltableDSS0prim(headerList, entry, tabelData1, validationMap0prim));

			validationMap0prim = returnValidationList0prim(
					Arrays.asList("plmn-index", "ue-type-index", "type-priority", "nr-band-0-usage", "bandIndicator-0"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("plmn-index", "ue-type-index", "type-priority", "nr-band-0-usage", "bandIndicator-0"),
					"eNBName");
			htmlContent.append(createHtmltableDSS0prim(headerList1, entry1, tabelData2, validationMap0prim));

			validationMap0prim = returnValidationList0prim(
					Arrays.asList(
							"intra-lte-ho-sgnb-option", "sgnb-activity-notification-mode", "nr-measurement-gap-usage",
							"ue-ambr-mn-dl-ratio", "ue-ambr-mn-ul-ratio", "nr-restrict-for-all-fr"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("intra-lte-ho-sgnb-option", "sgnb-activity-notification-mode",
							"nr-measurement-gap-usage", "ue-ambr-mn-dl-ratio", "ue-ambr-mn-ul-ratio",
							"nr-restrict-for-all-fr"),
					"eNBName");
			htmlContent.append(createHtmltableDSS0prim(headerList2, entry2, tabelData3, validationMap0prim));

			htmlContent.append(createHtmltableDSS(headerList3, entry3, tabelData4, validationMap));
			
			htmlContent.append(createHtmltableDSS(headerList4, entry4, tabelData5, validationMap));

			LinkedHashMap<String, LinkedHashMap<String, String>> validationMap1prim = returnValidationList1prim(
					"cell-num",
					Arrays.asList("target-gnodeb-id-length", "target-gnodeb-id", "target-gnb-du-id",
							"target-cell-identity"),
					"DSS_MOP_Parameters-4", enbid4g, dbcollectionFileName, Arrays.asList("target-gnodeb-id-length",
							"target-gnodeb-id", "target-gnb-du-id", "target-cell-identity"),
					"eNBId");
			Set<Integer> cellidset = new HashSet<>();
			try {
				for(LinkedHashMap<String,String> tdData : tabelData5) {
					if(tdData.get("cell-band-carrier").replaceAll("\\s", "").equalsIgnoreCase("850mhz")) {
						cellidset.add(NumberUtils.toInt(tdData.get("cell-num")));
					}
				}
			}catch(Exception e) {
				logger.error(ExceptionUtils.getFullStackTrace(e));
			}
			
			trimTabledata(tabelData6, cellidset, "cell-num");
			htmlContent
					.append(createHtmltableDSS1prim(headerList5, entry5, "cell-num", tabelData6, validationMap1prim));

			validationMap1prim = returnValidationList1prim("cell-num", Arrays.asList("emergency-arp-priority"),
					"DSS_MOP_Parameters-3", enbid4g, dbcollectionFileName, Arrays.asList("emergency-arp-priority"),
					"eNBId");
			htmlContent
					.append(createHtmltableDSS1prim(headerList6, entry6, "cell-num", tabelData7, validationMap1prim));

			validationMap1prim = returnValidationList1prim("cell-num",
					Arrays.asList("endc-support", "endc-operation-mode"), "DSS_MOP_Parameters-3", enbid4g,
					dbcollectionFileName, Arrays.asList("endc-support", "endc-operation-mode"), "eNBId");
			htmlContent
					.append(createHtmltableDSS1prim(headerList7, entry7, "cell-num", tabelData8, validationMap1prim));

			List<List<String>> keys = new ArrayList<>();
			keys.add(Arrays.asList("plmn-index", "plmn-usage"));
			LinkedHashMap<String, LinkedHashMap<String, LinkedHashMap<String, String>>> validationMap2prim = returnValidationList2prim(
					"cell-num", keys, "DSS_MOP_Parameters-3", enbid4g, dbcollectionFileName,
					Arrays.asList("plmn-index", "plmn-usage"), "eNBId");
			htmlContent.append(createHtmltableDSS2prim(headerList8, entry8, "cell-num", "plmn-index", tabelData9,
					validationMap2prim));

			htmlContent.append(createHtmltableDSS(headerList9, entry9, tabelData10, validationMap));

			validationMap1prim = returnValidationList1prim("cell-num", Arrays.asList("plmn-info-list-r15-usage"),
					"DSS_MOP_Parameters-3", enbid4g, dbcollectionFileName, Arrays.asList("plmn-info-list-r15-usage"),
					"eNBId");
			htmlContent.append(
					createHtmltableDSS1prim(headerList10, entry10, "cell-num", tabelData11, validationMap1prim));

			htmlContent.append(createHtmltableDSS(headerList11, entry11, tabelData12, validationMap));

			validationMap1prim = returnValidationList1prim("cell-num",
					Arrays.asList("purpose", "fa-index2", "qci-group-index", "b1-enable", "b1-threshold-nr-rsrp",
							"b1-threshold-nr-rsrq", "b1-threshold-nr-sinr", "hysteresis", "time-to-trigger",
							"trigger-quantity", "max-report-rs-index"),
					"DSS_MOP_Parameters-3", enbid4g, dbcollectionFileName,
					Arrays.asList("purpose", "fa-index", "qci-group-index", "b1-enable", "b1-threshold-nr-rsrp",
							"b1-threshold-nr-rsrq", "b1-threshold-nr-sinr", "hysteresis", "time-to-trigger",
							"trigger-quantity", "max-report-rs-index"),
					"eNBId");
			htmlContent.append(
					createHtmltableDSS1prim(headerList12, entry12, "cell-num", tabelData13, validationMap1prim));

			validationMap1prim = returnValidationList1prim("cell-num", Arrays.asList("dl-power-option"),
					"DSS_MOP_Parameters-4", enbid4g, dbcollectionFileName, Arrays.asList("dl-power-option"), "eNBId");
			htmlContent.append(
					createHtmltableDSS1prim(headerList13, entry13, "cell-num", tabelData14, validationMap1prim));

			validationMap1prim = returnValidationList1prim("cell-num",
					Arrays.asList("p-max-eutra-ratio-fr1", "lte-ul-out-max-tbs-threshold-fr1"), "DSS_MOP_Parameters-3",
					enbid4g, dbcollectionFileName,
					Arrays.asList("p-max-eutra-ratio-fr1", "lte-ul-out-max-tbs-threshold-fr1"), "eNBId");
			htmlContent.append(
					createHtmltableDSS1prim(headerList14, entry14, "cell-num", tabelData15, validationMap1prim));

			validationMap1prim = returnValidationList1prim("cell-num", Arrays.asList("dps-support"),
					"DSS_MOP_Parameters-3", enbid4g, dbcollectionFileName, Arrays.asList("dps-support"), "eNBId");
			htmlContent.append(
					createHtmltableDSS1prim(headerList15, entry15, "cell-num", tabelData16, validationMap1prim));

			validationMap1prim = returnValidationList1prim("cell-num",
					Arrays.asList("pusch-hopping-enabled", "coordinated-cellnum"), "DSS_MOP_Parameters-4", enbid4g,
					dbcollectionFileName, Arrays.asList("pusch-hopping-enabled", "coordinated-cellnum"), "eNBId");
			htmlContent.append(
					createHtmltableDSS1prim(headerList16, entry16, "cell-num", tabelData17, validationMap1prim));

			validationMap1prim = returnValidationList1prim("cell-num", Arrays.asList("max-ttib-ue-num-thresh"),
					"DSS_MOP_Parameters-4", enbid4g, dbcollectionFileName, Arrays.asList("max-ttib-ue-num-thresh"),
					"eNBId");
			htmlContent.append(
					createHtmltableDSS1prim(headerList17, entry17, "cell-num", tabelData18, validationMap1prim));

			validationMap1prim = returnValidationList1prim("cell-num",
					Arrays.asList("spectrum-sharing-lte", "rb-blanking-case-for-spectrum-sharing",
							"minimum-number-of-nr-slots", "maximum-number-of-nr-slots", "initial-number-of-nr-slots",
							"resource-pattern-change-period", "target-number-of-nr-slots",
							"resource-pattern-out-of-synch-determination-count-threshold",
							"dl-prb-usage-threshold-for-increasing-lte-resource",
							"ul-prb-usage-threshold-for-increasing-lte-resource"),
					"DSS_MOP_Parameters-4", enbid4g, dbcollectionFileName,
					Arrays.asList("spectrum-sharing-lte", "rb-blanking-case-for-spectrum-sharing",
							"minimum-number-of-nr-slots", "maximum-number-of-nr-slots", "initial-number-of-nr-slots",
							"resource-pattern-change-period", "target-number-of-nr-slots",
							"resource-pattern-out-of-synch-determination-count-threshold",
							"dl-prb-usage-threshold-for-increasing-lte-resource",
							"ul-prb-usage-threshold-for-increasing-lte-resource"),
					"eNBId");
			htmlContent.append(
					createHtmltableDSS1prim(headerList18, entry18, "cell-num", tabelData19, validationMap1prim));

			validationMap1prim = returnValidationList1prim("cell-num", Arrays.asList("fa-index1"),
					"DSS_MOP_Parameters-3", enbid4g, dbcollectionFileName, Arrays.asList("fa-index"), "eNBId");
			htmlContent.append(
					createHtmltableDSS1prim(headerList19, entry19, "cell-num", tabelData20, validationMap1prim));

			validationMap1prim = returnValidationList1prim("cell-num", Arrays.asList("fa-index1", "duplex-type",
					"arfcn-nr-dl", "arfcn-nr-ul", "mtc-ssb-nr-period", "mtc-ssb-nr-offset", "mtc-ssb-nr-duration",
					"sub-carrier-spacing-ssb", "abs-thresh-rs-index-rsrp", "abs-thresh-rs-index-rsrq",
					"abs-thresh-rs-index-sinr", "nr-band", "offset-freq"), "DSS_MOP_Parameters-3", enbid4g,
					dbcollectionFileName,
					Arrays.asList("fa-index", "duplex-type", "arfcn-nr-dl", "arfcn-nr-ul", "mtc-ssb-nr-period",
							"mtc-ssb-nr-offset", "mtc-ssb-nr-duration", "sub-carrier-spacing-ssb",
							"abs-thresh-rs-index-rsrp", "abs-thresh-rs-index-rsrq", "abs-thresh-rs-index-sinr",
							"nr-band", "offset-freq"),
					"eNBId");
			htmlContent.append(
					createHtmltableDSS1prim(headerList20, entry20, "cell-num", tabelData21, validationMap1prim));

			List<CIQDetailsModel> listOfCiqDetails1 = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"DSS_MOP_Parameters-1", "eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enbid4g = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue();
				}
			}
			validationMap1prim = new LinkedHashMap<>();
			validationMap0prim = returnValidationList0prim(
					Arrays.asList("bearer-type-usage1", "qci1", "arp1", "bearer-type1", "priority1"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("bearer-type-usage", "qci", "arp", "bearer-type", "priority"), "eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails1)) {
				if (listOfCiqDetails1.get(0).getCiqMap().containsKey("dc-index1")) {
					validationMap1prim.put(listOfCiqDetails1.get(0).getCiqMap().get("dc-index1").getHeaderValue(),
							validationMap0prim);
				}
			}
			validationMap0prim = returnValidationList0prim(
					Arrays.asList("bearer-type-usage2", "qci2", "arp2", "bearer-type2", "priority2"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("bearer-type-usage", "qci", "arp", "bearer-type", "priority"), "eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails1)) {
				if (listOfCiqDetails1.get(0).getCiqMap().containsKey("dc-index2")) {
					validationMap1prim.put(listOfCiqDetails1.get(0).getCiqMap().get("dc-index2").getHeaderValue(),
							validationMap0prim);
				}
			}
			validationMap0prim = returnValidationList0prim(
					Arrays.asList("bearer-type-usage3", "qci3", "arp3", "bearer-type3", "priority3"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("bearer-type-usage", "qci", "arp", "bearer-type", "priority"), "eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails1)) {
				if (listOfCiqDetails1.get(0).getCiqMap().containsKey("dc-index3")) {
					validationMap1prim.put(listOfCiqDetails1.get(0).getCiqMap().get("dc-index3").getHeaderValue(),
							validationMap0prim);
				}
			}

			htmlContent.append(
					createHtmltableDSS1prim(headerList21, entry21, "dc-index", tabelData22, validationMap1prim));

			htmlContent.append(createHtmltableDSS(headerList22, entry22, tabelData23, validationMap));

			validationMap0prim = returnValidationList0prim(
					Arrays.asList("neighbor-gnb-index", "no-x2", "gnb-id-bit-length", "gnb-id", "ip-ver1"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("neighbor-gnb-index", "no-x2", "gnb-id-bit-length", "gnb-id", "ip-ver"), "eNBName");
			htmlContent.append(createHtmltableDSS0prim(headerList23, entry23, tabelData24, validationMap0prim));

			htmlContent.append(createHtmltableDSS(headerList24, entry24, tabelData25, validationMap));

			keys = new ArrayList<>();
			keys.add(Arrays.asList("port-id1", "administrative-state1", "auto-speed-configuration1",
					"cpri-speed-saved1", "cpri-connection-type1"));
			validationMap1prim = returnValidationList1prim("port-id1",
					Arrays.asList("administrative-state1", "auto-speed-configuration1", "cpri-speed-saved1",
							"cpri-connection-type1"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName, Arrays.asList("administrative-state",
							"auto-speed-configuration", "cpri-speed-saved", "cpri-connection-type"),
					"eNBName");
			htmlContent
					.append(createHtmltableDSS1prim(headerList25, entry25, "port-id", tabelData26, validationMap1prim));

			keys = new ArrayList<>();
			keys.add(Arrays.asList("port-id1", "fsu-internode-id1", "fsu-du-cpri-port-id1"));
			keys.add(Arrays.asList("port-id2", "fsu-internode-id2", "fsu-du-cpri-port-id2"));
			keys.add(Arrays.asList("port-id3", "fsu-internode-id3", "fsu-du-cpri-port-id3"));
			validationMap2prim = returnValidationList2prim("unit-id1", keys, "DSS_MOP_Parameters-1", neid,
					dbcollectionFileName, Arrays.asList("port-id", "fsu-internode-id", "fsu-du-cpri-port-id"),
					"eNBName");
			htmlContent.append(createHtmltableDSS2prim(headerList26, entry26, "unit-id", "port-id", tabelData27,
					validationMap2prim));

			htmlContent.append(createHtmltableDSS(headerList27, entry27, tabelData28, validationMap));

			htmlContent.append(createHtmltableDSS(headerList28, entry28, tabelData29, validationMap));

			keys = new ArrayList<>();
			keys.add(Arrays.asList("non-gbr-qci1", "nr-band-freq1", "priority1"));
			keys.add(Arrays.asList("non-gbr-qci2", "nr-band-freq2", "priority2"));
			keys.add(Arrays.asList("non-gbr-qci3", "nr-band-freq3", "priority3"));
			validationMap2prim = returnValidationList2prim("cell-num", keys, "DSS_MOP_Parameters-3", enbid4g,
					dbcollectionFileName, Arrays.asList("non-gbr-qci", "nr-band-freq", "priority"), "eNBId");
			htmlContent.append(createHtmltableDSS2prim(headerList29, entry29, "cell-num", "non-gbr-qci", tabelData30,
					validationMap2prim));

			htmlContent.append(createHtmltableDSS(headerList30, entry30, tabelData31, validationMap));
			htmlContent.append(createHtmltableDSS(headerList31, entry31, tabelData32, validationMap));
			htmlContent.append(createHtmltable(headerList33, entry33, tabelData33));

			htmlContent.append("</table>\n");
		}

		catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder getACPFA1A2A3ChecksDSS(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			// For a1-report-config entries
			String entry = "a1-report-config";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("gnodeb-id");
			headerList1.add("cell-identity");
			headerList1.add("index");
			headerList1.add("a1-threshold-rsrp");
			headerList1.add("a1-time-to-trigger");
			headerList1.add("a1-purpose");
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("gnodeb-id");
			headerList2.add("cell-identity");
			headerList2.add("index");
			headerList2.add("a2-threshold-rsrp");
			headerList2.add("a2-time-to-trigger");
			headerList2.add("a2-purpose");
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("gnodeb-id");
			headerList3.add("cell-identity");
			headerList3.add("index");
			headerList3.add("a3-threshold-rsrp");
			headerList3.add("a3-time-to-trigger");
			headerList3.add("a3-purpose");

			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("gnodeb-id");
			headerList4.add("cell-identity");
			headerList4.add("index");
			headerList4.add("report-type");
			headerList4.add("report-interval");
			headerList4.add("report-amount");
			headerList4.add("max-report-cells");
			headerList4.add("event-based-report-add-neigh-meas");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();

			NodeList nodeList1 = document.getElementsByTagName("gnb-cu-cp-function-entries");
			for (int i = 0; i < nodeList1.getLength(); i++) {

				Node inChildNode = nodeList1.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elemenx = (Element) inChildNode;

					NodeList nodeList = elemenx.getElementsByTagName("gutran-cu-cell");
					for (int m = 0; m < nodeList.getLength(); m++) {
						Node inChildNodee = nodeList.item(m);
						if (Node.ELEMENT_NODE == inChildNodee.getNodeType()) {

							Element element = (Element) inChildNodee;

							NodeList childNodeList = element.getElementsByTagName("gutran-cu-cell-entries");

							for (int j = 0; j < childNodeList.getLength(); j++) {

								Node ChildNode = childNodeList.item(j);
								if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

									Element elementchild = (Element) ChildNode;
									LinkedHashMap<String, String> objtableDatay = new LinkedHashMap<>();

									/*
									 * objtableDatay.put("cell-identity", getXmlElementData(elementchild,
									 * "cell-identity")); tabelData4.add(objtableDatay);
									 */

									NodeList childNodeList1 = elementchild
											.getElementsByTagName("report-config-entries");

									for (int k = 0; k < childNodeList1.getLength(); k++) {

										Node ChildNode1 = childNodeList1.item(k);
										if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

											Element elementchild1 = (Element) ChildNode1;
											LinkedHashMap<String, String> objtableDatax = new LinkedHashMap<>();
											objtableDatax.put("gnodeb-id", getXmlElementData(elemenx, "gnodeb-id"));
											objtableDatax.put("cell-identity",
													getXmlElementData(elementchild, "cell-identity"));
											objtableDatax.put("index", getXmlElementData(elementchild1, "index"));
											objtableDatax.put("report-type",
													getXmlElementData(elementchild1, "report-type"));
											objtableDatax.put("report-interval",
													getXmlElementData(elementchild1, "report-interval"));
											objtableDatax.put("report-amount",
													getXmlElementData(elementchild1, "report-amount"));
											objtableDatax.put("max-report-cells",
													getXmlElementData(elementchild1, "max-report-cells"));
											objtableDatax.put("event-based-report-add-neigh-meas", getXmlElementData(
													elementchild1, "event-based-report-add-neigh-meas"));
											tabelData4.add(objtableDatax);

											NodeList childNodeList2 = elementchild1
													.getElementsByTagName("a1-report-config");
											for (int l = 0; l < childNodeList2.getLength(); l++) {

												Node ChildNode2 = childNodeList2.item(l);
												if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

													Element elementchild2 = (Element) ChildNode2;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													objtableData.put("gnodeb-id",
															getXmlElementData(elemenx, "gnodeb-id"));
													objtableData.put("cell-identity",
															getXmlElementData(elementchild, "cell-identity"));
													objtableData.put("index",
															getXmlElementData(elementchild1, "index"));
													objtableData.put("a1-threshold-rsrp",
															getXmlElementData(elementchild2, "a1-threshold-rsrp"));
													objtableData.put("a1-time-to-trigger",
															getXmlElementData(elementchild2, "a1-time-to-trigger"));
													objtableData.put("a1-purpose",
															getXmlElementData(elementchild2, "a1-purpose"));

													tabelData1.add(objtableData);
												}
											}

											childNodeList2 = elementchild1.getElementsByTagName("a2-report-config");
											for (int l = 0; l < childNodeList2.getLength(); l++) {

												Node ChildNode2 = childNodeList2.item(l);
												if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

													Element elementchild2 = (Element) ChildNode2;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													objtableData.put("gnodeb-id",
															getXmlElementData(elemenx, "gnodeb-id"));
													objtableData.put("cell-identity",
															getXmlElementData(elementchild, "cell-identity"));
													objtableData.put("index",
															getXmlElementData(elementchild1, "index"));
													objtableData.put("a2-threshold-rsrp",
															getXmlElementData(elementchild2, "a2-threshold-rsrp"));
													objtableData.put("a2-time-to-trigger",
															getXmlElementData(elementchild2, "a2-time-to-trigger"));
													objtableData.put("a2-purpose",
															getXmlElementData(elementchild2, "a2-purpose"));

													tabelData2.add(objtableData);
												}
											}

											childNodeList2 = elementchild1.getElementsByTagName("a3-report-config");
											for (int l = 0; l < childNodeList2.getLength(); l++) {

												Node ChildNode2 = childNodeList2.item(l);
												if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

													Element elementchild2 = (Element) ChildNode2;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													objtableData.put("gnodeb-id",
															getXmlElementData(elemenx, "gnodeb-id"));
													objtableData.put("cell-identity",
															getXmlElementData(elementchild, "cell-identity"));
													objtableData.put("index",
															getXmlElementData(elementchild1, "index"));
													objtableData.put("a3-threshold-rsrp",
															getXmlElementData(elementchild2, "a3-threshold-rsrp"));
													objtableData.put("a3-time-to-trigger",
															getXmlElementData(elementchild2, "a3-time-to-trigger"));
													objtableData.put("a3-purpose",
															getXmlElementData(elementchild2, "a3-purpose"));

													tabelData3.add(objtableData);
												}
											}

										}

									}

								}

							}
						}
					}

				}
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String neid = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue();
				}
			}

			
			List<List<String>> keys = new ArrayList<>();
			keys.add(Arrays.asList("indexa11", "a1-threshold-rsrp1", "a1-time-to-trigger1", "a1-purpose1"));
			keys.add(Arrays.asList("indexa12", "a1-threshold-rsrp2", "a1-time-to-trigger2", "a1-purpose2"));
			LinkedHashMap<String, LinkedHashMap<String, LinkedHashMap<String, String>>> validationMap = returnValidationList2prim(
					"cellId", keys, "DSS_MOP_Parameters-2", neid, dbcollectionFileName,
					Arrays.asList("index", "a1-threshold-rsrp", "a1-time-to-trigger", "a1-purpose"), "eNBName");
			
			Set<Integer> cellidset = new HashSet<>();
			try {
				cellidset = validationMap.keySet().stream().map(s -> NumberUtils.toInt(s)).collect(Collectors.toSet());
			}catch (Exception e){
				logger.error(ExceptionUtils.getFullStackTrace(e));
			}
			trimTabledata(tabelData1, cellidset, "cell-identity");

			htmlContent.append(
					createHtmltableDSS2prim(headerList1, entry, "cell-identity", "index", tabelData1, validationMap));

			entry = "a2-report-config";
			keys = new ArrayList<>();
			keys.add(Arrays.asList("indexa21", "a2-threshold-rsrp1", "a2-time-to-trigger1", "a2-purpose1"));
			keys.add(Arrays.asList("indexa22", "a2-threshold-rsrp2", "a2-time-to-trigger2", "a2-purpose2"));
			keys.add(Arrays.asList("indexa23", "a2-threshold-rsrp3", "a2-time-to-trigger3", "a2-purpose3"));
			validationMap = returnValidationList2prim("cellId", keys, "DSS_MOP_Parameters-2", neid,
					dbcollectionFileName,
					Arrays.asList("index", "a2-threshold-rsrp", "a2-time-to-trigger", "a2-purpose"), "eNBName");
			
			cellidset = new HashSet<>();
			try {
				cellidset = validationMap.keySet().stream().map(s -> NumberUtils.toInt(s)).collect(Collectors.toSet());
			}catch (Exception e){
				logger.error(ExceptionUtils.getFullStackTrace(e));
			}
			trimTabledata(tabelData2, cellidset, "cell-identity");

			htmlContent.append(
					createHtmltableDSS2prim(headerList2, entry, "cell-identity", "index", tabelData2, validationMap));

			entry = "a3-report-config";
			keys = new ArrayList<>();
			keys.add(Arrays.asList("indexa31", "a3-time-to-trigger1"));
			validationMap = returnValidationList2prim("cellId", keys, "DSS_MOP_Parameters-2", neid,
					dbcollectionFileName, Arrays.asList("index", "a3-time-to-trigger"), "eNBName");
			cellidset = new HashSet<>();
			try {
				cellidset = validationMap.keySet().stream().map(s -> NumberUtils.toInt(s)).collect(Collectors.toSet());
			}catch (Exception e){
				logger.error(ExceptionUtils.getFullStackTrace(e));
			}
			trimTabledata(tabelData3, cellidset, "cell-identity");

			htmlContent.append(
					createHtmltableDSS2prim(headerList3, entry, "cell-identity", "index", tabelData3, validationMap));

			entry = "report-config-entries";
			keys = new ArrayList<>();
			keys.add(Arrays.asList("indexa11"));
			keys.add(Arrays.asList("indexa12"));
			keys.add(Arrays.asList("indexa21"));
			keys.add(Arrays.asList("indexa22"));
			keys.add(Arrays.asList("indexa23"));
			keys.add(Arrays.asList("indexa31"));
			validationMap = returnValidationList2prim("cellId", keys, "DSS_MOP_Parameters-2", neid,
					dbcollectionFileName, Arrays.asList("index"), "eNBName");
			cellidset = new HashSet<>();
			try {
				cellidset = validationMap.keySet().stream().map(s -> NumberUtils.toInt(s)).collect(Collectors.toSet());
			}catch (Exception e){
				logger.error(ExceptionUtils.getFullStackTrace(e));
			}
			trimTabledata(tabelData4, cellidset, "cell-identity");
			
			htmlContent.append(
					createHtmltableDSS2prim(headerList4, entry, "cell-identity", "index", tabelData4, validationMap));

			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder getAupfAuditInputResponse(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry = "nr-secondary-rat-report";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("secondary-rat-usage-report-flag");
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("qci");
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("qci");
			headerList3.add("distribution-mode");
			headerList3.add("distribution-path");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			NodeList nodeListx = document.getElementsByTagName("nr-secondary-rat-report");

			for (int l = 0; l < nodeListx.getLength(); l++) {

				Node ChildNode2 = nodeListx.item(l);
				if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

					Element elementchild2 = (Element) ChildNode2;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					objtableData.put("secondary-rat-usage-report-flag",
							getXmlElementData(elementchild2, "secondary-rat-usage-report-flag"));

					tabelData1.add(objtableData);
				}
			}

			NodeList data = document.getElementsByTagName("endc-distribution");
			for (int i = 0; i < data.getLength(); i++) {
				Node inChildNode = data.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("endc-distribution-entry");

					for (int j = 0; j < childNodeList.getLength(); j++) {
						Node childnode2 = childNodeList.item(j);

						if (Node.ELEMENT_NODE == childnode2.getNodeType()) {
							Element elementchild2 = (Element) childnode2;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("qci", getXmlElementData(elementchild2, "qci"));
							tabelData2.add(objtableData);
							NodeList innerList = elementchild2.getElementsByTagName("endc-distribution-b6g");
							for (int k = 0; k < innerList.getLength(); k++) {
								Node innerNode = innerList.item(k);
								if (Node.ELEMENT_NODE == innerNode.getNodeType()) {
									Element elementchild3 = (Element) innerNode;
									LinkedHashMap<String, String> objtableData1 = new LinkedHashMap<>();
									objtableData1.put("qci", getXmlElementData(elementchild2, "qci"));
									objtableData1.put("distribution-mode",
											getXmlElementData(elementchild3, "distribution-mode"));
									objtableData1.put("distribution-path",
											getXmlElementData(elementchild3, "distribution-path"));
									tabelData3.add(objtableData1);
								}
							}

						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String gnbid = "";
			String neid = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("gNBID")) {
					gnbid = listOfCiqDetails.get(0).getCiqMap().get("gNBID").getHeaderValue();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue();
				}
				
			}

			entry = "nr-secondary-rat-report";
			LinkedHashMap<String, String> validationMap1 = returnValidationList0prim(
					Arrays.asList("secondary-rat-usage-report-flag"), "DSS_MOP_Parameters-1", neid,
					dbcollectionFileName, Arrays.asList("secondary-rat-usage-report-flag"), "eNBName");
			htmlContent.append(createHtmltableDSS0prim(headerList1, entry, tabelData1, validationMap1));

			List<CIQDetailsModel> listOfCiqDetails1 = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"DSS_MOP_Parameters-1", "eNBName");

			entry = "endc-distribution-entry";
			HashMap<String, List<String>> validationMap2 = new HashMap<>();

			List<String> ls = new ArrayList<String>();
			try {

				if (!ObjectUtils.isEmpty(listOfCiqDetails1)) {
					for (int i = 1; i <= 3; i++) {
						if (listOfCiqDetails1.get(0).getCiqMap().containsKey("aupf-qci" + String.valueOf(i))) {
							String spilitCqi = listOfCiqDetails1.get(0).getCiqMap().get("aupf-qci" + String.valueOf(i))
									.getHeaderValue();
							String[] arr = spilitCqi.split("&&");

							for (int j = Integer.valueOf(arr[0]); j <= Integer.valueOf(arr[1]); j++) {
								ls.add(String.valueOf(j));

							}

						}
					}
					if(listOfCiqDetails1.get(0).getCiqMap().containsKey("aupf-qci1"))
					{
					validationMap2.put("qci", ls);
					}

				}
			} catch (Exception e) {
				System.out.println(e);
			}
			htmlContent.append(createHtmltableDSS(headerList2, entry, tabelData2, validationMap2));

			entry = "endc-distribution-b6g";
			LinkedHashMap<String, LinkedHashMap<String, String>> v = new LinkedHashMap<>();

			try {
				for (int i = 1; i <= 3; i++) {
					LinkedHashMap<String, String> validationMap3 = returnValidationList0prim(
							Arrays.asList("aupf-qci" + String.valueOf(i), "distribution-mode" + String.valueOf(i)),
							"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
							Arrays.asList("qci", "distribution-mode"), "eNBName");

					String spilitCqi = validationMap3.get("qci");
					String[] arr = spilitCqi.split("&&");
					for (int j = Integer.valueOf(arr[0]); j <= Integer.valueOf(arr[1]); j++) {
						LinkedHashMap<String, String> validationMap4 = new LinkedHashMap<>();
						validationMap4.put("qci", String.valueOf(j));
						validationMap4.put("distribution-mode", validationMap3.get("distribution-mode"));
						v.put(String.valueOf(j), validationMap4);
					}

				}
			} catch (Exception e) {
				System.out.println(e);
			}

			htmlContent.append(createHtmltableDSS1prim(headerList3, entry, "qci", tabelData3, v));
			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder getAcpfAuditInputResponse(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry = "gutran-cu-cell-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("gnodeb-id");
			headerList1.add("cell-identity");
			headerList1.add("service-state");
			headerList1.add("mapping-end-point-f1-index");
			headerList1.add("nr-physical-cell-id");
			headerList1.add("nr-scs-dl");
			headerList1.add("nr-scs-ul");
			headerList1.add("nrb-dl");
			headerList1.add("nrb-ul");
			headerList1.add("nr-arfcn-dl");
			headerList1.add("nr-arfcn-ul");
			headerList1.add("ssb-arfcn");
			headerList1.add("nr-ul-coverage-method");
			headerList1.add("tracking-area-code");
			headerList1.add("configured-tac");

			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("gnodeb-id");
			headerList2.add("limited-count-of-nr-cell-for-x2");

			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("gnodeb-id");
			headerList3.add("feature-enabled");
			headerList3.add("signaling-timer");
			headerList3.add("notification-level");
			headerList3.add("x2-reporting");
			headerList3.add("ue-inactivity-timer");
			headerList3.add("spid-based-user-inactivity");

			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("gnodeb-id");
			headerList4.add("qci");
			headerList4.add("drb-inactivity-timer");

			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("gnodeb-id");
			headerList5.add("ul-primary-path-mode");

			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("gnodeb-id");
			headerList6.add("cell-identity");
			headerList6.add("cell-neighbor-index");
			headerList6.add("relation-type");

			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("gnodeb-id");
			headerList7.add("cell-identity");
			headerList7.add("cell-neighbor-index");
			headerList7.add("target-cell-identity");
			headerList7.add("created-by");
			headerList7.add("is-remove-allowed");
			headerList7.add("rank");

			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("gnodeb-id");
			headerList8.add("neighbor-gnb-cell-index");
			headerList8.add("nr-physical-cell-id");
			headerList8.add("nr-scs-dl");
			headerList8.add("nr-scs-ul");
			headerList8.add("nrb-dl");
			headerList8.add("nrb-ul");
			headerList8.add("nr-arfcn-dl");
			headerList8.add("nr-arfcn-ul");
			headerList8.add("ssb-arfcn");
			headerList8.add("tracking-area-code");

			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("gnodeb-id");
			headerList9.add("neighbor-gnb-cell-index");
			headerList9.add("gnodeb-id");
			headerList9.add("cell-identity");
			headerList9.add("mcc");
			headerList9.add("mnc");

			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("gnodeb-id");
			headerList10.add("neighbor-gnb-cell-index");
			headerList10.add("plmn-index");
			headerList10.add("mcc");
			headerList10.add("mnc");

			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("gnodeb-id");
			headerList11.add("alarm-unit-type");
			headerList11.add("alarm-unit-id");
			headerList11.add("alarm-type");
			headerList11.add("location");
			headerList11.add("raised-time");
			headerList11.add("alarm-group");
			headerList11.add("probable-cause");
			headerList11.add("specific-problem");
			headerList11.add("severity");
			headerList11.add("alarm-code");
			headerList11.add("sequence-number");
			headerList11.add("time-info");

			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("gnodeb-id");
			headerList13.add("end-point-f1-index");
			headerList13.add("gnb-du-id");
			headerList13.add("gnb-du-name");
			headerList13.add("remote-ip-address");
			headerList13.add("secondary-remote-ip-address");
			headerList13.add("sctp-state");
			headerList13.add("f1-ap-state");

			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("gnodeb-id");
			headerList14.add("x2-neighbor-index");
			headerList14.add("remote-ip-address");
			headerList14.add("secondary-remote-ip-address");
			headerList14.add("enb-id");
			headerList14.add("mcc");
			headerList14.add("mnc");
			headerList14.add("sctp-state");
			headerList14.add("x2-ap-state");
			headerList14.add("created-by");
			
			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("target-neighbor-gnb-cell-index");
			headerList15.add("created-by");
			headerList15.add("is-remove-allowed");
			headerList15.add("rank");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();

			LinkedHashMap<String, String> gnodeb = new LinkedHashMap<>();

			NodeList nodeListxx11 = document.getElementsByTagName("gnb-cu-cp-function-entries");

			for (int l = 0; l < nodeListxx11.getLength(); l++) {

				Node ChildNode1 = nodeListxx11.item(l);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					gnodeb.put("gnodeb-id", getXmlElementData(elementchild1, "gnodeb-id"));
				}
			}

			NodeList nodeListx = document.getElementsByTagName("gutran-cu-cell-entries");

			for (int l = 0; l < nodeListx.getLength(); l++) {

				Node ChildNode1 = nodeListx.item(l);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					objtableData.put("gnodeb-id", gnodeb.get("gnodeb-id"));
					objtableData.put("cell-identity", getXmlElementData(elementchild1, "cell-identity"));
					objtableData.put("service-state", getXmlElementData(elementchild1, "service-state"));
					objtableData.put("mapping-end-point-f1-index",
							getXmlElementData(elementchild1, "mapping-end-point-f1-index"));
					objtableData.put("nr-physical-cell-id", getXmlElementData(elementchild1, "nr-physical-cell-id"));
					objtableData.put("nr-scs-dl", getXmlElementData(elementchild1, "nr-scs-dl"));
					objtableData.put("nr-scs-ul", getXmlElementData(elementchild1, "nr-scs-ul"));
					objtableData.put("nrb-dl", getXmlElementData(elementchild1, "nrb-dl"));
					objtableData.put("nrb-ul", getXmlElementData(elementchild1, "nrb-ul"));
					objtableData.put("nr-arfcn-dl", getXmlElementData(elementchild1, "nr-arfcn-dl"));
					objtableData.put("nr-arfcn-ul", getXmlElementData(elementchild1, "nr-arfcn-ul"));
					objtableData.put("ssb-arfcn", getXmlElementData(elementchild1, "ssb-arfcn"));
					objtableData.put("nr-ul-coverage-method",
							getXmlElementData(elementchild1, "nr-ul-coverage-method"));
					objtableData.put("tracking-area-code", getXmlElementData(elementchild1, "tracking-area-code"));
					objtableData.put("configured-tac", getXmlElementData(elementchild1, "configured-tac"));
					tabelData1.add(objtableData);

					NodeList inlist1 = elementchild1.getElementsByTagName("cell-neighbor-relation-table");

					for (int j = 0; j < inlist1.getLength(); j++) {

						Node ChildNode2 = inlist1.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

							Element elementchild3 = (Element) ChildNode2;
							NodeList childnodeList3 = elementchild3
									.getElementsByTagName("cell-neighbor-relation-table-entries");
							for (int a = 0; a < childnodeList3.getLength(); a++) {
								LinkedHashMap<String, String> objtableData6 = new LinkedHashMap<>();
								objtableData6.put("gnodeb-id", gnodeb.get("gnodeb-id"));
								objtableData6.put("cell-identity", getXmlElementData(elementchild1, "cell-identity"));
								Node childNode3 = childnodeList3.item(a);
								if (Node.ELEMENT_NODE == childNode3.getNodeType()) {

									Element elementchild2 = (Element) childNode3;
									objtableData6.put("cell-neighbor-index",
											getXmlElementData(elementchild2, "cell-neighbor-index"));
									objtableData6.put("relation-type",
											getXmlElementData(elementchild2, "relation-type"));
									tabelData6.add(objtableData6);

									NodeList childnodeList4 = elementchild2
											.getElementsByTagName("intra-gnb-neighbor-data");
									for (int b = 0; b < childnodeList4.getLength(); b++) {
										LinkedHashMap<String, String> objtableData7 = new LinkedHashMap<>();
										objtableData7.put("gnodeb-id", gnodeb.get("gnodeb-id"));
										objtableData7.put("cell-identity",
												getXmlElementData(elementchild1, "cell-identity"));
										objtableData7.put("cell-neighbor-index",
												getXmlElementData(elementchild2, "cell-neighbor-index"));
										Node childNode4 = childnodeList4.item(b);
										if (Node.ELEMENT_NODE == childNode4.getNodeType()) {

											Element elementchild4 = (Element) childNode4;
											objtableData7.put("target-cell-identity",
													getXmlElementData(elementchild4, "target-cell-identity"));
											objtableData7.put("created-by",
													getXmlElementData(elementchild4, "created-by"));
											objtableData7.put("is-remove-allowed",
													getXmlElementData(elementchild4, "is-remove-allowed"));
											objtableData7.put("rank", getXmlElementData(elementchild4, "rank"));
											tabelData7.add(objtableData7);

										}
									}
									
									
									//inter 
									NodeList childnodeList4x = elementchild2
											.getElementsByTagName("inter-gnb-neighbor-data");
									for (int b = 0; b < childnodeList4x.getLength(); b++) {
										Node childNode4 = childnodeList4x.item(b);
										if (Node.ELEMENT_NODE == childNode4.getNodeType()) {

											Element elementchild4 = (Element) childNode4;
											
											LinkedHashMap<String, String> objtableData15 = new LinkedHashMap<>();
											objtableData15.put("target-neighbor-gnb-cell-index",getXmlElementData(elementchild4, "target-neighbor-gnb-cell-index"));
											objtableData15.put("created-by",getXmlElementData(elementchild4, "created-by"));
											objtableData15.put("is-remove-allowed",getXmlElementData(elementchild4, "is-remove-allowed"));
											objtableData15.put("rank",getXmlElementData(elementchild4, "rank"));
											tabelData15.add(objtableData15);


										}
									}
								}
							}
						}
					}

				}
			}

			NodeList nodeListx1 = document.getElementsByTagName("gnb-cu-cp-function-entries");

			for (int p = 0; p < nodeListx1.getLength(); p++) {

				Node ChildNode2 = nodeListx1.item(p);
				if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
					Element elementchild2 = (Element) ChildNode2;
					LinkedHashMap<String, String> objtableData2 = new LinkedHashMap<>();
					objtableData2.put("gnodeb-id", gnodeb.get("gnodeb-id"));
					objtableData2.put("limited-count-of-nr-cell-for-x2",
							getXmlElementData(elementchild2, "limited-count-of-nr-cell-for-x2"));
					tabelData2.add(objtableData2);

				}
			}

			NodeList nodeListx11 = document.getElementsByTagName("active-alarm-entries");

			for (int p = 0; p < nodeListx11.getLength(); p++) {

				Node ChildNode2 = nodeListx11.item(p);
				if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
					Element elementchild2 = (Element) ChildNode2;
					LinkedHashMap<String, String> objtableData2 = new LinkedHashMap<>();
					objtableData2.put("gnodeb-id", gnodeb.get("gnodeb-id"));
					objtableData2.put("alarm-unit-type", getXmlElementData(elementchild2, "alarm-unit-type"));
					objtableData2.put("alarm-unit-id", getXmlElementData(elementchild2, "alarm-unit-id"));
					objtableData2.put("alarm-type", getXmlElementData(elementchild2, "alarm-type"));
					objtableData2.put("location", getXmlElementData(elementchild2, "location"));
					objtableData2.put("raised-time", getXmlElementData(elementchild2, "raised-time"));
					objtableData2.put("alarm-group", getXmlElementData(elementchild2, "alarm-group"));
					objtableData2.put("probable-cause", getXmlElementData(elementchild2, "probable-cause"));
					objtableData2.put("specific-problem", getXmlElementData(elementchild2, "specific-problem"));
					objtableData2.put("severity", getXmlElementData(elementchild2, "severity"));
					objtableData2.put("alarm-code", getXmlElementData(elementchild2, "alarm-code"));
					objtableData2.put("sequence-number", getXmlElementData(elementchild2, "sequence-number"));
					objtableData2.put("time-info", getXmlElementData(elementchild2, "time-info"));
					tabelData11.add(objtableData2);

				}
			}

			NodeList nodeListx8 = document.getElementsByTagName("neighbor-gnb-cell");

			for (int p = 0; p < nodeListx8.getLength(); p++) {

				Node ChildNode2 = nodeListx8.item(p);
				if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
					Element elementchild2 = (Element) ChildNode2;

					NodeList nodeList8 = elementchild2.getElementsByTagName("neighbor-gnb-cell-entries");

					for (int y = 0; y < nodeList8.getLength(); y++) {

						Node childNode8 = nodeList8.item(y);
						if (Node.ELEMENT_NODE == childNode8.getNodeType()) {
							Element elementchild8 = (Element) childNode8;
							LinkedHashMap<String, String> objtableData8 = new LinkedHashMap<>();
							objtableData8.put("gnodeb-id", gnodeb.get("gnodeb-id"));

							objtableData8.put("neighbor-gnb-cell-index",
									getXmlElementData(elementchild8, "neighbor-gnb-cell-index"));
							LinkedHashMap<String, String> objtableData9 = new LinkedHashMap<>();
							LinkedHashMap<String, String> objtableData10 = new LinkedHashMap<>();
							objtableData9.put("gnodeb-id", gnodeb.get("gnodeb-id"));
							objtableData9.put("neighbor-gnb-cell-index",
									getXmlElementData(elementchild8, "neighbor-gnb-cell-index"));
							objtableData10.put("gnodeb-id", gnodeb.get("gnodeb-id"));
							objtableData10.put("neighbor-gnb-cell-index",
									getXmlElementData(elementchild8, "neighbor-gnb-cell-index"));
							objtableData8.put("nr-physical-cell-id",
									getXmlElementData(elementchild8, "nr-physical-cell-id"));
							objtableData8.put("nr-scs-dl", getXmlElementData(elementchild8, "nr-scs-dl"));
							objtableData8.put("nr-scs-ul", getXmlElementData(elementchild8, "nr-scs-ul"));
							objtableData8.put("nrb-dl", getXmlElementData(elementchild8, "nrb-dl"));
							objtableData8.put("nrb-ul", getXmlElementData(elementchild8, "nrb-ul"));
							objtableData8.put("nr-arfcn-dl", getXmlElementData(elementchild8, "nr-arfcn-dl"));
							objtableData8.put("nr-arfcn-ul", getXmlElementData(elementchild8, "nr-arfcn-ul"));
							objtableData8.put("ssb-arfcn", getXmlElementData(elementchild8, "ssb-arfcn"));
							objtableData8.put("tracking-area-code", getXmlElementData(elementchild8, "tracking-area-code"));
							tabelData8.add(objtableData8);

							NodeList nodeListxx = elementchild8.getElementsByTagName("nr-cgi");

							for (int t = 0; t < nodeListxx.getLength(); t++) {

								Node ChildNode2x = nodeListxx.item(t);
								if (Node.ELEMENT_NODE == ChildNode2x.getNodeType()) {

									Element elementchild8X = (Element) ChildNode2x;

									objtableData9.put("gnodeb-id", getXmlElementData(elementchild8X, "gnodeb-id"));
									objtableData9.put("cell-identity",
											getXmlElementData(elementchild8X, "cell-identity"));
									objtableData9.put("mcc", getXmlElementData(elementchild8X, "mcc"));
									objtableData9.put("mnc", getXmlElementData(elementchild8X, "mnc"));
									tabelData9.add(objtableData9);

								}
							}
							NodeList nodeListxxx = elementchild8.getElementsByTagName("cell-plmn-info");
							for (int t = 0; t < nodeListxxx.getLength(); t++) {

								Node ChildNode2x = nodeListxxx.item(t);
								if (Node.ELEMENT_NODE == ChildNode2x.getNodeType()) {
									Element elementchild8X = (Element) ChildNode2x;

									objtableData10.put("plmn-index", getXmlElementData(elementchild8X, "plmn-index"));
									objtableData10.put("mcc", getXmlElementData(elementchild8X, "mcc"));
									objtableData10.put("mnc", getXmlElementData(elementchild8X, "mnc"));

									tabelData10.add(objtableData10);

								}
							}

						}
					}
				}
			}
			NodeList nodeListx2 = document.getElementsByTagName("inactivity-data");

			for (int q = 0; q < nodeListx2.getLength(); q++) {

				Node ChildNode3 = nodeListx2.item(q);
				if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
					Element elementchild3 = (Element) ChildNode3;
					LinkedHashMap<String, String> objtableData3 = new LinkedHashMap<>();
					objtableData3.put("gnodeb-id", gnodeb.get("gnodeb-id"));
					objtableData3.put("feature-enabled", getXmlElementData(elementchild3, "feature-enabled"));
					objtableData3.put("signaling-timer", getXmlElementData(elementchild3, "signaling-timer"));
					objtableData3.put("notification-level", getXmlElementData(elementchild3, "notification-level"));
					objtableData3.put("x2-reporting", getXmlElementData(elementchild3, "x2-reporting"));
					objtableData3.put("ue-inactivity-timer", getXmlElementData(elementchild3, "ue-inactivity-timer"));
					objtableData3.put("spid-based-user-inactivity",
							getXmlElementData(elementchild3, "spid-based-user-inactivity"));
					tabelData3.add(objtableData3);
				}
			}

			NodeList nodeListx22 = document.getElementsByTagName("end-point-f1c-entries");

			for (int q = 0; q < nodeListx22.getLength(); q++) {

				Node ChildNode3 = nodeListx22.item(q);
				if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
					Element elementchild3 = (Element) ChildNode3;
					LinkedHashMap<String, String> objtableData3 = new LinkedHashMap<>();
					objtableData3.put("gnodeb-id", gnodeb.get("gnodeb-id"));
					objtableData3.put("end-point-f1-index", getXmlElementData(elementchild3, "end-point-f1-index"));
					objtableData3.put("gnb-du-id", getXmlElementData(elementchild3, "gnb-du-id"));
					objtableData3.put("gnb-du-name", getXmlElementData(elementchild3, "gnb-du-name"));
					objtableData3.put("remote-ip-address", getXmlElementData(elementchild3, "remote-ip-address"));
					objtableData3.put("secondary-remote-ip-address",
							getXmlElementData(elementchild3, "secondary-remote-ip-address"));
					objtableData3.put("sctp-state", getXmlElementData(elementchild3, "sctp-state"));
					objtableData3.put("f1-ap-state", getXmlElementData(elementchild3, "f1-ap-state"));
					tabelData13.add(objtableData3);
				}
			}

			NodeList nodeListx3 = document.getElementsByTagName("end-point-x2-entries");

			for (int q = 0; q < nodeListx3.getLength(); q++) {

				Node ChildNode3 = nodeListx3.item(q);
				if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
					Element elementchild3 = (Element) ChildNode3;
					LinkedHashMap<String, String> objtableData3 = new LinkedHashMap<>();
					objtableData3.put("gnodeb-id", gnodeb.get("gnodeb-id"));

					objtableData3.put("x2-neighbor-index", getXmlElementData(elementchild3, "x2-neighbor-index"));
					objtableData3.put("remote-ip-address", getXmlElementData(elementchild3, "remote-ip-address"));
					objtableData3.put("secondary-remote-ip-address",
							getXmlElementData(elementchild3, "secondary-remote-ip-address"));
					objtableData3.put("enb-id", getXmlElementData(elementchild3, "enb-id"));
					objtableData3.put("mcc", getXmlElementData(elementchild3, "mcc"));
					objtableData3.put("mnc", getXmlElementData(elementchild3, "mnc"));
					objtableData3.put("sctp-state", getXmlElementData(elementchild3, "sctp-state"));
					objtableData3.put("x2-ap-state", getXmlElementData(elementchild3, "x2-ap-state"));
					objtableData3.put("created-by", getXmlElementData(elementchild3, "created-by"));
					tabelData14.add(objtableData3);
				}
			}

			NodeList nodeListx4 = document.getElementsByTagName("drb-inactivity-timer-entries");

			for (int r = 0; r < nodeListx4.getLength(); r++) {

				Node ChildNode4 = nodeListx4.item(r);
				if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
					Element elementchild4 = (Element) ChildNode4;
					LinkedHashMap<String, String> objtableData4 = new LinkedHashMap<>();
					objtableData4.put("gnodeb-id", gnodeb.get("gnodeb-id"));
					objtableData4.put("qci", getXmlElementData(elementchild4, "qci"));
					objtableData4.put("drb-inactivity-timer", getXmlElementData(elementchild4, "drb-inactivity-timer"));
					tabelData4.add(objtableData4);
				}
			}

			NodeList nodeListx5 = document.getElementsByTagName("scg-failure-handling");

			for (int s = 0; s < nodeListx5.getLength(); s++) {

				Node ChildNode5 = nodeListx5.item(s);
				if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
					Element elementchild5 = (Element) ChildNode5;
					LinkedHashMap<String, String> objtableData5 = new LinkedHashMap<>();
					objtableData5.put("gnodeb-id", gnodeb.get("gnodeb-id"));
					objtableData5.put("ul-primary-path-mode", getXmlElementData(elementchild5, "ul-primary-path-mode"));
					tabelData5.add(objtableData5);
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String gnbid = "";
			String neid = "";
			String enb4gid = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("gNBID")) {
					gnbid = listOfCiqDetails.get(0).getCiqMap().get("gNBID").getHeaderValue();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4gid = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue();
				}
			}

			LinkedHashMap<String, LinkedHashMap<String, String>> validationMap1 = returnValidationList1prim("cellId",
					Arrays.asList("nr-ul-coverage-method"), "DSS_MOP_Parameters-2", neid, dbcollectionFileName,
					Arrays.asList("nr-ul-coverage-method"), "eNBName");
			
			Set<Integer> cellidset = new HashSet<>();
			try {
				cellidset = validationMap1.keySet().stream().map(s -> NumberUtils.toInt(s)).collect(Collectors.toSet());
			}catch (Exception e){
				logger.error(ExceptionUtils.getFullStackTrace(e));
			}
			trimTabledata(tabelData1, cellidset, "cell-identity");
			
			htmlContent
					.append(createHtmltableDSS1prim(headerList1, entry, "cell-identity", tabelData1, validationMap1));

			entry = "gnb-cu-cp-function-entries";
			LinkedHashMap<String, String> validationMap2 = returnValidationList0prim(
					Arrays.asList("limited-count-of-nr-cell-for-x2"), "DSS_MOP_Parameters-1", neid,
					dbcollectionFileName, Arrays.asList("limited-count-of-nr-cell-for-x2"), "eNBName");
			htmlContent.append(createHtmltableDSS0prim(headerList2, entry, tabelData2, validationMap2));

			entry = "inactivity-data";
			LinkedHashMap<String, String> validationMap3 = returnValidationList0prim(
					Arrays.asList("signaling-timer", "x2-reporting", "ue-inactivity-timer"), "DSS_MOP_Parameters-1",
					neid, dbcollectionFileName,
					Arrays.asList("signaling-timer", "x2-reporting", "ue-inactivity-timer"), "eNBName");
			htmlContent.append(createHtmltableDSS0prim(headerList3, entry, tabelData3, validationMap3));

			entry = "drb-inactivity-timer-entries";
			LinkedHashMap<String, String> validationMapx = new LinkedHashMap<>();
			LinkedHashMap<String, LinkedHashMap<String, String>> v = new LinkedHashMap<>();
			for (int i = 1; i <= 3; i++) {
				LinkedHashMap<String, String> validationMap4 = returnValidationList0prim(
						Arrays.asList("drb-qci" + String.valueOf(i), "drb-inactivity-timer" + String.valueOf(i)),
						"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
						Arrays.asList("qci", "drb-inactivity-timer"), "eNBName");

				LinkedHashMap<String, String> validationMap5 = new LinkedHashMap<>();
				validationMap5.put("qci", validationMap4.get("qci"));
				validationMap5.put("drb-inactivity-timer", validationMap4.get("drb-inactivity-timer"));
				// validationMapx.put(validationMap4.get("qci"),
				// validationMap4.get("drb-inactivity-timer"));
				v.put(validationMap4.get("qci"), validationMap5);
			}
			htmlContent.append(createHtmltableDSS1prim(headerList4, entry, "qci", tabelData4, v));

			entry = "scg-failure-handling";
			LinkedHashMap<String, String> validationMap5 = returnValidationList0prim(
					Arrays.asList("ul-primary-path-mode"), "DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("ul-primary-path-mode"), "eNBName");
			htmlContent.append(createHtmltableDSS0prim(headerList5, entry, tabelData5, validationMap5));

			// data repeated
			entry = "cell-neighbor-relation-table-en";
			trimTabledata(tabelData6, cellidset, "cell-identity");
			htmlContent
					.append(createHtmltable(headerList6, entry, tabelData6));
			// data is repeated
			entry = "intra-gnb-neighbor-data";
			trimTabledata(tabelData7, cellidset, "cell-identity");
			htmlContent
					.append(createHtmltable(headerList7, entry, tabelData7));

			entry = "neighbor-gnb-cell-entries";
			LinkedHashMap<String, String> validationMap8 = returnValidationList0prim(
					Arrays.asList("neighbor-gnb-cell-index", "nr-physical-cell-id", "nr-scs-dl", "nr-scs-ul", "nrb-dl",
							"nrb-ul", "nr-arfcn-dl", "nr-arfcn-ul", "ssb-arfcn"),
					"InterGNB_NR_NR_NBRs-6", gnbid, dbcollectionFileName,
					Arrays.asList("neighbor-gnb-cell-index", "nr-physical-cell-id", "nr-scs-dl", "nr-scs-ul", "nrb-dl",
							"nrb-ul", "nr-arfcn-dl", "nr-arfcn-ul", "ssb-arfcn"),
					"eNBId");
			htmlContent.append(createHtmltableDSS0prim(headerList8, entry, tabelData8, validationMap8));
			// primary key present in middle

			entry = "nr-cgi";
			LinkedHashMap<String, LinkedHashMap<String, String>> validationMap9 = returnValidationList1prim(
					"neighbor-gnb-index", Arrays.asList("neighbor-gnb-index", "gNBID", "mcc", "mnc"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("neighbor-gnb-index", "gnodeb-id", "mcc", "mnc"), "eNBName");
			htmlContent.append(
					createHtmltableDSS1prim(headerList9, entry, "neighbor-gnb-index", tabelData9, validationMap9));

			entry = "cell-plmn-info";
			LinkedHashMap<String, String> validationMap10 = returnValidationList0prim(
					Arrays.asList("neighbor-gnb-cell-index", "plmn-index", "mcc", "mnc"), "DSS_MOP_Parameters-1", neid,
					dbcollectionFileName, Arrays.asList("neighbor-gnb-cell-index", "plmn-index", "mcc", "mnc"),
					"eNBName");
			htmlContent.append(createHtmltableDSS0prim(headerList10, entry, tabelData10, validationMap10));
			
			entry = "active-alarm-entries";
			htmlContent.append(createHtmltable(headerList11, entry, tabelData11));
			
			entry="end-point-f1c-entries";
			List<LinkedHashMap<String, String>> tabeldata = tabelData13.stream().filter(x -> x.get("gnb-du-id").equals(enbId.replaceAll("^0+(?!$)", ""))).map(x->x).collect(Collectors.toList());
			if(ObjectUtils.isEmpty(tabeldata)) {
				htmlContent.append(createHtmltable(headerList13, entry, tabelData13));
			} else {
				htmlContent.append(createHtmltable(headerList13, entry, tabeldata));
			}
			
			entry="end-point-x2-entries";
			cellidset = new HashSet<>();
			try {
				cellidset.add(NumberUtils.toInt(enb4gid));
			}catch (Exception e){
				logger.error(ExceptionUtils.getFullStackTrace(e));
			}
			
			trimTabledata(tabelData14, cellidset, "enb-id");
			htmlContent.append(createHtmltable(headerList14, entry, tabelData14));
			
			entry="inter-gnb-neighbor-data";
			htmlContent.append(createHtmltable(headerList15, entry, tabelData15));

			htmlContent.append("</table>\n");

		}

		catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getFSUAudit(String fullOutputLog, String command, String enbId, String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry = "du-cpri-port-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("cpri-speed-saved");
			headerList1.add("du-cpri-port-mode");
			headerList1.add("enb-ne-id");
			headerList1.add("enb-inode-id");
			headerList1.add("connected-enb-digital-unit-board-id");
			headerList1.add("connected-enb-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("tx-wavelength");
			headerList1.add("tx-power");
			headerList1.add("rx-power");
			headerList1.add("temperature");
			headerList1.add("bit-rate");
			headerList1.add("voltage");
			headerList1.add("electric-current");
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("unit-type");
			headerList2.add("unit-id");
			headerList2.add("port-id");
			headerList2.add("hw-address");
			headerList2.add("administrative-state");
			headerList2.add("user-label");
			headerList2.add("configured-speed");
			headerList2.add("fec-mode");
			headerList2.add("connected-radio-unit-type");
			headerList2.add("tx-wavelength");
			headerList2.add("tx-power");
			headerList2.add("rx-power");
			headerList2.add("temperature");
			headerList2.add("bit-rate");
			headerList2.add("voltage");
			headerList2.add("electric-current");
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("unit-type");
			headerList3.add("unit-id");
			headerList3.add("port-id");
			headerList3.add("connected-du-cpri-port-id");
			headerList3.add("adpf-ne-id");
			headerList3.add("cpri-speed-saved");
			headerList3.add("tx-wavelength");
			headerList3.add("tx-power");
			headerList3.add("rx-power");
			headerList3.add("temperature");
			headerList3.add("bit-rate");
			headerList3.add("voltage");
			headerList3.add("electric-current");
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("unit-type");
			headerList4.add("unit-id");
			headerList4.add("port-id");
			headerList4.add("mplane-ipv6");
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("unit-type");
			headerList5.add("unit-id");
			headerList5.add("port-id");
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cpu-id");
			headerList6.add("interface-name");
			headerList6.add("vlan-id");
			headerList6.add("mtu");
			headerList6.add("logical-interface-name");
			headerList6.add("management");
			headerList6.add("control-user");
			headerList6.add("ieee1588");
			headerList6.add("synce");

			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("cpu-id");
			headerList8.add("interface-name");
			headerList8.add("ip");
			headerList8.add("prefix-length");
			headerList8.add("address-state");
			headerList8.add("forwarding");
			headerList8.add("m-plane-marking");


			NodeList nodeList = document.getElementsByTagName("data");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("digital-unit");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("du-cpri-port-entries");
									for (int m = 0; m < childNodeList2.getLength(); m++) {
										Node ChildNode2 = childNodeList2.item(m);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("unit-type",
													getXmlElementData(elementchild1, "unit-type"));
											objtableData.put("unit-id", getXmlElementData(elementchild1, "unit-id"));
											objtableData.put("port-id", getXmlElementData(elementchild2, "port-id"));
											objtableData.put("cpri-speed-saved",
													getXmlElementData(elementchild2, "cpri-speed-saved"));
											objtableData.put("du-cpri-port-mode",
													getXmlElementData(elementchild2, "du-cpri-port-mode"));
											objtableData.put("enb-ne-id",
													getXmlElementData(elementchild2, "enb-ne-id"));
											objtableData.put("enb-inode-id",
													getXmlElementData(elementchild2, "enb-inode-id"));
											objtableData.put("connected-enb-digital-unit-board-id", getXmlElementData(
													elementchild2, "connected-enb-digital-unit-board-id"));
											objtableData.put("connected-enb-digital-unit-port-id", getXmlElementData(
													elementchild2, "connected-enb-digital-unit-port-id"));
											objtableData.put("cascade-radio-unit-id",
													getXmlElementData(elementchild2, "cascade-radio-unit-id"));
											objtableData.put("tx-wavelength",
													getXmlElementData(elementchild2, "tx-wavelength"));
											objtableData.put("tx-power", getXmlElementData(elementchild2, "tx-power"));
											objtableData.put("rx-power", getXmlElementData(elementchild2, "rx-power"));
											objtableData.put("temperature",
													getXmlElementData(elementchild2, "temperature"));
											objtableData.put("bit-rate", getXmlElementData(elementchild2, "bit-rate"));
											objtableData.put("voltage", getXmlElementData(elementchild2, "voltage"));
											objtableData.put("electric-current",
													getXmlElementData(elementchild2, "electric-current"));
											tabelData1.add(objtableData);
										}
									}
									childNodeList2 = elementchild1.getElementsByTagName("ecpri-port-entries");
									for (int v = 0; v < childNodeList2.getLength(); v++) {
										Node ChildNode3 = childNodeList2.item(v);
										if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
											Element elementchild3 = (Element) ChildNode3;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("unit-type",
													getXmlElementData(elementchild1, "unit-type"));
											objtableData.put("unit-id", getXmlElementData(elementchild1, "unit-id"));
											objtableData.put("port-id", getXmlElementData(elementchild3, "port-id"));
											objtableData.put("hw-address",
													getXmlElementData(elementchild3, "hw-address"));
											objtableData.put("administrative-state",
													getXmlElementData(elementchild3, "administrative-state"));
											objtableData.put("user-label",
													getXmlElementData(elementchild3, "user-label"));
											objtableData.put("configured-speed",
													getXmlElementData(elementchild3, "configured-speed"));
											objtableData.put("fec-mode",
													getXmlElementData(elementchild3, "fec-mode"));
											objtableData.put("connected-radio-unit-type", 
													getXmlElementData(elementchild3, "connected-radio-unit-type"));
											objtableData.put("tx-wavelength",
													getXmlElementData(elementchild3, "tx-wavelength"));
											objtableData.put("tx-power", getXmlElementData(elementchild3, "tx-power"));
											objtableData.put("rx-power", getXmlElementData(elementchild3, "rx-power"));
											objtableData.put("temperature",
													getXmlElementData(elementchild3, "temperature"));
											objtableData.put("bit-rate", getXmlElementData(elementchild3, "bit-rate"));
											objtableData.put("voltage", getXmlElementData(elementchild3, "voltage"));
											objtableData.put("electric-current",
													getXmlElementData(elementchild3, "electric-current"));
											tabelData2.add(objtableData);
										}
									}
									//
//									childNodeList2 = elementchild1.getElementsByTagName("ru-cpri-port-entries");
//									for (int v = 0; v < childNodeList2.getLength(); v++) {
//										Node ChildNode4 = childNodeList2.item(v);
//										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
//											Element elementchild4 = (Element) ChildNode4;
//
//											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
//											objtableData.put("unit-type",
//													getXmlElementData(elementchild1, "unit-type"));
//											objtableData.put("unit-id", getXmlElementData(elementchild1, "unit-id"));
//											objtableData.put("port-id", getXmlElementData(elementchild1, "port-id"));
//											objtableData.put("connected-du-cpri-port-id",
//													getXmlElementData(elementchild4, "connected-du-cpri-port-id"));
//											objtableData.put("adpf-ne-id",
//													getXmlElementData(elementchild4, "adpf-ne-id"));
//											objtableData.put("cpri-speed-saved",
//													getXmlElementData(elementchild4, "cpri-speed-saved"));
//											objtableData.put("tx-wavelength",
//													getXmlElementData(elementchild4, "tx-wavelength"));
//											objtableData.put("tx-power", getXmlElementData(elementchild4, "tx-power"));
//											objtableData.put("rx-power", getXmlElementData(elementchild4, "rx-power"));
//											objtableData.put("temperature",
//													getXmlElementData(elementchild4, "temperature"));
//											objtableData.put("bit-rate", getXmlElementData(elementchild4, "bit-rate"));
//											objtableData.put("voltage", getXmlElementData(elementchild4, "voltage"));
//											objtableData.put("electric-current",
//													getXmlElementData(elementchild4, "electric-current"));
//											tabelData3.add(objtableData);
//
//										}
//									}

									NodeList childNodeList9 = elementchild1
											.getElementsByTagName("ru-cpri-port-entries");
									for (int v = 0; v < childNodeList9.getLength(); v++) {
										Node ChildNode4 = childNodeList9.item(v);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("unit-type",
													getXmlElementData(elementchild1, "unit-type"));
											objtableData.put("unit-id", getXmlElementData(elementchild1, "unit-id"));
											objtableData.put("port-id", getXmlElementData(elementchild4, "port-id"));
											objtableData.put("connected-du-cpri-port-id",
													getXmlElementData(elementchild4, "connected-du-cpri-port-id"));
											objtableData.put("adpf-ne-id",
													getXmlElementData(elementchild4, "adpf-ne-id"));
											objtableData.put("cpri-speed-saved",
													getXmlElementData(elementchild4, "cpri-speed-saved"));
											objtableData.put("tx-wavelength",
													getXmlElementData(elementchild4, "tx-wavelength"));
											objtableData.put("tx-power", getXmlElementData(elementchild4, "tx-power"));
											objtableData.put("rx-power", getXmlElementData(elementchild4, "rx-power"));
											objtableData.put("temperature",
													getXmlElementData(elementchild4, "temperature"));
											objtableData.put("bit-rate", getXmlElementData(elementchild4, "bit-rate"));
											objtableData.put("voltage", getXmlElementData(elementchild4, "voltage"));
											objtableData.put("electric-current",
													getXmlElementData(elementchild4, "electric-current"));
											tabelData3.add(objtableData);

										}
									}

								}
							}

							childNodeList = element.getElementsByTagName("o-du-info");
							for (int v = 0; v < childNodeList.getLength(); v++) {
								Node ChildNode5 = childNodeList.item(v);
								if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
									Element elementchild5 = (Element) ChildNode5;
									NodeList childNodeList3 = elementchild5.getElementsByTagName("mplane-ipv6-info");
									for (int z = 0; z < childNodeList3.getLength(); z++) {
										Node ChildNode6 = childNodeList3.item(z);
										if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
											Element elementchild6 = (Element) ChildNode6;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("unit-type",
													getXmlElementData(elementchild5, "unit-type"));
											objtableData.put("unit-id", getXmlElementData(elementchild5, "unit-id"));
											objtableData.put("port-id", getXmlElementData(elementchild5, "port-id"));
											objtableData.put("mplane-ipv6",
													getXmlElementData(elementchild6, "mplane-ipv6"));
											tabelData4.add(objtableData);
										}
									}
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									objtableData.put("unit-type", getXmlElementData(elementchild5, "unit-type"));
									objtableData.put("unit-id", getXmlElementData(elementchild5, "unit-id"));
									objtableData.put("port-id", getXmlElementData(elementchild5, "port-id"));
									tabelData5.add(objtableData);

								}
							}
							NodeList childNodeList7 = element.getElementsByTagName("ip-system");
							for (int v = 0; v < childNodeList7.getLength(); v++) {
								Node ChildNode7 = childNodeList7.item(v);
								if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
									Element elementchild7 = (Element) ChildNode7;
									NodeList childNodeList8 = elementchild7.getElementsByTagName("ecpri-interfaces");
									for (int z = 0; z < childNodeList8.getLength(); z++) {
										Node ChildNode8 = childNodeList8.item(z);
										if (Node.ELEMENT_NODE == ChildNode8.getNodeType()) {
											Element elementchild8 = (Element) ChildNode8;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cpu-id", getXmlElementData(elementchild7, "cpu-id"));
											objtableData.put("interface-name",
													getXmlElementData(elementchild8, "interface-name"));
											NodeList childNodeListzx = elementchild8
													.getElementsByTagName("ipv6-address");
											objtableData.put("vlan-id", getXmlElementData(elementchild8, "vlan-id"));
											objtableData.put("mtu", getXmlElementData(elementchild8, "mtu"));
											objtableData.put("logical-interface-name",
													getXmlElementData(elementchild8, "logical-interface-name"));
											objtableData.put("management",
													getXmlElementData(elementchild8, "management"));
											objtableData.put("control-user",
													getXmlElementData(elementchild8, "control-user"));
											objtableData.put("ieee1588", getXmlElementData(elementchild8, "ieee1588"));
											objtableData.put("synce", getXmlElementData(elementchild8, "synce"));
											if (!getXmlElementData(elementchild8, "management").equals("-")) {
												tabelData6.add(objtableData);
											}

										}

									}

									for (int z = 0; z < childNodeList8.getLength(); z++) {
										Node ChildNode8 = childNodeList8.item(z);
										if (Node.ELEMENT_NODE == ChildNode8.getNodeType()) {
											Element elementchild8 = (Element) ChildNode8;

											LinkedHashMap<String, String> objtableData8 = new LinkedHashMap<>();

											objtableData8.put("cpu-id", getXmlElementData(elementchild7, "cpu-id"));
											objtableData8.put("interface-name",
													getXmlElementData(elementchild8, "interface-name"));
											NodeList childNodeListzx = elementchild8
													.getElementsByTagName("ipv6-address");
											for (int x = 0; x < childNodeListzx.getLength(); x++) {
												Node ChildNode6 = childNodeListzx.item(x);
												if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
													Element elementchild6 = (Element) ChildNode6;
													objtableData8.put("ip", getXmlElementData(elementchild6, "ip"));
													objtableData8.put("prefix-length",
															getXmlElementData(elementchild6, "prefix-length"));
													objtableData8.put("address-state",
															getXmlElementData(elementchild6, "address-state"));
													objtableData8.put("forwarding",
															getXmlElementData(elementchild6, "forwarding"));
													objtableData8.put("m-plane-marking",
															getXmlElementData(elementchild6, "m-plane-marking"));

												}
											}
											String[] ipkeys = { "ip", "prefix-length", "address-state", "forwarding",
													"m-plane-marking" };
											for (String ipkey : ipkeys) {
												if (!objtableData8.containsKey(ipkey)) {
													objtableData8.put(ipkey, "-");
												}
											}
											if (getXmlElementData(elementchild8, "management").equals("-")) {
												tabelData8.add(objtableData8);
											}

										}
									}
								}
							}

							/*
							 * NodeList childNodeList7x = element.getElementsByTagName("ip-system"); for
							 * (int v = 0; v < childNodeList7x.getLength(); v++) { Node ChildNode7 =
							 * childNodeList7x.item(v); if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
							 * Element elementchild7 = (Element) ChildNode7; NodeList childNodeList8 =
							 * elementchild7.getElementsByTagName("ecpri-interfaces"); for (int z = 0; z <
							 * childNodeList8.getLength(); z++) { Node ChildNode8 = childNodeList8.item(z);
							 * if (Node.ELEMENT_NODE == ChildNode8.getNodeType()) { Element elementchild8 =
							 * (Element) ChildNode8; NodeList childNodeListzx =
							 * elementchild8.getElementsByTagName("ipv6-address"); for (int x = 0; x <
							 * childNodeListzx.getLength(); x++) { Node ChildNode6 =
							 * childNodeListzx.item(x); if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
							 * Element elementchild6 = (Element) ChildNode6; LinkedHashMap<String, String>
							 * objtableData8 = new LinkedHashMap<>(); objtableData8.put("cpu-id",
							 * getXmlElementData(elementchild7, "cpu-id"));
							 * objtableData8.put("interface-name", getXmlElementData(elementchild8,
							 * "interface-name")); objtableData8.put("ip", getXmlElementData(elementchild6,
							 * "ip")); objtableData8.put("prefix-length", getXmlElementData(elementchild6,
							 * "prefix-length")); objtableData8.put("address-state",
							 * getXmlElementData(elementchild6, "address-state"));
							 * objtableData8.put("forwarding", getXmlElementData(elementchild6,
							 * "forwarding")); objtableData8.put("m-plane-marking",
							 * getXmlElementData(elementchild6, "m-plane-marking"));
							 * tabelData8.add(objtableData8);
							 * 
							 * 
							 * 
							 * } }
							 * 
							 * 
							 * }
							 * 
							 * }
							 * 
							 * } }
							 */

						}
					}

				}
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "FSU_Audit"
					+ "</b></td></tr>\n");

			HashMap<String, List<String>> validationMap1 = new HashMap<>();
			htmlContent.append(createHtmltableDSS(headerList1, entry, tabelData1, validationMap1));

			entry = "ru-cpri-port-entries";
			htmlContent.append(createHtmltableDSS(headerList3, entry, tabelData3, validationMap1));

			entry = "o-du-entries";
			htmlContent.append(createHtmltableDSS(headerList5, entry, tabelData5, validationMap1));

			String neid = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue();
				}
			}

			entry = "mplane-ipv6-info";

			List<CIQDetailsModel> listOfCiqDetails1 = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"DSS_MOP_Parameters-1", "eNBName");

			LinkedHashMap<String, LinkedHashMap<String, String>> validationMap = new LinkedHashMap<>();
			LinkedHashMap<String, String> validationMap0prim = returnValidationList0prim(
					Arrays.asList("mplane-ut", "mplane-ui", "mplane-pi"), "DSS_MOP_Parameters-1", neid,
					dbcollectionFileName, Arrays.asList("unit-type", "unit-id", "port-id"), "eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails1)) {
				if (listOfCiqDetails1.get(0).getCiqMap().containsKey("mplane-ut")) {
					validationMap.put(listOfCiqDetails1.get(0).getCiqMap().get("mplane-ut").getHeaderValue(),
							validationMap0prim);
				}
			}

			htmlContent.append(createHtmltableDSS1prim(headerList4, entry, "unit-type", tabelData4, validationMap));

			entry = "ecpri-port-entries";

			validationMap = new LinkedHashMap<>();
			validationMap0prim = returnValidationList0prim(
					Arrays.asList("ecpri-ut", "ecpri-ui", "ecpri-pi", "ecpri-as", "configured-speed", "fec-mode"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName, Arrays.asList("unit-type", "unit-id",
							"port-id", "administrative-state", "configured-speed", "fec-mode"),
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails1)) {
				if (listOfCiqDetails1.get(0).getCiqMap().containsKey("ecpri-ut")) {
					validationMap.put(listOfCiqDetails1.get(0).getCiqMap().get("ecpri-ut").getHeaderValue(),
							validationMap0prim);
				}
			}

			htmlContent.append(createHtmltableDSS1prim(headerList2, entry, "unit-type", tabelData2, validationMap));

			entry = "ecpri-interfaces";
			validationMap = new LinkedHashMap<>();
			validationMap0prim = returnValidationList0prim(
					Arrays.asList("cpu-id1", "interface-name1", "vlan-id1", "mtu1", "management1", "control-user1"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("cpu-id", "interface-name", "vlan-id", "mtu", "management", "control-user"),
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails1)) {
				if (listOfCiqDetails1.get(0).getCiqMap().containsKey("mtu1")) {
					validationMap.put(listOfCiqDetails1.get(0).getCiqMap().get("mtu1").getHeaderValue(),
							validationMap0prim);
				}
			}
			validationMap0prim = returnValidationList0prim(
					Arrays.asList("cpu-id2", "interface-name2", "vlan-id2", "mtu2", "management2", "control-user2"),
					"DSS_MOP_Parameters-1", neid, dbcollectionFileName,
					Arrays.asList("cpu-id", "interface-name", "vlan-id", "mtu", "management", "control-user"),
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails1)) {
				if (listOfCiqDetails1.get(0).getCiqMap().containsKey("mtu2")) {
					validationMap.put(listOfCiqDetails1.get(0).getCiqMap().get("mtu2").getHeaderValue(),
							validationMap0prim);
				}
			}
			htmlContent.append(createHtmltableDSS1prim(headerList6, entry, "mtu", tabelData6, validationMap));

			entry = "ipv6-address";
			htmlContent.append(createHtmltable(headerList8, entry, tabelData8));

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	StringBuilder createHtmltableDSS(LinkedHashSet<String> headerList, String command,
			List<LinkedHashMap<String, String>> tabelData, HashMap<String, List<String>> validationMap) {
		StringBuilder htmlContent = new StringBuilder();

		htmlContent
				.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData) {
			tableData.append("<tr>\n");

			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (validationMap.containsKey(key)) {
					if (validationMap.get(key).contains(value)) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);

		return htmlContent;
	}

	private LinkedHashMap<String, LinkedHashMap<String, LinkedHashMap<String, String>>> returnValidationList2prim(
			String key1, List<List<String>> keys, String sheetname, String id, String dbName, List<String> k1,
			String idname) {
		LinkedHashMap<String, LinkedHashMap<String, LinkedHashMap<String, String>>> validationMap = new LinkedHashMap<>();
		try {
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(id, dbName, sheetname, idname);
			if (ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (id.startsWith("0")) {
					id = id.replaceAll("^0+(?!$)", "");
				} else {
					id = "0" + id;
				}
				listOfCiqDetails = getCiqDetailsForRuleValidationsheet(id, dbName, sheetname, idname);
			}
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {
					LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();
					LinkedHashMap<String, LinkedHashMap<String, String>> details = new LinkedHashMap<>();
					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey(key1)) {
						for (List<String> key5 : keys) {
							LinkedHashMap<String, String> details1 = new LinkedHashMap<>();
							for (int i = 1; i < key5.size(); i++) {
								if (objMapDetails.containsKey(key5.get(i))) {
									details1.put(k1.get(i), objMapDetails.get(key5.get(i)).getHeaderValue());
								}
							}
							if (objMapDetails.containsKey(key5.get(0))) {
								details.put(objMapDetails.get(key5.get(0)).getHeaderValue(), details1);
							}
						}
						validationMap.put(objMapDetails.get(key1).getHeaderValue(), details);
					}
				}
			}
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			return validationMap;
		}
	}

	public List<CIQDetailsModel> getCiqDetailsForRuleValidationsheet(String enbId, String dbcollectionFileName,
			String sheetname, String idname) {
		List<CIQDetailsModel> resultList = null;
		Query query = new Query();
		query.addCriteria(Criteria.where(idname).is(enbId).and("sheetAliasName").is(sheetname));
		try {
			resultList = mongoTemplate.find(query, CIQDetailsModel.class, dbcollectionFileName);

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return resultList;
	}

	StringBuilder createHtmltableDSS2prim(LinkedHashSet<String> headerList, String command, String key1, String key2,
			List<LinkedHashMap<String, String>> tabelData,
			LinkedHashMap<String, LinkedHashMap<String, LinkedHashMap<String, String>>> validationMap) {
		StringBuilder htmlContent = new StringBuilder();

		htmlContent
				.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData) {
			tableData.append("<tr>\n");

			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (tdData.containsKey(key1)) {
					if (validationMap.containsKey(tdData.get(key1))) {
						LinkedHashMap<String, LinkedHashMap<String, String>> parentMap = validationMap
								.get(tdData.get(key1));
						if (tdData.containsKey(key2)) {
							if (parentMap.containsKey(tdData.get(key2))) {
								LinkedHashMap<String, String> childMap = parentMap.get(tdData.get(key2));
								if (childMap.containsKey(key)) {
									if (childMap.get(key).equalsIgnoreCase(value)) {
										tableData.append("<td align=center>" + value + "</td>\n");
									} else {
										tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
									}
								} else {
									tableData.append("<td align=center>" + value + "</td>\n");
								}
							} else if (key2.equalsIgnoreCase(key)) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);

		return htmlContent;
	}

	private LinkedHashMap<String, LinkedHashMap<String, String>> returnValidationList1prim(String key1,
			List<String> keys, String sheetname, String id, String dbName, List<String> k1, String idname) {
		LinkedHashMap<String, LinkedHashMap<String, String>> validationMap = new LinkedHashMap<>();
		try {
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(id, dbName, sheetname, idname);
			if (ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (id.startsWith("0")) {
					id = id.replaceAll("^0+(?!$)", "");
				} else {
					id = "0" + id;
				}
				listOfCiqDetails = getCiqDetailsForRuleValidationsheet(id, dbName, sheetname, idname);
			}
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {
					LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();
					LinkedHashMap<String, String> details = new LinkedHashMap<>();
					if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey(key1)) {
						for (int i = 0; i < keys.size(); i++) {

							if (objMapDetails.containsKey(keys.get(i))) {
								details.put(k1.get(i), objMapDetails.get(keys.get(i)).getHeaderValue());
							}

						}
						validationMap.put(objMapDetails.get(key1).getHeaderValue(), details);
					}
				}
			}
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			return validationMap;
		}
	}

	StringBuilder createHtmltableDSS1prim(LinkedHashSet<String> headerList, String command, String key1,
			List<LinkedHashMap<String, String>> tabelData,
			LinkedHashMap<String, LinkedHashMap<String, String>> validationMap) {
		StringBuilder htmlContent = new StringBuilder();

		htmlContent
				.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData) {
			tableData.append("<tr>\n");

			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (tdData.containsKey(key1)) {
					if (validationMap.containsKey(tdData.get(key1))) {
						LinkedHashMap<String, String> childMap = validationMap.get(tdData.get(key1));
						if (childMap.containsKey(key)) {
							if (childMap.get(key).equalsIgnoreCase(value)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);

		return htmlContent;
	}

	private LinkedHashMap<String, String> returnValidationList0prim(List<String> keys, String sheetname, String id,
			String dbName, List<String> k1, String idname) {
		LinkedHashMap<String, String> validationMap = new LinkedHashMap<>();
		try {
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(id, dbName, sheetname, idname);
			if (ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (id.startsWith("0")) {
					id = id.replaceAll("^0+(?!$)", "");
				} else {
					id = "0" + id;
				}
				listOfCiqDetails = getCiqDetailsForRuleValidationsheet(id, dbName, sheetname, idname);
			}
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {
					LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();
					if (!ObjectUtils.isEmpty(objMapDetails)) {
						for (int i = 0; i < keys.size(); i++) {

							if (objMapDetails.containsKey(keys.get(i))) {
								validationMap.put(k1.get(i), objMapDetails.get(keys.get(i)).getHeaderValue());
							}

						}
					}
				}
			}
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			return validationMap;
		}
	}

	StringBuilder createHtmltableDSS0prim(LinkedHashSet<String> headerList, String command,
			List<LinkedHashMap<String, String>> tabelData, LinkedHashMap<String, String> validationMap) {
		StringBuilder htmlContent = new StringBuilder();

		htmlContent
				.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData) {
			tableData.append("<tr>\n");

			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (validationMap.containsKey(key)) {
					if (validationMap.get(key).equalsIgnoreCase(value)) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);

		return htmlContent;
	}

	private void trimTabledata(List<LinkedHashMap<String, String>> tabelData, Set<Integer> cellidset, String key) {
		try {
			List<LinkedHashMap<String,String>> deleteData = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData) {
				if(tdData.containsKey(key) && !ObjectUtils.isEmpty(cellidset)) {
					if(!cellidset.contains(NumberUtils.toInt(tdData.get(key)))) {
						deleteData.add(tdData);
					}
				}
			}
			
			for (LinkedHashMap<String, String> tdData : deleteData) {
				tabelData.remove(tdData);
			}
		} catch(Exception e) {
			logger.error("AuditXmlRuleServiceUtil trimTabledata() " + ExceptionUtils.getFullStackTrace(e));
		}		
	}
	
	private void trimTabledataString(List<LinkedHashMap<String, String>> tabelData, Set<String> cellidset, String key) {
		try {
			List<LinkedHashMap<String,String>> deleteData = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData) {
				if(tdData.containsKey(key) && !ObjectUtils.isEmpty(cellidset)) {
					if(!cellidset.contains(tdData.get(key).replaceAll("^0+(?!$)", ""))) {
						deleteData.add(tdData);
					}
				}
			}
			
			for (LinkedHashMap<String, String> tdData : deleteData) {
				tabelData.remove(tdData);
			}
		} catch(Exception e) {
			logger.error("AuditXmlRuleServiceUtil trimTabledata() " + ExceptionUtils.getFullStackTrace(e));
		}		
	}

	public StringBuilder getACPFAP3Check(String fullOutputLog, String command, String enbId, String dbcollectionFileName) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String entry = "gnb-cu-cp-function-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("gnodeb-id");
			headerList1.add("limited-count-of-nr-cell-for-x2");
			headerList1.add("pscell-selection-method");
			headerList1.add("nr-ambr-onoff");

			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("gnodeb-id");
			headerList2.add("measurement-gap-enabled");
			headerList2.add("short-gap-enabled");
			headerList2.add("independent-gap-enabled");
			headerList2.add("fr2-gap-enabled");

			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("gnodeb-id");
			headerList3.add("drx-cu-qci-index");
			headerList3.add("drx-config-set-up");
			headerList3.add("drx-selection-order-cu");

			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("gnodeb-id");
			headerList4.add("drx-cu-qci-index");
			headerList4.add("drx-fr-index");
			headerList4.add("drx-long-drx-cycle-type-normal");

			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("gnodeb-id");
			headerList5.add("cell-identity");
			headerList5.add("index");
			headerList5.add("ssb-freq");
			headerList5.add("subcarrier-spacing");
			headerList5.add("nr-of-ss-blocks-to-avg");

			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("gnodeb-id");
			headerList6.add("cell-identity");
			headerList6.add("index");
			headerList6.add("periodicity");

			NodeList nodeList = document.getElementsByTagName("data");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();

			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("gnb-cu-cp-function");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("gnb-cu-cp-function-entries");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {
									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData1 = new LinkedHashMap<>();
									objtableData1.put("gnodeb-id", getXmlElementData(elementchild1, "gnodeb-id"));
									objtableData1.put("limited-count-of-nr-cell-for-x2",
											getXmlElementData(elementchild1, "limited-count-of-nr-cell-for-x2"));
									objtableData1.put("pscell-selection-method",
											getXmlElementData(elementchild1, "pscell-selection-method"));
									objtableData1.put("nr-ambr-onoff",
											getXmlElementData(elementchild1, "nr-ambr-onoff"));
									tabelData1.add(objtableData1);

								}

							}
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {
									Element elementchild1 = (Element) ChildNode1;
									NodeList childNodeList2 = elementchild1.getElementsByTagName("measurement-gap");
									for (int a = 0; a < childNodeList2.getLength(); a++) {

										Node ChildNode1x = childNodeList2.item(a);
										if (Node.ELEMENT_NODE == ChildNode1x.getNodeType()) {
											Element elementchild2 = (Element) ChildNode1x;
											LinkedHashMap<String, String> objtableData2 = new LinkedHashMap<>();
											objtableData2.put("gnodeb-id",
													getXmlElementData(elementchild1, "gnodeb-id"));
											objtableData2.put("measurement-gap-enabled",
													getXmlElementData(elementchild2, "measurement-gap-enabled"));
											objtableData2.put("short-gap-enabled",
													getXmlElementData(elementchild2, "short-gap-enabled"));
											objtableData2.put("independent-gap-enabled",
													getXmlElementData(elementchild2, "independent-gap-enabled"));
											objtableData2.put("fr2-gap-enabled",
													getXmlElementData(elementchild2, "fr2-gap-enabled"));
											tabelData2.add(objtableData2);
										}

									}

								}

							}

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {
									Element elementchild1 = (Element) ChildNode1;
									NodeList childNodeList2 = elementchild1.getElementsByTagName("drx-config-cu");

									for (int a = 0; a < childNodeList2.getLength(); a++) {

										Node ChildNode1x = childNodeList2.item(a);
										if (Node.ELEMENT_NODE == ChildNode1x.getNodeType()) {
											Element elementchild2 = (Element) ChildNode1x;

											NodeList childNodeList3 = elementchild2.getElementsByTagName("drx-cu-qci");
											for (int b = 0; b < childNodeList3.getLength(); b++) {

												Node ChildNode2 = childNodeList3.item(b);
												if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
													Element elementchild3 = (Element) ChildNode2;
													LinkedHashMap<String, String> objtableData3 = new LinkedHashMap<>();
													objtableData3.put("gnodeb-id",
															getXmlElementData(elementchild1, "gnodeb-id"));
													objtableData3.put("drx-cu-qci-index",
															getXmlElementData(elementchild3, "drx-cu-qci-index"));
													objtableData3.put("drx-config-set-up",
															getXmlElementData(elementchild3, "drx-config-set-up"));
													objtableData3.put("drx-selection-order-cu",
															getXmlElementData(elementchild3, "drx-selection-order-cu"));
													tabelData3.add(objtableData3);
												}

											}
										}

									}
								}

							}

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {
									Element elementchild1 = (Element) ChildNode1;
									NodeList childNodeList2 = elementchild1.getElementsByTagName("drx-config-cu");

									for (int a = 0; a < childNodeList2.getLength(); a++) {

										Node ChildNode1x = childNodeList2.item(a);
										if (Node.ELEMENT_NODE == ChildNode1x.getNodeType()) {
											Element elementchild2 = (Element) ChildNode1x;

											NodeList childNodeList3 = elementchild2.getElementsByTagName("drx-cu-qci");
											for (int b = 0; b < childNodeList3.getLength(); b++) {

												Node ChildNode2 = childNodeList3.item(b);
												if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

													Element elementchild3 = (Element) ChildNode2;

													NodeList childNodeList4 = elementchild3
															.getElementsByTagName("drx-long-cycle");
													for (int c = 0; c < childNodeList4.getLength(); c++) {

														Node ChildNode3 = childNodeList4.item(c);
														if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
															Element elementchild4 = (Element) ChildNode3;
															LinkedHashMap<String, String> objtableData4 = new LinkedHashMap<>();
															objtableData4.put("gnodeb-id",
																	getXmlElementData(elementchild1, "gnodeb-id"));
															objtableData4.put("drx-cu-qci-index", getXmlElementData(
																	elementchild3, "drx-cu-qci-index"));
															objtableData4.put("drx-fr-index",
																	getXmlElementData(elementchild4, "drx-fr-index"));
															objtableData4.put("drx-long-drx-cycle-type-normal",
																	getXmlElementData(elementchild4,
																			"drx-long-drx-cycle-type-normal"));
															tabelData4.add(objtableData4);
														}

													}
												}

											}

										}

									}
								}

							}

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {
									Element elementchild1 = (Element) ChildNode1;
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("gutran-cu-cell-entries");

									for (int a = 0; a < childNodeList2.getLength(); a++) {

										Node ChildNode1x = childNodeList2.item(a);
										if (Node.ELEMENT_NODE == ChildNode1x.getNodeType()) {
											Element elementchild2 = (Element) ChildNode1x;

											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("meas-object-entries");
											for (int b = 0; b < childNodeList3.getLength(); b++) {

												Node ChildNode2 = childNodeList3.item(b);
												if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

													Element elementchild3 = (Element) ChildNode2;

													NodeList childNodeList4 = elementchild3
															.getElementsByTagName("ssb-config");
													for (int c = 0; c < childNodeList4.getLength(); c++) {

														Node ChildNode3 = childNodeList4.item(c);
														if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
															Element elementchild4 = (Element) ChildNode3;
															LinkedHashMap<String, String> objtableData4 = new LinkedHashMap<>();
															objtableData4.put("gnodeb-id",
																	getXmlElementData(elementchild1, "gnodeb-id"));
															objtableData4.put("cell-identity",
																	getXmlElementData(elementchild2, "cell-identity"));
															objtableData4.put("index",
																	getXmlElementData(elementchild3, "index"));
															objtableData4.put("ssb-freq",
																	getXmlElementData(elementchild4, "ssb-freq"));
															objtableData4.put("subcarrier-spacing", getXmlElementData(
																	elementchild4, "subcarrier-spacing"));
															objtableData4.put("nr-of-ss-blocks-to-avg",
																	getXmlElementData(elementchild4,
																			"nr-of-ss-blocks-to-avg"));
															tabelData5.add(objtableData4);

															

														}

													}
												}

											}

										}

									}
								}

							}

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {
									Element elementchild1 = (Element) ChildNode1;
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("gutran-cu-cell-entries");

									for (int a = 0; a < childNodeList2.getLength(); a++) {

										Node ChildNode1x = childNodeList2.item(a);
										if (Node.ELEMENT_NODE == ChildNode1x.getNodeType()) {
											Element elementchild2 = (Element) ChildNode1x;
											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("meas-object-entries");
											for (int b = 0; b < childNodeList3.getLength(); b++) {
												Node ChildNode2 = childNodeList3.item(b);
												if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

													Element elementchild3 = (Element) ChildNode2;
													NodeList childNodeList4 = elementchild3
															.getElementsByTagName("ssb-config");
													for (int c = 0; c < childNodeList4.getLength(); c++) {

														Node ChildNode3 = childNodeList4.item(c);
														if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
															Element elementchild4 = (Element) ChildNode3;
															NodeList childNodeList5 = elementchild4
																	.getElementsByTagName("smtc1");
															for (int d = 0; d < childNodeList5.getLength(); d++) {
																Node ChildNode4 = childNodeList5.item(d);
																if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
																	Element elementchild5 = (Element) ChildNode4;
																	LinkedHashMap<String, String> objtableData4 = new LinkedHashMap<>();
																	objtableData4.put("gnodeb-id", getXmlElementData(
																			elementchild1, "gnodeb-id"));
																	objtableData4.put("cell-identity",
																			getXmlElementData(elementchild2,
																					"cell-identity"));
																	objtableData4.put("index",
																			getXmlElementData(elementchild3, "index"));
																	objtableData4.put("periodicity", getXmlElementData(
																			elementchild5, "periodicity"));
																	tabelData6.add(objtableData4);
																}

															}

														}

													}
												}

											}

										}

									}
								}

							}

						}
					}

				}

			}
			
			
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "ACPF AUDIT"
					+ "</b></td></tr>\n");

			LinkedHashMap<String, String> validationMap = new LinkedHashMap<>();
			validationMap.put("pscell-selection-method", "pscell-selection-load-balancing");
			validationMap.put("nr-ambr-onoff", "off");
			htmlContent.append(createHtmltableDSS0prim(headerList1, entry, tabelData1, validationMap));

			entry = "measurement-gap";
			validationMap = new LinkedHashMap<>();
			validationMap.put("measurement-gap-enabled","enable");
			validationMap.put("short-gap-enabled", "enable");
			validationMap.put("independent-gap-enabled", "enable");
			validationMap.put("fr2-gap-enabled", "enable");
			htmlContent.append(createHtmltableDSS0prim(headerList2, entry, tabelData2, validationMap));

			entry = "drx-cu-qci";
			validationMap = new LinkedHashMap<>();
			validationMap.put("drx-config-set-up", "drx-config-on");
			htmlContent.append(createHtmltableDSS0prim(headerList3, entry, tabelData3, validationMap));
			
			
			entry = "drx-long-cycle";
			HashMap<String,List<String>>validationMap1 = new LinkedHashMap<>();
			validationMap1.put("drx-fr-index", Arrays.asList("drx-fr1","drx-fr2"));
			htmlContent.append(createHtmltableDSS(headerList4, entry, tabelData4, validationMap1));
			
			entry = "ssb-config";
			Set<Integer> cellIdset = getcellIds(enbId, dbcollectionFileName, "5GNRCIQAU", "eNBId");
			trimTabledata(tabelData5, cellIdset, "cell-identity");
			validationMap = new LinkedHashMap<>();
			validationMap.put("subcarrier-spacing", "scs-30");
			htmlContent.append(createHtmltableDSS0prim(headerList5, entry, tabelData5, validationMap));
			
			entry = "smtc1";
			trimTabledata(tabelData6, cellIdset, "cell-identity");
			validationMap = new LinkedHashMap<>();
			validationMap.put("periodicity", "periodicity-sf20");
			htmlContent.append(createHtmltableDSS0prim(headerList6, entry, tabelData6, validationMap));
		}
		
		catch (Exception e) {
			// TODO: handle exception
		}

		return htmlContent;

	}


	public StringBuilder get20CACPF(String fullOutputLog, String command, String enbId, String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "csl-tce-server";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("csl-tce-server-ip-address");
			headerList1.add("csl-tce-server-port");
			headerList1.add("csl-tce-option");
			String entry2 = "drx-cu-qci";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("gnodeb-id");
			headerList2.add("drx-cu-qci-index");
			headerList2.add("drx-config-set-up");
			headerList2.add("drx-selection-order-cu");
			String entry3 = "drx-long-cycle";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("gnodeb-id");
			headerList3.add("drx-cu-qci-index");
			headerList3.add("drx-fr-index");
			headerList3.add("drx-long-drx-cycle-type-normal");
			String entry4 = "failure-cause-type";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("gnodeb-id");
			headerList4.add("failure-type");
			headerList4.add("instant-mr-based-resync-and-cell-change-flag");
			String entry5 = "gnb-cu-cp-entries";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("gnodeb-id");
			headerList5.add("limited-count-of-nr-cell-for-x2");
			headerList5.add("pscell-selection-method");
			headerList5.add("nr-ambr-onoff");
			String entry6 = "inactivity-data";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("gnodeb-id");
			headerList6.add("feature-enabled");
			headerList6.add("signaling-timer");
			headerList6.add("notification-level");
			headerList6.add("x2-reporting");
			headerList6.add("ue-inactivity-timer");
			headerList6.add("spid-based-user-inactivity");
			String entry7 = "measurement-gap";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("gnodeb-id");
			headerList7.add("measurement-gap-enabled");
			headerList7.add("short-gap-enabled");
			headerList7.add("independent-gap-enabled");
			headerList7.add("fr2-gap-enabled");
			String entry8 = "timer-info";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("gnodeb-id");
			headerList8.add("f1-interface-delete-time");
			String entry9 = "pdcp-info";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("gnodeb-id");
			headerList9.add("qci");
			headerList9.add("rlc-mode");
			headerList9.add("discard-timer-ul");
			headerList9.add("discard-timer-dl");
			headerList9.add("ul-data-split-threshold-a6g");
			String entry10 = "scg-failure-handling";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("gnodeb-id");
			headerList10.add("default-timer-value");
			headerList10.add("default-weight-factor-value");
			headerList10.add("ul-primary-path-mode");
			headerList10.add("threshold-rsrp-for-scg-resync");
			String entry11 = "ssb-config";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("gnodeb-id");
			headerList11.add("cell-identity");
			headerList11.add("index");
			headerList11.add("ssb-freq");
			headerList11.add("subcarrier-spacing");
			headerList11.add("nr-of-ss-blocks-to-avg");
			String entry12 = "smtc1";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("gnodeb-id");
			headerList12.add("cell-identity");
			headerList12.add("index");
			headerList12.add("periodicity");
			
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("gnb-cu-cp-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//gnb-cu-cp-function-entries
					NodeList childNodeList = element.getElementsByTagName("gnb-cu-cp-function-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//drx-config-cu
							NodeList childNodeList1 = elementchild.getElementsByTagName("drx-config-cu");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//drx-cu-qci
									NodeList childNodeList2 = elementchild1.getElementsByTagName("drx-cu-qci");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//drx-long-cycle
											NodeList childNodeList3 = elementchild2.getElementsByTagName("drx-long-cycle");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList3.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData3.add(objtableData);
												}
											}
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}
							
							//scg-failure-handling
							childNodeList1 = elementchild.getElementsByTagName("scg-failure-handling");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//failure-cause-type
									NodeList childNodeList2 = elementchild1.getElementsByTagName("failure-cause-type");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList4.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData4.add(objtableData);
										}
									}
									
									//scg-failure-handling
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList10.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData10.add(objtableData);
								}
							}
							
							//inactivity-data
							childNodeList1 = elementchild.getElementsByTagName("inactivity-data");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList6.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData6.add(objtableData);
									
								}
							}
							
							//measurement-gap
							childNodeList1 = elementchild.getElementsByTagName("measurement-gap");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList7.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData7.add(objtableData);
									
								}
							}
							
							//timer-info
							childNodeList1 = elementchild.getElementsByTagName("timer-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList8.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData8.add(objtableData);
									
								}
							}
							
							
							//pdcp-info
							childNodeList1 = elementchild.getElementsByTagName("pdcp-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//failure-cause-type
									NodeList childNodeList2 = elementchild1.getElementsByTagName("pdcp-info-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList9.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData9.add(objtableData);
										}
									}
								}
							}
							
							//gutran-cu-cell
							childNodeList1 = elementchild.getElementsByTagName("gutran-cu-cell");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//gutran-cu-cell-entries
									NodeList childNodeList2 = elementchild1.getElementsByTagName("gutran-cu-cell-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//meas-object-entries
											NodeList childNodeList3 = elementchild2.getElementsByTagName("meas-object-entries");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;
													
													//ssb-config
													NodeList childNodeList4 = elementchild3.getElementsByTagName("ssb-config");
													for (int n = 0; n < childNodeList4.getLength(); n++) {
														Node ChildNode4 = childNodeList4.item(n);

														if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
															Element elementchild4 = (Element) ChildNode4;
															
															//smtc1
															NodeList childNodeList5 = elementchild4.getElementsByTagName("smtc1");
															for (int o = 0; o < childNodeList5.getLength(); o++) {
																Node ChildNode5 = childNodeList5.item(o);

																if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
																	Element elementchild5 = (Element) ChildNode5;
																	
																	LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																	Iterator<String> itr = headerList12.iterator();
																	String header = itr.next();
																	objtableData.put(header, getXmlElementData(elementchild, header));
																	header = itr.next();
																	objtableData.put(header, getXmlElementData(elementchild2, header));
																	header = itr.next();
																	objtableData.put(header, getXmlElementData(elementchild3, header));

																	while (itr.hasNext()) {
																		header = itr.next();
																		objtableData.put(header,
																				getXmlElementData(elementchild5, header));
																	}
																	tabelData12.add(objtableData);
																}
															}
															
															//ssb-config
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															Iterator<String> itr = headerList11.iterator();
															String header = itr.next();
															objtableData.put(header, getXmlElementData(elementchild, header));
															header = itr.next();
															objtableData.put(header, getXmlElementData(elementchild2, header));
															header = itr.next();
															objtableData.put(header, getXmlElementData(elementchild3, header));

															while (itr.hasNext()) {
																header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild4, header));
															}
															tabelData11.add(objtableData);
														}
													}
												}
											}
										}
									}
								}
							}
							
							//gnb-cu-cp-entries
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							headerList5.forEach(header -> {
								objtableData.put(header, getXmlElementData(elementchild, header));
							});
							tabelData5.add(objtableData);
							
						}
					}
				}
			}
			
			//common-management
			nodeList = document.getElementsByTagName("common-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//csl-configuration
					NodeList childNodeList = element.getElementsByTagName("csl-configuration");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//csl-tce-server
							NodeList childNodeList1 = elementchild.getElementsByTagName("csl-tce-server");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList1.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}
			
			
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "ACPF_Audit_20C"
					+ "</b></td></tr>\n");
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList1, entry1, tabelData1));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList2, entry2, tabelData2));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList3, entry3, tabelData3));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList4, entry4, tabelData4));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList5, entry5, tabelData5));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList6, entry6, tabelData6));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList7, entry7, tabelData7));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList8, entry8, tabelData8));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList9, entry9, tabelData9));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList10, entry10, tabelData10));
			
			Set<Integer> cellIdset = getcellIds(enbId, dbcollectionFileName, "5GNRCIQAU", "eNBId");
			trimTabledata(tabelData11, cellIdset, "cell-identity");
			htmlContent.append(createHtmltableAU20AParamCheck(headerList11, entry11, tabelData11));
			
			trimTabledata(tabelData12, cellIdset, "cell-identity");
			htmlContent.append(createHtmltableAU20AParamCheck(headerList12, entry12, tabelData12));
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get20CAUParamCheck(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "drx-profile-du";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("drx-cycle");
			headerList1.add("drx-on-duration-timer-msec-normal");
			headerList1.add("drx-inactivity-timer-normal");
			//Removed For Ticket SCRT-413
			/*String entry2 = "band-parameters-eutra";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("index");
			headerList2.add("band-indicator-eutra");
			headerList2.add("ca-bandwidth-class-dl-eutra");
			headerList2.add("ca-bandwidth-class-ul-eutra");
			String entry3 = "band-parameters-nr";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("index");
			headerList3.add("band-indicator-nr");
			headerList3.add("ca-bandwidth-class-dl-nr");
			headerList3.add("ca-bandwidth-class-ul-nr");*/
			String entry4 = "beam-management";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cell-identity");
			headerList4.add("dl-mu-mimo-switch");
			headerList4.add("num-trs-restriction-sdx50");
			String entry5 = "cell-cac-info";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-identity");
			headerList5.add("nsa-call-threshold");
			String entry6 = "coloc-covered-cell-num";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cell-identity");
			headerList6.add("coloc-covered-cell-num");
			String entry7 = "csl-tce-ems-server";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("csl-tce-ems-server-port");
			headerList7.add("csl-tce-ems-option");
			String entry8 = "csl-tce-server";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("csl-tce-server-ip-address");
			headerList8.add("csl-tce-server-port");
			headerList8.add("csl-tce-option");
			String entry9 = "drb-rlc-info-func";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("config-type");
			headerList9.add("qci");
			headerList9.add("gnb-timer-poll-retransmit");
			headerList9.add("ue-t-reassembly");
			headerList9.add("ue-timer-status-prohibit");
			String entry10 = "dl-mimo-configuration";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("dl-prb-bundling-size-static");
			headerList10.add("pmi-cycling-switch");
			String entry11 = "ul-power-control-common-config";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("cell-identity");
			headerList11.add("p0-nominal-with-grant");
			headerList11.add("p0-nominal-pucch");
			String entry12 = "tssi-info";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("modem-id");
			headerList12.add("cell-num");
			headerList12.add("path");
			headerList12.add("tssi");
			String entry13 = "ul-mimo-configuration";
			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("cell-identity");
			headerList13.add("ul-su-mimo-switch");
			headerList13.add("ul-mu-mimo-switch");
			headerList13.add("dynamic-srs-port-adaptation");
			String entry14 = "logical-channel-config";
			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("qci");
			headerList14.add("prioritised-bitrate");
			String entry15 = "nr-carrier-aggregation";
			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("cell-identity");
			headerList15.add("ca-available-type");
			headerList15.add("p-cell-only-flag");
			headerList15.add("max-dl-ca-cc-num");
			headerList15.add("max-ul-ca-cc-num");
			String entry16 = "pdsch-config";
			LinkedHashSet<String> headerList16 = new LinkedHashSet<>();
			headerList16.add("cell-identity");
			headerList16.add("dmrs-pdsch-fdm");
			String entry17 = "prach-config";
			LinkedHashSet<String> headerList17 = new LinkedHashSet<>();
			headerList17.add("cell-identity");
			headerList17.add("preamble-receiver-target-power");
			headerList17.add("rsrp-threshold");
			headerList17.add("preamble-trans-max");
			headerList17.add("msg1-frequency-start");
			headerList17.add("prach-configuration-index");
			headerList17.add("ssb-per-rach-occasion-choice");
			headerList17.add("cb-preambles-per-ssb");
			String entry18 = "srs-resource-config";
			LinkedHashSet<String> headerList18 = new LinkedHashSet<>();
			headerList18.add("cell-identity");
			headerList18.add("b-srs-periodic");
			String entry19 = "ssb-configuration";
			LinkedHashSet<String> headerList19 = new LinkedHashSet<>();
			headerList19.add("cell-identity");
			headerList19.add("ssb-subcarrier-spacing");
			headerList19.add("ssb-periodicity");
			headerList19.add("ssb-freq-offset");
			headerList19.add("ssb-freq-align");
			headerList19.add("ssb-freq-config-mode");
			String entry20 = "managed-element";
			LinkedHashSet<String> headerList20 = new LinkedHashSet<>();
			headerList20.add("administrative-state");
			headerList20.add("operational-state");
			headerList20.add("sw-version");			
			String entry21 = "gutran-du-cell-entries";
			LinkedHashSet<String> headerList21 = new LinkedHashSet<>();
			headerList21.add("cell-identity");
			headerList21.add("administrative-state");
			headerList21.add("operational-state");
			String entry22 = "active-alarm-entries";
			LinkedHashSet<String> headerList22 = new LinkedHashSet<>();
			headerList22.add("alarm-unit-type");
			headerList22.add("alarm-unit-id");
			headerList22.add("alarm-type");
			headerList22.add("location");
			headerList22.add("raised-time");
			//headerList22.add("alarm-group");
			headerList22.add("probable-cause");
			headerList22.add("specific-problem");
			headerList22.add("severity");
			//headerList22.add("alarm-code");
			//headerList22.add("sequence-number");
			//headerList22.add("time-info");
			String entry23 = "pusch-power-control-config";
			LinkedHashSet<String> headerList23 = new LinkedHashSet<>();
			headerList23.add("cell-identity");
			headerList23.add("max-target-sinr-64qam");
			headerList23.add("rerror-tpc-up-cmd");
			String entry24 = "ul-ca-scheduler-config";
			LinkedHashSet<String> headerList24 = new LinkedHashSet<>();
			headerList24.add("cell-identity");
			headerList24.add("ul-total-power-limit-offset");
			String entry25 = "ip-interface";
			LinkedHashSet<String> headerList25 = new LinkedHashSet<>();
			headerList25.add("interface-name");
			headerList25.add("ip");
			headerList25.add("management");
			headerList25.add("control");
			headerList25.add("bearer");
			headerList25.add("ieee1588");
			String entry26 = "radio-unit-info";
			LinkedHashSet<String> headerList26 = new LinkedHashSet<>();
			headerList26.add("electrical-tilt");
			String entry27 = "digital-unit-entries";
			LinkedHashSet<String> headerList27 = new LinkedHashSet<>();
			headerList27.add("mtu");
			headerList27.add("tx-wavelength");
			headerList27.add("tx-power");
			headerList27.add("rx-power");
			

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData16 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData17 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData18 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData19 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData20 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData21 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData22 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData23 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData24 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData25 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData26 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData27 = new ArrayList<>();
			
			//gnb-du-function
			NodeList nodeList = document.getElementsByTagName("gnb-du-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//gutran-du-cell
					NodeList childNodeList = element.getElementsByTagName("gutran-du-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// gutran-du-cell-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("gutran-du-cell-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//drx-config-du-cell
									NodeList childNodeList2 = elementchild1.getElementsByTagName("drx-config-du-cell");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//drx-profile-du
											NodeList childNodeList3 = elementchild2.getElementsByTagName("drx-profile-du");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
										}
									}
									
									//beam-management
									childNodeList2 = elementchild1.getElementsByTagName("beam-management");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList4.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData4.add(objtableData);
										}
									}
									
									//cell-cac-info
									childNodeList2 = elementchild1.getElementsByTagName("cell-cac-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList5.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData5.add(objtableData);
										}
									}
									
									//nr-carrier-aggregation
									childNodeList2 = elementchild1.getElementsByTagName("nr-carrier-aggregation");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											for (int z = 0; z < elementchild2
													.getElementsByTagName("coloc-covered-cell-num").getLength(); z++) {
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("cell-identity",
														getXmlElementData(elementchild1, "cell-identity"));
												objtableData.put("coloc-covered-cell-num",
														elementchild2.getElementsByTagName("coloc-covered-cell-num")
																.item(z).getTextContent());
												tabelData6.add(objtableData);
											}
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList15.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData15.add(objtableData);
										}
									}
									
									//ul-power-control-config
									childNodeList2 = elementchild1.getElementsByTagName("ul-power-control-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//ul-power-control-common-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ul-power-control-common-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList11.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData11.add(objtableData);
												}
											}
											
											//pusch-power-control-config
											childNodeList3 = elementchild2.getElementsByTagName("pusch-power-control-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList23.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData23.add(objtableData);
												}
											}
										}
									}
									
									//ul-ca-scheduler-config
									childNodeList2 = elementchild1.getElementsByTagName("ul-ca-scheduler-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//ul-ca-power-sharing-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ul-ca-power-sharing-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList24.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData24.add(objtableData);
												}
											}
										}
									}
									
									//ul-mimo-configuration
									childNodeList2 = elementchild1.getElementsByTagName("ul-mimo-configuration");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList13.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData13.add(objtableData);
										}
									}
									
									//dl-physical-resource-config
									childNodeList2 = elementchild1.getElementsByTagName("dl-physical-resource-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//pdsch-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("pdsch-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList16.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData16.add(objtableData);
												}
											}
										}
									}
									
									//ul-physical-resource-config
									childNodeList2 = elementchild1.getElementsByTagName("ul-physical-resource-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//pdsch-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("prach-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList17.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData17.add(objtableData);
												}
											}
											
											//srs-resource-config
											childNodeList3 = elementchild2.getElementsByTagName("srs-resource-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList18.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData18.add(objtableData);
												}
											}
										}
									}
									
									
									//ssb-configuration
									childNodeList2 = elementchild1.getElementsByTagName("ssb-configuration");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList19.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData19.add(objtableData);
										}
									}
									
									//gutran-du-cell-entries
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									for(String headername : headerList21) {
										objtableData.put(headername, getXmlElementData(elementchild1, headername));
									}
									tabelData21.add(objtableData);
								}
							}
						}
					}

					//endc-bc-information
					/*childNodeList = element.getElementsByTagName("endc-bc-information");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							//endc-bc-information-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("endc-bc-information-entries");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//band-parameters-eutra
									NodeList childNodeList2 = elementchild1.getElementsByTagName("band-parameters-eutra");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
											
										}
									}
									
									//band-parameters-nr
									childNodeList2 = elementchild1.getElementsByTagName("band-parameters-nr");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList3.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData3.add(objtableData);
											
										}
									}
								}
							}
						}
					}*/
					
					//rlc-functions
					childNodeList = element.getElementsByTagName("rlc-functions");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							//endc-bc-information-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("drb-rlc-info-func");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList9.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData9.add(objtableData);
								}
							}
						}
					}
					
					//dl-mimo-configuration
					childNodeList = element.getElementsByTagName("dl-mimo-configuration");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							headerList10.forEach(header -> {
								objtableData.put(header, getXmlElementData(elementchild, header));
							});
							tabelData10.add(objtableData);
						}
					}
					
					//gutran-du-qci
					childNodeList = element.getElementsByTagName("gutran-du-qci");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							//logical-channel-config
							NodeList childNodeList1 = elementchild.getElementsByTagName("logical-channel-config");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList14.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData14.add(objtableData);
								}
							}
						}
					}
				}
			}
			
			//common-management
			nodeList = document.getElementsByTagName("common-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//csl-configuration
					NodeList childNodeList = element.getElementsByTagName("csl-configuration");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//csl-tce-ems-server
							NodeList childNodeList1 = elementchild.getElementsByTagName("csl-tce-ems-server");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList7.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData7.add(objtableData);
								}
							}
							
							//csl-tce-server
							childNodeList1 = elementchild.getElementsByTagName("csl-tce-server");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList8.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData8.add(objtableData);
								}
							}
						}
					}
				}
			}
			
			//hardware-management
			nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("digital-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//tssi
							NodeList childNodeList1 = elementchild.getElementsByTagName("tssi");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//tssi-info
									NodeList childNodeList2 = elementchild1.getElementsByTagName("tssi-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											headerList12.forEach(header -> {
												objtableData.put(header, getXmlElementData(elementchild2, header));
											});
											tabelData12.add(objtableData);
											
										}
									}
								}
							}
							
							//digital-unit-entries
							childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									//external-port
									NodeList childNodeList2 = elementchild1.getElementsByTagName("external-port");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											//ethernet-port
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ethernet-port");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;
													//ethernet-port-entries
													NodeList childNodeList4 = elementchild3.getElementsByTagName("ethernet-port-entries");

													for (int n = 0; n < childNodeList4.getLength(); n++) {
														Node ChildNode4 = childNodeList4.item(n);

														if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
															Element elementchild4 = (Element) ChildNode4;

															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															headerList27.forEach(header -> {
																objtableData.put(header, getXmlElementData(elementchild4, header));
															});
															tabelData27.add(objtableData);

														}
													}
												}
											}
										}
									}
								}
							}							
						}
					}
					
					//radio-unit
					childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//radio-unit-info
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList26.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData26.add(objtableData);
								}
							}
						}
					}					
				}
			}
			
			//fault-management
			nodeList = document.getElementsByTagName("fault-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//active-alarm
					NodeList childNodeList = element.getElementsByTagName("active-alarm");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//active-alarm-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList22.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData22.add(objtableData);
								}
							}
						}
					}
				}
			}
			
			nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					headerList20.forEach(header -> {
						objtableData.put(header, getXmlElementData(element, header));
					});
					tabelData20.add(objtableData);
				}
			}
			
			//ip-interface
			nodeList = document.getElementsByTagName("ip-system");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//cpu
					NodeList childNodeList = element.getElementsByTagName("cpu");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//ip-interface
							NodeList childNodeList1 = elementchild.getElementsByTagName("ip-interface");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//external-interfaces
									NodeList childNodeList2 = elementchild1.getElementsByTagName("external-interfaces");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//ipv6-address
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ipv6-address");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList25.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData25.add(objtableData);
												}
											}
											
										}
									}
								}
							}
						}
					}
				}
			}
			
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "AU_Param_Checks"
					+ "</b></td></tr>\n");
			
			String msgstartfreq = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName, "5GNRCIQAU", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("msg1_frequency_start")) {
				msgstartfreq = listOfCiqDetails.get(0).getCiqMap().get("msg1_frequency_start").getHeaderValue();
			}
			
			HashMap<String, List<String>> validationMap = new HashMap<>();
			validationMap.put("administrative-state", Arrays.asList("unlocked"));
			validationMap.put("operational-state", Arrays.asList("enabled"));
			//htmlContent.append(createHtmltableendc(headerList1, entry, tabelData1, validationMap));
			htmlContent.append(createHtmltableWithValidation(headerList20, entry20, tabelData20,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("administrative-state", Arrays.asList("unlocked"));
			validationMap.put("operational-state", Arrays.asList("enabled"));
			htmlContent.append(createHtmltableWithValidation(headerList21, entry21, tabelData21,validationMap));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList25, entry25, tabelData25));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList26, entry26, tabelData26));
			
			//htmlContent.append(createHtmltableAU20AParamCheck(headerList27, entry27, tabelData27));
			htmlContent.append("<tr><td colspan=" + headerList27.size() + " bgcolor=#EEEEEE><b>" + entry27 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList27) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData27) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if ("rx-power".equalsIgnoreCase(resultTableData.getKey())) {
						if (NumberUtils.isNumber(resultTableData.getValue().trim())) {
							Float txPower = Float.parseFloat(resultTableData.getValue().trim());
							if (Float.compare(txPower, -10.4f) >= 0) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						}

					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
					

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

	
			
			validationMap = new HashMap<>();
			validationMap.put("drx-cycle", Arrays.asList("drx-long-cycle-normal-ms160"));
			validationMap.put("drx-on-duration-timer-msec-normal", Arrays.asList("drx-on-duration-ms10"));
			validationMap.put("drx-inactivity-timer-normal", Arrays.asList("drx-inactivity-ms100"));
			htmlContent.append(createHtmltableWithValidation(headerList1, entry1, tabelData1,validationMap));
			
			//htmlContent.append(createHtmltableAU20AParamCheck(headerList2, entry2, tabelData2));
			
			//htmlContent.append(createHtmltableAU20AParamCheck(headerList3, entry3, tabelData3));
			
			validationMap = new HashMap<>();
			validationMap.put("dl-mu-mimo-switch", Arrays.asList("on"));
			validationMap.put("num-trs-restriction-sdx50", Arrays.asList("disable"));
			htmlContent.append(createHtmltableWithValidation(headerList4, entry4, tabelData4,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("nsa-call-threshold", Arrays.asList("100.0","100"));
			htmlContent.append(createHtmltableWithValidation(headerList5, entry5, tabelData5,validationMap));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList6, entry6, tabelData6));
			
			validationMap = new HashMap<>();
			validationMap.put("csl-tce-ems-option", Arrays.asList("abnormal-call-only"));
			htmlContent.append(createHtmltableWithValidation(headerList7, entry7, tabelData7,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("csl-tce-server-port", Arrays.asList("50021"));
			validationMap.put("csl-tce-option", Arrays.asList("normal-and-abnormal-and-intra-ho-call"));
			htmlContent.append(createHtmltableWithValidation(headerList8, entry8, tabelData8,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("qci", Arrays.asList("132","8","9"));
			validationMap.put("gnb-timer-poll-retransmit", Arrays.asList("t-poll-retransmit-ms30"));
			validationMap.put("ue-t-reassembly", Arrays.asList("ms15"));
			validationMap.put("ue-timer-status-prohibit", Arrays.asList("ms15"));
			htmlContent.append(createHtmltableWithValidation(headerList9, entry9, tabelData9,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("dl-prb-bundling-size-static", Arrays.asList("prb-bundling-size-n2"));
			validationMap.put("pmi-cycling-switch", Arrays.asList("on"));
			htmlContent.append(createHtmltableWithValidation(headerList10, entry10, tabelData10,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("p0-nominal-with-grant", Arrays.asList("-76"));
			validationMap.put("p0-nominal-pucch", Arrays.asList("-80"));
			htmlContent.append(createHtmltableWithValidation(headerList11, entry11, tabelData11,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("max-target-sinr-64qam", Arrays.asList("28"));
			validationMap.put("rerror-tpc-up-cmd", Arrays.asList("0"));
			htmlContent.append(createHtmltableWithValidation(headerList23, entry23, tabelData23,validationMap));
			
			validationMap = new HashMap<>();
			if(networkConfigEntity.getNeVersionEntity().getNeVersion().contains("21.A")) {
				validationMap.put("ul-total-power-limit-offset", Arrays.asList("0"));
			}else {
				validationMap.put("ul-total-power-limit-offset", Arrays.asList("1"));
			}			
			htmlContent.append(createHtmltableWithValidation(headerList24, entry24, tabelData24,validationMap));
			
			//tssi
			validationMap = new HashMap<>();
			validationMap.put("tssi", Arrays.asList("0","-"));
			htmlContent.append(createHtmltablewithInverseValidation(headerList12, entry12, tabelData12,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("ul-su-mimo-switch", Arrays.asList("on"));
			validationMap.put("dynamic-srs-port-adaptation", Arrays.asList("off"));
			htmlContent.append(createHtmltableWithValidation(headerList13, entry13, tabelData13,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("qci", Arrays.asList("8","9","132"));
			validationMap.put("prioritised-bitrate", Arrays.asList("prioritised-bit-rate-infinity"));
			htmlContent.append(createHtmltableWithValidation(headerList14, entry14, tabelData14,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("max-dl-ca-cc-num", Arrays.asList("8"));
			validationMap.put("max-ul-ca-cc-num", Arrays.asList("2"));
			htmlContent.append(createHtmltableWithValidation(headerList15, entry15, tabelData15,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("dmrs-pdsch-fdm", Arrays.asList("0","false"));
			htmlContent.append(createHtmltableWithValidation(headerList16, entry16, tabelData16,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("preamble-receiver-target-power", Arrays.asList("-69"));
			validationMap.put("rsrp-threshold", Arrays.asList("48"));
			validationMap.put("preamble-trans-max", Arrays.asList("preamble-trans-max-n8"));
			if(StringUtils.isNotEmpty(msgstartfreq)) {
				validationMap.put("msg1-frequency-start", Arrays.asList(msgstartfreq));
			}
			validationMap.put("prach-configuration-index", Arrays.asList("194"));
			validationMap.put("ssb-per-rach-occasion-choice", Arrays.asList("ssb-per-ro-two-choice"));
			validationMap.put("cb-preambles-per-ssb", Arrays.asList("28"));
			htmlContent.append(createHtmltableWithValidation(headerList17, entry17, tabelData17,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("b-srs-periodic", Arrays.asList("1"));
			htmlContent.append(createHtmltableWithValidation(headerList18, entry18, tabelData18,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("ssb-freq-align", Arrays.asList("center"));
			validationMap.put("ssb-freq-config-mode", Arrays.asList("gscn-based"));
			htmlContent.append(createHtmltableWithValidation(headerList19, entry19, tabelData19,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("alarm-type", Arrays.asList("-"));
			validationMap.put("specific-problem", Arrays.asList("-"));
			htmlContent.append(createHtmltableWithValidation(headerList22, entry22, tabelData22,validationMap));
			
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getACPFX2E1F120Cchecks(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			String entry1 = "end-point-x2-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("x2-neighbor-index");
			headerList1.add("remote-ip-address");
			headerList1.add("secondary-remote-ip-address");
			headerList1.add("enb-id");
			headerList1.add("sctp-state");
			headerList1.add("x2-ap-state");
			headerList1.add("mcc");
			headerList1.add("mnc");
			
			String entry2 = "end-point-f1c-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("end-point-f1-index");
			headerList2.add("gnb-du-id");
			headerList2.add("remote-ip-address");
			headerList2.add("secondary-remote-ip-address");
			headerList2.add("sctp-state");
			headerList2.add("f1-ap-state");

			String entry3 = "end-point-e1-entries";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("end-point-e1-index");
			headerList3.add("cu-up-id");
			headerList3.add("remote-ip-address");
			headerList3.add("sctp-state");
			headerList3.add("e1-ap-state");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("gnb-cu-cp-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//gnb-cu-cp-function-entries
					NodeList childNodeList = element.getElementsByTagName("gnb-cu-cp-function-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//end-point-x2
							NodeList childNodeList1 = elementchild.getElementsByTagName("end-point-x2");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//end-point-x2-entries
									NodeList childNodeList2 = elementchild1.getElementsByTagName("end-point-x2-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											headerList1.forEach(header -> {
												objtableData.put(header, getXmlElementData(elementchild2, header));
											});
											tabelData1.add(objtableData);
										}
									}
								}
							}
							
							//end-point-f1c
							childNodeList1 = elementchild.getElementsByTagName("end-point-f1c");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//end-point-f1c-entries
									NodeList childNodeList2 = elementchild1.getElementsByTagName("end-point-f1c-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											headerList2.forEach(header -> {
												objtableData.put(header, getXmlElementData(elementchild2, header));
											});
											tabelData2.add(objtableData);
										}
									}
								}
							}
							
							//end-point-e1
							childNodeList1 = elementchild.getElementsByTagName("end-point-e1");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//end-point-e1-entries
									NodeList childNodeList2 = elementchild1.getElementsByTagName("end-point-e1-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											headerList3.forEach(header -> {
												objtableData.put(header, getXmlElementData(elementchild2, header));
											});
											tabelData3.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}
											
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "ACPF_X2E1F1_20C_Checks"
					+ "</b></td></tr>\n");
			
			HashMap<String, List<String>> validationMap = new HashMap<>();
			validationMap.put("sctp-state", Arrays.asList("enabled"));
			validationMap.put("x2-ap-state", Arrays.asList("enabled"));
			htmlContent.append(createHtmltableendc(headerList1, entry1, tabelData1, validationMap));
			
			try {
				String siteName = null;
				List<NeMappingEntity> data1 = null;
				Set<String> gnodebIdList = new HashSet<>();
				List<NeMappingEntity> data = neMappingService.getSiteName(enbId);
				if(data!=null && !data.isEmpty()) {
					siteName = data.get(0).getSiteName();
					data1 = neMappingService.getGnodebs(siteName);
					if(data1!=null){
						for(NeMappingEntity neEntity : data1) {
							gnodebIdList.add(neEntity.getEnbId().replaceAll("^0+(?!$)", ""));
						}
					}
				}
				trimTabledataString(tabelData2, gnodebIdList, "gnb-du-id");
			} catch(Exception e) {
				logger.error(ExceptionUtils.getFullStackTrace(e));
			}
			
			validationMap = new HashMap<>();
			validationMap.put("sctp-state", Arrays.asList("enabled"));
			validationMap.put("f1-ap-state", Arrays.asList("enabled"));
			htmlContent.append(createHtmltableendc(headerList2, entry2, tabelData2, validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("sctp-state", Arrays.asList("enabled"));
			validationMap.put("e1-ap-state", Arrays.asList("enabled"));
			htmlContent.append(createHtmltableendc(headerList3, entry3, tabelData3, validationMap));
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getACPFA1A2A320CChecks(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			// For a1-report-config entries
			String entry = "a1-report-config";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("index");
			headerList1.add("a1-threshold-rsrp");
			headerList1.add("a1-time-to-trigger");
			headerList1.add("a1-purpose");
			
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cell-identity");
			headerList4.add("nr-ul-coverage-method");
			
			NodeList nodeList = document.getElementsByTagName("gutran-cu-cell");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("gutran-cu-cell-entries");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("report-config-entries");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("a1-report-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild, "cell-identity"));
											objtableData.put("index", getXmlElementData(elementchild1, "index"));
											objtableData.put("a1-threshold-rsrp",
													getXmlElementData(elementchild2, "a1-threshold-rsrp"));
											objtableData.put("a1-time-to-trigger",
													getXmlElementData(elementchild2, "a1-time-to-trigger"));
											objtableData.put("a1-purpose",
													getXmlElementData(elementchild2, "a1-purpose"));

											tabelData1.add(objtableData);
										}
									}
								}
							}
							
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("cell-identity",
									getXmlElementData(elementchild, "cell-identity"));
							objtableData.put("nr-ul-coverage-method", getXmlElementData(elementchild, "nr-ul-coverage-method"));
							tabelData4.add(objtableData);
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>"
					+ "ACPF_A1_Checks" + "</b></td></tr>\n");

			Set<Integer> cellIdset = getcellIds(enbId, dbcollectionFileName, "5GNRCIQAU", "eNBId");
			trimTabledata(tabelData1, cellIdset, "cell-identity");
			htmlContent.append(createHtmltable(headerList1, entry, tabelData1));
			
			entry = "nr-ul-coverage-method";
			trimTabledata(tabelData4, cellIdset, "cell-identity");
			htmlContent.append(createHtmltable(headerList4, entry, tabelData4));

			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + "ACPF_A1_checks" + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	
	
	public StringBuilder getEndc20C0SwVersion(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);

			LinkedHashSet<String> enbSites = getEnbsiteIds(enbId, dbcollectionFileName);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("</table>\n");
			if (!ObjectUtils.isEmpty(enbSites)) {
				for (String enbSite : enbSites) {
					String commandName = "eNB_" + enbSite;
					enbDetails20CHtml(outputLog, htmlContent, commandName);
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public void enbDetails20CHtml(String outputLog, StringBuilder htmlContent, String command) {

		try {
			String outputEnbLog = StringUtils.substringAfter(outputLog, command);
			outputEnbLog = StringUtils.substringBefore(outputEnbLog, XmlCommandsConstants.ENDTEXT5GENB);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputEnbLog = "<parent>" + outputEnbLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputEnbLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("neighbor-gnb-index");
			headerList1.add("no-x2");
			headerList1.add("gnb-id-bit-length");
			headerList1.add("gnb-id");
			headerList1.add("ip-ver");
			headerList1.add("neighbor-gnb-ipv6");
			headerList1.add("secondary-neighbor-gnb-ipv6");
			headerList1.add("owner-type");
			headerList1.add("current-x2-rank");
			headerList1.add("previous-x2-rank");
			headerList1.add("no-remove");
			headerList1.add("is-samsung-gnb");
			headerList1.add("interface-state");
			headerList1.add("mcc");
			headerList1.add("mnc");
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("dc-index");
			headerList2.add("bearer-type-usage");
			headerList2.add("qci");
			headerList2.add("arp");
			headerList2.add("bearer-type");
			headerList2.add("nr-band-freq");
			headerList2.add("priority");
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("cell-num");
			headerList3.add("non-gbr-qci");
			headerList3.add("nr-band-freq");
			headerList3.add("priority");
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("requested-frequency-band1");
			headerList4.add("requested-frequency-band2");
			headerList4.add("requested-frequency-band3");
			headerList4.add("requested-frequency-band4");
			headerList4.add("requested-frequency-band5");
			headerList4.add("requested-frequency-band6");
			headerList4.add("requested-frequency-band7");
			headerList4.add("requested-frequency-band8");
			headerList4.add("requested-frequency-band9");
			headerList4.add("requested-frequency-band10");
			headerList4.add("requested-frequency-band11");
			headerList4.add("requested-frequency-band12");
			headerList4.add("requested-frequency-band13");
			headerList4.add("requested-frequency-band14");
			headerList4.add("requested-frequency-band15");
			headerList4.add("requested-frequency-band16");
			headerList4.add("requested-nr-band1");
			headerList4.add("requested-nr-band2");
			headerList4.add("requested-nr-band3");
			headerList4.add("requested-nr-band4");
			headerList4.add("requested-nr-band5");
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-num");
			headerList5.add("fa-index");
			headerList5.add("duplex-type");
			headerList5.add("arfcn-nr-dl");
			headerList5.add("arfcn-nr-ul");
			headerList5.add("mtc-ssb-nr-period");
			headerList5.add("mtc-ssb-nr-offset");
			headerList5.add("mtc-ssb-nr-duration");
			headerList5.add("sub-carrier-spacing-ssb");
			headerList5.add("abs-thresh-rs-index-rsrp");
			headerList5.add("abs-thresh-rs-index-rsrq");
			headerList5.add("abs-thresh-rs-index-sinr");
			headerList5.add("max-rs-index-cell-qual");
			headerList5.add("quantity-config-set");
			headerList5.add("nr-band");
			headerList5.add("offset-freq");
			headerList5.add("preference0");
			headerList5.add("preference1");
			headerList5.add("preference2");
			headerList5.add("preference3");
			headerList5.add("preference4");
			headerList5.add("preference5");
			headerList5.add("min-nrt-ratio-carrier");
			headerList5.add("anr-ue-search-rate");
			headerList5.add("arfcn-point-a-nr-ul");
			headerList5.add("arfcn-point-a-nr-dl");
			headerList5.add("mo-priority");
			headerList5.add("nr-frequency-low");
			headerList5.add("nr-frequency-high");
			headerList5.add("endc-priority-group");
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cell-num");
			headerList6.add("plmn-index");
			headerList6.add("plmn-usage");
			headerList6.add("user-plane-optimization-emtc-enable");
			headerList6.add("control-plane-optimization-emtc-enable");
			headerList6.add("attach-without-pdn-connectivity");
			headerList6.add("upper-layer-indication");
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("cell-num");
			headerList7.add("endc-support");
			headerList7.add("endc-operation-mode");
			headerList7.add("freq-distribute-option");
			headerList7.add("num-lte-freq-for-fr1");
			headerList7.add("num-lte-freq-for-fr2");
			headerList7.add("harmonics-imd-nr-fr");
			headerList7.add("endc-anchor-type");
			headerList7.add("data-traffic-threshold");
			headerList7.add("imd-option");
			headerList7.add("gnb-conf-volte-regular");
			headerList7.add("gnb-conf-volte-emergency");
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("cell-num");
			headerList8.add("purpose");
			headerList8.add("fa-index");
			headerList8.add("qci-group-index");
			headerList8.add("b1-enable");
			headerList8.add("b1-threshold-nr-rsrp");
			headerList8.add("b1-threshold-nr-rsrq");
			headerList8.add("b1-threshold-nr-sinr");
			headerList8.add("hysteresis");
			headerList8.add("time-to-trigger");
			headerList8.add("trigger-quantity");
			headerList8.add("report-quantity-cell-nr-ss-rsrp");
			headerList8.add("report-quantity-cell-nr-ss-rsrq");
			headerList8.add("report-quantity-cell-nr-ss-sinr");
			headerList8.add("max-report-rs-index");
			headerList8.add("report-quantity-rs-index-nr-ss-rsrp");
			headerList8.add("report-quantity-rs-index-nr-ss-rsrq");
			headerList8.add("report-quantity-rs-index-nr-ss-sinr");
			headerList8.add("report-interval");
			headerList8.add("report-amount");
			headerList8.add("b1-report-on-leave");
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("cell-num");
			headerList9.add("relation-index");
			headerList9.add("gnb-id-bit-length");
			headerList9.add("gnb-id");
			headerList9.add("target-cell-id-nr");
			headerList9.add("phy-cell-id-nr");
			headerList9.add("five-gs-tac");
			headerList9.add("configured-tac");
			headerList9.add("duplex-type");
			headerList9.add("arfcn-ul");
			headerList9.add("arfcn-dl");
			headerList9.add("bandwidth-ul-scs");
			headerList9.add("bandwidth-dl-scs");
			headerList9.add("bandwidth-ul-nrb");
			headerList9.add("bandwidth-dl-nrb");
			headerList9.add("ul-nr-frequency-band-0");
			headerList9.add("dl-nr-frequency-band-0");
			headerList9.add("ul-nr-frequency-band-1");
			headerList9.add("dl-nr-frequency-band-1");
			headerList9.add("ul-nr-frequency-band-2");
			headerList9.add("dl-nr-frequency-band-2");
			headerList9.add("ul-nr-frequency-band-3");
			headerList9.add("dl-nr-frequency-band-3");
			headerList9.add("is-remove-allowed");
			headerList9.add("is-en-dc-allowed");
			headerList9.add("owner-type");
			headerList9.add("current-rank");
			headerList9.add("previous-rank");
			headerList9.add("is-colocated");
			headerList9.add("is-colocated-for-es-cell-off");
			headerList9.add("ssb-frequency");
			headerList9.add("mcc");
			headerList9.add("mnc");
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("cell-num");
			headerList10.add("relation-index");
			headerList10.add("plmn-identity-list-index");
			headerList10.add("mcc");
			headerList10.add("mnc");
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("cell-num");
			headerList11.add("cell-size");
			headerList11.add("hnb-name");
			headerList11.add("additional-spectrum-emission");
			headerList11.add("ims-emergency-support");
			headerList11.add("barring-state");
			headerList11.add("category-0-allowed");
			headerList11.add("tracking-area-code");
			headerList11.add("cell-dl-total-power");
			headerList11.add("plmn-info-list-r15-usage");
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("config-type");
			headerList12.add("qci");
			headerList12.add("rlc-mode");
			
			/*
			 * headerList12.add("enb-timer-poll-retransmit");
			 * headerList12.add("enb-poll-pdu"); headerList12.add("enb-poll-byte");
			 * headerList12.add("enb-max-retx-threshold");
			 * headerList12.add("enb-timer-reordering");
			 * headerList12.add("enb-timer-status-prohibit");
			 * headerList12.add("ue-timer-poll-retransmit");
			 * headerList12.add("ue-poll-pdu"); headerList12.add("ue-poll-byte");
			 * headerList12.add("ue-max-retx-threshold");
			 * headerList12.add("ue-timer-reordering");
			 * headerList12.add("ue-timer-status-prohibit");
			 * headerList12.add("sn-field-length");
			 */
			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("delta-oos-threshold");
			headerList13.add("mr-overwrite-enable");
			headerList13.add("single-measure-report-control");
			headerList13.add("endc-csl-enable");
			headerList13.add("endc-csl-create-condition");
			
			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("csl-ip-ver");
			headerList14.add("csl-server-ipv4");
			headerList14.add("csl-server-ipv6");
			headerList14.add("csl-port-num");
			headerList14.add("buffering-time");
			headerList14.add("udp-ack-control");
			headerList14.add("protocol-selection");
			headerList14.add("csl-report-control");
			headerList14.add("csl-encryption-mask-mode");
			headerList14.add("second-csl-ip-ver");
			headerList14.add("second-csl-server-ipv4");
			headerList14.add("second-csl-server-ipv6");
			headerList14.add("second-csl-port-num");
			headerList14.add("second-buffering-time");
			headerList14.add("second-udp-ack-control");
			headerList14.add("second-protocol-selection");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// term-point-to-gnb entries
					NodeList childNodeList = element.getElementsByTagName("term-point-to-gnb");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							headerList1.forEach(header -> {
								objtableData.put(header, getXmlElementData(elementchild, header));
							});
							tabelData1.add(objtableData);
						}
					}

					childNodeList = element.getElementsByTagName("new-radio-network");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// dc-control-param entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("dc-control-param");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList2.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData2.add(objtableData);
								}
							}

							// external-new-radio-cell entries
							childNodeList1 = elementchild.getElementsByTagName("external-new-radio-cell");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList9.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData9.add(objtableData);

									// plmn-identity-list entries
									NodeList childNodeList2 = elementchild1.getElementsByTagName("plmn-identity-list");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData1 = new LinkedHashMap<>();
											Iterator<String> itr = headerList10.iterator();
											String header = itr.next();
											objtableData1.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData1.put(header, getXmlElementData(elementchild1, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData1.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData10.add(objtableData1);
										}
									}
								}
							}

						}
					}

					childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("cell-endc-function");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											// en-dc-meas-priority entries
											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("en-dc-meas-priority");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList3.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData3.add(objtableData);
												}
											}

											// endc-cell-info entries
											childNodeList3 = elementchild2.getElementsByTagName("endc-cell-info");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList7.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData7.add(objtableData);
												}
											}
										}
									}

									// nr-fa-prior-info-func entries
									childNodeList2 = elementchild1.getElementsByTagName("nr-frequency-relation");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("nr-fa-information");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;
													NodeList childNodeList4 = elementchild3
															.getElementsByTagName("nr-fa-prior-info-func");

													for (int n = 0; n < childNodeList4.getLength(); n++) {
														Node ChildNode4 = childNodeList4.item(n);

														if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
															Element elementchild4 = (Element) ChildNode4;

															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															Iterator<String> itr = headerList5.iterator();
															String header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild1, header));

															header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild3, header));

															while (itr.hasNext()) {
																header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild4, header));
															}
															tabelData5.add(objtableData);

														}
													}
												}
											}
										}
									}

									// cell-plmn-info entries
									childNodeList2 = elementchild1.getElementsByTagName("cell-plmn-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList6.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData6.add(objtableData);
										}
									}

									// nr-b1-criteria-info entries
									childNodeList2 = elementchild1.getElementsByTagName("ue-measurement-control");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("nr-b1-criteria-info");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList8.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData8.add(objtableData);

												}
											}
										}
									}

									// cell-plmn-info entries
									childNodeList2 = elementchild1.getElementsByTagName("eutran-cell-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList11.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData11.add(objtableData);
										}
									}
								}
							}
						}
					}

					// ca-requested-frequency-band-inf entries
					childNodeList = element.getElementsByTagName("carrier-aggregation");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild
									.getElementsByTagName("ca-requested-frequency-band-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList4.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData4.add(objtableData);
								}
							}
						}
					}

					childNodeList = element.getElementsByTagName("rlc");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// dc-control-param entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("rlc-info-func");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList12.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData12.add(objtableData);
								}
							}
						}
					}
					
					
					childNodeList = element.getElementsByTagName("call-trace");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// csl-control-func
							NodeList childNodeList1 = elementchild.getElementsByTagName("csl-control-func");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList13.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData13.add(objtableData);
								}
							}
							
							//csl-info
							childNodeList1 = elementchild.getElementsByTagName("csl-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList14.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData14.add(objtableData);
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String entry = "term-point-to-gnb";
			HashMap<String, List<String>> validationMap = new HashMap<>();
			validationMap.put("no-x2", Arrays.asList("false", "0"));
			validationMap.put("no-remove", Arrays.asList("remove-allowed"));
			validationMap.put("is-samsung-gnb", Arrays.asList("1", "true"));
			htmlContent.append(createHtmltableendc(headerList1, entry, tabelData1, validationMap));

			entry = "dc-control-param";
			validationMap = new HashMap<>();
			validationMap.put("bearer-type-usage", Arrays.asList("use"));
			validationMap.put("priority", Arrays.asList("7"));
			htmlContent.append(createHtmltableendc(headerList2, entry, tabelData2, validationMap));

			entry = "en-dc-meas-priority";
			validationMap = new HashMap<>();
			htmlContent.append(createHtmltableendc(headerList3, entry, tabelData3, validationMap));

			entry = "ca-requested-frequency-band-info";
			validationMap = new HashMap<>();
			validationMap.put("requested-nr-band1", Arrays.asList("261"));
			validationMap.put("requested-nr-band2", Arrays.asList("260", "5"));
			validationMap.put("requested-nr-band3", Arrays.asList("5"));
			htmlContent.append(createHtmltableendc(headerList4, entry, tabelData4, validationMap));

			entry = "nr-fa-prior-info-func";
			LinkedHashMap<String, LinkedHashMap<String, String>> validationMap1prim = new LinkedHashMap<>();
			LinkedHashMap<String, String> temp = new LinkedHashMap<>();
			temp.put("nr-band", "261");
			validationMap1prim.put("0", temp);
			temp = new LinkedHashMap<>();
			temp.put("nr-band", "260");
			validationMap1prim.put("1", temp);
			htmlContent.append(createHtmltableDSS1prim(headerList5, entry, "fa-index", tabelData5, validationMap1prim));

			entry = "cell-plmn-info";
			validationMap = new HashMap<>();
			validationMap.put("plmn-usage", Arrays.asList("enable"));
			validationMap.put("upper-layer-indication", Arrays.asList("enable"));
			htmlContent.append(createHtmltableendc(headerList6, entry, tabelData6, validationMap));

			entry = "endc-cell-info";
			validationMap = new HashMap<>();
			validationMap.put("endc-support", Arrays.asList("true"));
			htmlContent.append(createHtmltableendc(headerList7, entry, tabelData7, validationMap));

			entry = "nr-b1-criteria-info";
			validationMap = new HashMap<>();
			validationMap.put("hysteresis", Arrays.asList("0"));
			validationMap.put("b1-threshold-nr-rsrp", Arrays.asList("51"));
			htmlContent.append(createHtmltableendc(headerList8, entry, tabelData8, validationMap));

			entry = "external-new-radio-cell";
			validationMap = new HashMap<>();
			htmlContent.append(createHtmltableendc(headerList9, entry, tabelData9, validationMap));

			entry = "plmn-identity-list";
			validationMap = new HashMap<>();
			htmlContent.append(createHtmltableendc(headerList10, entry, tabelData10, validationMap));

			entry = "eutran-cell-info";
			validationMap = new HashMap<>();
			validationMap.put("plmn-info-list-r15-usage", Arrays.asList("use"));
			htmlContent.append(createHtmltableendc(headerList11, entry, tabelData11, validationMap));

			entry = "rlc-info-func";
			validationMap = new HashMap<>();
			validationMap.put("qci", Arrays.asList("8", "9"));
			htmlContent.append(createHtmltableendc(headerList12, entry, tabelData12, validationMap));
			
			entry = "csl-control-func";
			validationMap = new HashMap<>();
			htmlContent.append(createHtmltableendc(headerList13, entry, tabelData13, validationMap));
			
			entry = "csl-info";
			validationMap = new HashMap<>();
			htmlContent.append(createHtmltableendc(headerList14, entry, tabelData14, validationMap));

			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
	}

	public Set<Integer> getcellIds(String enbId, String dbcollectionFileName, String sheetname, String idname) {
		Set<Integer> cellIdSet = new HashSet<>();
		try {
			String[] cellKeys = {"CC0 Cell Identity", "CC1 Cell Identity", "CC2 Cell Identity", "CC3 Cell Identity", "CC4 Cell Identity",
					"CC5 Cell Identity", "CC6 Cell Identity", "CC7 Cell Identity"};
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName, sheetname, idname);
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {
					LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();
					for(String cellKey : cellKeys) {
						if(objMapDetails.containsKey(cellKey)) {
							String cellId = objMapDetails.get(cellKey).getHeaderValue();
							if(NumberUtils.isNumber(cellId)) {
								cellIdSet.add(NumberUtils.toInt(cellId));
							}
						}
					}
				}
			}
		} catch(Exception e) {
			logger.error("Exception in getcellIds() " + ExceptionUtils.getFullStackTrace(e));
		}
		
		return cellIdSet;
	}
	
	public StringBuilder getAUProcessorInventory(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			String entry1 = "processor-inventory-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("hardware-name");
			headerList1.add("serial-number");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("processor-inventory-entries");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					headerList1.forEach(header -> {
						objtableData.put(header, getXmlElementData(element, header));
					});
					tabelData1.add(objtableData);
				}
			}
											
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "AU_Processor_Entries"
					+ "</b></td></tr>\n");
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList1, entry1, tabelData1));
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	StringBuilder createHtmltableWithValidation(LinkedHashSet<String> headerList, String command,
			List<LinkedHashMap<String, String>> tabelData, HashMap<String, List<String>> validationMap) {
		StringBuilder htmlContent = new StringBuilder();

		htmlContent
				.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData) {
			tableData.append("<tr>\n");

			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (validationMap.containsKey(key)) {
					if (validationMap.get(key).contains(value)) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);

		return htmlContent;
	}

	StringBuilder createHtmltablewithInverseValidation(LinkedHashSet<String> headerList, String command,
			List<LinkedHashMap<String, String>> tabelData, HashMap<String, List<String>> validationMap) {
		StringBuilder htmlContent = new StringBuilder();

		htmlContent
				.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData) {
			tableData.append("<tr>\n");

			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (validationMap.containsKey(key)) {
					if (validationMap.get(key).contains(value)) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);

		return htmlContent;
	}
	private StringBuilder getCommandHtmlusageState(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("usage-state");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("eutran-generic-cell");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header,
										getXmlElementData(elementchild, header));
							}
							tabelData1.add(objtableData);
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			StringBuilder administrativeStateIssue = new StringBuilder();	
			StringBuilder auditIssueAll = new StringBuilder();
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String cellnum = "";
				String earfcn = "";
				
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("Cell_ID") && ciqData.getCiqMap().get("Cell_ID")
								.getHeaderValue().trim().equals(tdData.get("cell-num").trim())) {
							cellnum = tdData.get("cell-num");
							if (ciqData.getCiqMap().containsKey("administrative-state")) {
								earfcn = ciqData.getCiqMap().get("administrative-state").getHeaderValue().trim();
							}
							
						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-num")) {
						if (value.equals(cellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("usage-state")) {
						if (!value.equals("active")  && earfcn.contains("unlocked")) {
							administrativeStateIssue.append("cell-num : " + tdData.get("cell-num") + 
									" usage-state : " + tdData.get("usage-state") + "\n");	
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}  else {
							tableData.append("<td align=center>" + value + "</td>\n");
							

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			
			auditIssueAll.append(administrativeStateIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if(administrativeStateIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(66, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						administrativeStateIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	public StringBuilder get4GHtml(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, int count, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			String outputLogtemp = null;
			if(count == 1) {
				//show managed-element ip-system ip-route ipv6-route ipv6-static-route | display xml
				outputLogtemp = XmlCommandsConstants.IPSYS_IPV6_STATICROUTE + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlStaticRoute(outputLogtemp, XmlCommandsConstants.IPSYS_IPV6_STATICROUTE, enbId, dbcollectionFileName,runTestEntity));
				
				//show managed-element enb-function term-point-to-mme | display xml
				outputLogtemp = XmlCommandsConstants.ENB_FUNCTION_TERMPOINTMME + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlMmeUsage(outputLogtemp, XmlCommandsConstants.ENB_FUNCTION_TERMPOINTMME, enbId, dbcollectionFileName,runTestEntity));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd operational-state | display xml
				outputLogtemp = XmlCommandsConstants.ENB_FUNCTION_OPERATIONAL_STATE + outputLog + "[ok]";
				htmlContent.append(get4GeutrancellfddtddOperationalState(outputLogtemp, XmlCommandsConstants.ENB_FUNCTION_OPERATIONAL_STATE, enbId,dbcollectionFileName, runTestEntity));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd usage-state | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd usage-state | display xml" + outputLog + "[ok]";
				//htmlContent.append(getCommandHtmlOperationalState(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd usage-state | display xml", enbId,dbcollectionFileName));
				htmlContent.append(getCommandHtmlusageState(outputLogtemp,
						"show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd usage-state | display xml",
						enbId, dbcollectionFileName, runTestEntity));
			} else if(count == 2) {
				//show managed-element hardware-management digital-unit clock-unit ucr | display xml
				outputLogtemp = "show managed-element hardware-management digital-unit clock-unit ucr | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gclockunitucr(outputLogtemp, "show managed-element hardware-management digital-unit clock-unit ucr | display xml", enbId, dbcollectionFileName, runTestEntity));
			} else if(count == 3) {
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-call-count-status | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-call-count-status | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gcellcallcountstatus(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-call-count-status | display xml", enbId, dbcollectionFileName, runTestEntity));
				
			} else if(count == 4) {
				//show managed-element test-management monitor-test active-test-list | display xml
				/*outputLogtemp = "show managed-element test-management monitor-test active-test-list | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gactivetestlist(outputLogtemp, "show managed-element test-management monitor-test active-test-list | display xml", enbId, dbcollectionFileName));
			*/
				//show managed-element enb-function call-trace retrieve-trace | display xml
				outputLogtemp = "show managed-element enb-function call-trace retrieve-trace | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gretrievetrace(outputLogtemp, "show managed-element enb-function call-trace retrieve-trace | display xml", enbId, dbcollectionFileName));
			
			} else if(count == 5) {
				//show managed-element hardware-management digital-unit digital-unit-entries external-port cpri-port cpri-port-entries | display xml
				/*outputLogtemp = XmlCommandsConstants.DIGITALUNIT_CPRIPORT_ENTRIES + outputLog + "[ok]";
				htmlContent.append(get4Gcpriportentries(outputLogtemp, XmlCommandsConstants.DIGITALUNIT_CPRIPORT_ENTRIES, enbId, dbcollectionFileName, runTestEntity));
				*/
				
				//show managed-element hardware-management radio-unit radio-unit-info antenna-unit antenna-line-device antenna-line-device-info ret ret-info | display xml
				outputLogtemp = XmlCommandsConstants.RADIOUNIT_ANTENALINE_DEVICE_INFO_RETINFO + outputLog + "[ok]";
				htmlContent.append(get4Gantennaretinfo(outputLogtemp, XmlCommandsConstants.RADIOUNIT_ANTENALINE_DEVICE_INFO_RETINFO, enbId, dbcollectionFileName, runTestEntity));
			
				//show managed-element enb-function term-point-to-mme | display xml
				outputLogtemp = XmlCommandsConstants.ENB_FUNCTION_TERMPOINTMME + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlMmeUsage(outputLogtemp, XmlCommandsConstants.ENB_FUNCTION_TERMPOINTMME, enbId, dbcollectionFileName,runTestEntity));
				
				//show managed-element ip-system ip-interface external-interfaces ipv6-address | display xml
				outputLogtemp = "show managed-element ip-system ip-interface external-interfaces ipv6-address | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gipv6address(outputLogtemp, "show managed-element ip-system ip-interface external-interfaces ipv6-address | display xml", enbId, dbcollectionFileName));
			
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cbrs-info | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cbrs-info | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gcbrsinfo(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cbrs-info | display xml", enbId, dbcollectionFileName));
			
				//show managed-element hardware-management radio-unit radio-unit-info antenna-unit | display xml
				outputLogtemp = "show managed-element hardware-management radio-unit radio-unit-info antenna-unit | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gantennaunit(outputLogtemp, "show managed-element hardware-management radio-unit radio-unit-info antenna-unit | display xml", enbId, dbcollectionFileName));
				
			} else if(count == 6) {
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd administrative-state | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd administrative-state | display xml" + outputLog + "[ok]";
				htmlContent.append(get4GeutrancellfddtddAdministrativeState(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd administrative-state | display xml", enbId,dbcollectionFileName, runTestEntity));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd dsp-id | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd dsp-id | display xml" + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlOperationalState(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd dsp-id | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-cell-conf-idle | display xml
				outputLogtemp = XmlCommandsConstants.ENB_FUNCTION_EARFCN_EUTRAN_CELL_CONF_IDLE + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlCellConfIdle(outputLogtemp, XmlCommandsConstants.ENB_FUNCTION_EARFCN_EUTRAN_CELL_CONF_IDLE, enbId, dbcollectionFileName));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd scheduling-config physical-resource-config prach-config-logic | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd scheduling-config physical-resource-config prach-config-logic | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gprachconfiglogic(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd scheduling-config physical-resource-config prach-config-logic | display xml", enbId, dbcollectionFileName));
				
				//show managed-element hardware-management radio-unit radio-unit-info board-type | display xml
				outputLogtemp = "show managed-element hardware-management radio-unit radio-unit-info board-type | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gboardtype(outputLogtemp, "show managed-element hardware-management radio-unit radio-unit-info board-type | display xml", enbId, dbcollectionFileName, "board-type", runTestEntity));
				
				//show managed-element hardware-management radio-unit radio-unit-info first-sector-start-earfcn | display xml
				outputLogtemp = "show managed-element hardware-management radio-unit radio-unit-info first-sector-start-earfcn | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gboardtype(outputLogtemp, "show managed-element hardware-management radio-unit radio-unit-info first-sector-start-earfcn | display xml", enbId, dbcollectionFileName, "first-sector-start-earfcn", runTestEntity));
				
				//show managed-element hardware-management radio-unit radio-unit-info second-sector-start-earfcn | display xml
				outputLogtemp = "show managed-element hardware-management radio-unit radio-unit-info second-sector-start-earfcn | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gboardtype(outputLogtemp, "show managed-element hardware-management radio-unit radio-unit-info second-sector-start-earfcn | display xml", enbId, dbcollectionFileName, "second-sector-start-earfcn", runTestEntity));
								
				//show managed-element hardware-management radio-unit radio-unit-info cbrs | display xml
				outputLogtemp = "show managed-element hardware-management radio-unit radio-unit-info cbrs | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gradiounitcbrs(outputLogtemp, "show managed-element hardware-management radio-unit radio-unit-info cbrs | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function cbrs | display xml
				outputLogtemp = "show managed-element enb-function cbrs | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Genbfunctioncbrs(outputLogtemp, "show managed-element enb-function cbrs | display xml", enbId, dbcollectionFileName));
				
				//show managed-element hardware-management radio-unit radio-unit-info radio-unit-serial-number | display xml
				outputLogtemp = "show managed-element hardware-management radio-unit radio-unit-info radio-unit-serial-number | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gboardtype(outputLogtemp, "show managed-element hardware-management radio-unit radio-unit-info radio-unit-serial-number | display xml", enbId, dbcollectionFileName, "radio-unit-serial-number", runTestEntity));
				
				//show managed-element hardware-management radio-unit radio-unit-info external-port cpri-port | display xml
				/*outputLogtemp = XmlCommandsConstants.RADIOUNIT_CPRIPORT + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlRadioUnitCpriPort(outputLogtemp, XmlCommandsConstants.RADIOUNIT_CPRIPORT, enbId,runTestEntity));*/
				
				//show managed-element hardware-management radio-unit radio-unit-info carrier-control-info | display xml
				outputLogtemp = XmlCommandsConstants.RADIOUNIT_CARRIER_CONTROLINFO + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlRadioUnitCarrierControlInfoCpriInfo(outputLogtemp, XmlCommandsConstants.RADIOUNIT_CARRIER_CONTROLINFO, enbId, dbcollectionFileName,runTestEntity));
				
				//show managed-element hardware-management radio-unit radio-unit-info vswr-fail-alarm-threshold | display xml
				outputLogtemp = "show managed-element hardware-management radio-unit radio-unit-info vswr-fail-alarm-threshold | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gboardtype(outputLogtemp, "show managed-element hardware-management radio-unit radio-unit-info vswr-fail-alarm-threshold | display xml", enbId, dbcollectionFileName, "vswr-fail-alarm-threshold", runTestEntity));
				
				//show managed-element common-management time-sync-service ntp-info | display xml
				outputLogtemp = "show managed-element common-management time-sync-service ntp-info | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gntpinfo(outputLogtemp, "show managed-element common-management time-sync-service ntp-info | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function call-trace csl-info | display xml
				outputLogtemp = XmlCommandsConstants.ENB_FUNCTION_CALL_TRACE_CSL_INFO + outputLog + "[ok]";
				htmlContent.append(get4GCallTraceCslInfo(outputLogtemp, XmlCommandsConstants.ENB_FUNCTION_CALL_TRACE_CSL_INFO, enbId, runTestEntity));
				
				//show managed-element common-management time-sync-service local-time-info | display xml
				outputLogtemp = "show managed-element common-management time-sync-service local-time-info | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Glocaltimeinfo(outputLogtemp, "show managed-element common-management time-sync-service local-time-info | display xml", enbId, dbcollectionFileName));
				
				//show managed-element hardware-management digital-unit uda-port | display xml
				outputLogtemp = "show managed-element hardware-management digital-unit uda-port | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gudaport(outputLogtemp, "show managed-element hardware-management digital-unit uda-port | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-cell-access cell-select-info-logic | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-cell-access cell-select-info-logic | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gcellselectinfologic(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-cell-access cell-select-info-logic | display xml", enbId, dbcollectionFileName));
				
				//show managed-element hardware-management radio-unit radio-unit-info antenna-unit antenna-line-device antenna-line-device-info | display xml
				outputLogtemp = XmlCommandsConstants.RADIOUNIT_ANTENALINE_DEVICE_INFO + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlRadioUnitAntenaLineDevice(outputLogtemp, XmlCommandsConstants.RADIOUNIT_ANTENALINE_DEVICE_INFO, enbId));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-frequency-relation eutran-fa-information eutran-fa-prior-info-func earfcn-ul | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-frequency-relation eutran-fa-information eutran-fa-prior-info-func earfcn-ul | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Geutranfapriorinfofunc(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-frequency-relation eutran-fa-information eutran-fa-prior-info-func earfcn-ul | display xml", enbId, dbcollectionFileName, "earfcn-ul"));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-frequency-relation eutran-fa-information eutran-fa-prior-info-func earfcn-dl | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-frequency-relation eutran-fa-information eutran-fa-prior-info-func earfcn-dl | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Geutranfapriorinfofunc(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-frequency-relation eutran-fa-information eutran-fa-prior-info-func earfcn-dl | display xml", enbId, dbcollectionFileName, "earfcn-dl"));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-frequency-relation eutran-fa-information eutran-fa-prior-info-func priority | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-frequency-relation eutran-fa-information eutran-fa-prior-info-func priority | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Geutranfapriorinfofunc(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-frequency-relation eutran-fa-information eutran-fa-prior-info-func priority | display xml", enbId, dbcollectionFileName, "priority"));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-plmn-info | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-plmn-info | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gcellplmninfo(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-plmn-info | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function enb-information enb-plmn-info | display xml
				outputLogtemp = "show managed-element enb-function enb-information enb-plmn-info | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Genbplmninfo(outputLogtemp, "show managed-element enb-function enb-information enb-plmn-info | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function carrier-aggregation ca-band-combination-info | display xml
				outputLogtemp = "show managed-element enb-function carrier-aggregation ca-band-combination-info | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gcabandcombinationinfo(outputLogtemp, "show managed-element enb-function carrier-aggregation ca-band-combination-info | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-carrier-aggregation ca-cell-info | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-carrier-aggregation ca-cell-info | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gcacellinfo(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-carrier-aggregation ca-cell-info | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-carrier-aggregation ca-colocated-cell | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-carrier-aggregation ca-colocated-cell | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gcacolocatedcell(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-carrier-aggregation ca-colocated-cell | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function son load-balancing active-mode-load-balancing-conf | display xml
				outputLogtemp = "show managed-element enb-function son load-balancing active-mode-load-balancing-conf | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gactivemodeloadbalancingconf(outputLogtemp, "show managed-element enb-function son load-balancing active-mode-load-balancing-conf | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-cell-info ims-emergency-support | display xml
				outputLogtemp = XmlCommandsConstants.ENB_FUNCTION_IMS_EMERGENCY + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlImsEmergency(outputLogtemp, XmlCommandsConstants.ENB_FUNCTION_IMS_EMERGENCY, enbId, dbcollectionFileName,runTestEntity));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-son cell-load-balancing traffic-manage-func-cell-control | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-son cell-load-balancing traffic-manage-func-cell-control | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gtrafficmanagefunccellcontrol(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-son cell-load-balancing traffic-manage-func-cell-control | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-cell-info cell-dl-total-power | display xml
				outputLogtemp = XmlCommandsConstants.ENB_FUNCTION_EARFCN_CELL_DL_TOTAL_POWER + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlCellDlTotalPower(outputLogtemp, XmlCommandsConstants.ENB_FUNCTION_EARFCN_CELL_DL_TOTAL_POWER, enbId, dbcollectionFileName));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd scheduling-config uplink-scheduling-config ul-power-control-param-logic | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd scheduling-config uplink-scheduling-config ul-power-control-param-logic | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gulpowercontrolparamlogic(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd scheduling-config uplink-scheduling-config ul-power-control-param-logic | display xml", enbId, dbcollectionFileName));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd dsp-logical-cell-number | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd dsp-logical-cell-number | display xml" + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlOperationalState(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd dsp-logical-cell-number | display xml", enbId,dbcollectionFileName));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd channel-card-id | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd channel-card-id | display xml" + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlOperationalState(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd channel-card-id | display xml", enbId,dbcollectionFileName));
				
				//show managed-element hardware-management radio-unit radio-unit-info path-control | display xml
				/*outputLogtemp = XmlCommandsConstants.ENB_FUNCTION_RADIO_PATH_CONTROL + outputLog + "[ok]";
				htmlContent.append(get4Gpathcontrol(outputLogtemp, XmlCommandsConstants.ENB_FUNCTION_RADIO_PATH_CONTROL, enbId, dbcollectionFileName, runTestEntity));
				*/
				//show managed-element ip-system access-control-list acl-rule-config | display xml
				outputLogtemp = "show managed-element ip-system access-control-list acl-rule-config | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gaclruleconfig(outputLogtemp, "show managed-element ip-system access-control-list acl-rule-config | display xml", enbId, dbcollectionFileName));
				
				//active-alarm-entries
				outputLogtemp = "active-alarm-entries" + outputLog + "[ok]";
				htmlContent.append(get4Gaactivealarmentries(outputLogtemp, "active-alarm-entries", enbId, dbcollectionFileName, runTestEntity));
				
				//show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd s1-ap-state | display xml
				outputLogtemp = "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd s1-ap-state | display xml" + outputLog + "[ok]";
				htmlContent.append(get4GeutrancellfddtddS1ApState(outputLogtemp, "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd s1-ap-state | display xml", enbId,dbcollectionFileName, runTestEntity));
				
				//show managed-element hardware-management radio-unit radio-unit-info operational-state | display xml
				outputLogtemp = "show managed-element hardware-management radio-unit radio-unit-info operational-state | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gboardtype(outputLogtemp, "show managed-element hardware-management radio-unit radio-unit-info operational-state | display xml", enbId, dbcollectionFileName, "operational-state", runTestEntity));
				
				outputLogtemp = "show managed-element hardware-management radio-unit radio-unit-info operational-mode | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gboardtype(outputLogtemp, "show managed-element hardware-management radio-unit radio-unit-info operational-mode | display xml", enbId, dbcollectionFileName, "operational-mode", runTestEntity));
				
				outputLogtemp = "show managed-element hardware-management radio-unit radio-unit-info antenna-line-device-power-feeding-switch | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Gboardtype(outputLogtemp, "show managed-element hardware-management radio-unit radio-unit-info antenna-line-device-power-feeding-switch | display xml", enbId, dbcollectionFileName, "antenna-line-device-power-feeding-switch", runTestEntity));
			
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + "4G_AUDIT" + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gclockunitucr(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("lock-state");
			headerList1.add("holdover-state");
			headerList1.add("location");
			headerList1.add("tod");
			headerList1.add("gps-position");
			headerList1.add("time-figure-of-merit");
			headerList1.add("current-antenna-delay");
			headerList1.add("satellite-count");
			headerList1.add("electronic-frequency-control");
			headerList1.add("time-interval");
			headerList1.add("frequency-figure-of-merit");
			headerList1.add("identifiable-information");
			headerList1.add("satellite-id");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("digital-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("clock-unit");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("ucr");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											headerList1.forEach(header -> {
												objtableData.put(header, getXmlElementData(elementchild2, header));
											});
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element hardware-management digital-unit clock-unit ucr | display xml"
					+ "</b></td></tr>\n");
			
			StringBuilder lockStateAuditIssue = new StringBuilder();
			StringBuilder holdoverStateAuditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if(resultTableData.getKey().equalsIgnoreCase("lock-state") && !resultTableData.getValue().equalsIgnoreCase("locked")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						lockStateAuditIssue.append("lock-state : " + tdData.get("lock-state")+ 
								" location : " + tdData.get("location")+
								" tod : " + tdData.get("tod")+
								" gps-position : " + tdData.get("gps-position")+"\n");				
					} else if(resultTableData.getKey().equalsIgnoreCase("holdover-state") && !resultTableData.getValue().equalsIgnoreCase("not-holdover")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						holdoverStateAuditIssue.append("holdover-state : " + tdData.get("holdover-state")+ " location : " + tdData.get("location")+
								" tod : " + tdData.get("tod")+
								" gps-position : " + tdData.get("gps-position")+"\n");				
					} else {

						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(lockStateAuditIssue);
			auditIssueAll.append(holdoverStateAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			
			if(lockStateAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(12, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						lockStateAuditIssue.toString());
			}
			if(holdoverStateAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(13, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						holdoverStateAuditIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gcellcallcountstatus(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("active-ue-count");
			headerList1.add("emergency-access-ue-count");
			headerList1.add("high-priority-access-ue-count");
			headerList1.add("mobile-term-access-ue-count");
			headerList1.add("mobile-origin-signal-access-ue-count");
			headerList1.add("mobile-origin-data-access-ue-count");
			headerList1.add("relocated-handover-ue-count");
			headerList1.add("delay-tolerant-access-ue-count");
			headerList1.add("scell-ue-count");
			headerList1.add("mo-voice-call-ue-count");
			headerList1.add("active-emtc-ue-count");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("cell-call-count-status");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-call-count-status | display xml"
					+ "</b></td></tr>\n");
			
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			StringBuilder auditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String cellnum = "";
				String earfcn = "";
				String fuseid = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("Cell_ID") && ciqData.getCiqMap().get("Cell_ID")
								.getHeaderValue().trim().equals(tdData.get("cell-num").trim())) {
							cellnum = tdData.get("cell-num");
							if (ciqData.getCiqMap().containsKey("administrative-state")) {
								earfcn = ciqData.getCiqMap().get("administrative-state").getHeaderValue().trim();
							}
							
						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-num")) {
						if (value.equals(cellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("active-ue-count")) {
						if (NumberUtils.isNumber(value) 
								&& NumberUtils.toInt(value)<= 0 && ((earfcn.contains("unlocked")))) {
							auditIssue.append("cell-num : " + tdData.get("cell-num") + 
									", active-ue-count : " + tdData.get("active-ue-count") + "\n");	
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}  else {
							tableData.append("<td align=center>" + value + "</td>\n");
							

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				/*for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if(resultTableData.getKey().equalsIgnoreCase("active-ue-count") && NumberUtils.isNumber(resultTableData.getValue()) 
							&& NumberUtils.toInt(resultTableData.getValue())<= 0) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						auditIssue.append("cell-num : " + tdData.get("cell-num") + 
								", active-ue-count : " + tdData.get("active-ue-count") + "\n");				
					} else {

						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}

				}*/
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			
			auditIssueAll.append(auditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			
			if(auditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(4, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gactivetestlist(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("invocation-id");
			headerList1.add("test-state");
			headerList1.add("test-outcome");
			headerList1.add("test-type");
			headerList1.add("other-attributes");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("test-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("monitor-test");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("active-test-list");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											headerList1.forEach(header -> {
												objtableData.put(header, getXmlElementData(elementchild2, header));
											});
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
											
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element test-management monitor-test active-test-list | display xml"
					+ "</b></td></tr>\n");			
			
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gretrievetrace(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("trace-index");
			headerList1.add("trace-type");
			headerList1.add("trace-id");
			headerList1.add("trace-reference");
			headerList1.add("list-of-interfaces");
			headerList1.add("trace-depth");
			headerList1.add("target-cell");
			headerList1.add("ip-ver");
			headerList1.add("tce-address-ipv4");
			headerList1.add("tce-address-ipv6");
			headerList1.add("mdt-job-type");
			headerList1.add("mdt-job-type-string");
			headerList1.add("area-scope");
			headerList1.add("mdt-mcc-tai1");
			headerList1.add("mdt-mnc-tai1");
			headerList1.add("mdt-tac-tai1");
			headerList1.add("mdt-mcc-tai2");
			headerList1.add("mdt-mnc-tai2");
			headerList1.add("mdt-tac-tai2");
			headerList1.add("mdt-mcc-tai3");
			headerList1.add("mdt-mnc-tai3");
			headerList1.add("mdt-tac-tai3");
			headerList1.add("mdt-mcc-tai4");
			headerList1.add("mdt-mnc-tai4");
			headerList1.add("mdt-tac-tai4");
			headerList1.add("mdt-mcc-tai5");
			headerList1.add("mdt-mnc-tai5");
			headerList1.add("mdt-tac-tai5");
			headerList1.add("mdt-mcc-tai6");
			headerList1.add("mdt-mnc-tai6");
			headerList1.add("mdt-tac-tai6");
			headerList1.add("mdt-mcc-tai7");
			headerList1.add("mdt-mnc-tai7");
			headerList1.add("mdt-tac-tai7");
			headerList1.add("mdt-mcc-tai8");
			headerList1.add("mdt-mnc-tai8");
			headerList1.add("mdt-tac-tai8");
			headerList1.add("mdt-mbsfn-area-id-area1");
			headerList1.add("mdt-mbsfn-freq-area1");
			headerList1.add("mdt-mbsfn-area-id-area2");
			headerList1.add("mdt-mbsfn-freq-area2");
			headerList1.add("mdt-mbsfn-area-id-area3");
			headerList1.add("mdt-mbsfn-freq-area3");
			headerList1.add("mdt-mbsfn-area-id-area4");
			headerList1.add("mdt-mbsfn-freq-area4");
			headerList1.add("mdt-mbsfn-area-id-area5");
			headerList1.add("mdt-mbsfn-freq-area5");
			headerList1.add("mdt-mbsfn-area-id-area6");
			headerList1.add("mdt-mbsfn-freq-area6");
			headerList1.add("mdt-mbsfn-area-id-area7");
			headerList1.add("mdt-mbsfn-freq-area7");
			headerList1.add("mdt-mbsfn-area-id-area8");
			headerList1.add("mdt-mbsfn-freq-area8");
			headerList1.add("m1-meas-status");
			headerList1.add("m2-meas-status");
			headerList1.add("reporting-trigger");
			headerList1.add("report-interval");
			headerList1.add("report-amount");
			headerList1.add("trigger-quantity");
			headerList1.add("a2-threshold-rsrp");
			headerList1.add("a2-threshold-rsrq");
			headerList1.add("logging-interval");
			headerList1.add("logging-duration");
			headerList1.add("anonymization-level");
			headerList1.add("m3-meas-status");
			headerList1.add("m4-meas-status");
			headerList1.add("m4-collection-period");
			headerList1.add("m4-links-to-log");
			headerList1.add("m5-meas-status");
			headerList1.add("m5-collection-period");
			headerList1.add("m5-links-to-log");
			headerList1.add("all-rrm-meas-status");
			headerList1.add("m6-meas-status");
			headerList1.add("ecid-positioning");
			headerList1.add("gnss-positioning");
			headerList1.add("target-mcc");
			headerList1.add("target-mnc");
			headerList1.add("trace-overload-control-flag");
			headerList1.add("max-call-thresh-for-trace");
			headerList1.add("mdt-report-filter-n");
			headerList1.add("mcc");
			headerList1.add("mnc");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("call-trace");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("retrieve-trace");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function call-trace retrieve-trace | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gipv6address(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("ip");
			headerList1.add("prefix-length");
			headerList1.add("ip-get-type");
			headerList1.add("ip-oper");
			headerList1.add("prefix-length-oper");
			headerList1.add("address-state");
			headerList1.add("management");
			headerList1.add("signal-s1");
			headerList1.add("signal-x2");
			headerList1.add("bearer-s1");
			headerList1.add("bearer-x2");
			headerList1.add("bearer-m1");
			headerList1.add("signal-m2");
			headerList1.add("ieee1588");
			headerList1.add("smart-scheduler");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("ip-system");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("ip-interface");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("external-interfaces");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									NodeList childNodeList2 = elementchild1.getElementsByTagName("ipv6-address");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element ip-system ip-interface external-interfaces ipv6-address | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gcbrsinfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("cbsd-id");
			headerList1.add("grant-id");
			headerList1.add("cbsd-state");
			headerList1.add("grant-state");
			headerList1.add("transmit-expire-time");
			headerList1.add("grant-expire-time");
			headerList1.add("heartbeat-interval");
			headerList1.add("frequency-select-rssi-threshold");
			headerList1.add("max-eirp-threshold");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("cbrs-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
											
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cbrs-info | display xml"
					+ "</b></td></tr>\n");
			if(tabelData1.size()==0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
			}
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gantennaunit(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("cross-polarization-antenna");
			headerList1.add("antenna-gain");
			headerList1.add("cable-loss");
			headerList1.add("accuracy-margin");
			headerList1.add("adjustment-lte");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("antenna-unit");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element hardware-management radio-unit radio-unit-info antenna-unit | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gprachconfiglogic(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("high-speed-flag");
			headerList1.add("zero-correlation-zone-config");
			headerList1.add("prach-config-index");
			headerList1.add("root-sequence-index");
			headerList1.add("dedicated-preamble-timer");
			headerList1.add("prach-position");
			headerList1.add("prach-frequency-offset");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("eutran-generic-cell");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("scheduling-config");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("physical-resource-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											NodeList childNodeList3 = elementchild2.getElementsByTagName("prach-config-logic");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
											
											
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd scheduling-config physical-resource-config prach-config-logic | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gboardtype(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, String columnname, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add(columnname);
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));
									while (itr.hasNext()) {
										header = itr.next();
										if (header.equalsIgnoreCase("operational-state")
												&& elementchild1.getElementsByTagName(header) != null
												&& elementchild1.getElementsByTagName(header).getLength() > 0) {
											for (int z = 0; z < elementchild1.getElementsByTagName(header)
													.getLength(); z++) {
												if (elementchild1.getElementsByTagName(header).item(z).getParentNode()
														.getNodeName().equalsIgnoreCase("radio-unit-info")) {
													objtableData.put(header, elementchild1.getElementsByTagName(header)
															.item(z).getTextContent());
												}
											}
										} else {
											objtableData.put(header, getXmlElementData(elementchild1, header));
										}
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}
			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder operationalStateIssue = new StringBuilder();
			StringBuilder operationalModeIssue = new StringBuilder();
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				boolean state = false;
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("lCCCard")
								&& ciqData.getCiqMap().get("lCCCard").getHeaderValue().trim()
										.equals(tdData.get("connected-digital-unit-board-id").trim())
								&& ciqData.getCiqMap().containsKey("CRPIPortID")
								&& ciqData.getCiqMap().get("CRPIPortID").getHeaderValue().trim()
										.equalsIgnoreCase(tdData.get("connected-digital-unit-port-id").trim())) {
							if (ciqData.getCiqMap().containsKey("administrative-state") && ciqData.getCiqMap()
									.get("administrative-state").getHeaderValue().trim().contains("unlocked")) {
								state = true;
								break;
							}

						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if (resultTableData.getKey().equalsIgnoreCase("operational-state")
							&& !resultTableData.getValue().equalsIgnoreCase("enabled") && state) {
						tableData.append(
								"<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						operationalStateIssue.append("connected-digital-unit-board-id : "
								+ tdData.get("connected-digital-unit-board-id") + "  connected-digital-unit-port-id : "
								+ tdData.get("connected-digital-unit-port-id") + " cascade-radio-unit-id : "
								+ tdData.get("cascade-radio-unit-id") + " operational-state : "
								+ tdData.get("operational-state") + "\n");
					} else if (resultTableData.getKey().equalsIgnoreCase("operational-mode")
							&& !resultTableData.getValue().equalsIgnoreCase("normal-mode")) {
						tableData.append(
								"<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						operationalModeIssue.append("connected-digital-unit-board-id : "
								+ tdData.get("connected-digital-unit-board-id") + "  connected-digital-unit-port-id : "
								+ tdData.get("connected-digital-unit-port-id") + " cascade-radio-unit-id : "
								+ tdData.get("cascade-radio-unit-id") + " operational-mode : "
								+ tdData.get("operational-mode") + "\n");
					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
			if (operationalStateIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), operationalStateIssue.toString());
			}
			if (operationalModeIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(51, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), operationalModeIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gradiounitcbrs(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("fcc-id");
			headerList1.add("call-sign");
			headerList1.add("cbsd-category");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("cbrs");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element hardware-management radio-unit radio-unit-info cbrs | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Genbfunctioncbrs(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cbrs-mode");
			headerList1.add("measure-unit");
			headerList1.add("user-id");
			headerList1.add("max-heartbeat-interval");
			headerList1.add("cbrs-dp-server");
			headerList1.add("second-cbrs-dp-server");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("cbrs");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild, header));

							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header,
										getXmlElementData(elementchild, header));
							}
							tabelData1.add(objtableData);
					
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function cbrs | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gntpinfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("server-type");
			headerList1.add("server-ip-address");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("common-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("time-sync-service");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("ntp-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element common-management time-sync-service ntp-info | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Glocaltimeinfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("daylight-save-time-included");
			headerList1.add("daylight-save-time");
			headerList1.add("ltm-off-included");
			headerList1.add("local-time-off");
			headerList1.add("lp-sec-included");
			headerList1.add("time-offset-included");
			headerList1.add("summertime-autoset-status");
			headerList1.add("start-month");
			headerList1.add("start-week");
			headerList1.add("start-day");
			headerList1.add("start-hour");
			headerList1.add("start-min");
			headerList1.add("end-month");
			headerList1.add("end-week");
			headerList1.add("end-day");
			headerList1.add("end-hour");
			headerList1.add("end-min");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("common-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("time-sync-service");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("local-time-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element common-management time-sync-service local-time-info | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gudaport(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("uda-rx-port-id");
			headerList1.add("detection-flag");
			headerList1.add("alarm-name");
			headerList1.add("severity");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("digital-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("uda-port");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("rx-port");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element hardware-management digital-unit uda-port | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gcellselectinfologic(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("q-rx-lev-min");
			headerList1.add("q-rx-lev-min-offset-usage");
			headerList1.add("q-rx-lev-min-offset");
			headerList1.add("p-max-usage");
			headerList1.add("p-max");
			headerList1.add("rel9-selection-info-usage");
			headerList1.add("q-qual-min");
			headerList1.add("q-qual-min-offset-usage");
			headerList1.add("q-qual-min-offset");
			headerList1.add("q-qual-min-wb-usage");
			headerList1.add("q-qual-min-wb");
			headerList1.add("q-rx-lev-min-ce-rel13");
			headerList1.add("q-qual-min-rsrq-ce-rel13");
			headerList1.add("q-qual-min-rsrq-ce-rel13-usage");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("eutran-cell-access");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											NodeList childNodeList3 = elementchild2.getElementsByTagName("cell-select-info-logic");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
											
											
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd eutran-cell-access cell-select-info-logic | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Geutranfapriorinfofunc(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, String columnname) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("fa-index");
			headerList1.add(columnname);
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("eutran-generic-cell");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-frequency-relation");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("eutran-fa-information");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											NodeList childNodeList3 = elementchild2.getElementsByTagName("eutran-fa-prior-info-func");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
											
											
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gcellplmninfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("plmn-index");
			headerList1.add("plmn-usage");
			headerList1.add("user-plane-optimization-emtc-enable");
			headerList1.add("control-plane-optimization-emtc-enable");
			headerList1.add("attach-without-pdn-connectivity");
			headerList1.add("upper-layer-indication");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("cell-plmn-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-plmn-info | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Genbplmninfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("plmn-index");
			headerList1.add("op-id");
			headerList1.add("mcc");
			headerList1.add("mnc");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("enb-information");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("enb-plmn-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function enb-information enb-plmn-info | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gcabandcombinationinfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("band-combination-list-index");
			headerList1.add("band0-for-dl-usage");
			headerList1.add("band-indicator0");
			headerList1.add("ca-bandwidth-class-dl0");
			headerList1.add("band1-for-dl-usage");
			headerList1.add("band-indicator1");
			headerList1.add("ca-bandwidth-class-dl1");
			headerList1.add("band2-for-dl-usage");
			headerList1.add("band-indicator2");
			headerList1.add("ca-bandwidth-class-dl2");
			headerList1.add("band3-for-dl-usage");
			headerList1.add("band-indicator3");
			headerList1.add("ca-bandwidth-class-dl3");
			headerList1.add("band4-for-dl-usage");
			headerList1.add("band-indicator4");
			headerList1.add("ca-bandwidth-class-dl4");
			headerList1.add("band5-for-dl-usage");
			headerList1.add("band-indicator5");
			headerList1.add("ca-bandwidth-class-dl5");
			headerList1.add("band6-for-dl-usage");
			headerList1.add("band-indicator6");
			headerList1.add("ca-bandwidth-class-dl6");
			headerList1.add("band0-for-ul-usage");
			headerList1.add("ca-bandwidth-class-ul0");
			headerList1.add("band1-for-ul-usage");
			headerList1.add("ca-bandwidth-class-ul1");
			headerList1.add("band2-for-ul-usage");
			headerList1.add("ca-bandwidth-class-ul2");
			headerList1.add("band3-for-ul-usage");
			headerList1.add("ca-bandwidth-class-ul3");
			headerList1.add("band4-for-ul-usage");
			headerList1.add("ca-bandwidth-class-ul4");
			headerList1.add("band5-for-ul-usage");
			headerList1.add("ca-bandwidth-class-ul5");
			headerList1.add("band6-for-ul-usage");
			headerList1.add("ca-bandwidth-class-ul6");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("carrier-aggregation");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("ca-band-combination-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function carrier-aggregation ca-band-combination-info | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gcacellinfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("ca-available-type");
			headerList1.add("p-cell-only-flag");
			headerList1.add("max-dl-ca-cc-num");
			headerList1.add("max-ul-ca-cc-num");
			headerList1.add("ca-operation-mode");
			headerList1.add("smart-ca-flag");
			headerList1.add("pfs-flag");
			headerList1.add("a6-offset-delta");
			headerList1.add("inter-freq-ho-for-ca");
			headerList1.add("data-traffic-threshold");
			headerList1.add("control-factor-for-4layer-mimo");
			headerList1.add("control-factor-for-256qam");
			headerList1.add("if-ho-for-ca-option");
			headerList1.add("ul-scell-carrier-change-usage");
			headerList1.add("offset-for-scell-carrier-change");
			headerList1.add("ul-scell-deconfig-usage");
			headerList1.add("scell-conf-volte");
			headerList1.add("laa-ca-usage");
			headerList1.add("max-laa-carrier-num");
			headerList1.add("control-factor-for-laa");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("cell-carrier-aggregation");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ca-cell-info");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
											
											
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-carrier-aggregation ca-cell-info | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gcacolocatedcell(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("colocated-cell-index");
			headerList1.add("status");
			headerList1.add("i-node-id");
			headerList1.add("colocated-cell-num");
			headerList1.add("colocated-cell-type");
			headerList1.add("dedicated-pucch-resource-not-use");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("cell-carrier-aggregation");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ca-colocated-cell");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
											
											
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-carrier-aggregation ca-colocated-cell | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gactivemodeloadbalancingconf(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("time-load-decision-lb");
			headerList1.add("time-resource-status-reporting");
			headerList1.add("time-measurement-collection-load-balancing");
			headerList1.add("lb-triggering-duration");
			headerList1.add("blind-lte-load-balancing-wait-time");
			headerList1.add("number-of-neighbor-for-active-load-balancing");
			headerList1.add("moving-average-weight-cellload");
			headerList1.add("cpu-threshold");
			headerList1.add("min-backhaul-capacity");
			headerList1.add("hw-load-low-threshold");
			headerList1.add("hw-load-medium-threshold");
			headerList1.add("hw-load-high-threshold");
			headerList1.add("s1-tnl-load-low-threshold");
			headerList1.add("s1-tnl-load-medium-threshold");
			headerList1.add("s1-tnl-load-high-threshold");
			headerList1.add("load-evaluate-mode");
			headerList1.add("ca-ue-candidate-enable");
			headerList1.add("rsu-fail-count");
			headerList1.add("cell-capacity-class-value-use-mode");
			headerList1.add("cac-ul-use-enable");
			headerList1.add("prb-iir-coef");
			headerList1.add("req-to-samsung-only-ultacs");
			headerList1.add("rs-sinr-mr-option");
			headerList1.add("auto-delta-ni-update");
			headerList1.add("endc-ue-candidate-enable");
			headerList1.add("req-to-samsung-only-lb-endc");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("son");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("load-balancing");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("active-mode-load-balancing-conf");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function son load-balancing active-mode-load-balancing-conf | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gtrafficmanagefunccellcontrol(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("load-equalization-enable");
			headerList1.add("intra-group-offloading-enable");
			headerList1.add("inter-group-offloading-enable");
			headerList1.add("offload-to-hrpd-enable");
			headerList1.add("idle-mode-load-balancing-enable");
			headerList1.add("idle-ca-usage");
			headerList1.add("plmn-option-for-idle-load-balancing");
			headerList1.add("redistribution-mode");
			headerList1.add("ul-sinr-measure-load-balancing-option");
			headerList1.add("ca-option-for-load-balancing");
			headerList1.add("emtc-idle-mode-load-balancing-enable");
			headerList1.add("plmn-option-for-emtc-idle-load-balancing");
			headerList1.add("idle-mode-endc-support-enable");
			headerList1.add("plmn-option-for-idle-endc-support");
			headerList1.add("anchor-selection-enable");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("eutran-generic-cell");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("cell-son");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("cell-load-balancing");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											NodeList childNodeList3 = elementchild2.getElementsByTagName("traffic-manage-func-cell-control");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
											
											
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd cell-son cell-load-balancing traffic-manage-func-cell-control | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gulpowercontrolparamlogic(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("p0-nominal-pucch");
			headerList1.add("alpha");
			headerList1.add("p0-nominal-pusch");
			headerList1.add("deltaf-pucch-format1");
			headerList1.add("deltaf-pucch-format1b");
			headerList1.add("deltaf-pucch-format2");
			headerList1.add("deltaf-pucch-format2a");
			headerList1.add("deltaf-preamble-msg3");
			headerList1.add("deltaf-pucch-format2b");
			headerList1.add("deltaf-pucch-format3");
			headerList1.add("deltaf-pucch-format1bcs");
			headerList1.add("iot-reduction-sinr-margin");
			headerList1.add("residual-error-tpc-up-cmd");
			headerList1.add("phr-added-power-budget");
			headerList1.add("aerial-pc-enable");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("eutran-generic-cell");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("scheduling-config");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("uplink-scheduling-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ul-power-control-param-logic");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
											
											
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element enb-function eutran-generic-cell eutran-cell-fdd-tdd scheduling-config uplink-scheduling-config ul-power-control-param-logic | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gaclruleconfig(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("acl-name");
			headerList1.add("sequence-id");
			headerList1.add("action");
			headerList1.add("protocol");
			headerList1.add("protocol-num");
			headerList1.add("ip-version");
			headerList1.add("source-ipv4-prefix");
			headerList1.add("destination-ipv4-prefix");
			headerList1.add("source-ipv6-prefix");
			headerList1.add("destination-ipv6-prefix");
			headerList1.add("source-port");
			headerList1.add("destination-port");
			headerList1.add("dscp-switch");
			headerList1.add("dscp");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("ip-system");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("access-control-list");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("acl-rule-config");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element ip-system access-control-list acl-rule-config | display xml"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Grequestretrieve(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity, String softwareVersion) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList nodeList1 = element.getChildNodes();

					for (int j = 0; j < nodeList1.getLength(); j++) {
						Node nodeList2 = nodeList1.item(j);
						if (Node.ELEMENT_NODE == nodeList2.getNodeType()) {

							Element element1 = (Element) nodeList2;
							NodeList nodeList3 = element1.getChildNodes();
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							for (int k = 0; k < nodeList3.getLength(); k++) {

								Node n1 = nodeList3.item(k);
								if (Node.ELEMENT_NODE == n1.getNodeType()) {
									headerList1.add(n1.getNodeName().trim());
									objtableData.put(n1.getNodeName().trim(), n1.getTextContent());
								}
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}
			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			StringBuilder hardwareAuditIssue = new StringBuilder();
			StringBuilder wavelengthAuditIssue = new StringBuilder();
			StringBuilder firmwareAuditIssue = new StringBuilder();
			StringBuilder softwareAuditIssue = new StringBuilder();

			StringBuilder auditIssueAll = new StringBuilder();
			
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			if ("request retrieve-radio-unit-sfp-inventory unit-type rrh | display xml".equals(command)) {
				List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId,
						dbcollectionFileName, "CIQUpstateNY", "eNBId");
				for (LinkedHashMap<String, String> tdData : tabelData1) {
					tableData.append("<tr>\n");
					boolean hardwareNamePresent = false;

					String vendorName = "";
					String hardwareName = "";
					String unitid = "";
					String wavelength = "txwavelength";
					boolean isLcccprithere = false;
					int ruportid = 0;
					String port = "";
					if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
						for (CIQDetailsModel ciqData : listOfCiqDetails) {
							if (ciqData.getCiqMap().containsKey("lCCCard")
									&& ciqData.getCiqMap().get("lCCCard").getHeaderValue().trim()
											.equals(tdData.get("connected-digital-unit-board-id").trim())
									&& ciqData.getCiqMap().containsKey("CRPIPortID")
									&& ciqData.getCiqMap().get("CRPIPortID").getHeaderValue().trim()
											.equalsIgnoreCase(tdData.get("connected-digital-unit-port-id").trim())) {

								if (ciqData.getCiqMap().containsKey("RU_port")) {
									port = ciqData.getCiqMap().get("RU_port").getHeaderValue().trim();
								}
								if (NumberUtils.isNumber(port)) {
									ruportid = ruportid + Integer.parseInt(port);
								}
							}
						}
					}
					if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
						for (CIQDetailsModel ciqData : listOfCiqDetails) {
							if (ciqData.getCiqMap().containsKey("lCCCard")
									&& ciqData.getCiqMap().get("lCCCard").getHeaderValue().trim()
											.equals(tdData.get("connected-digital-unit-board-id").trim())
									&& ciqData.getCiqMap().containsKey("CRPIPortID")
									&& ciqData.getCiqMap().get("CRPIPortID").getHeaderValue().trim()
											.equalsIgnoreCase(tdData.get("connected-digital-unit-port-id").trim())) {
								if (tdData.get("radio-unit-port-id").trim().equals("0")) {
									isLcccprithere = true;
								} else if (tdData.get("radio-unit-port-id").trim().equals("1") && ruportid > 0) {
									isLcccprithere = true;
								}

							}
						}
					}
					if (tdData.containsKey("hardware-name")) {
						hardwareName = tdData.get("hardware-name").trim();
						if (hardwareName.length() != 0) {
							List<AuditHardwareDetailsEntity> auditHardwareDetailsEntityList = auditHardwareDetailsRepository
									.getAuditHardwareDetailsEntityList(tdData.get("hardware-name").trim(),"RU");
							if (!ObjectUtils.isEmpty(auditHardwareDetailsEntityList)) {
								hardwareNamePresent = true;
								wavelength = auditHardwareDetailsEntityList.get(0).getWaveLength().trim();
							}
						}
					}
					
					if (tdData.containsKey("vendor-name")) {
						vendorName = tdData.get("vendor-name");
					}
					if (tdData.containsKey("unit-id")) {
						unitid = tdData.get("unit-id");
					}
					boolean entryPresent = false;
					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("hardware-name")) {
							if (!hardwareName.equals("-") && (hardwareName.length() != 0) && !hardwareNamePresent) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									hardwareAuditIssue.append("connected-digital-unit-board-id:   "
											+ tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id:   "
											+ tdData.get("connected-digital-unit-port-id") + " radio-unit-port-id:   "
											+ tdData.get("radio-unit-port-id") + " hardware-name : " + hardwareName
											+ " vendor-name : " + vendorName + "\n");
								}
								entryPresent = true;
							} else if (!(hardwareName.length() != 0) && isLcccprithere) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									hardwareAuditIssue.append("connected-digital-unit-board-id:   "
											+ tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id:   "
											+ tdData.get("connected-digital-unit-port-id") + " radio-unit-port-id:   "
											+ tdData.get("radio-unit-port-id") + " hardware-name : " + hardwareName
											+ " vendor-name : " + vendorName + "\n");
								}
								entryPresent = true;
							} else if (hardwareName.equals("-") && isLcccprithere) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									hardwareAuditIssue.append("connected-digital-unit-board-id:   "
											+ tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id:   "
											+ tdData.get("connected-digital-unit-port-id") + " radio-unit-port-id:   "
											+ tdData.get("radio-unit-port-id") + " hardware-name : " + hardwareName
											+ " vendor-name : " + vendorName + "\n");
								}
								entryPresent = true;
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}
						}/* else if (key.equals("wave-length")) {
							if (!hardwareName.equals("-") && (hardwareName.length() != 0)
									&& !value.contains(wavelength)) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									wavelengthAuditIssue.append("connected-digital-unit-board-id:   "
											+ tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id:   "
											+ tdData.get("connected-digital-unit-port-id") + " radio-unit-port-id:   "
											+ tdData.get("radio-unit-port-id") + " hardware-name : " + hardwareName
											+ " vendor-name : " + vendorName + " wave-length : "
											+ tdData.get("wave-length") + "\n");
								}
								entryPresent = true;
							} else if (hardwareName.equals("-") && isLcccprithere) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									wavelengthAuditIssue.append("connected-digital-unit-board-id:   "
											+ tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id:   "
											+ tdData.get("connected-digital-unit-port-id") + " radio-unit-port-id:   "
											+ tdData.get("radio-unit-port-id") + " hardware-name : " + hardwareName
											+ " vendor-name : " + vendorName + " wave-length : "
											+ tdData.get("wave-length") + "\n");
								}
								entryPresent = true;
							} else if (!(hardwareName.length() != 0) && isLcccprithere) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									wavelengthAuditIssue.append("connected-digital-unit-board-id:   "
											+ tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id:   "
											+ tdData.get("connected-digital-unit-port-id") + " radio-unit-port-id:   "
											+ tdData.get("radio-unit-port-id") + " hardware-name : " + hardwareName
											+ " vendor-name : " + vendorName + " wave-length : "
											+ tdData.get("wave-length") + "\n");
								}
								entryPresent = true;
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}
						}*/ else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");
				}
			} else if ("request retrieve-sfp-inventory | display xml".equals(command)) {
				List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId,
						dbcollectionFileName, "CIQUpstateNY", "eNBId");
				for (LinkedHashMap<String, String> tdData : tabelData1) {
					tableData.append("<tr>\n");
					boolean hardwareNamePresent = false;
					String vendorName = "";
					String hardwareName = "";
					String unitid = "";
					String wavelength = "txwavelength";
					boolean isLcccprithere = false;

					if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
						for (CIQDetailsModel ciqData : listOfCiqDetails) {
							if (ciqData.getCiqMap().containsKey("lCCCard")
									&& ciqData.getCiqMap().get("lCCCard").getHeaderValue().trim()
											.equals(tdData.get("processor-unit-id").trim())
									&& ciqData.getCiqMap().containsKey("CRPIPortID")
									&& ciqData.getCiqMap().get("CRPIPortID").getHeaderValue().trim()
											.equalsIgnoreCase(tdData.get("port-id").trim())) {
								isLcccprithere = true;

							}
						}
					}
					if (tdData.containsKey("hardware-name")) {
						hardwareName = tdData.get("hardware-name").trim();
						if (hardwareName.length() != 0) {
							List<AuditHardwareDetailsEntity> auditHardwareDetailsEntityList = auditHardwareDetailsRepository
									.getAuditHardwareDetailsEntityList(tdData.get("hardware-name").trim(),"DU");
							if (!ObjectUtils.isEmpty(auditHardwareDetailsEntityList)) {
								hardwareNamePresent = true;
								wavelength = auditHardwareDetailsEntityList.get(0).getWaveLength().trim();
							}
						}
					}
					if (tdData.containsKey("vendor-name")) {
						vendorName = tdData.get("vendor-name");
					}
					if (tdData.containsKey("unit-id")) {
						unitid = tdData.get("unit-id");
					}
					boolean entryPresent = false;
					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("hardware-name")) {
							if (!hardwareName.equals("-") && (hardwareName.length() != 0) && !hardwareNamePresent) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									hardwareAuditIssue.append("processor-unit-id:   " + tdData.get("processor-unit-id")
											+ " port-id:   " + tdData.get("port-id") + " hardware-name : "
											+ hardwareName + " vendor-name : " + vendorName + "\n");
								}
								entryPresent = true;
							} else if (!(hardwareName.length() != 0) && isLcccprithere
									&& tdData.get("processor-unit-type").contains("ecp")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									hardwareAuditIssue.append("processor-unit-id:   " + tdData.get("processor-unit-id")
											+ " port-id:   " + tdData.get("port-id") + " hardware-name : "
											+ hardwareName + " vendor-name : " + vendorName + "\n");
								}
								entryPresent = true;
							} else if (hardwareName.equals("-") && isLcccprithere
									&& tdData.get("processor-unit-type").contains("ecp")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									hardwareAuditIssue.append("processor-unit-id:   " + tdData.get("processor-unit-id")
											+ " port-id:   " + tdData.get("port-id") + " hardware-name : "
											+ hardwareName + " vendor-name : " + vendorName + "\n");
								}
								entryPresent = true;
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}
						}/* else if (key.equals("wave-length")) {
							if (!hardwareName.equals("-") && (hardwareName.length() != 0)
									&& !value.contains(wavelength)) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									wavelengthAuditIssue.append("processor-unit-id:   "
											+ tdData.get("processor-unit-id") + " port-id:   " + tdData.get("port-id")
											+ " hardware-name : " + hardwareName + " vendor-name : " + vendorName
											+ " wave-length : " + tdData.get("wave-length") + "\n");
								}
								entryPresent = true;
							} else if (hardwareName.equals("-") && isLcccprithere
									&& tdData.get("processor-unit-type").contains("ecp")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									wavelengthAuditIssue.append("processor-unit-id:   "
											+ tdData.get("processor-unit-id") + " port-id:   " + tdData.get("port-id")
											+ " hardware-name : " + hardwareName + " vendor-name : " + vendorName
											+ " wave-length : " + tdData.get("wave-length") + "\n");
								}
								entryPresent = true;
							} else if (!(hardwareName.length() != 0) && isLcccprithere
									&& tdData.get("processor-unit-type").contains("ecp")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								if (!entryPresent) {
									wavelengthAuditIssue.append("processor-unit-id:   "
											+ tdData.get("processor-unit-id") + " port-id:   " + tdData.get("port-id")
											+ " hardware-name : " + hardwareName + " vendor-name : " + vendorName
											+ " wave-length : " + tdData.get("wave-length") + "\n");
								}
								entryPresent = true;
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}
						}*/ else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");
				}
			} else if ("request retrieve-processor-firmware-inventory | display xml".equals(command)) {
				for (LinkedHashMap<String, String> tdData : tabelData1) {
					String firmwareName = "";
					String patchVersion = "";
					String packageVersion = "";

					boolean firmwareNamePresent = false;
					boolean patchVersionPresent = false;
					boolean packageVersionPresent = false;

					tableData.append("<tr>\n");

					if (tdData.containsKey("patch-version")) {
						patchVersion = tdData.get("patch-version");
					}
					if (tdData.containsKey("package-version")) {
						packageVersion = tdData.get("package-version");
					}
					if (tdData.containsKey("firmware-name")) {
						firmwareName = tdData.get("firmware-name").trim();
						if (firmwareName.length() != 0) {
							softwareVersion = StringUtils.substringBefore(softwareVersion, "-").trim();
							List<AuditFirmwareDetailsEntity> auditFirmwareDetailsList = auditFirmwareDetailsRepository
									.getAuditFirmwareDetailsEntityList(firmwareName, "eNB", softwareVersion);
							if (!ObjectUtils.isEmpty(auditFirmwareDetailsList)) {
								firmwareNamePresent = true;
								if (tdData.containsKey("package-version") && auditFirmwareDetailsList.get(0)
										.getPackageVersion().trim().equalsIgnoreCase(packageVersion.trim())) {
									packageVersionPresent = true;
								}
								if (tdData.containsKey("patch-version") && NumberUtils.isNumber(patchVersion.trim())
										&& NumberUtils
												.isNumber(auditFirmwareDetailsList.get(0).getPatchVersion().trim())
										&& Float.valueOf(patchVersion.trim()).equals(Float
												.valueOf(auditFirmwareDetailsList.get(0).getPatchVersion().trim()))) {
									patchVersionPresent = true;
								}
							}
						}
					}

					boolean entryPresent = false;
					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						if (((resultTableData.getKey().equalsIgnoreCase("firmware-name") && !firmwareNamePresent
								&& tdData.get("location-type").contains("memory-running"))
								|| (resultTableData.getKey().equalsIgnoreCase("package-version")
										&& !packageVersionPresent
										&& tdData.get("location-type").contains("memory-running"))
								|| (resultTableData.getKey().equalsIgnoreCase("patch-version") && !patchVersionPresent
										&& tdData.get("location-type").contains("memory-running")))) {
							tableData.append(
									"<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
							if (!entryPresent) {
								firmwareAuditIssue.append("firmware-name : " + firmwareName + " package-version : "
										+ packageVersion + " patch-version : " + patchVersion + "\n");
							}
							entryPresent = true;
						} else {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						}
					}
					tableData.append("</tr>\n");
				}
			} else if ("request retrieve-package-inventory |display xml".equals(command)) {
				String enbVersion = "";
				List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId,
						dbcollectionFileName, "CIQUpstateNY", "eNBId");
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					CIQDetailsModel ciqDetailsModel = listOfCiqDetails.get(0);

					if (ciqDetailsModel.getCiqMap().containsKey("ne_version")) {
						enbVersion = ciqDetailsModel.getCiqMap().get("ne_version").getHeaderValue().trim()
								.toUpperCase();
					}
				}
				for (LinkedHashMap<String, String> tdData : tabelData1) {
					tableData.append("<tr>\n");
					String packageId = "";
					String softwareName = "";

					if (tdData.containsKey("software-name")) {
						softwareName = tdData.get("software-name");
					}
					if (tdData.containsKey("package-id")) {
						packageId = tdData.get("package-id");
					}
					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						if (resultTableData.getKey().equalsIgnoreCase("software-version")
								&& packageId.equalsIgnoreCase("active-software")
								// && !resultTableData.getValue().trim().equalsIgnoreCase(enbVersion)
								&& !versionCompare(StringUtils.substringBefore(enbVersion, "("),
										StringUtils.substringBefore(resultTableData.getValue().trim(), "("))) {
							tableData.append(
									"<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
							softwareAuditIssue.append("software-name: " + softwareName + " software-version : "
									+ resultTableData.getValue() + "\n");
						} else {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
			} /*
				 * else if ("request retrieve-active-software | display xml".equals(command)) {
				 * String releaseVersion = ""; String packageVersion = ""; List<CIQDetailsModel>
				 * listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId,
				 * dbcollectionFileName, "CIQUpstateNY", "eNBId"); if
				 * (!ObjectUtils.isEmpty(listOfCiqDetails)) { CIQDetailsModel ciqDetailsModel =
				 * listOfCiqDetails.get(0); if
				 * (ciqDetailsModel.getCiqMap().containsKey("release_version")) { releaseVersion
				 * = ciqDetailsModel.getCiqMap().get("release_version").getHeaderValue().trim()
				 * .replaceAll("[^a-zA-Z0-9]", ""); } if
				 * (ciqDetailsModel.getCiqMap().containsKey("ne_version")) { packageVersion =
				 * ciqDetailsModel.getCiqMap().get("ne_version").getHeaderValue().trim()
				 * .toUpperCase(); } } for (LinkedHashMap<String, String> tdData : tabelData1) {
				 * tableData.append("<tr>\n");
				 * 
				 * boolean releaseVersionPresent = false; boolean packageVersionPresent = false;
				 * boolean patchVersionPresent = false;
				 * 
				 * String softwareName = ""; String relVer = ""; String packVer = ""; String
				 * patVer = "";
				 * 
				 * if (tdData.containsKey("software-unit-name")) { softwareName =
				 * tdData.get("software-unit-name"); } if
				 * (tdData.containsKey("package-version")) { packVer =
				 * tdData.get("package-version").trim(); if
				 * (packageVersion.contains(packVer.toUpperCase())) { packageVersionPresent =
				 * true; } } if (tdData.containsKey("release-version")) { relVer =
				 * tdData.get("release-version").trim(); String relVerCiq =
				 * releaseVersion.replaceAll("\\D+", ""); if (NumberUtils.isNumber(relVerCiq) &&
				 * relVerCiq.length() >= 4) { relVerCiq = relVerCiq.substring(0,
				 * relVerCiq.length() - 2); } if (relVer.replaceAll("\\D+",
				 * "").equalsIgnoreCase(relVerCiq)) { releaseVersionPresent = true; } } if
				 * (tdData.containsKey("patch-version")) { patVer =
				 * tdData.get("patch-version").trim(); String patVerCiq =
				 * releaseVersion.replaceAll("\\D+", ""); if (NumberUtils.isNumber(patVerCiq) &&
				 * patVerCiq.length() >= 4) { patVerCiq = patVerCiq.substring(patVerCiq.length()
				 * - 2, patVerCiq.length()); } if (patVer.replaceAll("\\D+",
				 * "").equalsIgnoreCase(patVerCiq)) { patchVersionPresent = true; } }
				 * 
				 * boolean entryPresent = false; for (Map.Entry<String, String> resultTableData
				 * : tdData.entrySet()) { if
				 * (((resultTableData.getKey().equalsIgnoreCase("release-version") &&
				 * !releaseVersionPresent) ||
				 * (resultTableData.getKey().equalsIgnoreCase("package-version") &&
				 * !packageVersionPresent) ||
				 * (resultTableData.getKey().equalsIgnoreCase("patch-version") &&
				 * !patchVersionPresent))) { tableData.append(
				 * "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() +
				 * "</td>\n"); if (!entryPresent) { softwareAuditIssue
				 * .append("software-unit-name: " + softwareName + " package-version : " +
				 * packVer + " release-version : " + relVer + " patch-version : " + patVer +
				 * "\n"); }
				 * 
				 * entryPresent = true; } else { tableData.append("<td align=center>" +
				 * resultTableData.getValue() + "</td>\n"); } } tableData.append("</tr>\n");
				 * 
				 * } }
				 */ else {
				for (LinkedHashMap<String, String> tdData : tabelData1) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

					}
					tableData.append("</tr>\n");

				}
			}

			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(hardwareAuditIssue);
			auditIssueAll.append(wavelengthAuditIssue);
			auditIssueAll.append(firmwareAuditIssue);
			auditIssueAll.append(softwareAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			
			if ("request retrieve-radio-unit-sfp-inventory unit-type rrh | display xml".equals(command)) {
				if (hardwareAuditIssue.length() != 0)
					audit4GSummaryService.createAudit4GSummaryEntity(21, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), hardwareAuditIssue.toString());

				if (wavelengthAuditIssue.length() != 0)
					audit4GSummaryService.createAudit4GSummaryEntity(22, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), wavelengthAuditIssue.toString());
			}
			if ("request retrieve-sfp-inventory | display xml".equals(command)) {
				if (hardwareAuditIssue.length() != 0)
					audit4GSummaryService.createAudit4GSummaryEntity(23, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), hardwareAuditIssue.toString());

				if (wavelengthAuditIssue.length() != 0)
					audit4GSummaryService.createAudit4GSummaryEntity(24, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), wavelengthAuditIssue.toString());
			}

			if ("request retrieve-processor-firmware-inventory | display xml".equals(command)) {
				if (firmwareAuditIssue.length() != 0) {
					audit4GSummaryService.createAudit4GSummaryEntity(25, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), firmwareAuditIssue.toString());
				}
			}
			if ("request retrieve-package-inventory |display xml".equals(command)) {
				if (softwareAuditIssue.length() != 0) {
					audit4GSummaryService.createAudit4GSummaryEntity(26, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), softwareAuditIssue.toString());
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4GrequestretrieveHtml(String fullOutputLog, String command, String enbId, String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String softwareVersion = "";
			if(XmlCommandsConstants.AUDIT_4G_PROCESSOR_FIRMWARE_INVENTORY.equals(command) || 
					XmlCommandsConstants.AUDIT_4G_RADIO_UNIT_INVENTORY_RRH.equals(command) ) {
				
				softwareVersion = get4GsoftwareVersion(fullOutputLog, XmlCommandsConstants.AUDIT_4G_PACKAGE_INVENTORY, enbId, dbcollectionFileName, runTestEntity);
			}
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			String outputLogtemp = null;
			
			if(command.equals(XmlCommandsConstants.AUDIT_4G_NTP_STATUS_REQUEST)) {
				outputLogtemp = "request retrieve-ntp-status | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Grequestretrieve(outputLogtemp, "request retrieve-ntp-status | display xml", enbId, dbcollectionFileName, runTestEntity, softwareVersion));
			} else if(command.equals(XmlCommandsConstants.AUDIT_4G_PACKAGE_INVENTORY)) {
				outputLogtemp = "request retrieve-package-inventory |display xml" + outputLog + "[ok]";
				htmlContent.append(get4Grequestretrieve(outputLogtemp, "request retrieve-package-inventory |display xml", enbId, dbcollectionFileName, runTestEntity, softwareVersion));
			} else if(command.equals(XmlCommandsConstants.AUDIT_4G_UCR_INVENTORY)) {
				outputLogtemp = "request retrieve-ucr-inventory | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Grequestretrieve(outputLogtemp, "request retrieve-ucr-inventory | display xml", enbId, dbcollectionFileName, runTestEntity, softwareVersion));
			} else if(command.equals(XmlCommandsConstants.AUDIT_4G_PROCESSOR_FIRMWARE_INVENTORY)) {
				outputLogtemp = "request retrieve-processor-firmware-inventory | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Grequestretrieve(outputLogtemp, "request retrieve-processor-firmware-inventory | display xml", enbId, dbcollectionFileName, runTestEntity, softwareVersion));
			} else if(command.equals(XmlCommandsConstants.AUDIT_4G_RADIO_UNIT_INVENTORY_MMU)) {
				outputLogtemp = "request retrieve-radio-unit-inventory unit-type mmu | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Grequestretrieve(outputLogtemp, "request retrieve-radio-unit-inventory unit-type mmu | display xml", enbId, dbcollectionFileName, runTestEntity, softwareVersion));
			} else if(command.equals(XmlCommandsConstants.AUDIT_4G_RADIO_UNIT_INVENTORY_RRH)) {
				//outputLogtemp = "request retrieve-radio-unit-inventory unit-type rrh | display xml" + outputLog + "[ok]";
				htmlContent.append(get4GrequestretrieveRRH(fullOutputLog, command, enbId, dbcollectionFileName, runTestEntity, softwareVersion));
			} else if(command.equals(XmlCommandsConstants.AUDIT_4G_TTLNA_INFO)) {
				outputLogtemp = "request retrieve-ttlna-info | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Grequestretrieve(outputLogtemp, "request retrieve-ttlna-info | display xml", enbId, dbcollectionFileName, runTestEntity, softwareVersion));
			} else if(command.equals(XmlCommandsConstants.AUDIT_4G_SFP_INVENTORY)) {
				outputLogtemp = "request retrieve-sfp-inventory | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Grequestretrieve(outputLogtemp, "request retrieve-sfp-inventory | display xml", enbId, dbcollectionFileName, runTestEntity, softwareVersion));
			} else if(command.equals(XmlCommandsConstants.AUDIT_4G_RADIO_UNIT_SFP_INVENTORY)) {
				outputLogtemp = "request retrieve-radio-unit-sfp-inventory unit-type rrh | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Grequestretrieve(outputLogtemp, "request retrieve-radio-unit-sfp-inventory unit-type rrh | display xml", enbId, dbcollectionFileName, runTestEntity, softwareVersion));
			} else if(command.equals(XmlCommandsConstants.AUDIT_4G_CELL_THROUGHPUT)) {
				outputLogtemp = "request retrieve-cell-throughput | display xml" + outputLog + "[ok]";
				htmlContent.append(getCommandHtmlRequestThroughput(outputLogtemp, "request retrieve-cell-throughput | display xml", enbId, dbcollectionFileName,runTestEntity));
			} else if(command.equals(XmlCommandsConstants.AUDIT_4G_ACTIVE_SOFTWARE)) {
				outputLogtemp = "request retrieve-active-software | display xml" + outputLog + "[ok]";
				htmlContent.append(get4Grequestretrieve(outputLogtemp, "request retrieve-active-software | display xml", enbId, dbcollectionFileName, runTestEntity, softwareVersion));
			}
			
			
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	private Object get4GrequestretrieveRRH(String outputLogtemp, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity, String softwareVersion) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(outputLogtemp, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String entry1 = "radio-unit-inventory-list-hardware";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("unit-id");
			headerList1.add("vendor-type-number");
			headerList1.add("vendor-family-type");
			headerList1.add("hardware-name");
			headerList1.add("hardware-version");
			headerList1.add("serial-number");
			headerList1.add("vendor-name");
			headerList1.add("manufactured-date");
			headerList1.add("install-date");
			headerList1.add("position");
			headerList1.add("manufactured-data");
			headerList1.add("common-language-equipment-identifier");
			headerList1.add("hardware-reference");

			String entry2 = "radio-unit-inventory-list-firmware";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("connected-digital-unit-board-id");
			headerList2.add("connected-digital-unit-port-id");
			headerList2.add("cascade-radio-unit-id");
			headerList2.add("firmware-type");
			headerList2.add("file-name");
			headerList2.add("firmware-version");
			headerList2.add("firmware-classification");
			headerList2.add("firmware-status");
			headerList2.add("firmware-activation-time");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("radio-unit-inventory-list");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
							LinkedHashMap<String, String> objtableData2 = new LinkedHashMap<>();
							Iterator<String> itr2 = headerList2.iterator();
							String header2 = itr2.next();
							objtableData2.put(header2, getXmlElementData(elementchild6, header2));
							while (itr2.hasNext()) {
								header2 = itr2.next();
								objtableData2.put(header2, getXmlElementData(elementchild6, header2));
							}
							tabelData2.add(objtableData2);
						}
					}

				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");

			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>"
					+ "request retrieve-radio-unit-inventory unit-type rrh | display xml" + "</b></td></tr>\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			StringBuilder auditIssue =new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				String fn = tdData.get("file-name");
				String pv = "";
				boolean filename = false;
				softwareVersion = StringUtils.substringBefore(softwareVersion, "-").trim();
				List<AuditFirmwareDetailsEntity> auditFirmwareDetailsList = auditFirmwareDetailsRepository
						.getAuditFirmwareDetailsEntityList(fn, "RRH",softwareVersion);
				if (!ObjectUtils.isEmpty(auditFirmwareDetailsList)) {
					filename = true;
					pv = auditFirmwareDetailsList.get(0).getPackageVersion();
				}
                   boolean entryPresent=false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("file-name") && !fn.equals("-") && !(fn.length()==0)) {
						if (filename) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue.append("connected-digital-unit-board-id:   "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id:   "
										+ tdData.get("connected-digital-unit-port-id") + " firmware-type:   "
										+ tdData.get("firmware-type") + " file-name : " + tdData.get("file-name")
										+ " firmware-version : " + tdData.get("firmware-version") + "\n");
							}
							entryPresent = true;
							
						}
					} else if (key.equals("firmware-version") && !fn.equals("-") && !(fn.length()==0)) {
						if (value.equals(pv)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue.append("connected-digital-unit-board-id:   "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id:   "
										+ tdData.get("connected-digital-unit-port-id") + " firmware-type:   "
										+ tdData.get("firmware-type") + " file-name : " + tdData.get("file-name")
										+ " firmware-version : " + tdData.get("firmware-version") + "\n");
							}
							entryPresent = true;
							
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			if(auditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(112, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue.toString());
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + "AU_SFP_Inventory" + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder get4Gpathcontrol(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("path");
			headerList1.add("tx-rf-power");
			headerList1.add("vswr");
			headerList1.add("path-switch");
			headerList1.add("rx-attenuation");
			headerList1.add("operational-state");
			headerList1.add("current-amp-state");
			headerList1.add("temperature");
			headerList1.add("return-loss");
			headerList1.add("current-ald-power-feeding-switch");
			headerList1.add("pim-power");
			headerList1.add("pim-cancellation-level");
			headerList1.add("pim-frequency-type");
			headerList1.add("pim-frequency");
			headerList1.add("path-energy-saving-state");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("path-control");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "show managed-element hardware-management radio-unit radio-unit-info path-control | display xml"
					+ "</b></td></tr>\n");
			
			StringBuilder txPowerAuditIssue = new StringBuilder();
			StringBuilder vswrAuditIssue = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					/*if ("tx-rf-power".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double txPower = Double.parseDouble(resultTableData.getValue());

							if (txPower > 26.0) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								txPowerAuditIssue.append("connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id") + " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path") + " tx-rf-power : " + tdData.get("tx-rf-power") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n");
							}
						} else{
							txPowerAuditIssue.append("connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id") + " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path") + " tx-rf-power : " + tdData.get("tx-rf-power") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n");
						}

					} else if ("vswr".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double vswr = Double.parseDouble(resultTableData.getValue());

							if (vswr < 1.5) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								vswrAuditIssue.append("connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id") + " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path") + " vswr : " + tdData.get("vswr") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n");
							}
						} else{
							vswrAuditIssue.append("connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id") + " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path") + " vswr : " + tdData.get("vswr") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n");
						}

					} else {*/
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					//}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			/*if(txPowerAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(27, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						txPowerAuditIssue.toString());
			}
			if(vswrAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(28, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						vswrAuditIssue.toString());
			}*/
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder getIAUParamCheck(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String entry1 = "drx-profile-du";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("drx-cycle");
			headerList1.add("drx-on-duration-timer-msec-normal");
			headerList1.add("drx-inactivity-timer-normal");
			String entry5 = "cell-cac-info";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-identity");
			headerList5.add("nsa-call-threshold");
			String entry6 = "coloc-covered-cell-num";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cell-identity");
			headerList6.add("coloc-covered-cell-num");
			String entry7 = "csl-tce-ems-server";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("csl-tce-ems-server-port");
			headerList7.add("csl-tce-ems-option");
			String entry8 = "csl-tce-server";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("csl-tce-server-ip-address");
			headerList8.add("csl-tce-server-port");
			headerList8.add("csl-tce-option");
			String entry9 = "drb-rlc-info-func";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("config-type");
			headerList9.add("qci");
			headerList9.add("gnb-timer-poll-retransmit");
			headerList9.add("ue-t-reassembly");
			headerList9.add("ue-timer-status-prohibit");
			String entry10 = "dl-mimo-configuration";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("dl-prb-bundling-size-static");
			headerList10.add("pmi-cycling-switch");
			String entry11 = "ul-power-control-common-config";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("cell-identity");
			headerList11.add("p0-nominal-with-grant");
			headerList11.add("p0-nominal-pucch");
			String entry12 = "tssi-info";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("modem-id");
			headerList12.add("cell-num");
			headerList12.add("path");
			headerList12.add("lowTssi");
			headerList12.add("highTssi");
			headerList12.add("status");
			String entry13 = "ul-mimo-configuration";
			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("cell-identity");
			headerList13.add("ul-su-mimo-switch");
			headerList13.add("ul-mu-mimo-switch");
			String entry14 = "logical-channel-config";
			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("qci");
			headerList14.add("prioritised-bitrate");
			String entry15 = "nr-carrier-aggregation";
			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("cell-identity");
			headerList15.add("ca-available-type");
			headerList15.add("p-cell-only-flag");
			headerList15.add("max-dl-ca-cc-num");
			headerList15.add("max-ul-ca-cc-num");
			String entry16 = "pdsch-config";
			LinkedHashSet<String> headerList16 = new LinkedHashSet<>();
			headerList16.add("cell-identity");
			headerList16.add("dmrs-pdsch-fdm");
			String entry17 = "prach-config";
			LinkedHashSet<String> headerList17 = new LinkedHashSet<>();
			headerList17.add("cell-identity");
			headerList17.add("preamble-receiver-target-power");
			headerList17.add("rsrp-threshold");
			headerList17.add("preamble-trans-max");
			headerList17.add("prach-configuration-index");
			headerList17.add("ssb-per-rach-occasion-choice");
			headerList17.add("cb-preambles-per-ssb");
			headerList17.add("auto-configure-prach-rb-offset-on-off");
			String entry18 = "srs-resource-config";
			LinkedHashSet<String> headerList18 = new LinkedHashSet<>();
			headerList18.add("cell-identity");
			headerList18.add("b-srs-periodic");
			String entry19 = "ssb-configuration";
			LinkedHashSet<String> headerList19 = new LinkedHashSet<>();
			headerList19.add("cell-identity");
			headerList19.add("ssb-subcarrier-spacing");
			headerList19.add("ssb-periodicity");
			headerList19.add("ssb-freq-offset");
			headerList19.add("ssb-freq-align");
			String entry22 = "active-alarm-entries";
			LinkedHashSet<String> headerList22 = new LinkedHashSet<>();
			headerList22.add("alarm-unit-type");
			headerList22.add("alarm-unit-id");
			headerList22.add("alarm-type");
			headerList22.add("location");
			headerList22.add("raised-time");
			headerList22.add("alarm-group");
			headerList22.add("probable-cause");
			headerList22.add("specific-problem");
			headerList22.add("severity");
			headerList22.add("alarm-code");
			headerList22.add("sequence-number");
			headerList22.add("time-info");
			String entry23 = "ul-ca-scheduler-config";
			LinkedHashSet<String> headerList23 = new LinkedHashSet<>();
			headerList23.add("cell-identity");
			headerList23.add("ul-ca-power-sharing-config");
			headerList23.add("ul-total-power-limit-offset");
			headerList23.add("ul-ca-power-sharing-config");
			String entry24 = "pusch-power-control-config";
			LinkedHashSet<String> headerList24 = new LinkedHashSet<>();
			headerList24.add("cell-identity");
			headerList24.add("max-target-sinr-64qam");
			headerList24.add("rerror-tpc-up-cmd");
			String entry25 = "beam-management";
			LinkedHashSet<String> headerList25 = new LinkedHashSet<>();
			headerList25.add("cell-identity");
			headerList25.add("beambook-type");
			headerList25.add("num-trs-restriction");
			headerList25.add("qcl-config-periodic-csi-rs");
			headerList25.add("num-trs-restriction-sdx50");
			String entry26 = "ul-su-mimo-config";
			LinkedHashSet<String> headerList26 = new LinkedHashSet<>();
			headerList26.add("cell-identity");
			headerList26.add("ul-su-mimo-phr-rb-threshold-rank2-in");
			String entry27 = "ul-scheduling-config";
			LinkedHashSet<String> headerList27 = new LinkedHashSet<>();
			headerList27.add("cell-identity");
			headerList27.add("retx-bsr-timer");
			String entry28 = "multicarrier-scenario-functionality-config";
			LinkedHashSet<String> headerList28 = new LinkedHashSet<>();
			headerList28.add("fr2-ue-overheating-mitigation-support");
						
			

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData16 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData17 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData18 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData19 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData22 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData23 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData24 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData25 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData26 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData27 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData28 = new ArrayList<>();
			
			//gnb-du-function
			NodeList nodeList = document.getElementsByTagName("gnb-du-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//gutran-du-cell
					NodeList childNodeList = element.getElementsByTagName("gutran-du-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// gutran-du-cell-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("gutran-du-cell-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//drx-config-du-cell
									NodeList childNodeList2 = elementchild1.getElementsByTagName("drx-config-du-cell");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//drx-profile-du
											NodeList childNodeList3 = elementchild2.getElementsByTagName("drx-profile-du");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
										}
									}
									
									//cell-cac-info
									childNodeList2 = elementchild1.getElementsByTagName("cell-cac-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList5.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData5.add(objtableData);
										}
									}
									
									//nr-carrier-aggregation
									childNodeList2 = elementchild1.getElementsByTagName("nr-carrier-aggregation");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											for (int z = 0; z < elementchild2
													.getElementsByTagName("coloc-covered-cell-num").getLength(); z++) {
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("cell-identity",
														getXmlElementData(elementchild1, "cell-identity"));
												objtableData.put("coloc-covered-cell-num",
														elementchild2.getElementsByTagName("coloc-covered-cell-num")
																.item(z).getTextContent());
												tabelData6.add(objtableData);
											}
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList15.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData15.add(objtableData);
										}
									}
									
									//ul-power-control-config
									childNodeList2 = elementchild1.getElementsByTagName("ul-power-control-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//ul-power-control-common-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ul-power-control-common-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList11.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData11.add(objtableData);
												}
											}
										}
									}							
									
									//ul-mimo-configuration
									childNodeList2 = elementchild1.getElementsByTagName("ul-mimo-configuration");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList13.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData13.add(objtableData);
										}
									}
									
									childNodeList2 = elementchild1.getElementsByTagName("ul-ca-scheduler-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList23.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData23.add(objtableData);
										}
									}
									
									childNodeList2 = elementchild1.getElementsByTagName("pusch-power-control-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList24.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData24.add(objtableData);
										}
									}
									
									childNodeList2 = elementchild1.getElementsByTagName("beam-management");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList25.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData25.add(objtableData);
										}
									}
									childNodeList2 = elementchild1.getElementsByTagName("ul-su-mimo-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList26.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData26.add(objtableData);
										}
									}
									childNodeList2 = elementchild1.getElementsByTagName("ul-scheduling-common-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList27.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData27.add(objtableData);
										}
									}
									//dl-physical-resource-config
									childNodeList2 = elementchild1.getElementsByTagName("dl-physical-resource-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//pdsch-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("pdsch-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList16.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData16.add(objtableData);
												}
											}
										}
									}
									
									//ul-physical-resource-config
									childNodeList2 = elementchild1.getElementsByTagName("ul-physical-resource-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//pdsch-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("prach-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList17.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData17.add(objtableData);
												}
											}
											
											//srs-resource-config
											childNodeList3 = elementchild2.getElementsByTagName("srs-resource-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList18.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData18.add(objtableData);
												}
											}
										}
									}
									
									
									//ssb-configuration
									childNodeList2 = elementchild1.getElementsByTagName("ssb-configuration");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList19.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData19.add(objtableData);
										}
									}
								}
							}
						}
					}
					//rlc-functions
					childNodeList = element.getElementsByTagName("rlc-functions");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							//endc-bc-information-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("drb-rlc-info-func");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList9.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData9.add(objtableData);
								}
							}
						}
					}
					
					//dl-mimo-configuration
					childNodeList = element.getElementsByTagName("dl-mimo-configuration");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							headerList10.forEach(header -> {
								objtableData.put(header, getXmlElementData(elementchild, header));
							});
							tabelData10.add(objtableData);
						}
					}
					
					childNodeList = element.getElementsByTagName("multicarrier-scenario-functionality-config");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							headerList28.forEach(header -> {
								objtableData.put(header, getXmlElementData(elementchild, header));
							});
							tabelData28.add(objtableData);
						}
					}
					
					//gutran-du-qci
					childNodeList = element.getElementsByTagName("gutran-du-qci");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							//logical-channel-config
							NodeList childNodeList1 = elementchild.getElementsByTagName("logical-channel-config");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList14.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData14.add(objtableData);
								}
							}
						}
					}
				}
			}
			
			//common-management
			nodeList = document.getElementsByTagName("common-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//csl-configuration
					NodeList childNodeList = element.getElementsByTagName("csl-configuration");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//csl-tce-ems-server
							NodeList childNodeList1 = elementchild.getElementsByTagName("csl-tce-ems-server");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList7.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData7.add(objtableData);
								}
							}
							
							//csl-tce-server
							childNodeList1 = elementchild.getElementsByTagName("csl-tce-server");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList8.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData8.add(objtableData);
								}
							}
						}
					}
				}
			}
			
			//hardware-management
			nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("digital-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//tssi
							NodeList childNodeList1 = elementchild.getElementsByTagName("tssi");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//tssi-info
									NodeList childNodeList2 = elementchild1.getElementsByTagName("tssi-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											headerList12.forEach(header -> {
												objtableData.put(header, getXmlElementData(elementchild2, header));
											});
											tabelData12.add(objtableData);
											
										}
									}
								}
							}							
						}
					}					
				}
			}
			
			//fault-management
			nodeList = document.getElementsByTagName("fault-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//active-alarm
					NodeList childNodeList = element.getElementsByTagName("active-alarm");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//active-alarm-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList22.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData22.add(objtableData);
								}
							}
						}
					}
				}
			}
			
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "IAU_Param_Checks"
					+ "</b></td></tr>\n");
			
			String msgstartfreq = "";
			String iaumounting="";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName, "5GNRCIQAU", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("msg1_frequency_start")) {
				msgstartfreq = listOfCiqDetails.get(0).getCiqMap().get("msg1_frequency_start").getHeaderValue();
			}
			if (!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("IAU_Mount_Type")) {
				iaumounting = listOfCiqDetails.get(0).getCiqMap().get("IAU_Mount_Type").getHeaderValue();
			}
			
			HashMap<String, List<String>> validationMap = new HashMap<>();
			validationMap.put("nsa-call-threshold", Arrays.asList("100.0","100"));
			htmlContent.append(createHtmltableWithValidation(headerList5, entry5, tabelData5,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("ca-available-type", Arrays.asList("ca-on"));
			validationMap.put("p-cell-only-flag", Arrays.asList("0","false"));
			validationMap.put("max-dl-ca-cc-num", Arrays.asList("4"));
		//	validationMap.put("max-ul-ca-cc-num", Arrays.asList("2"));
			htmlContent.append(createHtmltableWithValidation(headerList15, entry15, tabelData15,validationMap));
			
			validationMap = new HashMap<>();
			htmlContent.append(createHtmltableWithValidation(headerList6, entry6, tabelData6, validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("p0-nominal-with-grant", Arrays.asList("-76"));
			validationMap.put("p0-nominal-pucch", Arrays.asList("-80"));
			htmlContent.append(createHtmltableWithValidation(headerList11, entry11, tabelData11,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("ul-su-mimo-switch", Arrays.asList("on"));
			validationMap.put("ul-mu-mimo-switch", Arrays.asList("off"));
			htmlContent.append(createHtmltableWithValidation(headerList13, entry13, tabelData13,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("dmrs-pdsch-fdm", Arrays.asList("1","true"));
			htmlContent.append(createHtmltableWithValidation(headerList16, entry16, tabelData16,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("preamble-receiver-target-power", Arrays.asList("-69"));
			validationMap.put("prach-configuration-index", Arrays.asList("189"));
			validationMap.put("ssb-per-rach-occasion-choice", Arrays.asList("ssb-per-ro-one-choice"));
			validationMap.put("cb-preambles-per-ssb", Arrays.asList("56"));
			validationMap.put("rsrp-threshold", Arrays.asList("48"));
			validationMap.put("preamble-trans-max", Arrays.asList("preamble-trans-max-n8"));
			validationMap.put("auto-configure-prach-rb-offset-on-off", Arrays.asList("auto-prach-rb-offset-on-multiple-regions"));
			htmlContent.append(createHtmltableWithValidation(headerList17, entry17, tabelData17,validationMap));
			
			validationMap = new HashMap<>();
		//	validationMap.put("b-srs-periodic", Arrays.asList("1"));
			htmlContent.append(createHtmltableWithValidation(headerList18, entry18, tabelData18,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("ssb-subcarrier-spacing", Arrays.asList("subcarrier-spacing-120khz"));
			validationMap.put("ssb-periodicity", Arrays.asList("ssb-periodicity-20ms"));
			validationMap.put("ssb-freq-align", Arrays.asList("center"));
			validationMap.put("ssb-freq-offset", Arrays.asList("0"));
			htmlContent.append(createHtmltableWithValidation(headerList19, entry19, tabelData19,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("drx-cycle", Arrays.asList("drx-long-cycle-normal-ms160"));
			validationMap.put("drx-on-duration-timer-msec-normal", Arrays.asList("drx-on-duration-ms10"));
			validationMap.put("drx-inactivity-timer-normal", Arrays.asList("drx-inactivity-ms100"));
			htmlContent.append(createHtmltableWithValidation(headerList1, entry1, tabelData1,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("qci", Arrays.asList("8","9","7","132"));
			validationMap.put("prioritised-bitrate", Arrays.asList("prioritised-bit-rate-infinity"));
			htmlContent.append(createHtmltableWithValidation(headerList14, entry14, tabelData14,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("dl-prb-bundling-size-static", Arrays.asList("prb-bundling-size-n2"));
			validationMap.put("pmi-cycling-switch", Arrays.asList("on"));
			htmlContent.append(createHtmltableWithValidation(headerList10, entry10, tabelData10,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("config-type", Arrays.asList("A6G"));
			validationMap.put("qci", Arrays.asList("132","8","9","7"));
			validationMap.put("gnb-timer-poll-retransmit", Arrays.asList("t-poll-retransmit-ms30"));
			validationMap.put("ue-t-reassembly", Arrays.asList("ms15"));
			validationMap.put("ue-timer-status-prohibit", Arrays.asList("ms15"));
			htmlContent.append(createHtmltableWithValidation(headerList9, entry9, tabelData9,validationMap));
			
			validationMap = new HashMap<>();
			htmlContent.append(createHtmltablewithInverseValidation(headerList12, entry12, tabelData12,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("csl-tce-ems-option", Arrays.asList("abnormal-call-only"));
			htmlContent.append(createHtmltableWithValidation(headerList7, entry7, tabelData7,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("csl-tce-server-port", Arrays.asList("50021"));
			validationMap.put("csl-tce-option", Arrays.asList("normal-and-abnormal-and-intra-ho-call"));
			htmlContent.append(createHtmltableWithValidation(headerList8, entry8, tabelData8,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("ssb-freq-align", Arrays.asList("center"));
			validationMap.put("ssb-freq-config-mode", Arrays.asList("gscn-based"));
			htmlContent.append(createHtmltableWithValidation(headerList19, entry19, tabelData19,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("alarm-type", Arrays.asList("service-off"));
			htmlContent.append(createHtmltablewithInverseValidation(headerList22, entry22, tabelData22, validationMap));
			
			validationMap = new HashMap<>();
		    validationMap.put("ul-total-power-limit-offset", Arrays.asList("0"));
			htmlContent.append(createHtmltableWithValidation(headerList23, entry23, tabelData23, validationMap));
			validationMap = new HashMap<>();
			validationMap.put("max-target-sinr-64qam", Arrays.asList("28"));
			validationMap.put("rerror-tpc-up-cmd", Arrays.asList("0"));
			htmlContent.append(createHtmltableWithValidation(headerList24, entry24, tabelData24, validationMap));
			validationMap = new HashMap<>();
			validationMap.put("num-trs-restriction", Arrays.asList("disable"));
			validationMap.put("num-trs-restriction-sdx50", Arrays.asList("disable"));
			validationMap.put("qcl-config-periodic-csi-rs", Arrays.asList("off"));
			validationMap.put("beambook-type", Arrays.asList(iaumounting));
			htmlContent.append(createHtmltableWithValidation(headerList25, entry25, tabelData25, validationMap));
			validationMap = new HashMap<>();
			validationMap.put("ul-su-mimo-phr-rb-threshold-rank2-in", Arrays.asList("1"));
			htmlContent.append(createHtmltableWithValidation(headerList26, entry26, tabelData26, validationMap));
			validationMap = new HashMap<>();
			validationMap.put("retx-bsr-timer", Arrays.asList("retx-bsr-timer-sf10"));
			htmlContent.append(createHtmltableWithValidation(headerList27, entry27, tabelData27, validationMap));
			validationMap = new HashMap<>();
			validationMap.put("fr2-ue-overheating-mitigation-support", Arrays.asList("on"));
			htmlContent.append(createHtmltableWithValidation(headerList28, entry28, tabelData28, validationMap));
			
			
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder get4Gantennaretinfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("antenna-line-device-id");
			headerList1.add("antenna-id");
			headerList1.add("user-label");
			headerList1.add("config-tilt");
			headerList1.add("current-tilt");
			headerList1.add("maximum-tilt");
			headerList1.add("minimum-tilt");
			headerList1.add("config-install-date");
			headerList1.add("current-install-date");
			headerList1.add("config-installer-id");
			headerList1.add("current-installer-id");
			headerList1.add("config-base-station-id");
			headerList1.add("current-base-station-id");
			headerList1.add("config-sector-id");
			headerList1.add("current-sector-id");
			headerList1.add("config-antenna-bearing");
			headerList1.add("current-antenna-bearing");
			headerList1.add("config-installed-tilt");
			headerList1.add("current-installed-tilt");
			headerList1.add("antenna-model-number");
			headerList1.add("antenna-serial-number");
			headerList1.add("antenna-operating-band");
			headerList1.add("beam-width");
			headerList1.add("gain");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("radio-unit");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("radio-unit-info");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("antenna-unit");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("antenna-line-device");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											NodeList childNodeList3 = elementchild2.getElementsByTagName("antenna-line-device-info");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;
													
													NodeList childNodeList4 = elementchild3.getElementsByTagName("ret");
													for (int n = 0; n < childNodeList4.getLength(); n++) {
														Node ChildNode4 = childNodeList4.item(n);
														if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {

															Element elementchild4 = (Element) ChildNode4;
															
															NodeList childNodeList5 = elementchild4.getElementsByTagName("ret-info");
															for (int o = 0; o < childNodeList5.getLength(); o++) {
																Node ChildNode5 = childNodeList5.item(o);
																if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																	Element elementchild5 = (Element) ChildNode5;
																	
																	LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																	Iterator<String> itr = headerList1.iterator();
																	String header = itr.next();
																	objtableData.put(header, getXmlElementData(elementchild, header));
																	header = itr.next();
																	objtableData.put(header, getXmlElementData(elementchild, header));
																	header = itr.next();
																	objtableData.put(header, getXmlElementData(elementchild, header));
																	header = itr.next();
																	objtableData.put(header, getXmlElementData(elementchild, header));
																	header = itr.next();
																	objtableData.put(header, getXmlElementData(elementchild3, header));
																	

																	while (itr.hasNext()) {
																		header = itr.next();
																		objtableData.put(header,
																				getXmlElementData(elementchild5, header));
																	}
																	tabelData1.add(objtableData);
																	
																}
															}
														}
													}
													
													
												}
											}
											
											
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			StringBuilder tiltauditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if(resultTableData.getKey().equalsIgnoreCase("current-tilt") && !resultTableData.getValue().equalsIgnoreCase(tdData.get("config-tilt"))) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						tiltauditIssue.append(" connected-digital-unit-board-id : "+ tdData.get("connected-digital-unit-board-id") + 
								" connected-digital-unit-port-id : "+ tdData.get("connected-digital-unit-port-id") +" antenna-line-device-id : " 
								+ tdData.get("antenna-line-device-id")
						+ " current-tilt : " + tdData.get("current-tilt") + "\n");				
					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
					
					
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);			
			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(tiltauditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if(tiltauditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(20, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						tiltauditIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4Gaactivealarmentries(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("alarm-unit-type");
			headerList1.add("alarm-type");
			headerList1.add("location");
			headerList1.add("raised-time");
			headerList1.add("alarm-group");
			headerList1.add("probable-cause");
			headerList1.add("specific-problem");
			headerList1.add("severity");
			headerList1.add("alarm-code");
			headerList1.add("sequence-number");
			headerList1.add("time-info");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("fault-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("active-alarm");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "active-alarm-entries"
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			StringBuilder auditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					//tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					tableData.append("<td align=center bgcolor ='#fa8c8c'>"
							+ resultTableData.getValue() + "</td>\n");
					if(resultTableData.getKey().equals("alarm-type")) {
						auditIssue.append("alarm-type : " + tdData.get("alarm-type") + " location : " + tdData.get("location") +" probable-cause : " + tdData.get("probable-cause") +
								" specific-problem : " + tdData.get("specific-problem") + "\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if(auditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(5, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	
	public StringBuilder getvDUAuditDSS(String fullOutputLog, String command, String enbId, String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			String entry1 = "pod entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("pod-type");
			headerList1.add("pod-id");
			headerList1.add("pod-object-id");
			headerList1.add("operational-state");

			String entry2 = "config-info";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("ne-id");
			headerList2.add("flavor-id");
			headerList2.add("ems-ip-address");
			headerList2.add("software-version");
			
			
			String entry3 = "pod entries sync";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("pod-type");
			headerList3.add("pod-id");
			headerList3.add("holdover-timer-threshold");
			headerList3.add("sync-state");

			String entry4 = "end-point-dss";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("dss-index");
			headerList4.add("remote-ip-address");
			headerList4.add("secondary-remote-ip-address");
			headerList4.add("sctp-state");

			String entry5 = "spectrum-sharing-scheduler-config";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-identity");
			headerList5.add("spectrum-sharing");
			headerList5.add("dl-prb-usage-threshold-for-increasing-nr-resource");
			headerList5.add("ul-prb-usage-threshold-for-increasing-nr-resource");
			headerList5.add("dl-pdcch-fail-threshold-for-increasing-nr-resource");
			headerList5.add("ul-pdcch-fail-threshold-for-increasing-nr-resource");
			headerList5.add("slot-level-operation-mode");
			headerList5.add("dss-target-lte-cell-num");
			headerList5.add("end-point-dss-index");
			headerList5.add("sa-early-crs-rate-matching-after-msg4-enable");

			String entry6 = "end-point-f1c";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("gnb-cu-cp-name");
			headerList6.add("remote-ip-address");
			headerList6.add("secondary-remote-ip-address");
			headerList6.add("sctp-state");
			headerList6.add("f1-ap-state");

			String entry7 = "vru-entries";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("fsu-id");
			headerList7.add("vru-id");
			headerList7.add("unit-type");
			headerList7.add("serial-number");
			headerList7.add("support-cell-number");
			headerList7.add("operational-mode");

			String entry8 = "cuplane-interfaces";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("fsu-id");
			headerList8.add("connected-pod-type");
			headerList8.add("connected-pod-id");
			headerList8.add("connected-pod-port-id");
			headerList8.add("connected-fsu-port-id");
			headerList8.add("vlan-id");
			headerList8.add("support-cell-number");

			String entry9 = "alarm-history-entries";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("history-number");
			headerList9.add("alarm-unit-type");
			headerList9.add("alarm-type");
			headerList9.add("location");
			headerList9.add("raised-time");
			headerList9.add("cleared-time");
			headerList9.add("alarm-group");
			headerList9.add("probable-cause");
			headerList9.add("specific-problem");
			headerList9.add("severity");
			headerList9.add("alarm-code");
			headerList9.add("neOperationalMode");
			headerList9.add("radioUnitOperationalMode");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("sync");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															objtableData.put("pod-type",
																	getXmlElementData(elementchild5, "pod-type"));
															objtableData.put("pod-id",
																	getXmlElementData(elementchild5, "pod-id"));
															objtableData.put("holdover-timer-threshold",
																	getXmlElementData(elementchild6,
																			"holdover-timer-threshold"));
															objtableData.put("sync-state",
																	getXmlElementData(elementchild6, "sync-state"));
															tabelData3.add(objtableData);
														}
													}
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													objtableData.put("pod-type",
															getXmlElementData(elementchild5, "pod-type"));
													objtableData.put("pod-id",
															getXmlElementData(elementchild5, "pod-id"));
													objtableData.put("pod-object-id",
															getXmlElementData(elementchild5, "pod-object-id"));
													objtableData.put("operational-state",
															getXmlElementData(elementchild5, "operational-state"));
													if (!getXmlElementData(elementchild5, "pod-object-id")
															.equalsIgnoreCase("-")) {
														tabelData1.add(objtableData);
													}
												}
											}
										}
									}
									
									childNodeList4 = elementchild3.getElementsByTagName("config-info");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild4, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild4, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}
						}
					}
					childNodeList2 = elementchild1.getElementsByTagName("gnb-du-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("end-point-dss");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									objtableData.put("dss-index", getXmlElementData(elementchild3, "dss-index"));
									objtableData.put("remote-ip-address",
											getXmlElementData(elementchild3, "remote-ip-address"));
									objtableData.put("secondary-remote-ip-address",
											getXmlElementData(elementchild3, "secondary-remote-ip-address"));
									objtableData.put("sctp-state", getXmlElementData(elementchild3, "sctp-state"));
									tabelData4.add(objtableData);
								}
							}
							childNodeList3 = elementchild2.getElementsByTagName("gutran-du-cell");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3
											.getElementsByTagName("gutran-du-cell-entries");
									for (int m = 0; m < childNodeList4.getLength(); m++) {
										Node ChildNode4 = childNodeList4.item(m);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {					
											
											
											Element elementchild5 = (Element) ChildNode4;
											NodeList nodelist = elementchild5.getElementsByTagName("spectrum-sharing-scheduler-config");
											for (int n = 0; n < nodelist.getLength(); n++) {
												Node ChildNode5 = nodelist.item(k);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild6 = (Element) ChildNode5;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList5.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild5, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild6, header));
													}
													tabelData5.add(objtableData);
												}
											}
											
											
										}
									}

								}
							}
						}
					}

					NodeList nodelist = elementchild1.getElementsByTagName("fsu-entries");
					for (int k = 0; k < nodelist.getLength(); k++) {
						Node ChildNode = nodelist.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							NodeList nodelist1 = elementchild6.getElementsByTagName("vru-entries");
							for (int a = 0; a < nodelist1.getLength(); a++) {
								Node ChildNodex = nodelist1.item(a);
								if (Node.ELEMENT_NODE == ChildNodex.getNodeType()) {
									Element elementchild7 = (Element) ChildNodex;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList7.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild6, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild7, header));
									}
									tabelData7.add(objtableData);

								}
							}
						}

					}
					
					nodelist = elementchild1.getElementsByTagName("fsu-entries");
					for (int k = 0; k < nodelist.getLength(); k++) {
						Node ChildNode = nodelist.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							NodeList nodelist1 = elementchild6.getElementsByTagName("cuplane-interfaces");
							for (int a = 0; a < nodelist1.getLength(); a++) {
								Node ChildNodex = nodelist1.item(a);
								if (Node.ELEMENT_NODE == ChildNodex.getNodeType()) {
									Element elementchild7 = (Element) ChildNodex;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList8.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild6, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild7, header));
									}
									tabelData8.add(objtableData);

								}
							}
						}

					}

					NodeList nodelist1 = elementchild1.getElementsByTagName("end-point-f1c");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("gnb-cu-cp-name", getXmlElementData(elementchild6, "gnb-cu-cp-name"));
							objtableData.put("remote-ip-address",
									getXmlElementData(elementchild6, "remote-ip-address"));
							objtableData.put("secondary-remote-ip-address",
									getXmlElementData(elementchild6, "secondary-remote-ip-address"));
							objtableData.put("sctp-state", getXmlElementData(elementchild6, "sctp-state"));
							objtableData.put("f1-ap-state", getXmlElementData(elementchild6, "f1-ap-state"));
							tabelData6.add(objtableData);

						}

					}

					childNodeList2 = elementchild1.getElementsByTagName("fault-management");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("alarm-history");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3
											.getElementsByTagName("alarm-history-entries");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											for (String header : headerList9) {
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData9.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			
			String neid = "";
			String remoteIp = "";
			String gnbcuIpAddr = "";
			String vlanid = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
				if(listOfCiqDetails.get(0).getCiqMap().containsKey("EndpointCUIPaddress")) {
					gnbcuIpAddr = listOfCiqDetails.get(0).getCiqMap().get("EndpointCUIPaddress").getHeaderValue().trim();
				}
			}
			
			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"DSS_MOP_Parameters-1", "eNBName");			
			if(!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("remote-ip-address")) {
				remoteIp = listOfCiqDetails.get(0).getCiqMap().get("remote-ip-address").getHeaderValue().trim();
			}
			if(!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("vlan-id2")) {
				vlanid = listOfCiqDetails.get(0).getCiqMap().get("vlan-id2").getHeaderValue().trim();
			}
			

			LinkedHashMap<String, List<String>> validationMap1 = new LinkedHashMap<>();
			validationMap1.put("operational-state", Arrays.asList("enabled"));
			htmlContent.append(createHtmltableDSS(headerList1, entry1, tabelData1, validationMap1));
			
			validationMap1 = new LinkedHashMap<>();
			htmlContent.append(createHtmltableDSS(headerList2, entry2, tabelData2, validationMap1));
			
			validationMap1 = new LinkedHashMap<>();
			validationMap1.put("sync-state", Arrays.asList("locked"));
			htmlContent.append(createHtmltableDSS(headerList3, entry3, tabelData3, validationMap1));
			
			validationMap1 = new LinkedHashMap<>();
			if(!remoteIp.isEmpty() && !ObjectUtils.isEmpty(tabelData4)) {
				if(compareIPAddr(remoteIp, tabelData4.get(0).get("remote-ip-address"))) {
					remoteIp = tabelData4.get(0).get("remote-ip-address");
				}
			} else if(!ObjectUtils.isEmpty(tabelData4)){
				remoteIp = tabelData4.get(0).get("remote-ip-address");
			}
			validationMap1.put("remote-ip-address", Arrays.asList(remoteIp));
			validationMap1.put("sctp-state", Arrays.asList("enabled"));
			htmlContent.append(createHtmltableDSS(headerList4, entry4, tabelData4, validationMap1));
			
			validationMap1 = new LinkedHashMap<>();
			validationMap1.put("spectrum-sharing", Arrays.asList("true"));
			htmlContent.append(createHtmltableDSS(headerList5, entry5, tabelData5, validationMap1));
			
			validationMap1 = new LinkedHashMap<>();
			if(!gnbcuIpAddr.isEmpty() && !ObjectUtils.isEmpty(tabelData6)) {
				if(compareIPAddr(gnbcuIpAddr, tabelData6.get(0).get("remote-ip-address"))) {
					gnbcuIpAddr = tabelData6.get(0).get("remote-ip-address");
				}
			} else if(!ObjectUtils.isEmpty(tabelData6)){
				gnbcuIpAddr = tabelData6.get(0).get("remote-ip-address");
			}
			validationMap1.put("remote-ip-address", Arrays.asList(gnbcuIpAddr));
			validationMap1.put("sctp-state", Arrays.asList("enabled"));
			validationMap1.put("f1-ap-state", Arrays.asList("enabled"));
			htmlContent.append(createHtmltableDSS(headerList6, entry6, tabelData6, validationMap1));
			
			validationMap1 = new LinkedHashMap<>();
			htmlContent.append(createHtmltableDSS(headerList7, entry7, tabelData7, validationMap1));
			
			validationMap1 = new LinkedHashMap<>();
			validationMap1.put("vlan-id", Arrays.asList(vlanid));
			htmlContent.append(createHtmltableDSS(headerList8, entry8, tabelData8, validationMap1));
			
			validationMap1 = new LinkedHashMap<>();
			htmlContent.append(createHtmltableDSS(headerList9, entry9, tabelData9, validationMap1));

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	@SuppressWarnings("unchecked")
	public StringBuilder getFSUAuditDSS(String fullOutputLog, String command, String enbId, String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry = "du-cpri-port-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("cpri-speed-saved");
			headerList1.add("du-cpri-port-mode");
			headerList1.add("enb-ne-id");
			headerList1.add("enb-inode-id");
			headerList1.add("connected-enb-digital-unit-board-id");
			headerList1.add("connected-enb-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("tx-wavelength");
			headerList1.add("tx-power");
			headerList1.add("rx-power");
			headerList1.add("temperature");
			headerList1.add("bit-rate");
			headerList1.add("voltage");
			headerList1.add("electric-current");
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("unit-type");
			headerList4.add("unit-id");
			headerList4.add("port-id");
			headerList4.add("mplane-ipv6");
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("unit-type");
			headerList5.add("unit-id");
			headerList5.add("port-id");
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cpu-id");
			headerList6.add("interface-name");
			headerList6.add("vlan-id");
			headerList6.add("mtu");
			headerList6.add("logical-interface-name");
			headerList6.add("management");
			headerList6.add("control-user");
			headerList6.add("ieee1588");
			headerList6.add("synce");

			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("cpu-id");
			headerList8.add("interface-name");
			headerList8.add("ip");
			headerList8.add("prefix-length");
			headerList8.add("address-state");
			headerList8.add("forwarding");
			headerList8.add("m-plane-marking");


			NodeList nodeList = document.getElementsByTagName("data");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("digital-unit");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("du-cpri-port-entries");
									for (int m = 0; m < childNodeList2.getLength(); m++) {
										Node ChildNode2 = childNodeList2.item(m);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("unit-type",
													getXmlElementData(elementchild1, "unit-type"));
											objtableData.put("unit-id", getXmlElementData(elementchild1, "unit-id"));
											objtableData.put("port-id", getXmlElementData(elementchild2, "port-id"));
											objtableData.put("cpri-speed-saved",
													getXmlElementData(elementchild2, "cpri-speed-saved"));
											objtableData.put("du-cpri-port-mode",
													getXmlElementData(elementchild2, "du-cpri-port-mode"));
											objtableData.put("enb-ne-id",
													getXmlElementData(elementchild2, "enb-ne-id"));
											objtableData.put("enb-inode-id",
													getXmlElementData(elementchild2, "enb-inode-id"));
											objtableData.put("connected-enb-digital-unit-board-id", getXmlElementData(
													elementchild2, "connected-enb-digital-unit-board-id"));
											objtableData.put("connected-enb-digital-unit-port-id", getXmlElementData(
													elementchild2, "connected-enb-digital-unit-port-id"));
											objtableData.put("cascade-radio-unit-id",
													getXmlElementData(elementchild2, "cascade-radio-unit-id"));
											objtableData.put("tx-wavelength",
													getXmlElementData(elementchild2, "tx-wavelength"));
											objtableData.put("tx-power", getXmlElementData(elementchild2, "tx-power"));
											objtableData.put("rx-power", getXmlElementData(elementchild2, "rx-power"));
											objtableData.put("temperature",
													getXmlElementData(elementchild2, "temperature"));
											objtableData.put("bit-rate", getXmlElementData(elementchild2, "bit-rate"));
											objtableData.put("voltage", getXmlElementData(elementchild2, "voltage"));
											objtableData.put("electric-current",
													getXmlElementData(elementchild2, "electric-current"));
											tabelData1.add(objtableData);
										}
									}
								}
							}									
						}
					}
					
					childNodeList = element.getElementsByTagName("o-du-info");
					for (int v = 0; v < childNodeList.getLength(); v++) {
						Node ChildNode5 = childNodeList.item(v);
						if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
							Element elementchild5 = (Element) ChildNode5;
							NodeList childNodeList3 = elementchild5.getElementsByTagName("mplane-ipv6-info");
							for (int z = 0; z < childNodeList3.getLength(); z++) {
								Node ChildNode6 = childNodeList3.item(z);
								if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
									Element elementchild6 = (Element) ChildNode6;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									objtableData.put("unit-type",
											getXmlElementData(elementchild5, "unit-type"));
									objtableData.put("unit-id", getXmlElementData(elementchild5, "unit-id"));
									objtableData.put("port-id", getXmlElementData(elementchild5, "port-id"));
									objtableData.put("mplane-ipv6",
											getXmlElementData(elementchild6, "mplane-ipv6"));
									tabelData4.add(objtableData);
								}
							}
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("unit-type", getXmlElementData(elementchild5, "unit-type"));
							objtableData.put("unit-id", getXmlElementData(elementchild5, "unit-id"));
							objtableData.put("port-id", getXmlElementData(elementchild5, "port-id"));
							tabelData5.add(objtableData);

						}
					}
					
					NodeList childNodeList7 = element.getElementsByTagName("ip-system");
					for (int v = 0; v < childNodeList7.getLength(); v++) {
						Node ChildNode7 = childNodeList7.item(v);
						if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
							Element elementchild7 = (Element) ChildNode7;
							NodeList childNodeList8 = elementchild7.getElementsByTagName("ecpri-interfaces");
							for (int z = 0; z < childNodeList8.getLength(); z++) {
								Node ChildNode8 = childNodeList8.item(z);
								if (Node.ELEMENT_NODE == ChildNode8.getNodeType()) {
									Element elementchild8 = (Element) ChildNode8;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									objtableData.put("cpu-id", getXmlElementData(elementchild7, "cpu-id"));
									objtableData.put("interface-name",
											getXmlElementData(elementchild8, "interface-name"));
									NodeList childNodeListzx = elementchild8
											.getElementsByTagName("ipv6-address");
									objtableData.put("vlan-id", getXmlElementData(elementchild8, "vlan-id"));
									objtableData.put("mtu", getXmlElementData(elementchild8, "mtu"));
									objtableData.put("logical-interface-name",
											getXmlElementData(elementchild8, "logical-interface-name"));
									objtableData.put("management",
											getXmlElementData(elementchild8, "management"));
									objtableData.put("control-user",
											getXmlElementData(elementchild8, "control-user"));
									objtableData.put("ieee1588", getXmlElementData(elementchild8, "ieee1588"));
									objtableData.put("synce", getXmlElementData(elementchild8, "synce"));
									if (!getXmlElementData(elementchild8, "management").equals("-")) {
										tabelData6.add(objtableData);
									}

								}

							}

							for (int z = 0; z < childNodeList8.getLength(); z++) {
								Node ChildNode8 = childNodeList8.item(z);
								if (Node.ELEMENT_NODE == ChildNode8.getNodeType()) {
									Element elementchild8 = (Element) ChildNode8;

									LinkedHashMap<String, String> objtableData8 = new LinkedHashMap<>();

									objtableData8.put("cpu-id", getXmlElementData(elementchild7, "cpu-id"));
									objtableData8.put("interface-name",
											getXmlElementData(elementchild8, "interface-name"));
									NodeList childNodeListzx = elementchild8
											.getElementsByTagName("ipv6-address");
									for (int x = 0; x < childNodeListzx.getLength(); x++) {
										Node ChildNode6 = childNodeListzx.item(x);
										if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
											Element elementchild6 = (Element) ChildNode6;
											objtableData8.put("ip", getXmlElementData(elementchild6, "ip"));
											objtableData8.put("prefix-length",
													getXmlElementData(elementchild6, "prefix-length"));
											objtableData8.put("address-state",
													getXmlElementData(elementchild6, "address-state"));
											objtableData8.put("forwarding",
													getXmlElementData(elementchild6, "forwarding"));
											objtableData8.put("m-plane-marking",
													getXmlElementData(elementchild6, "m-plane-marking"));

										}
									}
									String[] ipkeys = { "ip", "prefix-length", "address-state", "forwarding",
											"m-plane-marking" };
									for (String ipkey : ipkeys) {
										if (!objtableData8.containsKey(ipkey)) {
											objtableData8.put(ipkey, "-");
										}
									}
									if (getXmlElementData(elementchild8, "management").equals("-")) {
										tabelData8.add(objtableData8);
									}

								}
							}
						}
					}

				}
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");

			String neid = "";
			String mplaneIp = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
			}
			
			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"DSS_MOP_Parameters-1", "eNBName");			
			if(!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("mplane-ipv6")) {
				mplaneIp = listOfCiqDetails.get(0).getCiqMap().get("mplane-ipv6").getHeaderValue().trim();
			}
			
			LinkedHashMap<String, List<String>> validationMap1 = new LinkedHashMap<>();
			validationMap1.put("du-cpri-port-mode", Arrays.asList("multiplex"));
			htmlContent.append(createHtmltableDSS(headerList1, entry, tabelData1, validationMap1));

			entry = "o-du-entries";
			validationMap1 = new LinkedHashMap<>();
			validationMap1.put("unit-type", Arrays.asList("fsip"));
			validationMap1.put("unit-id", Arrays.asList("0"));
			validationMap1.put("port-id", Arrays.asList("0"));
			htmlContent.append(createHtmltableDSS(headerList5, entry, tabelData5, validationMap1));

			entry = "mplane-ipv6-info";
			validationMap1 = new LinkedHashMap<>();
			validationMap1.put("unit-type", Arrays.asList("fsip"));
			validationMap1.put("unit-id", Arrays.asList("0"));
			validationMap1.put("port-id", Arrays.asList("0"));
			htmlContent.append(createHtmltableDSS(headerList4, entry, tabelData4, validationMap1));

			entry = "ecpri-interfaces";
			validationMap1 = new LinkedHashMap<>();
			validationMap1.put("interface-name", Arrays.asList("fh_0_1_0_1"));
			validationMap1.put("vlan-id", Arrays.asList("950"));
			validationMap1.put("mtu", Arrays.asList("9000"));
			validationMap1.put("control-user", Arrays.asList("true"));
			htmlContent.append(createHtmltableDSS(headerList6, entry, tabelData6, validationMap1));

			entry = "ipv6-address";
			if(!mplaneIp.isEmpty() && !ObjectUtils.isEmpty(tabelData8)) {
				if(compareIPAddr(mplaneIp, tabelData8.get(0).get("ip"))) {
					mplaneIp = tabelData8.get(0).get("ip");
				}
			} else if(!ObjectUtils.isEmpty(tabelData8)){
				mplaneIp = tabelData8.get(0).get("ip");
			}
			validationMap1 = new LinkedHashMap<>();
			validationMap1.put("ip", Arrays.asList(mplaneIp));
			htmlContent.append(createHtmltableDSS(headerList8, entry, tabelData8, validationMap1));

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	
	public StringBuilder getENBAuditDSS(String fullOutputLog, String command, String enbId, String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("port-id");
			headerList1.add("bit-error");
			headerList1.add("observed-bits");
			headerList1.add("config-tx-delay");
			headerList1.add("config-rx-delay");
			headerList1.add("current-tx-delay");
			headerList1.add("current-rx-delay");
			headerList1.add("tx-repeater-delay");
			headerList1.add("rx-repeater-delay");
			headerList1.add("asl-nominal-bit-rate");
			headerList1.add("asl-low-bit-rate-margin");
			headerList1.add("asl-high-bit-rate-margin");
			headerList1.add("asl-rx-power");
			headerList1.add("asl-tx-power");
			headerList1.add("asl-tx-bias-current");
			headerList1.add("asl-voltage");
			headerList1.add("asl-temperature");
			headerList1.add("bit-rate");
			headerList1.add("tx-wavelength");
			headerList1.add("tx-power");
			headerList1.add("rx-power");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("external-port");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("cpri-port");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("cpri-port-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(element, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(element, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(element, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(element, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			String entry = "cpri-port-entries";
			htmlContent.append(createHtmltable(headerList1, entry, tabelData1));

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUConfigAuditDSS(String fullOutputLog, String command, String enbId, String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("fsu-id");
			headerList1.add("fsu-mplane-ipv6");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("fsu-radio-unit");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("fsu-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("mplane-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("mplane-interfaces");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			
			String neid = "";
			String mplaneIp = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
			}
			
			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"DSS_MOP_Parameters-1", "eNBName");			
			if(!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("mplane-ipv6")) {
				mplaneIp = listOfCiqDetails.get(0).getCiqMap().get("mplane-ipv6").getHeaderValue().trim();
			}
			
			
			String entry = "fsu-mplane-ipv6";
			if(!mplaneIp.isEmpty() && !ObjectUtils.isEmpty(tabelData1)) {
				if(compareIPAddr(mplaneIp, tabelData1.get(0).get("fsu-mplane-ipv6"))) {
					mplaneIp = tabelData1.get(0).get("fsu-mplane-ipv6");
				}
			} else if(!ObjectUtils.isEmpty(tabelData1)){
				mplaneIp = tabelData1.get(0).get("fsu-mplane-ipv6");
			}
			LinkedHashMap<String, List<String>> validationMap1 = new LinkedHashMap<>();
			validationMap1.put("fsu-mplane-ipv6", Arrays.asList(mplaneIp));
			htmlContent.append(createHtmltableDSS(headerList1, entry, tabelData1, validationMap1));

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getFSUConfigAuditDSS(String fullOutputLog, String command, String enbId, String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cpu-id");
			headerList1.add("interface-name");
			headerList1.add("mtu");
			headerList1.add("management");
			headerList1.add("control-user");
			headerList1.add("ieee1588");
			headerList1.add("synce");
			
			
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("unit-type");
			headerList2.add("unit-id");
			headerList2.add("port-id");
			headerList2.add("administrative-state");
			headerList2.add("user-label");
			headerList2.add("configured-speed");
			headerList2.add("fec-mode");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("ip-system");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("cpu");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("ip-interface");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("ecpri-interfaces");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			
			nodeList = document.getElementsByTagName("digital-unit-entries");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("external-port");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("cpri-port");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("ecpri-port-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(element, header));
											
											header = itr.next();
											objtableData.put(header, getXmlElementData(element, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			String neid = "";
			String administrativeState = "";
			String configuredSpeed = "";
			String fecMode = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
			}
			
			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"DSS_MOP_Parameters-1", "eNBName");			
			if(!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("ecpri-as")) {
				administrativeState = listOfCiqDetails.get(0).getCiqMap().get("ecpri-as").getHeaderValue().trim();
			}
			if(!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("configured-speed")) {
				configuredSpeed = listOfCiqDetails.get(0).getCiqMap().get("configured-speed").getHeaderValue().trim();
			}
			if(!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("fec-mode")) {
				fecMode = listOfCiqDetails.get(0).getCiqMap().get("fec-mode").getHeaderValue().trim();
			}
			
			String entry = "ecpri-interfaces";
			LinkedHashMap<String, List<String>> validationMap1 = new LinkedHashMap<>();
			validationMap1.put("management", Arrays.asList("true"));
			validationMap1.put("ieee1588", Arrays.asList("true"));
			validationMap1.put("synce", Arrays.asList("true"));
			htmlContent.append(createHtmltableDSS(headerList1, entry, tabelData1, validationMap1));
			
			entry = "ecpri-port-entries";
			validationMap1 = new LinkedHashMap<>();
			validationMap1.put("administrative-state", Arrays.asList(administrativeState));
			validationMap1.put("configured-speed", Arrays.asList(configuredSpeed));
			validationMap1.put("fec-mode", Arrays.asList(fecMode));
			htmlContent.append(createHtmltableDSS(headerList2, entry, tabelData2, validationMap1));

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4GAuditTrueCallTrace(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("nb-cell-num");
			headerList1.add("tce-address");
			headerList1.add("state");
			headerList1.add("list-of-interfaces-present");
			headerList1.add("list-of-interfaces");
			headerList1.add("trace-depth");
			headerList1.add("trace-reference");
			headerList1.add("mnc-size");
			headerList1.add("ip-ver-info");
			headerList1.add("tce-address-ipv4");
			headerList1.add("target-mcc");
			headerList1.add("target-mnc");
			headerList1.add("type");
			headerList1.add("trace-overload-control-flag");
			headerList1.add("max-call-thresh-for-trace");
			
			
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("cell-num");
			headerList2.add("tce-address");
			headerList2.add("state");
			headerList2.add("list-of-interfaces-present");
			headerList2.add("list-of-interfaces");
			headerList2.add("trace-depth");
			headerList2.add("trace-reference");
			headerList2.add("mnc-size");
			headerList2.add("ip-ver-info");
			headerList2.add("tce-address-ipv4");
			headerList2.add("target-mcc");
			headerList2.add("target-mnc");
			headerList2.add("type");
			headerList2.add("area-scope");
			headerList2.add("m1-meas-status");
			headerList2.add("m2-meas-status");
			headerList2.add("reporting-trigger");
			headerList2.add("report-interval");
			headerList2.add("report-amount");
			headerList2.add("trigger-quantity");
			headerList2.add("a2-threshold-rsrp");
			headerList2.add("a2-threshold-rsrq");
			headerList2.add("logging-interval");
			headerList2.add("logging-duration");
			headerList2.add("anonymization-level");
			headerList2.add("m3-meas-status");
			headerList2.add("m4-meas-status");
			headerList2.add("m4-collection-period");
			headerList2.add("m4-links-to-log");
			headerList2.add("m5-meas-status");
			headerList2.add("m5-collection-period");
			headerList2.add("m5-links-to-log");
			headerList2.add("all-rrm-meas-status");
			headerList2.add("m6-meas-status");
			headerList2.add("ecid-positioning");
			headerList2.add("gnss-positioning");
			headerList2.add("trace-overload-control-flag");
			headerList2.add("max-call-thresh-for-trace");
			headerList2.add("mdt-report-filter-n");
			
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("cell-num");
			LinkedHashSet<String> cellNumSet = new LinkedHashSet<>();
			LinkedHashSet<String> traceJobcellNumSet = new LinkedHashSet<>();
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("call-trace");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("nb-trace-job");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
							
							childNodeList1 = elementchild.getElementsByTagName("trace-job");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList2.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData2.add(objtableData);
									for(String header1: headerList3) {
										traceJobcellNumSet.add(getXmlElementData(elementchild1, header1).trim());
									}
								}
							}
						}
					}
					
					childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									for(String header: headerList3) {
										cellNumSet.add(getXmlElementData(elementchild1, header).trim());
									}
								}
							}
						}
					}
					
				}
			}
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			String market = networkConfigEntity.getNeMarket().trim().toUpperCase();
			String tceAddress = "";
			Ip mark = generateCsvRepository.getip(market);
			if(mark != null) {
				tceAddress = mark.getSecondCslServerIpv6().trim();
			}
			String entry = "nb-trace-job";
			HashMap<String,List<String>> validationMap = new HashMap<>();
			validationMap.put("tce-address", Arrays.asList("-",""));
			htmlContent.append(createHtmltableWithValidation(headerList1, entry, tabelData1, validationMap));
			
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			
			entry = "trace-job";			
			htmlContent.append("<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			checkCellNum(headerList2, cellNumSet, traceJobcellNumSet, tabelData2);
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				boolean nonCbrsCell = false;

				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("Cell_ID") && ciqData.getCiqMap().get("Cell_ID")
								.getHeaderValue().trim().equals(tdData.get("cell-num").trim())) {

							if (ciqData.getCiqMap().containsKey("BandName")
									&& !ciqData.getCiqMap().get("BandName").getHeaderValue().trim().contains("CBRS")) {
								nonCbrsCell = true;
							}

						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if (resultTableData.getKey().equals("tce-address") && nonCbrsCell) {
						try {
							InetAddress ip1 = InetAddress.getByName(tceAddress);
							InetAddress ip2 = InetAddress.getByName(resultTableData.getValue().trim());
							if (ip1.equals(ip2)) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								auditIssue1.append("cell-num : " + tdData.get("cell-num") + " tce-address : "
										+ tdData.get("tce-address") + "\n");
								tableData.append(
										"<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
							}
						} catch (Exception e) {
							tableData.append(
									"<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
						}
					} else if (resultTableData.getKey().equals("trace-depth")  && nonCbrsCell) {

						if (resultTableData.getValue().equals("maximum")) {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						} else {
							auditIssue2.append("cell-num : " + tdData.get("cell-num") + " maximum : "
									+ tdData.get("trace-depth") + "\n");
							tableData.append(
									"<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
						}

					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(65, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(65, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(65, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(63, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(63, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(63, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public String gettestIdtwamp(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		String testId = null;
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					testId = getXmlElementData(element, "test-id").trim();
				}
			}
			
			
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return testId;
	}
	
	public StringBuilder get5GTwampoutput(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, XmlCommandsConstants.AU_DIAGNOSTIC);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5GTWAMP);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String result = "";
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("test-id");
			headerList1.add("result-saved-time");
			headerList1.add("test-type");
			headerList1.add("result-type");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			NodeList nodeList = document.getElementsByTagName("diagnostic-test-result-list");
			for (int o = 0; o < nodeList.getLength(); o++) {
				Node ChildNode5 = nodeList.item(o);
				if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
					Element element = (Element) ChildNode5;
					result = getXmlElementData(element,"result-additional-info");
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					for(String header : headerList1) {
						objtableData.put(header, getXmlElementData(element, header));
					}
					tabelData1.add(objtableData);
					
				}
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			String entry = "Test Data";
			htmlContent.append(createHtmltable(headerList1, entry, tabelData1));
			
			String[] twampHeaderList = {"[ Packet Count ]","[ Loss(ratio) ]"};
			for(String twampHeader : twampHeaderList) {
				String packetCount = StringUtils.substringBetween(result, twampHeader, "[").trim();				
				ArrayList<String> resultData = new ArrayList<>(Arrays.asList(packetCount.split("\\r?\\n")));
				ArrayList<String> replaceData = new ArrayList<>();
				for(String r : resultData) {
					if(r.trim().replaceAll(" +", " ").contains("Skip packets") || r.trim().replaceAll(" +", " ").contains("Drop packets")) {
						replaceData.add(r);
					}
				}
				for(int i=0; i<replaceData.size(); i++) {
					resultData.remove(replaceData.get(i));
					resultData.add(i+1, replaceData.get(i));
				}
				
				LinkedHashMap<String, String> column = new LinkedHashMap<>();
				for(String r : resultData) {
					String[] d = r.split(":", 2);
					if(d.length == 2) {
						column.put(d[0].trim().replaceAll(" +", " "), d[1].trim());
					}					
				}
				
				if(twampHeader.contains("Packet Count")) {
					entry = "Packet Count";
				} else {
					entry = "Loss(ratio)";
				}
				
				LinkedHashSet<String> headerList2 = new LinkedHashSet<>(column.keySet());
				List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
				tabelData2.add(column);
				
				
				htmlContent.append("<tr><td colspan=" + column.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList2) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				StringBuilder tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData2) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						if(resultTableData.getKey().trim().equalsIgnoreCase("Skip packets") 
								|| resultTableData.getKey().trim().equalsIgnoreCase("Drop packets")
								|| resultTableData.getKey().trim().equalsIgnoreCase("Network Loss")
								|| resultTableData.getKey().trim().equalsIgnoreCase("UpLink Loss")
								|| resultTableData.getKey().trim().equalsIgnoreCase("DnLink Loss")) {
							if(resultTableData.getValue().trim().replaceAll("(\\d+).*", "$1").equals("0")) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						}						
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			}
			
			htmlContent.append("</table>\n");
			htmlContent.append(get5GTwampoutputF1UTwamp(fullOutputLog, "AU_TWAMP_F1U_LINK", enbId, dbcollectionFileName, networkConfigEntity));
			
		} catch(Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get5GTwampoutputIAU(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, XmlCommandsConstants.IAU_DIAGNOSTIC);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5GTWAMP);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String result = "";
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("test-id");
			headerList1.add("result-saved-time");
			headerList1.add("test-type");
			headerList1.add("result-type");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			NodeList nodeList = document.getElementsByTagName("diagnostic-test-result-list");
			for (int o = 0; o < nodeList.getLength(); o++) {
				Node ChildNode5 = nodeList.item(o);
				if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
					Element element = (Element) ChildNode5;
					result = getXmlElementData(element,"result-additional-info");
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					for(String header : headerList1) {
						objtableData.put(header, getXmlElementData(element, header));
					}
					tabelData1.add(objtableData);
					
				}
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			String entry = "Test Data";
			htmlContent.append(createHtmltable(headerList1, entry, tabelData1));
			
			String[] twampHeaderList = {"[ Packet Count ]","[ Loss(ratio) ]"};
			for(String twampHeader : twampHeaderList) {
				String packetCount = StringUtils.substringBetween(result, twampHeader, "[").trim();				
				ArrayList<String> resultData = new ArrayList<>(Arrays.asList(packetCount.split("\\r?\\n")));
				ArrayList<String> replaceData = new ArrayList<>();
				for(String r : resultData) {
					if(r.trim().replaceAll(" +", " ").contains("Skip packets") || r.trim().replaceAll(" +", " ").contains("Drop packets")) {
						replaceData.add(r);
					}
				}
				for(int i=0; i<replaceData.size(); i++) {
					resultData.remove(replaceData.get(i));
					resultData.add(i+1, replaceData.get(i));
				}
				
				LinkedHashMap<String, String> column = new LinkedHashMap<>();
				for(String r : resultData) {
					String[] d = r.split(":", 2);
					if(d.length == 2) {
						column.put(d[0].trim().replaceAll(" +", " "), d[1].trim());
					}					
				}
				
				if(twampHeader.contains("Packet Count")) {
					entry = "Packet Count";
				} else {
					entry = "Loss(ratio)";
				}
				
				LinkedHashSet<String> headerList2 = new LinkedHashSet<>(column.keySet());
				List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
				tabelData2.add(column);
				
				
				htmlContent.append("<tr><td colspan=" + column.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList2) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				StringBuilder tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData2) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						if(resultTableData.getKey().trim().equalsIgnoreCase("Skip packets") 
								|| resultTableData.getKey().trim().equalsIgnoreCase("Drop packets")
								|| resultTableData.getKey().trim().equalsIgnoreCase("Network Loss")
								|| resultTableData.getKey().trim().equalsIgnoreCase("UpLink Loss")
								|| resultTableData.getKey().trim().equalsIgnoreCase("DnLink Loss")) {
							if(resultTableData.getValue().trim().replaceAll("(\\d+).*", "$1").equals("0")) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						}						
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			}
			
			htmlContent.append("</table>\n");
			htmlContent.append(get5GTwampoutputF1UTwampIAU(fullOutputLog, "IAU_F1U_LINK_TWAMP", enbId, dbcollectionFileName, networkConfigEntity));
			
		} catch(Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get5GTwampoutputF1UTwamp(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("</table>\n");
			ArrayList<HashMap<String, String>> remoteIpList = getRemoteIPAddress(dbcollectionFileName, enbId);
			for(HashMap<String, String> remoteIp : remoteIpList) {
				htmlContent.append(get5GTwampoutputF1U(fullOutputLog, remoteIp.get("interface_name") + "_" + remoteIp.get("ip") + "_"
						+ XmlCommandsConstants.AU_DIAGNOSTIC, enbId, dbcollectionFileName, networkConfigEntity));
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	
	}
	public StringBuilder get5GTwampoutputF1UTwampIAU(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("</table>\n");
			ArrayList<HashMap<String, String>> remoteIpList = getRemoteIPAddress(dbcollectionFileName, enbId);
			for(HashMap<String, String> remoteIp : remoteIpList) {
				htmlContent.append(get5GTwampoutputF1UIAU(fullOutputLog, remoteIp.get("interface_name") + "_" + remoteIp.get("ip") + "_"
						+ XmlCommandsConstants.IAU_DIAGNOSTIC, enbId, dbcollectionFileName, networkConfigEntity));
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	
	}
	
	public StringBuilder get5GTwampoutputF1U(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5GTWAMP);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String result = "";
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("test-id");
			headerList1.add("result-saved-time");
			headerList1.add("test-type");
			headerList1.add("result-type");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			NodeList nodeList = document.getElementsByTagName("diagnostic-test-result-list");
			for (int o = 0; o < nodeList.getLength(); o++) {
				Node ChildNode5 = nodeList.item(o);
				if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
					Element element = (Element) ChildNode5;
					result = getXmlElementData(element,"result-additional-info");
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					for(String header : headerList1) {
						objtableData.put(header, getXmlElementData(element, header));
					}
					tabelData1.add(objtableData);
					
				}
			}
			htmlContent.append(
					"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			String entry = "Test Data";
			htmlContent.append(createHtmltable(headerList1, entry, tabelData1));
			
			String[] twampHeaderList = {"[ Packet Count ]","[ Loss(ratio) ]"};
			for(String twampHeader : twampHeaderList) {
				String packetCount = StringUtils.substringBetween(result, twampHeader, "[").trim();				
				ArrayList<String> resultData = new ArrayList<>(Arrays.asList(packetCount.split("\\r?\\n")));
				ArrayList<String> replaceData = new ArrayList<>();
				for(String r : resultData) {
					if(r.trim().replaceAll(" +", " ").contains("Skip packets") || r.trim().replaceAll(" +", " ").contains("Drop packets")) {
						replaceData.add(r);
					}
				}
				for(int i=0; i<replaceData.size(); i++) {
					resultData.remove(replaceData.get(i));
					resultData.add(i+1, replaceData.get(i));
				}
				LinkedHashMap<String, String> column = new LinkedHashMap<>();
				for(String r : resultData) {
					String[] d = r.split(":", 2);
					if(d.length == 2) {
						column.put(d[0].trim().replaceAll(" +", " "), d[1].trim());
					}					
				}
				
				if(twampHeader.contains("Packet Count")) {
					entry = "Packet Count";
				} else {
					entry = "Loss(ratio)";
				}
				
				LinkedHashSet<String> headerList2 = new LinkedHashSet<>(column.keySet());
				List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
				tabelData2.add(column);
				
				
				htmlContent.append("<tr><td colspan=" + column.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList2) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				StringBuilder tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData2) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						if(resultTableData.getKey().trim().equalsIgnoreCase("Skip packets") 
								|| resultTableData.getKey().trim().equalsIgnoreCase("Drop packets")
								|| resultTableData.getKey().trim().equalsIgnoreCase("Network Loss")
								|| resultTableData.getKey().trim().equalsIgnoreCase("UpLink Loss")
								|| resultTableData.getKey().trim().equalsIgnoreCase("DnLink Loss")) {
							if(resultTableData.getValue().trim().replaceAll("(\\d+).*", "$1").equals("0")) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						}						
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			}
			
			htmlContent.append("</table>\n");
			
		} catch(Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	public StringBuilder get5GTwampoutputF1UIAU(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5GTWAMP);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String result = "";
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("test-id");
			headerList1.add("result-saved-time");
			headerList1.add("test-type");
			headerList1.add("result-type");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			NodeList nodeList = document.getElementsByTagName("diagnostic-test-result-list");
			for (int o = 0; o < nodeList.getLength(); o++) {
				Node ChildNode5 = nodeList.item(o);
				if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
					Element element = (Element) ChildNode5;
					result = getXmlElementData(element,"result-additional-info");
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					for(String header : headerList1) {
						objtableData.put(header, getXmlElementData(element, header));
					}
					tabelData1.add(objtableData);
					
				}
			}
			htmlContent.append(
					"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			String entry = "Test Data";
			htmlContent.append(createHtmltable(headerList1, entry, tabelData1));
			
			String[] twampHeaderList = {"[ Packet Count ]","[ Loss(ratio) ]"};
			for(String twampHeader : twampHeaderList) {
				String packetCount = StringUtils.substringBetween(result, twampHeader, "[").trim();				
				ArrayList<String> resultData = new ArrayList<>(Arrays.asList(packetCount.split("\\r?\\n")));
				ArrayList<String> replaceData = new ArrayList<>();
				for(String r : resultData) {
					if(r.trim().replaceAll(" +", " ").contains("Skip packets") || r.trim().replaceAll(" +", " ").contains("Drop packets")) {
						replaceData.add(r);
					}
				}
				for(int i=0; i<replaceData.size(); i++) {
					resultData.remove(replaceData.get(i));
					resultData.add(i+1, replaceData.get(i));
				}
				LinkedHashMap<String, String> column = new LinkedHashMap<>();
				for(String r : resultData) {
					String[] d = r.split(":", 2);
					if(d.length == 2) {
						column.put(d[0].trim().replaceAll(" +", " "), d[1].trim());
					}					
				}
				
				if(twampHeader.contains("Packet Count")) {
					entry = "Packet Count";
				} else {
					entry = "Loss(ratio)";
				}
				
				LinkedHashSet<String> headerList2 = new LinkedHashSet<>(column.keySet());
				List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
				tabelData2.add(column);
				
				
				htmlContent.append("<tr><td colspan=" + column.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList2) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				StringBuilder tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData2) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						if(resultTableData.getKey().trim().equalsIgnoreCase("Skip packets") 
								|| resultTableData.getKey().trim().equalsIgnoreCase("Drop packets")
								|| resultTableData.getKey().trim().equalsIgnoreCase("Network Loss")
								|| resultTableData.getKey().trim().equalsIgnoreCase("UpLink Loss")
								|| resultTableData.getKey().trim().equalsIgnoreCase("DnLink Loss")) {
							if(resultTableData.getValue().trim().replaceAll("(\\d+).*", "$1").equals("0")) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						}						
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			}
			
			htmlContent.append("</table>\n");
			
		} catch(Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	private ArrayList<HashMap<String, String>> getRemoteIPAddress(String dbcollectionFileName, String neId){
		ArrayList<HashMap<String, String>> remoteIpList = new ArrayList<>();
		try {
			List<CIQDetailsModel> listCIQDetailsModel = getCiqDetailsForRuleValidation(neId, dbcollectionFileName);
			String aupfId = "";
			if (!ObjectUtils.isEmpty(listCIQDetailsModel))

			{
				CIQDetailsModel ciqDetailsModel = listCIQDetailsModel.get(0);

				LinkedHashMap<String, CiqMapValuesModel> objMapDetails = ciqDetailsModel.getCiqMap();

				if (!ObjectUtils.isEmpty(objMapDetails) && objMapDetails.containsKey("NE_ID_AUPF Name")) {
					
					aupfId = objMapDetails.get("NE_ID_AUPF Name").getHeaderValue().trim().replaceAll("^0+(?!$)", "");

				}

			}
			if(!aupfId.isEmpty()) {
				List<CIQDetailsModel> listCIQsheetDetailsModel = getCiqDetailsForRuleValidation(aupfId, dbcollectionFileName);
				if (!ObjectUtils.isEmpty(listCIQsheetDetailsModel)) {
					for(CIQDetailsModel ciqData : listCIQsheetDetailsModel) {
						String interfaceName = ciqData.getCiqMap().get("interface-name").getHeaderValue().trim();
						String ip = ciqData.getCiqMap().get("ip").getHeaderValue().trim();
						if((interfaceName.contains("ext0") || interfaceName.contains("ext1"))
								&& !ip.equals("::") && !ip.isEmpty()) {
							HashMap<String,String> remoteIpData = new HashMap<>();
							remoteIpData.put("interface_name", interfaceName);
							remoteIpData.put("ip", ip);
							remoteIpList.add(remoteIpData);
						}
					}
				}
			}
		} catch(Exception e) {
			logger.error("Exception RunTestServiceImpl in getRemoteIPAddress() " + ExceptionUtils.getFullStackTrace(e));
		}
		System.out.println(remoteIpList);
		return remoteIpList;
	}
	
	public List<CIQDetailsModel> getciqDetailsList(String sheetName, String subSheetName,
			String dbcollectionFileName) {
		List<CIQDetailsModel> resultList = null;

		Query query = new Query(Criteria.where("sheetName").is(sheetName));
		if (subSheetName != null) {
			query.addCriteria(Criteria.where("subSheetName").is(subSheetName));
		}
		try {
			resultList = mongoTemplate.find(query, CIQDetailsModel.class, dbcollectionFileName);

		} catch (Exception e) {
			logger.error("Exception getciqDetailsList() in AuditXmlRulesServiceUtil :"
					+ ExceptionUtils.getFullStackTrace(e));

		}
		return resultList;
	}
	
	private HashMap<String,String> getMmeIpMap(String enbId, List<CIQDetailsModel> listCIQDetailsModel){
		HashMap<String,String> mmeIpMap = new HashMap<>();
		try {
			String enbIdMme = enbId.trim().replaceAll("^0+(?!$)", "");
			String enbIdPrefix = enbIdMme.substring(0, 3);
			String enbIdPrefix2 = enbIdMme.substring(0, 2);
			
			for(CIQDetailsModel objCellIdList : listCIQDetailsModel) {
				if(objCellIdList.getCiqMap().containsKey("Market_Prefix") && StringUtils.isNotEmpty(objCellIdList.getCiqMap().get("Market_Prefix").getHeaderValue())
						&& objCellIdList.getCiqMap().containsKey("MME_IP") && StringUtils.isNotEmpty(objCellIdList.getCiqMap().get("MME_IP").getHeaderValue())
						&& objCellIdList.getCiqMap().containsKey("Market_Prefix") && StringUtils.isNotEmpty(objCellIdList.getCiqMap().get("MME_INDEX").getHeaderValue())) {
					if(objCellIdList.getCiqMap().get("Market_Prefix").getHeaderValue().toString().startsWith(enbIdPrefix)) {
						mmeIpMap.put(objCellIdList.getCiqMap().get("MME_INDEX").getHeaderValue().trim(), objCellIdList.getCiqMap().get("MME_IP").getHeaderValue().trim());
					}
					else if(objCellIdList.getCiqMap().get("Market_Prefix").getHeaderValue().trim().length() == 2 &&
							objCellIdList.getCiqMap().get("Market_Prefix").getHeaderValue().trim().startsWith(enbIdPrefix2)) {
						mmeIpMap.put(objCellIdList.getCiqMap().get("MME_INDEX").getHeaderValue().trim(), objCellIdList.getCiqMap().get("MME_IP").getHeaderValue().trim());
					}
				}
			}
			
		} catch(Exception e) {
			logger.error("Exception getMmeIpMap() in AuditXmlRulesServiceUtil :"
					+ ExceptionUtils.getFullStackTrace(e));
		}
		return mmeIpMap;
	}

	private boolean compareIPAddr(String ip1, String ip2) {
		boolean result = false;
		try {
			InetAddress ipAddr1 = InetAddress.getByName(ip1);
			InetAddress ipAddr2 = InetAddress.getByName(ip2);
			if(ipAddr1.equals(ipAddr2)) {
				result = true;
			}
		} catch(Exception e) {
			result = false;
		}
		return result;
	}

	private void checkCellNum(LinkedHashSet<String> headerList, LinkedHashSet<String> cellNumSet, LinkedHashSet<String> traceJobcellNumSet,
			List<LinkedHashMap<String, String>> tableData) {
		try {
			for(String cellnum : cellNumSet) {
				if(!cellnum.equals("-") && !traceJobcellNumSet.contains(cellnum)) {
					LinkedHashMap<String, String> rowData = new LinkedHashMap<>();
					for(String header : headerList) {
						if(header.equals("cell-num")) {
							rowData.put(header, cellnum);
						} else {
							rowData.put(header, "-");
						}
					}
					tableData.add(rowData);
				}
			}
		} catch(Exception e) {
			logger.error("Exception in checkCellNum() AuditXmlRulesServiceUtil: " + ExceptionUtils.getFullStackTrace(e));
		}		
	}

	public StringBuilder get4GeutrancellfddtddOperationalState(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("operational-state");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("eutran-generic-cell");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header,
										getXmlElementData(elementchild, header));
							}
							tabelData1.add(objtableData);
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			StringBuilder operationalStateIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String cellnum = "";
				String earfcn = "";
				
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("Cell_ID") && ciqData.getCiqMap().get("Cell_ID")
								.getHeaderValue().trim().equals(tdData.get("cell-num").trim())) {
							cellnum = tdData.get("cell-num");
							if (ciqData.getCiqMap().containsKey("administrative-state")) {
								earfcn = ciqData.getCiqMap().get("administrative-state").getHeaderValue().trim();
							}
							
						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-num")) {
						if (value.equals(cellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("operational-state")) {
						if (value.equals("enabled")
								&& (earfcn.equalsIgnoreCase("unlocked") || earfcn.equalsIgnoreCase("new unlocked"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equals("disabled") && (earfcn.equalsIgnoreCase("locked") || earfcn.equalsIgnoreCase("new locked"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							operationalStateIssue.append("cell-num: " + tdData.get("cell-num") + " operational-state: "
									+ tdData.get("operational-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(operationalStateIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if(operationalStateIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(1, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						operationalStateIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4GeutrancellfddtddAdministrativeState(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("administrative-state");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("eutran-generic-cell");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header,
										getXmlElementData(elementchild, header));
							}
							tabelData1.add(objtableData);
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			StringBuilder administrativeStateIssue = new StringBuilder();	
			StringBuilder auditIssueAll = new StringBuilder();
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String cellnum = "";
				String earfcn = "";
				
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("Cell_ID") && ciqData.getCiqMap().get("Cell_ID")
								.getHeaderValue().trim().equals(tdData.get("cell-num").trim())) {
							cellnum = tdData.get("cell-num");
							if (ciqData.getCiqMap().containsKey("administrative-state")) {
								earfcn = ciqData.getCiqMap().get("administrative-state").getHeaderValue().trim();
							}
							
						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-num")) {
						if (value.equals(cellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("administrative-state")) {
						if (value.equalsIgnoreCase("unlocked") && ((earfcn.equalsIgnoreCase("unlocked")) || (earfcn.equalsIgnoreCase("new unlocked")))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						}else if (value.equalsIgnoreCase("locked") && ((earfcn.equalsIgnoreCase("locked")) || (earfcn.equalsIgnoreCase("new locked")))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						}  else {
							administrativeStateIssue.append("cell-num : " + tdData.get("cell-num") + 
									", administrative-state : " + tdData.get("administrative-state") + "\n");	
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			
			auditIssueAll.append(administrativeStateIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if(administrativeStateIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(2, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						administrativeStateIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder get4GeutrancellfddtddS1ApState(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("s1-ap-state");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("eutran-generic-cell");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header,
										getXmlElementData(elementchild, header));
							}
							tabelData1.add(objtableData);
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			StringBuilder auditIssue = new StringBuilder();		
			StringBuilder auditIssueAll = new StringBuilder();
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					/*if(resultTableData.getKey().equalsIgnoreCase("s1-ap-state") && !resultTableData.getValue().equalsIgnoreCase("enabled")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						auditIssue.append("cell-num : " + tdData.get("cell-num") + 
								", s1-ap-state : " + tdData.get("s1-ap-state") + "\n");				
					} else {*/

						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					//}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if(auditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(3, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder get4Gcpriportentries(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("digital-unit-entries");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("unit-type");
			headerList.add("unit-id");
			headerList.add("port-id");
			headerList.add("connected-radio-unit-type");
			headerList.add("tx-wavelength");
			headerList.add("tx-power");
			headerList.add("rx-power");
			headerList.add("bit-rate");
			headerList.add("cpri-speed-saved");
			headerList.add("cpri-speed-running");
			headerList.add("cpri-compression-running");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childcpiPortList = element.getElementsByTagName("cpri-port");
					for (int j = 0; j < childcpiPortList.getLength(); j++) {
						Node ChildCpiPortNode = childcpiPortList.item(j);
						if (Node.ELEMENT_NODE == ChildCpiPortNode.getNodeType()) {

							Element elementCpiPorchild = (Element) ChildCpiPortNode;

							NodeList childNodeCpriPortEntriesList = elementCpiPorchild
									.getElementsByTagName("cpri-port-entries");

							if (childNodeCpriPortEntriesList != null && childNodeCpriPortEntriesList.getLength() > 0) {

								for (int k = 0; k < childNodeCpriPortEntriesList.getLength(); k++) {
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Node ChildCpriPortEntriesNode = childNodeCpriPortEntriesList.item(k);
									if (Node.ELEMENT_NODE == ChildCpriPortEntriesNode.getNodeType()) {
										Element elementCpriPortEntrieschild = (Element) ChildCpriPortEntriesNode;

										objtableData.put("unit-type", getXmlElementData(element, "unit-type"));
										objtableData.put("unit-id", getXmlElementData(element, "unit-id"));
										objtableData.put("port-id",
												getXmlElementData(elementCpriPortEntrieschild, "port-id"));
										objtableData.put("connected-radio-unit-type", getXmlElementData(
												elementCpriPortEntrieschild, "connected-radio-unit-type"));
										objtableData.put("tx-wavelength",
												getXmlElementData(elementCpriPortEntrieschild, "tx-wavelength"));

										objtableData.put("tx-power",
												getXmlElementData(elementCpriPortEntrieschild, "tx-power"));
										objtableData.put("rx-power",
												getXmlElementData(elementCpriPortEntrieschild, "rx-power"));
										objtableData.put("bit-rate",
												getXmlElementData(elementCpriPortEntrieschild, "bit-rate"));
										objtableData.put("cpri-speed-saved",
												getXmlElementData(elementCpriPortEntrieschild, "cpri-speed-saved"));
										objtableData.put("cpri-speed-running",
												getXmlElementData(elementCpriPortEntrieschild, "cpri-speed-running"));
										objtableData.put("cpri-compression-running", getXmlElementData(
												elementCpriPortEntrieschild, "cpri-compression-running"));

										tabelData.add(objtableData);

									}
								}
							} else {
								LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
								objtableData.put("unit-type", getXmlElementData(element, "unit-type"));
								objtableData.put("unit-id", getXmlElementData(element, "unit-id"));
								objtableData.put("port-id", "-");
								objtableData.put("connected-radio-unit-type", "-");
								objtableData.put("tx-wavelength", "-");

								objtableData.put("tx-power", "-");
								objtableData.put("rx-power", "-");
								objtableData.put("bit-rate", "-");
								objtableData.put("cpri-speed-saved", "-");
								objtableData.put("cpri-speed-running", "-");
								objtableData.put("cpri-compression-running", "-");
								tabelData.add(objtableData);

							}

						}
					}

				}

			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			StringBuilder cprispeedrunningAuditIssue = new StringBuilder();
			StringBuilder txwavelengthAuditIssue = new StringBuilder();
			StringBuilder rxpowerAuditIssue = new StringBuilder();
			StringBuilder txpowerAuditIssue = new StringBuilder();
			
			StringBuilder auditIssueAll = new StringBuilder();
			

			tableHeader = tableHeader + "</tr>\n";
			String tableData = "";
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData = tableData + "<tr>\n";

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if ("tx-power".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double txPower = Double.parseDouble(resultTableData.getValue());
							if (txPower >= -4 && txPower <= +1.0) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
								txpowerAuditIssue.append( " tx-power : " 
										+ tdData.get("tx-power") + "\n");
							}
						} else if ("-".equalsIgnoreCase(resultTableData.getValue())
								|| "_".equalsIgnoreCase(resultTableData.getValue())) {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
							txpowerAuditIssue.append( " tx-power : " 
									+ tdData.get("tx-power") + "\n");
						}

					} else if ("rx-power".equalsIgnoreCase(resultTableData.getKey())) {
						
						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double rxPower = Double.parseDouble(resultTableData.getValue());
							if (rxPower >= -5 && rxPower <= +1.5) {
								tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
							}else if(rxPower >= -8 && rxPower < -5){
								tableData = tableData + "<td align=center bgcolor ='#FFFF00'>"
										+ resultTableData.getValue() + "</td>\n";
								rxpowerAuditIssue.append("unit-id :" + tdData.get("unit-id") + " port-id :" + tdData.get("port-id") + " rx-power : " 
										+ tdData.get("rx-power") + "\n");
							} else {
								tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n";
								rxpowerAuditIssue.append("unit-id :" + tdData.get("unit-id") + " port-id :" + tdData.get("port-id") + " rx-power : " 
										+ tdData.get("rx-power") + "\n");
							}
						} else if ("-".equalsIgnoreCase(resultTableData.getValue())
								|| "_".equalsIgnoreCase(resultTableData.getValue())) {
							tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
						} else {
							tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n";
							rxpowerAuditIssue.append("unit-id :" + tdData.get("unit-id") + " port-id :" + tdData.get("port-id") + " rx-power : " 
									+ tdData.get("rx-power") + "\n");
						}

					} else if(resultTableData.getKey().equalsIgnoreCase("tx-wavelength") && !(resultTableData.getValue().equalsIgnoreCase("1310")
							|| resultTableData.getValue().equalsIgnoreCase("850"))){
						tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
						+ "</td>\n";
						txwavelengthAuditIssue.append("unit-id :" + tdData.get("unit-id") + " port-id :" + tdData.get("port-id") + " tx-wavelength : " 
								+ tdData.get("tx-wavelength") + "\n");
						
					}  else if(resultTableData.getKey().equalsIgnoreCase("cpri-speed-running") && !(resultTableData.getValue().equalsIgnoreCase("9820-mbps"))){
						tableData = tableData + "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
						+ "</td>\n";
						cprispeedrunningAuditIssue.append("unit-id :" + tdData.get("unit-id") + " port-id :" + tdData.get("port-id") + " cpri-speed-running : " 
								+ tdData.get("cpri-speed-running") + "\n");
						
					} else {
						tableData = tableData + "<td align=center>" + resultTableData.getValue() + "</td>\n";
					}
				}
				tableData = tableData + "</tr>\n";

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(cprispeedrunningAuditIssue);
			auditIssueAll.append(txwavelengthAuditIssue);
			auditIssueAll.append(rxpowerAuditIssue);
			auditIssueAll.append(txpowerAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData, auditIssueAll);
			if(cprispeedrunningAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(6, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						cprispeedrunningAuditIssue.toString());
			}
			if(txwavelengthAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(7, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						txwavelengthAuditIssue.toString());
			}
			if(rxpowerAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(8, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						rxpowerAuditIssue.toString());
			}
			if(txpowerAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(50, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						txpowerAuditIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder get4GCallTraceCslInfo(String fullOutputLog, String command, String enbId, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "[ok]");
			outputLog = StringUtils.substringAfter(outputLog, "<");
			outputLog = "<" + outputLog;
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			NodeList nodeList = document.getElementsByTagName("csl-info");

			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("csl-ip-ver");
			headerList.add("csl-server-ipv6");
			headerList.add("udp-ack-control");
			headerList.add("csl-report-control");
			headerList.add("csl-port-num");

			List<LinkedHashMap<String, String>> tabelData = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					objtableData.put("csl-ip-ver", getXmlElementData(element, "csl-ip-ver"));
					objtableData.put("csl-server-ipv6", getXmlElementData(element, "csl-server-ipv6"));
					objtableData.put("udp-ack-control", getXmlElementData(element, "udp-ack-control"));
					objtableData.put("csl-report-control", getXmlElementData(element, "csl-report-control"));
					objtableData.put("csl-port-num", getXmlElementData(element, "csl-port-num"));
					tabelData.add(objtableData);
				}
			}
			if(tabelData.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			StringBuilder cslPortNumauditIssue = new StringBuilder();	
			StringBuilder cslReportControlauditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if(resultTableData.getKey().equalsIgnoreCase("csl-port-num") && !resultTableData.getValue().equalsIgnoreCase("50001")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						cslPortNumauditIssue.append("csl-server-ipv6 : " + tdData.get("csl-server-ipv6")+ " csl-port-num : " + tdData.get("csl-port-num")+"\n");				
					} else if(resultTableData.getKey().equalsIgnoreCase("csl-report-control") && !resultTableData.getValue().equalsIgnoreCase("on")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						cslReportControlauditIssue.append("csl-server-ipv6 : " + tdData.get("csl-server-ipv6")+" csl-report-control : " + tdData.get("csl-report-control")+ "\n");				
					} else {

						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(cslPortNumauditIssue);
			auditIssueAll.append(cslReportControlauditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData, auditIssueAll);
			if(cslPortNumauditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(10, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						cslPortNumauditIssue.toString());
			}
			if(cslReportControlauditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(11, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						cslReportControlauditIssue.toString());
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4GenbState(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("administrative-state");
			headerList1.add("operational-mode");
			headerList1.add("operational-state");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Iterator<String> itr = headerList1.iterator();
					String header = itr.next();
					objtableData.put(header, getXmlElementData(element, header));
					while (itr.hasNext()) {
						header = itr.next();
						objtableData.put(header,
								getXmlElementData(element, header));
					}
					tabelData1.add(objtableData);
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			StringBuilder operationalStateAuditIssue = new StringBuilder();	
			StringBuilder operationalModeAuditIssue = new StringBuilder();
			StringBuilder administrativeStateAuditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if(resultTableData.getKey().equalsIgnoreCase("operational-state") && !resultTableData.getValue().equalsIgnoreCase("enabled")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						operationalStateAuditIssue.append("operational-state : " + tdData.get("operational-state") + "\n");				
					} else if(resultTableData.getKey().equalsIgnoreCase("administrative-state") && !resultTableData.getValue().equalsIgnoreCase("unlocked")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						administrativeStateAuditIssue.append("administrative-state : " + tdData.get("administrative-state") + "\n");				
					} else if(resultTableData.getKey().equalsIgnoreCase("operational-mode") && !resultTableData.getValue().equalsIgnoreCase("normal-mode")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						operationalModeAuditIssue.append("operational-mode : " + tdData.get("operational-mode") + "\n");				
					} else {

						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(operationalStateAuditIssue);
			auditIssueAll.append(operationalModeAuditIssue);
			auditIssueAll.append(administrativeStateAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			
			if(operationalStateAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(14, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						operationalStateAuditIssue.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(administrativeStateAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(15, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						administrativeStateAuditIssue.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(operationalModeAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(16, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						operationalModeAuditIssue.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4GTermPointToEnb(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("enb-id");
			headerList1.add("neighbor-enb-index");
			headerList1.add("sctp-state");
			headerList1.add("interface-state");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("term-point-to-enb");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Iterator<String> itr = headerList1.iterator();
					String header = itr.next();
					objtableData.put(header, getXmlElementData(element, header));
					while (itr.hasNext()) {
						header = itr.next();
						objtableData.put(header,
								getXmlElementData(element, header));
					}
					tabelData1.add(objtableData);
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			StringBuilder sctpStateAuditIssue = new StringBuilder();	
			StringBuilder interfaceStateAuditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if(resultTableData.getKey().equalsIgnoreCase("sctp-state") && !resultTableData.getValue().equalsIgnoreCase("enable-ins")) {
						tableData.append("<td align=center bgcolor ='#FFFF00'>"
								+ resultTableData.getValue() + "</td>\n");
						sctpStateAuditIssue.append("enb-id : "+ tdData.get("enb-id") + " sctp-state : " + tdData.get("sctp-state") + "\n");				
					} else if(resultTableData.getKey().equalsIgnoreCase("interface-state") && !resultTableData.getValue().equalsIgnoreCase("enable-ins")) {
						tableData.append("<td align=center bgcolor ='#FFFF00'>"
								+ resultTableData.getValue() + "</td>\n");
						interfaceStateAuditIssue.append("enb-id : "+ tdData.get("enb-id") + " interface-state : " + tdData.get("interface-state") + "\n");				
					} else {

						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(sctpStateAuditIssue);
			auditIssueAll.append(interfaceStateAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			
			if(sctpStateAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(17, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						sctpStateAuditIssue.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(interfaceStateAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(18, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						interfaceStateAuditIssue.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4GOpticDistance(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("dsp-id");
			headerList1.add("optic-distance-option");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("digital-unit");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("digital-unit-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("dsp-miscellaneous-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("dsp-miscellaneous-info-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));									

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			StringBuilder opticDistanceAuditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if(resultTableData.getKey().equalsIgnoreCase("optic-distance-option") && !resultTableData.getValue().equalsIgnoreCase("20-km")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						opticDistanceAuditIssue.append("unit-id : "+ tdData.get("unit-id") + " dsp-id : " + tdData.get("dsp-id")
						+ " optic-distance-option : " + tdData.get("optic-distance-option") + "\n");				
					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(opticDistanceAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if(opticDistanceAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(19, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						opticDistanceAuditIssue.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder getvDUAuditCBand(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String softwareVersion = "";
			softwareVersion = getsoftwareConfig(fullOutputLog, XmlCommandsConstants.CBAND_VDU_AUDIT,
					enbId, dbcollectionFileName, runTestEntity);
			String neVersion = StringUtils.substringBefore(softwareVersion, "-");
			if (neVersion.isEmpty()) {
				neVersion = networkConfigEntity.getNeVersionEntity().getNeVersion();
			}
			String entry1 = "pod entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("pod-type");
			headerList1.add("pod-id");
			if (neVersion.contains("22.C")) {
			headerList1.add("dpp-flavor-option");
			//headerList1.add("administrative-state");
			}
			headerList1.add("operational-state");

			String entry2 = "pod entries sync";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("pod-type");
			headerList2.add("pod-id");
			if (!neVersion.contains("21.D") && !neVersion.contains("22.A")) {
			headerList2.add("holdover-timer-threshold");
			}
			headerList2.add("sync-state");

			String entry3 = "config-info";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("ne-id");
			headerList3.add("flavor-id");
			headerList3.add("ems-ip-address");
			headerList3.add("software-version");

			String entry4 = "end-point-f1c";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("gnb-cu-cp-name");
			headerList4.add("remote-ip-address");
			headerList4.add("secondary-remote-ip-address");
			headerList4.add("sctp-state");
			headerList4.add("f1-ap-state");

			String entry5 = "virtual-port-entries";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("pod-type");
			headerList5.add("pod-id");
			headerList5.add("port-type");
			headerList5.add("port-id");
			headerList5.add("administrative-state");
			headerList5.add("operational-state");
			headerList5.add("mtu");
			headerList5.add("user-label");
			headerList5.add("interface-name");
			headerList5.add("hw-address");

			String entry6 = "external-interfaces";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("pod-type");
			headerList6.add("pod-id");
			headerList6.add("interface-name");
			headerList6.add("ip");
			headerList6.add("prefix-length");
			headerList6.add("dhcp-server-enable");
			headerList6.add("f1");
			if (neVersion.contains("22")) {
			headerList6.add("dss");
			}
			headerList6.add("carrier-aggregation");
			headerList6.add("mplane");

			String entry7 = "o-ran-radio-unit-info";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("o-ran-ru-id");
			headerList7.add("sub-type");
			headerList7.add("unit-type");
			headerList7.add("serial-number");
			if ((neVersion.contains("21.D")) || (neVersion.contains("22")) ) {
			headerList7.add("nr-support-cell-number");
			} else {
			headerList7.add("support-cell-number");
			}
			if (neVersion.contains("22.C")) {
			headerList7.add("fsu-ne-id");
			}
			headerList7.add("operational-mode");

			String entry8 = "cuplane-interfaces";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("o-ran-ru-id");
			headerList8.add("connected-pod-type");
			headerList8.add("connected-pod-id");
			headerList8.add("connected-pod-port-id");
			headerList8.add("connected-ru-port-id");
			headerList8.add("vlan-id");
			if ((neVersion.contains("21.D")) || (neVersion.contains("22"))) {
			headerList8.add("nr-support-cell-number");
			} else {
			headerList8.add("support-cell-number");
			}

			String entry9 = "dl-antenna-count";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("cell-identity");
			headerList9.add("cell-num");
			headerList9.add("user-label");
			headerList9.add("dl-antenna-count");

			String entry10 = "ul-antenna-count";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("cell-identity");
			headerList10.add("cell-num");
			headerList10.add("user-label");
			headerList10.add("ul-antenna-count");
			headerList10.add("number-of-rx-paths-per-ru");
			if (neVersion.contains("22")) {
			headerList10.add("ul-ranks2-mcs-th-cp-ofdm-to-dft-s-ofdm");
			headerList10.add("ul-rank2-mcs-th-dft-s-ofdm-to-cp-ofdm");
			headerList10.add("ul-256qam-mcs-th-cp-ofdm-to-dft-s-ofdm");
			headerList10.add("ul-256qam-mcs-th-dft-s-ofdm-to-cp-ofdm");
			headerList10.add("ul-256qam-ranks2-mcs-th-cp-ofdm-to-dft-s-ofdm");
			headerList10.add("ul-256qam-rank2-mcs-th-dft-s-ofdm-to-cp-ofdm");
			}
			String entry11 = "cell-physical-conf-idle";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("cell-identity");
			headerList11.add("cell-num");
			headerList11.add("user-label");
			headerList11.add("nr-physical-cell-id");
			headerList11.add("nr-arfcn-dl");
			headerList11.add("nr-arfcn-ul");
			headerList11.add("nr-bandwidth-dl");
			headerList11.add("nr-bandwidth-ul");

			String entry12 = "gutran-du-cell-entries";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("cell-identity");
			headerList12.add("cell-num");
			headerList12.add("cell-path-type");
			headerList12.add("administrative-state");
			headerList12.add("operational-state");
			headerList12.add("activation-state");
			headerList12.add("dpp-id");
			headerList12.add("user-label");
			headerList12.add("test-flag");
			headerList12.add("power");
			headerList12.add("subcarrier-spacing-common");
			headerList12.add("dl-subcarrier-spacing");
			headerList12.add("ul-subcarrier-spacing");
			headerList12.add("auto-unlock-flag");

			String entry13 = "active-alarm-entries";
			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("alarm-unit-type");
			headerList13.add("alarm-type");
			headerList13.add("probable-cause");
			headerList13.add("specific-problem");
			headerList13.add("severity");
			headerList13.add("location");

			String entry14 = "sync-status";
			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("o-ran-ru-id");
			headerList14.add("sync-state");
			if (neVersion.contains("22.C")) {
			headerList14.add("time-error");
			headerList14.add("frequency-error");
			}
			String entry15 = "mplane-info";
			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("o-ran-ru-id");
			headerList15.add("mplane-ipv6");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("sync");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															Iterator<String> itr = headerList2.iterator();
															String header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));
															header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));

															while (itr.hasNext()) {
																header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild6, header));
															}
															tabelData2.add(objtableData);
															/*
															 * objtableData.put("pod-type",
															 * getXmlElementData(elementchild5, "pod-type"));
															 * objtableData.put("pod-id",
															 * getXmlElementData(elementchild5, "pod-id"));
															 * objtableData.put("holdover-timer-threshold",
															 * getXmlElementData(elementchild6,
															 * "holdover-timer-threshold"));
															 * objtableData.put("sync-state",
															 * getXmlElementData(elementchild6, "sync-state"));
															 * tabelData2.add(objtableData);
															 */
														}
													}
													childNodeList6 = elementchild5
															.getElementsByTagName("virtual-port-entries");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															Iterator<String> itr = headerList5.iterator();
															String header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));
															header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));

															while (itr.hasNext()) {
																header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild6, header));
															}
															tabelData5.add(objtableData);
														}
													}

													childNodeList6 = elementchild5
															.getElementsByTagName("external-interfaces");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															NodeList childNodeList7 = elementchild6
																	.getElementsByTagName("ipv6-address");
															for (int f = 0; f < childNodeList7.getLength(); f++) {
																Node ChildNode7 = childNodeList7.item(f);
																if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
																	Element elementchild7 = (Element) ChildNode7;
																	LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																	Iterator<String> itr = headerList6.iterator();
																	String header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild5, header));
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild5, header));
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild6, header));

																	while (itr.hasNext()) {
																		header = itr.next();
																		objtableData.put(header, getXmlElementData(
																				elementchild7, header));
																	}
																	tabelData6.add(objtableData);
																}
															}
														}
													}

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = "";
													while (itr.hasNext()) {
														header = itr.next();
														if ((header.equalsIgnoreCase("pod-type")
																|| header.equalsIgnoreCase("pod-id")
																|| header.equalsIgnoreCase("operational-state"))
																&& elementchild5.getElementsByTagName(header) != null
																&& elementchild5.getElementsByTagName(header)
																		.getLength() > 0) {
															for (int z = 0; z < elementchild5
																	.getElementsByTagName(header).getLength(); z++) {
																if (elementchild5.getElementsByTagName(header).item(z)
																		.getParentNode().getNodeName()
																		.equalsIgnoreCase("pod-entries")
																		&& !elementchild5.getElementsByTagName(header)
																				.item(z).getParentNode().getNodeName()
																				.equalsIgnoreCase(
																						"virtual-port-entries")) {
																	objtableData.put(header,
																			elementchild5.getElementsByTagName(header)
																					.item(z).getTextContent());
																}
															}
														} else {
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));
														}
													}

													if (!getXmlElementData(elementchild5, "operational-state")
															 .equalsIgnoreCase("-")) {
														tabelData1.add(objtableData);
													}
												}
											}
										}
									}

									childNodeList4 = elementchild3.getElementsByTagName("config-info");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList3.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild4, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData3.add(objtableData);
										}
									}
								}
							}
						}
					}

					NodeList nodelist1 = elementchild1.getElementsByTagName("active-alarm-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList13.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData13.add(objtableData);
						}
					}

					nodelist1 = elementchild1.getElementsByTagName("end-point-f1c");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("gnb-cu-cp-name", getXmlElementData(elementchild6, "gnb-cu-cp-name"));
							objtableData.put("remote-ip-address",
									getXmlElementData(elementchild6, "remote-ip-address"));
							objtableData.put("secondary-remote-ip-address",
									getXmlElementData(elementchild6, "secondary-remote-ip-address"));
							objtableData.put("sctp-state", getXmlElementData(elementchild6, "sctp-state"));
							objtableData.put("f1-ap-state", getXmlElementData(elementchild6, "f1-ap-state"));
							tabelData4.add(objtableData);

						}
					}

					childNodeList2 = elementchild1.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("o-ran-radio-unit-info");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									NodeList childNodeList4 = elementchild3.getElementsByTagName("cuplane-interfaces");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList8.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData8.add(objtableData);
										}
									}

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList7.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData7.add(objtableData);

									objtableData = new LinkedHashMap<>();
									itr = headerList14.iterator();
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData14.add(objtableData);

									objtableData = new LinkedHashMap<>();
									itr = headerList15.iterator();
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData15.add(objtableData);
								}
							}
						}
					}

					childNodeList2 = elementchild1.getElementsByTagName("gnb-du-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("gutran-du-cell-entries");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									NodeList childNodeList4 = elementchild3
											.getElementsByTagName("dl-physical-resource-config");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList9.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData9.add(objtableData);
										}
									}

									childNodeList4 = elementchild3.getElementsByTagName("ul-physical-resource-config");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList10.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData10.add(objtableData);
										}
									}

									childNodeList4 = elementchild3.getElementsByTagName("cell-physical-conf-idle");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList11.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData11.add(objtableData);
										}
									}

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList12.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData12.add(objtableData);
								}
							}
						}
					}

				}
			}

			checkEmptyTableCband(tabelData1, entry1, runTestEntity, enbId);
			checkEmptyTableCband(tabelData2, entry2, runTestEntity, enbId);
			checkEmptyTableCband(tabelData3, entry3, runTestEntity, enbId);
			checkEmptyTableCband(tabelData4, entry4, runTestEntity, enbId);
			checkEmptyTableCband(tabelData5, entry5, runTestEntity, enbId);
			checkEmptyTableCband(tabelData6, entry6, runTestEntity, enbId);
			checkEmptyTableCband(tabelData7, entry7, runTestEntity, enbId);
			checkEmptyTableCband(tabelData8, entry8, runTestEntity, enbId);
			checkEmptyTableCband(tabelData9, entry9, runTestEntity, enbId);
			checkEmptyTableCband(tabelData10, entry10, runTestEntity, enbId);
			checkEmptyTableCband(tabelData11, entry11, runTestEntity, enbId);
			checkEmptyTableCband(tabelData12, entry12, runTestEntity, enbId);
			checkEmptyTableCband(tabelData14, entry14, runTestEntity, enbId);
			checkEmptyTableCband(tabelData15, entry15, runTestEntity, enbId);

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			StringBuilder auditIssue9 = new StringBuilder();
			StringBuilder auditIssue10 = new StringBuilder();
			StringBuilder auditIssue11 = new StringBuilder();
			StringBuilder auditIssue12 = new StringBuilder();
			StringBuilder auditIssue13 = new StringBuilder();
			StringBuilder auditIssue14 = new StringBuilder();
			StringBuilder auditIssue15 = new StringBuilder();
			StringBuilder auditIssue16 = new StringBuilder();
			StringBuilder auditIssue17 = new StringBuilder();
			StringBuilder auditIssue18 = new StringBuilder();
			StringBuilder auditIssue19 = new StringBuilder();
			StringBuilder auditIssue20 = new StringBuilder();
			StringBuilder auditIssue21 = new StringBuilder();
			StringBuilder auditIssue22 = new StringBuilder();
			StringBuilder auditIssue23 = new StringBuilder();
			StringBuilder auditIssue24 = new StringBuilder();
			StringBuilder auditIssue25 = new StringBuilder();
			StringBuilder auditIssue26 = new StringBuilder();
			StringBuilder auditIssue27 = new StringBuilder();
			StringBuilder auditIssue28 = new StringBuilder();
			StringBuilder auditIssue29 = new StringBuilder();
			StringBuilder auditIssue30 = new StringBuilder();
			StringBuilder auditIssue31 = new StringBuilder();
			StringBuilder auditIssue32 = new StringBuilder();
			
			StringBuilder auditIssueAll = new StringBuilder();


			Set<String> oranidSet = new HashSet<>();
			Set<String> oranidSet1 = new HashSet<>();

			String f1cIpAddr = "";
			String f1uIpAddr = "";
			String cuIpAddr = "";
			List<CIQDetailsModel> listOfCiqDetailsday01 = getCiqDetailsForRuleValidationsheet(enbId,
					dbcollectionFileName, "Day0_1", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailsday01)) {
				if (listOfCiqDetailsday01.get(0).getCiqMap().containsKey("cuIPaddress")) {
					cuIpAddr = listOfCiqDetailsday01.get(0).getCiqMap().get("cuIPaddress").getHeaderValue().trim();
				}
				if (listOfCiqDetailsday01.get(0).getCiqMap().containsKey("f1cAddress")) {
					f1cIpAddr = listOfCiqDetailsday01.get(0).getCiqMap().get("f1cAddress").getHeaderValue().trim();
				}
				if (listOfCiqDetailsday01.get(0).getCiqMap().containsKey("f1uAddress")) {
					f1uIpAddr = listOfCiqDetailsday01.get(0).getCiqMap().get("f1uAddress").getHeaderValue().trim();
				}
			}

			List<CIQDetailsModel> listOfCiqDetailsday2 = getCiqDetailsForRuleValidationsheet(enbId,
					dbcollectionFileName, "Day2", "eNBId");

			LinkedHashMap<String, List<String>> validationMap1 = new LinkedHashMap<>();
			// validationMap1.put("operational-state", Arrays.asList("enabled"));
			// htmlContent.append(createHtmltableDSS(headerList1, entry1, tabelData1,
			// validationMap1));
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("operational-state")) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("pod-type : " + tdData.get("pod-type") + " operational-state : "
									+ tdData.get("operational-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// validationMap1.put("holdover-timer-threshold", Arrays.asList("10"));
			// validationMap1.put("sync-state", Arrays.asList("locked"));
			// htmlContent.append(createHtmltableDSS(headerList2, entry2, tabelData2,
			// validationMap1));
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("holdover-timer-threshold")) {
						if (value.equals("0") || value.equals("10")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue5.append("pod-type : " + tdData.get("pod-type") + " holdover-timer-threshold : "
									+ tdData.get("holdover-timer-threshold") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("sync-state")) {
						if (value.equals("locked")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("pod-type : " + tdData.get("pod-type") + " sync-state : "
									+ tdData.get("sync-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// validationMap1.put("flavor-id", Arrays.asList("small-tdd"));
			// htmlContent.append(createHtmltableDSS(headerList3, entry3, tabelData3,
			// validationMap1));

			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("flavor-id")) {
						if (value.equals("small-tdd")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue19.append("ne-id : " + tdData.get("ne-id") + " flavor-id : "
									+ tdData.get("flavor-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			if (!cuIpAddr.isEmpty() && !ObjectUtils.isEmpty(tabelData4)) {
				if (compareIPAddr(cuIpAddr, tabelData4.get(0).get("remote-ip-address"))) {
					cuIpAddr = tabelData4.get(0).get("remote-ip-address");
				}
			} else if (!ObjectUtils.isEmpty(tabelData4)) {
				cuIpAddr = tabelData4.get(0).get("remote-ip-address");
			}
			// validationMap1 = new LinkedHashMap<>();
			// validationMap1.put("remote-ip-address", Arrays.asList(cuIpAddr));
			// validationMap1.put("sctp-state", Arrays.asList("enabled"));
			// validationMap1.put("f1-ap-state", Arrays.asList("enabled"));
			// htmlContent.append(createHtmltableDSS(headerList4, entry4, tabelData4,
			// validationMap1));

			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sctp-state")) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue8.append("gnb-cu-cp-name : " + tdData.get("gnb-cu-cp-name") + " sctp-state : "
									+ tdData.get("sctp-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("f1-ap-state")) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue9.append("gnb-cu-cp-name : " + tdData.get("gnb-cu-cp-name") + " f1-ap-state : "
									+ tdData.get("f1-ap-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("remote-ip-address")) {
						if (value.equals(cuIpAddr)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue10.append("gnb-cu-cp-name : " + tdData.get("gnb-cu-cp-name")
									+ " remote-ip-address : " + tdData.get("remote-ip-address") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// htmlContent.append(createHtmltableDSS(headerList5, entry5, tabelData5,
			// validationMap1));
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList5) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData5) {
				tableData.append("<tr>\n");
				List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository.getAuditConstantsEntityList(
						AuditConstants.PROGRAMNAME_5G_CBAND, tdData.get("pod-type").trim(),
						tdData.get("interface-name").trim());
				String mtu = "";
				if (!ObjectUtils.isEmpty(auditConstantsList)) {
					mtu = auditConstantsList.get(0).getParameterValue().trim();
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("mtu")) {
						if (mtu.equals(value)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue6.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + " mtu : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// htmlContent.append(createHtmltableDSS(headerList6, entry6, tabelData6,
			// validationMap1));
			
			
			String mh1Code = "";
			mh1Code = getMH1IpForValidation(fullOutputLog, XmlCommandsConstants.CBAND_VDU_MH1IPFETCH,
					enbId, dbcollectionFileName, runTestEntity);
			int mh1Value=0;
			if(NumberUtils.isNumber(mh1Code)) {
				mh1Value=Integer.parseInt(mh1Code);
				mh1Value++;
			}
			if(!mh1Code.isEmpty()) {
			mh1Code=String.valueOf(mh1Value);
			}
			String ipMh1="";
			if(mh1Code.length()==1) {
			 ipMh1="fd00:4888:20:520:0:406:0:40"+mh1Code;
			}else if(mh1Code.length()==2) {
			ipMh1="fd00:4888:20:520:0:406:0:4"+mh1Code;
			}else {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(202, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						XmlCommandsConstants.CBAND_VDU_MH1IPFETCH + " : No Data From vdu.conf File");	
			}
			
			htmlContent.append(
					"<tr><td colspan=" + headerList6.size() + " bgcolor=#EEEEEE><b>" + entry6 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList6) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData6) {
				tableData.append("<tr>\n");
				List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository.getAuditConstantsEntityList(
						AuditConstants.PROGRAMNAME_5G_CBAND, tdData.get("pod-type").trim() + "_ip",
						tdData.get("interface-name").trim());
				String ip = "::";
				if (!ObjectUtils.isEmpty(auditConstantsList)) {
					String[] ipList = auditConstantsList.get(0).getParameterValue().trim().split(",");
					for (String ipAddr : ipList) {
						if (compareIPAddr(ipAddr.trim(), tdData.get("ip").trim())) {
							ip = ipAddr.trim();
							break;
						}
					}
				} else if (tdData.get("pod-type").equalsIgnoreCase("dpp")
						&& tdData.get("interface-name").equalsIgnoreCase("mh0")) {
					ip = f1uIpAddr;
				} else if (tdData.get("pod-type").equalsIgnoreCase("dip")
						&& tdData.get("interface-name").equalsIgnoreCase("mh0")) {
					ip = f1cIpAddr;
				}
				if (tdData.get("pod-type").equalsIgnoreCase("dpp")
						&& tdData.get("interface-name").equalsIgnoreCase("mh1")) {
					if (tdData.get("ip").equalsIgnoreCase("fd00:4888:20:520:0:406:0:400")) {
						ip = "fd00:4888:20:520:0:406:0:400";
					}else if(!(mh1Code.length()==1 || mh1Code.length()==2)) {
						ip = tdData.get("ip").trim();
					}else {
						ip = ipMh1;
					}
				}
				boolean ipMatch = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("ip") ) {
						if (compareIPAddr(ip, value.trim())) {
							tableData.append("<td align=center>" + value + "</td>\n");
							ipMatch = true;
						} else {
							auditIssue7.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + " ip : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("mplane")) {
						if (!value.equalsIgnoreCase("true") && tdData.get("interface-name").equalsIgnoreCase("fh0")
								&& tdData.get("pod-type").equalsIgnoreCase("rmp") && ipMatch) {
							auditIssue29.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + "ip : " + tdData.get("ip") + "mplane : "
									+ tdData.get("mplane") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else if (!value.equalsIgnoreCase("true")
								&& tdData.get("interface-name").equalsIgnoreCase("fh1")
								&& tdData.get("pod-type").equalsIgnoreCase("rmp") && ipMatch) {
							auditIssue29.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + "ip : " + tdData.get("ip") + "mplane : "
									+ tdData.get("mplane") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else if (!value.equalsIgnoreCase("true")
								&& tdData.get("interface-name").equalsIgnoreCase("fh2")
								&& tdData.get("pod-type").equalsIgnoreCase("rmp") && ipMatch) {
							auditIssue29.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + "ip : " + tdData.get("ip") + "mplane : "
									+ tdData.get("mplane") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {

							tableData.append("<td align=center >" + value + "</td>\n");
						}
					} else if (key.equals("f1")) {
						if (!value.equalsIgnoreCase("true") && tdData.get("interface-name").equalsIgnoreCase("mh0")
								&& tdData.get("pod-type").equalsIgnoreCase("dpp") && ipMatch) {
							auditIssue29.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + "ip : " + tdData.get("ip") + "f1 : "
									+ tdData.get("f1") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else if (!value.equalsIgnoreCase("true")
								&& tdData.get("interface-name").equalsIgnoreCase("mh0")
								&& tdData.get("pod-type").equalsIgnoreCase("dip") && ipMatch) {
							auditIssue29.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + "ip : " + tdData.get("ip") + "f1 : "
									+ tdData.get("f1") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {

							tableData.append("<td align=center >" + value + "</td>\n");
						}
					} else if (key.equals("carrier-aggregation")) {
						if (!value.equalsIgnoreCase("true") && tdData.get("interface-name").equalsIgnoreCase("mh1")
								&& tdData.get("pod-type").equalsIgnoreCase("dpp") && ipMatch) {
							auditIssue29.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + "ip : " + tdData.get("ip")
									+ "carrier-aggregation : " + tdData.get("carrier-aggregation") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center >" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}

				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// htmlContent.append(createHtmltableDSS(headerList7, entry7, tabelData7,
			// validationMap1));
			htmlContent.append(
					"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList7) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData7) {
				oranidSet1.add(tdData.get("o-ran-ru-id").trim());
				tableData.append("<tr>\n");
				String oruid = "";
				String supportcellnum = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsday2) {
						if (ciqData.getCiqMap().containsKey("oruId") && ciqData.getCiqMap().get("oruId")
								.getHeaderValue().trim().equals(tdData.get("o-ran-ru-id").trim())) {
							oruid = tdData.get("o-ran-ru-id").trim();
							if (ciqData.getCiqMap().containsKey("oruSupportCellNumber")) {
								supportcellnum = ciqData.getCiqMap().get("oruSupportCellNumber").getHeaderValue()
										.trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("support-cell-number") || key.equals("nr-support-cell-number")) {
						if (value.equals(supportcellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if ((neVersion.contains("21.D")) || (neVersion.contains("22.A")) || (neVersion.contains("22.C"))) {
								auditIssue11.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id")
										+ " nr-support-cell-number : " + value + "\n");
							} else {
								auditIssue11.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id")
										+ " support-cell-number : " + value + "\n");
							}
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			int  radioSum=0;
			HashMap<String,Double> radioType=new HashMap<>(); 
			for (LinkedHashMap<String, String> tdData9 : tabelData9) {
				if (tdData9.get("dl-antenna-count").contains("8tx")
						|| tdData9.get("dl-antenna-count").contains("2tx")) {
					radioType.put(tdData9.get("cell-identity"), 46.0);
					radioSum++;
				} else {
					radioType.put(tdData9.get("cell-identity"), 34.9);
					radioSum = radioSum + 2;
				}
			}
			if (tabelData8.size() != radioSum) {
				auditIssue31.append("For 64T64R Radio Each MMU should have 2 CU-Plane interfaces.For 8T8R/2T2T Radio Each MMU should have 1 CU-Plane interfaces." + "\n");
			} 
			
			htmlContent.append(
					"<tr><td colspan=" + headerList8.size() + " bgcolor=#EEEEEE><b>" + entry8 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList8) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData8) {
				oranidSet.add(tdData.get("o-ran-ru-id").trim());
				tableData.append("<tr>\n");
				String oruid = "";
				String supportcellnum = "";
				String connectedPod = "";
				String connectedRuPort = "";
				String vlanid = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsday2) {
						if (ciqData.getCiqMap().containsKey("oruId") && ciqData.getCiqMap().get("oruId")
								.getHeaderValue().trim().equals(tdData.get("o-ran-ru-id").trim())) {
							oruid = tdData.get("o-ran-ru-id").trim();
							if (ciqData.getCiqMap().containsKey("oruSupportCellNumber")) {
								supportcellnum = ciqData.getCiqMap().get("oruSupportCellNumber").getHeaderValue()
										.trim();
							}
							if (ciqData.getCiqMap().containsKey("POD_PORT_ID")) {
								connectedPod = ciqData.getCiqMap().get("POD_PORT_ID").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("RU_PORT_ID")) {
								connectedRuPort = ciqData.getCiqMap().get("RU_PORT_ID").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("vlanId")) {
								vlanid = ciqData.getCiqMap().get("vlanId").getHeaderValue().trim();
							}
						}
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("o-ran-ru-id")) {
						if (value.equals(oruid) && connectedRuPort.contains(tdData.get("connected-ru-port-id"))
								&& connectedPod.contains(tdData.get("connected-pod-port-id"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue30.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id")
										+ " connected-pod-port-id : " + tdData.get("connected-pod-port-id")
										+ " connected-ru-port-id : " + tdData.get("connected-ru-port-id") + "\n");
								entryPresent = true;
							}
						}
					} else if (key.equals("support-cell-number") || key.equals("nr-support-cell-number")) {
						if (value.equals(supportcellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								if ((neVersion.contains("21.D")) || (neVersion.contains("22.A")) || (neVersion.contains("22.C"))) {
									auditIssue13.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id")
											+ " connected-pod-port-id : " + tdData.get("connected-pod-port-id")
											+ " connected-ru-port-id : " + tdData.get("connected-ru-port-id")
											+ " nr-support-cell-number : " + value + "\n");
								} else {
									auditIssue13.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id")
											+ " connected-pod-port-id : " + tdData.get("connected-pod-port-id")
											+ " connected-ru-port-id : " + tdData.get("connected-ru-port-id")
											+ " support-cell-number : " + value + "\n");
								}
								entryPresent = true;
							}
						}
					} else if (key.equals("connected-pod-port-id")) {
						if (connectedPod.contains(value)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue13.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id")
										+ " connected-pod-port-id : " + tdData.get("connected-pod-port-id")
										+ " connected-ru-port-id : " + tdData.get("connected-ru-port-id")
										+ " nr-support-cell-number : " + tdData.get("nr-support-cell-number") + "\n");
								entryPresent = true;
							}
						}
					} else if (key.equals("connected-ru-port-id")) {
						if (connectedRuPort.contains(value)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue13.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id")
										+ " connected-pod-port-id : " + tdData.get("connected-pod-port-id")
										+ " connected-ru-port-id : " + tdData.get("connected-ru-port-id")
										+ " nr-support-cell-number : " + tdData.get("nr-support-cell-number") + "\n");
								entryPresent = true;
							}
						}
					} else if (key.equals("vlan-id")) {
						if (value.equals(vlanid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue12.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id")
									+ " connected-pod-port-id : " + tdData.get("connected-pod-port-id")
									+ " connected-ru-port-id : " + tdData.get("connected-ru-port-id") + " vlan-id : "
									+ tdData.get("vlan-id") + "\n");

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// htmlContent.append(createHtmltableDSS(headerList9, entry9, tabelData9,
			// validationMap1));
			htmlContent.append(
					"<tr><td colspan=" + headerList9.size() + " bgcolor=#EEEEEE><b>" + entry9 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList9) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData9) {
				tableData.append("<tr>\n");
				String cellid = "";
				String dlantennaCount = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsday2) {
						if (ciqData.getCiqMap().containsKey("cell_identity") && ciqData.getCiqMap().get("cell_identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("dlAntennaCount")) {
								dlantennaCount = ciqData.getCiqMap().get("dlAntennaCount").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("dl-antenna-count")) {
						if (value.equals(dlantennaCount)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue15.append("cell-identity : " + tdData.get("cell-identity")
									+ " dl-antenna-count : " + tdData.get("dl-antenna-count") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// htmlContent.append(createHtmltableDSS(headerList10, entry10, tabelData10,
			// validationMap1));
			htmlContent.append(
					"<tr><td colspan=" + headerList10.size() + " bgcolor=#EEEEEE><b>" + entry10 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList10) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData10) {
				tableData.append("<tr>\n");
				String cellid = "";
				String ulantennaCount = "";
				String rxpath = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsday2) {
						if (ciqData.getCiqMap().containsKey("cell_identity") && ciqData.getCiqMap().get("cell_identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("ulAntennaCount")) {
								ulantennaCount = ciqData.getCiqMap().get("ulAntennaCount").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("numberRxPathsRU")) {
								rxpath = ciqData.getCiqMap().get("numberRxPathsRU").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("ul-antenna-count")) {
						if (value.equals(ulantennaCount)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue16.append("cell-identity : " + tdData.get("cell-identity")
									+ " ul-antenna-count : " + tdData.get("ul-antenna-count") + "\n");
						}
					} else if (key.equals("number-of-rx-paths-per-ru")) {
						if (value.equals(rxpath)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue17.append("cell-identity : " + tdData.get("cell-identity")
									+ " number-of-rx-paths-per-ru : " + tdData.get("number-of-rx-paths-per-ru") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// htmlContent.append(createHtmltableDSS(headerList11, entry11, tabelData11,
			// validationMap1));
			htmlContent.append(
					"<tr><td colspan=" + headerList11.size() + " bgcolor=#EEEEEE><b>" + entry11 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList11) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData11) {
				tableData.append("<tr>\n");
				String cellid = "";
				String nrPci = "";
				String arfcndl = "";
				String arfcnul = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsday2) {
						if (ciqData.getCiqMap().containsKey("cell_identity") && ciqData.getCiqMap().get("cell_identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("nrDl_Arfcn")) {
								arfcndl = ciqData.getCiqMap().get("nrDl_Arfcn").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("nrUl_Arfcn")) {
								arfcnul = ciqData.getCiqMap().get("nrUl_Arfcn").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("nr_PCI")) {
								nrPci = ciqData.getCiqMap().get("nr_PCI").getHeaderValue().trim();
							}
						}
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("nr-physical-cell-id")) {
						if (value.equals(nrPci)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue14.append("cell-identity : " + tdData.get("cell-identity")
										+ " nr-physical-cell-id : " + tdData.get("nr-physical-cell-id")
										+ " nr-arfcn-dl: " + tdData.get("nr-arfcn-dl") + " nr-arfcn-ul : "
										+ tdData.get("nr-arfcn-ul") + "\n");
								entryPresent = true;
							}
						}
					} else if (key.equals("nr-arfcn-dl")) {
						if (value.equals(arfcndl)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue14.append("cell-identity : " + tdData.get("cell-identity")
										+ " nr-physical-cell-id : " + tdData.get("nr-physical-cell-id")
										+ " nr-arfcn-dl: " + tdData.get("nr-arfcn-dl") + " nr-arfcn-ul : "
										+ tdData.get("nr-arfcn-ul") + "\n");
								entryPresent = true;
							}
						}
					} else if (key.equals("nr-arfcn-ul")) {
						if (value.equals(arfcnul)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue14.append("cell-identity : " + tdData.get("cell-identity")
										+ " nr-physical-cell-id : " + tdData.get("nr-physical-cell-id")
										+ " nr-arfcn-dl: " + tdData.get("nr-arfcn-dl") + " nr-arfcn-ul : "
										+ tdData.get("nr-arfcn-ul") + "\n");
								entryPresent = true;
							}
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// htmlContent.append(createHtmltableDSS(headerList12, entry12, tabelData12,
			// validationMap1));
			htmlContent.append(
					"<tr><td colspan=" + headerList12.size() + " bgcolor=#EEEEEE><b>" + entry12 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList12) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData12) {
				tableData.append("<tr>\n");
				String cellid = "";
				String cellnum = "";
				String cellPathType = "";
				String adminState = "locked";
				String operationalState = "disabled";
				String activationstate = "activated";
				Double power1 = 0.0;
				String power2=tdData.get("power");
				if(NumberUtils.isNumber(power2)) {
					power1=Double.parseDouble(power2);
				}
				if (!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsday2) {
						if (ciqData.getCiqMap().containsKey("cell_identity") && ciqData.getCiqMap().get("cell_identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("cellNum")) {
								cellnum = ciqData.getCiqMap().get("cellNum").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("Cell_Path_Type")) {
								cellPathType = ciqData.getCiqMap().get("Cell_Path_Type").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("cell-num")) {
						if (value.equals(cellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue25.append("cell-identity : " + tdData.get("cell-identity") + " cell-num : "
									+ tdData.get("cell-num") + "\n");
						}
					} else if (key.equals("cell-path-type")) {
						if (value.equals(cellPathType)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue18.append("cell-identity : " + tdData.get("cell-identity") + " cell-path-type : "
									+ tdData.get("cell-path-type") + "\n");

						}
					} else if (key.equals("administrative-state")) {
						if (value.equals(adminState)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue26.append("cell-identity : " + tdData.get("cell-identity")
									+ " administrative-state : " + tdData.get("administrative-state") + "\n");
						}
					} else if (key.equals("operational-state")) {
						if (value.equals(operationalState)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue27.append("cell-identity : " + tdData.get("cell-identity")
									+ " operational-state : " + tdData.get("operational-state") + "\n");
						}
					} else if (key.equals("activation-state")) {
						if (value.equals(activationstate)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue28.append("cell-identity : " + tdData.get("cell-identity")
									+ " activation-state : " + tdData.get("activation-state") + "\n");
						}
					}else if (key.equals("power")) {
						Double power3=0.0;
						if(radioType.containsKey(tdData.get("cell-identity"))) {
							 power3=radioType.get(tdData.get("cell-identity"));
						}
						if (power1<=power3) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue32.append("cell-identity : " + tdData.get("cell-identity")
									+ " power : " + tdData.get("power") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// validationMap1.put("alarm-type", Arrays.asList("service-off"));
			// htmlContent.append(createHtmltableDSS(headerList13, entry13, tabelData13,
			// validationMap1));

			boolean mmuptp1 = true;
			boolean mmuptp2 = true;
			boolean mmuptp3 = true;

			Set<String> locationSet = new HashSet<>();
			for (LinkedHashMap<String, String> tdData : tabelData13) {
				if (tdData.get("alarm-type").equals("port-down")) {
					if (tdData.get("location").contains("FRONTHAUL_PORT[0]")) {
						locationSet.add("00");
					} else if (tdData.get("location").contains("FRONTHAUL_PORT[1]")) {
						locationSet.add("10");
					} else if (tdData.get("location").contains("FRONTHAUL_PORT[2]")) {
						locationSet.add("20");
					}
				}
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList13.size() + " bgcolor=#EEEEEE><b>" + entry13 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList13) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData13) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (value.equals("service-off")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equals("port-down")
								&& checkportDownAlarmEntries(tdData.get("location"), oranidSet)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue20.append("alarm-type : " + tdData.get("alarm-type") + " probable-cause : "
									+ tdData.get("probable-cause") + " specific-problem : "
									+ tdData.get("specific-problem") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("location") && tdData.get("alarm-type").equals("port-down")
							&& putMplaneipv6ErrorCband(tabelData15, tdData, locationSet, runTestEntity, enbId)) {
						if (tdData.get("location").contains("FRONTHAUL_PORT[0]")) {
							mmuptp1 = false;
						} else if (tdData.get("location").contains("FRONTHAUL_PORT[1]")) {
							mmuptp2 = false;
						} else if (tdData.get("location").contains("FRONTHAUL_PORT[2]")) {
							mmuptp3 = false;
						}
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// validationMap1 = new LinkedHashMap<>();
			// validationMap1.put("sync-state", Arrays.asList("LOCKED"));
			// htmlContent.append(createHtmltableDSS(headerList14, entry14, tabelData14,
			// validationMap1));

			htmlContent.append(
					"<tr><td colspan=" + headerList14.size() + " bgcolor=#EEEEEE><b>" + entry14 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList14) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData14) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sync-state")) {
						if (value.equals("LOCKED")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if (tdData.get("o-ran-ru-id").trim().equals("0")) {
								auditIssue2.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " sync-state : "
										+ tdData.get("sync-state") + "\n");
							} else if (tdData.get("o-ran-ru-id").trim().equals("1")) {
								auditIssue21.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " sync-state : "
										+ tdData.get("sync-state") + "\n");
							} else if (tdData.get("o-ran-ru-id").trim().equals("2")) {
								auditIssue23.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " sync-state : "
										+ tdData.get("sync-state") + "\n");
							}
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			List<String> ipList = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData15) {
				if (compareIPAddr(tdData.get("mplane-ipv6").trim(), tdData.get("mplane-ipv6").trim())) {
					ipList.add(tdData.get("mplane-ipv6"));
				}
			}
			// validationMap1 = new LinkedHashMap<>();
			// validationMap1.put("mplane-ipv6", ipList);
			// htmlContent.append(createHtmltableDSS(headerList15, entry15, tabelData15,
			// validationMap1));

			htmlContent.append(
					"<tr><td colspan=" + headerList15.size() + " bgcolor=#EEEEEE><b>" + entry15 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList15) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData15) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("mplane-ipv6")) {
						if (ipList.contains(value)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if (tdData.get("o-ran-ru-id").trim().equals("0")) {
								auditIssue3.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " mplane-ipv6 : "
										+ tdData.get("mplane-ipv6") + "\n");
							} else if (tdData.get("o-ran-ru-id").trim().equals("1")) {
								auditIssue22.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " mplane-ipv6 : "
										+ tdData.get("mplane-ipv6") + "\n");
							} else if (tdData.get("o-ran-ru-id").trim().equals("2")) {
								auditIssue24.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " mplane-ipv6 : "
										+ tdData.get("mplane-ipv6") + "\n");
							}

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			auditIssueAll.append(auditIssue7);
			auditIssueAll.append(auditIssue8);
			auditIssueAll.append(auditIssue9);
			auditIssueAll.append(auditIssue10);
			auditIssueAll.append(auditIssue11);
			auditIssueAll.append(auditIssue12);
			auditIssueAll.append(auditIssue13);
			auditIssueAll.append(auditIssue14);
			auditIssueAll.append(auditIssue15);
			auditIssueAll.append(auditIssue16);
			auditIssueAll.append(auditIssue17);
			auditIssueAll.append(auditIssue18);
			auditIssueAll.append(auditIssue19);
			auditIssueAll.append(auditIssue20);
			auditIssueAll.append(auditIssue21);
			auditIssueAll.append(auditIssue22);
			auditIssueAll.append(auditIssue23);
			auditIssueAll.append(auditIssue24);
			auditIssueAll.append(auditIssue25);
			auditIssueAll.append(auditIssue26);
			auditIssueAll.append(auditIssue27);
			auditIssueAll.append(auditIssue28);
			auditIssueAll.append(auditIssue29);
			auditIssueAll.append(auditIssue30);
			auditIssueAll.append(auditIssue31);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData6, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData7, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData8, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData9, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData10, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData11, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData12, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData13, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData14, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData15, auditIssueAll);

			if (auditIssue4.length() != 0 || auditIssue3.length() != 0) {
				mmuptp1 = false;
			}
			if (auditIssue4.length() != 0 || auditIssue22.length() != 0) {
				mmuptp2 = false;
			}
			if (auditIssue4.length() != 0 || auditIssue24.length() != 0) {
				mmuptp3 = false;
			}

			if (auditIssue1.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0 && mmuptp1) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(2, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(2, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(2, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue5.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(5, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(5, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(5, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue6.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue7.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue8.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue8.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue9.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue9.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue10.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(10, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue10.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(10, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(10, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue11.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(11, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue11.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(11, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(11, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue12.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(12, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue12.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(12, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(12, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue13.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(13, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue13.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(13, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(13, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue14.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue14.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue15.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue15.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue16.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue16.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue17.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue17.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue18.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue18.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue19.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue19.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue20.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(20, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue20.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(20, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(20, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue21.length() != 0 && mmuptp2) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(38, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue21.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(38, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(38, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue22.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(39, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue22.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(39, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(39, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue23.length() != 0 && mmuptp3) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue23.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue24.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue24.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue25.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue25.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue26.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue26.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue27.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue27.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue28.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue28.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue29.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(79, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue29.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(79, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(79, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue30.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(80, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue30.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(80, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(80, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue31.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(81, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue31.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(81, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(81, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue32.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(86, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue32.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(86, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(86, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	
	
	private String getsoftwareConfig(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		String softwareVersion = "";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("ne-id");
			headerList1.add("flavor-id");
			headerList1.add("ems-ip-address");
			headerList1.add("software-version");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("config-info");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.containsKey("software-version")) {
					softwareVersion = tdData.get("software-version");
				}

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return softwareVersion;
	}

	private String getMH1IpForValidation(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		
		String ip="";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			outputLog = StringUtils.substringAfter(outputLog, "clusters");
			outputLog = StringUtils.substringBefore(outputLog, "cluster");
			outputLog = StringUtils.substringAfter(outputLog, "name");
			outputLog =outputLog.trim().replaceAll("[^a-zA-Z0-9]", "");
			if (outputLog != null && outputLog.length() >= 2) { 
			ip=outputLog.substring(outputLog.length()-2);
			}
           
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			return ip;
		}
		return ip;
	}

	public String getInvocationId(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		String invocationId = "";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					invocationId = getXmlElementData(element, "invocation-id").trim();
				}
			}
			
			
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return invocationId;
	}
	
	
	public StringBuilder get4GOcnsTest(String fullOutputLog, String command, String enbId, String dbcollectionFileName, 
			NetworkConfigEntity networkConfigEntity, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			List<CIQDetailsModel> listCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			StringBuilder htmlContentTxpower = new StringBuilder();
			String diff = "3.00";
			List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_4G_USM_LIVE, AuditConstants.OCNS_TEST_RSSIDIFF);
			
			if(!ObjectUtils.isEmpty(auditConstantsList)) {
				diff = auditConstantsList.get(0).getParameterValue();
			}
			String pathDiff = "3.00";
			List<AuditConstantsEntity> auditConstantsList1 = auditConstantsRepository.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_4G_USM_LIVE, AuditConstants.OCNS_TEST_PATHDIFF);
			
			if(!ObjectUtils.isEmpty(auditConstantsList1)) {
				pathDiff = auditConstantsList1.get(0).getParameterValue();
			}
			
			htmlContentTxpower.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContentTxpower.append("<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>" + "Test Vswr And Tx-Power - OCNS Test"
					+ "</b></td></tr>\n");
			htmlContentTxpower.append("</table>\n");

			StringBuilder htmlContentRssi = new StringBuilder();
			/*htmlContentRssi.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContentRssi.append(
					"<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>" + "Test Rssi - OCNS Test" + "</b></td></tr>\n");
			htmlContentRssi.append("</table>\n");*/

			StringBuilder txPowerAuditIssue = new StringBuilder();
			StringBuilder rssiAuditIssue = new StringBuilder();
			StringBuilder rssiAuditIssue2 = new StringBuilder();
			StringBuilder vswrAuditIssue2 = new StringBuilder();
			if (!ObjectUtils.isEmpty(listCiqDetails)) {
				for (CIQDetailsModel ciqDetails : listCiqDetails) {
					String cellnum = "";
					String lcccard = "";
					String crpiportno = "";
					String outputPower = "";
					String bandName = "";
					String bandwidth = "";
					String txDiversity = "";
					String rssiValue = "";
					if (ciqDetails.getCiqMap().containsKey("Cell_ID") && ciqDetails.getCiqMap().containsKey("lCCCard")
							&& ciqDetails.getCiqMap().containsKey("CRPIPortID")) {
						cellnum = ciqDetails.getCiqMap().get("Cell_ID").getHeaderValue().trim();
						lcccard = ciqDetails.getCiqMap().get("lCCCard").getHeaderValue().trim();
						crpiportno = ciqDetails.getCiqMap().get("CRPIPortID").getHeaderValue().trim();
					}
					if (ciqDetails.getCiqMap().containsKey("Output_Power(dBm)")) {
						outputPower = ciqDetails.getCiqMap().get("Output_Power(dBm)").getHeaderValue().trim();
					}
					if (ciqDetails.getCiqMap().containsKey("BandName")
							&& ciqDetails.getCiqMap().containsKey("Bandwidth(MHz)")
							&& ciqDetails.getCiqMap().containsKey("Tx_Diversity")) {
						bandName = ciqDetails.getCiqMap().get("BandName").getHeaderValue().trim();
						bandwidth = ciqDetails.getCiqMap().get("Bandwidth(MHz)").getHeaderValue().trim();
						txDiversity = ciqDetails.getCiqMap().get("Tx_Diversity").getHeaderValue().trim();
					}
					rssiValue = getrssiValue(bandName, bandwidth);

					if (NumberUtils.isNumber(cellnum) && NumberUtils.isNumber(lcccard)
							&& NumberUtils.isNumber(crpiportno)) {
						String commandModified = "Cell-Num : " + cellnum;
						JSONObject txPowerResult = get4GtxpowerHtmlContent(fullOutputLog, commandModified, enbId,
								dbcollectionFileName, outputPower, cellnum,bandName,txDiversity);
						if (txPowerResult.containsKey("htmlContent")) {
							htmlContentTxpower.append(txPowerResult.get("htmlContent").toString());
						}

						if (txPowerResult.containsKey("auditIssue")) {
							txPowerAuditIssue.append(txPowerResult.get("auditIssue").toString());
						}
						if (txPowerResult.containsKey("vswrAuditIssue")) {
							vswrAuditIssue2.append(txPowerResult.get("vswrAuditIssue").toString());
						}

						/*JSONObject rssiResult = get4GrssiHtmlContent(fullOutputLog, commandModified, enbId,
								dbcollectionFileName, rssiValue, cellnum, bandName, txDiversity,diff,pathDiff);
						if (rssiResult.containsKey("htmlContent")) {
							htmlContentRssi.append(rssiResult.get("htmlContent").toString());
						}

						if (rssiResult.containsKey("auditIssue")) {
							rssiAuditIssue.append(rssiResult.get("auditIssue").toString());
						}
						if (rssiResult.containsKey("auditIssue1")) {
							rssiAuditIssue2.append(rssiResult.get("auditIssue1").toString());
						}*/

					}
				}
			}
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

//			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1);
			
			if (txPowerAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(29, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), txPowerAuditIssue.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(29, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(29, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (vswrAuditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(69, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), vswrAuditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(69, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(69, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			/*if (rssiAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(30, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), rssiAuditIssue.toString());
			}
			if (rssiAuditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(48, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), rssiAuditIssue2.toString());
			}*/
			htmlContent.append(htmlContentTxpower);
			//htmlContent.append(htmlContentRssi);

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	
	@SuppressWarnings("unchecked")
	public JSONObject get4GtxpowerHtmlContent(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, String outputPower, String cellnum, String bandName, String txDiversity) {
		JSONObject result = new JSONObject();
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, XmlCommandsConstants.AUDIT_4G_CHECK_TXPOWER + cellnum + "cellnum");
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("path");
			headerList1.add("tx-rf-power");
			headerList1.add("vswr");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("path-control");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>Cell is Locked</td></tr>\n");
				htmlContent.append("</table>");
				result.put("htmlContent", htmlContent);
				return result;
			}								
			htmlContent.append(
					"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			List<String> pathList1 = getPathList(bandName, txDiversity);
			trimTabledataString2(tabelData1, pathList1, "path");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			
			Double celltxPower = 0.0;
			if (NumberUtils.isNumber(outputPower)) {
				celltxPower = Double.parseDouble(outputPower);
			}
			StringBuilder auditIssue = new StringBuilder();
			StringBuilder  vswrAuditIssue =new StringBuilder();
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					
					if ("tx-rf-power".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double txPower = Double.parseDouble(resultTableData.getValue());

							if (celltxPower + 2.0 >= txPower && celltxPower - 2.0 <= txPower) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								auditIssue.append("connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id") + " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path") + " tx-rf-power : " + tdData.get("tx-rf-power") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n");
							}
						} else{
							auditIssue.append("connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id") + " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path") + " tx-rf-power : " + tdData.get("tx-rf-power") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n");
						}

					} else if ("vswr".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double vswr = Double.parseDouble(resultTableData.getValue());

							if (vswr <= 1.5) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								vswrAuditIssue.append("connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id") + " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path") + " vswr : " + tdData.get("vswr") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n");
							}
						} else{
							vswrAuditIssue.append("connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id") + " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path") + " vswr : " + tdData.get("vswr") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n");
						}

					}else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}					

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			if(auditIssue.length()!=0) {
				result.put("auditIssue", auditIssue);
			}
			if(vswrAuditIssue.length()!=0) {
				result.put("vswrAuditIssue", vswrAuditIssue);
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		result.put("htmlContent", htmlContent);
		return result;
	}
	
	@SuppressWarnings("unchecked")
	public JSONObject get4GrssiHtmlContent(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, String rssiValue, String cellnum, String bandName, String txDiversity, String diff, String pathDiff) {
		JSONObject result = new JSONObject();
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog,
					XmlCommandsConstants.AUDIT_4G_CHECK_RSSI + cellnum + "cellnum");
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("path");
			headerList1.add("carrier-index");
			headerList1.add("carrier-rssi");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			tabelData2 = getCarrierInfo(fullOutputLog, XmlCommandsConstants.AUDIT_4G_RSSIIMBALANCE, enbId,
					dbcollectionFileName);
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("path-control");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("carrier-control");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
										}
									}
								}
							}
						}
					}

				}
			}
			if (tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				result.put("htmlContent", htmlContent);
				return result;
			}
            
			String carrierID = getCellCarrierMapping(tabelData2, cellnum);
			List<String> pathList1 = getPathList(bandName, txDiversity);
			Set<String> gnodebIdset = new HashSet<>();
			gnodebIdset.add(carrierID);
			trimTabledataString1(tabelData1, gnodebIdset, "carrier-index");

			trimTabledataString2(tabelData1, pathList1, "path");
			headerList1.add("rssi-imbalance");

			for (LinkedHashMap<String, String> tdData2 : tabelData1) {
				tdData2.put("rssi-imbalance", "-");
			}
			htmlContent.append(
					"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			List<String> pathList = getPathList(bandName, txDiversity);

			Double rssi = 0.0;
			if (NumberUtils.isNumber(rssiValue)) {
				rssi = Double.parseDouble(rssiValue);
			}
			Double rssicomp = 3.0;
			if (NumberUtils.isNumber(diff)) {
				rssicomp = Double.parseDouble(diff);
			}
			Double pathDiff1 = 3.0;
			if (NumberUtils.isNumber(pathDiff)) {
				pathDiff1 = Double.parseDouble(pathDiff);
			}
			StringBuilder auditIssue = new StringBuilder();
			StringBuilder auditIssue1 = new StringBuilder();

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					if ("carrier-rssi".equalsIgnoreCase(resultTableData.getKey())
							&& pathList.contains(tdData.get("path").trim())) {

						if (NumberUtils.isNumber(resultTableData.getValue())) {
							Double carrierRssi = Double.parseDouble(resultTableData.getValue());

							if ((rssi - carrierRssi) > rssicomp || (rssi - carrierRssi) < -rssicomp) {
								auditIssue.append(
										"connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id")
												+ " connected-digital-unit-port-id : "
												+ tdData.get("connected-digital-unit-port-id") + " path : "
												+ tdData.get("path") + " carrier-index : " + tdData.get("carrier-index")
												+ " carrier-rssi : " + tdData.get("carrier-rssi") + "\n");
								tableData.append(
										"<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
							} else {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								}
						} else {
							auditIssue.append(
									"connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id : "
											+ tdData.get("connected-digital-unit-port-id") + " path : "
											+ tdData.get("path") + " carrier-index : " + tdData.get("carrier-index")
											+ " carrier-rssi : " + tdData.get("carrier-rssi") + "\n");
							tableData.append(
									"<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						}

					} else if ("path".equalsIgnoreCase(resultTableData.getKey())
							&& pathList.contains(tdData.get("path").trim())) {

						if (NumberUtils.isNumber(resultTableData.getValue())
								&& NumberUtils.isNumber(tdData.get("carrier-rssi"))) {
							Double carrierRssi1 = Double.parseDouble(tdData.get("carrier-rssi"));
							JSONObject rssIimb = getRssiImbalanceaac(tabelData1, carrierRssi1, tdData.get("path"),
									enbId,pathDiff1);
							if (rssIimb.containsKey("Status") && rssIimb.get("Status").equals("fail")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
										+ "</td>\n");
								if (rssIimb.containsKey("auditIssuePathImbalance")) {
									auditIssue1.append(rssIimb.get("auditIssuePathImbalance"));
								}
							} else {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							auditIssue1.append(
									"connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id : "
											+ tdData.get("connected-digital-unit-port-id") + " path : "
											+ tdData.get("path") + " carrier-index : " + tdData.get("carrier-index")
											+ " carrier-rssi : " + tdData.get("carrier-rssi") + "\n");
							tableData.append(
									"<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						}

					} else if ("rssi-imbalance".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(tdData.get("carrier-rssi"))
								&& NumberUtils.isNumber(tdData.get("carrier-rssi"))) {
							Double carrierRssi1 = Double.parseDouble(tdData.get("carrier-rssi"));
							JSONObject rssIimb2 = getRssiImbalanceaacpath(tabelData1, carrierRssi1, tdData.get("path"),
									enbId,pathDiff1);
							if (rssIimb2.containsKey("Status") && rssIimb2.get("Status").equals("fail")) {
								tableData.append(
										"<td align=center bgcolor ='#fa8c8c'>" + rssIimb2.get("pathIssue") + "</td>\n");

							} else {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							auditIssue1.append(
									"connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id : "
											+ tdData.get("connected-digital-unit-port-id") + " path : "
											+ tdData.get("path") + " carrier-index : " + tdData.get("carrier-index")
											+ " carrier-rssi : " + tdData.get("carrier-rssi") + "\n");
							tableData.append(
									"<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						}

					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			if (auditIssue.length() != 0) {
				result.put("auditIssue", auditIssue);
			}
			if (auditIssue1.length() != 0) {
				result.put("auditIssue1", auditIssue1);
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		result.put("htmlContent", htmlContent);
		return result;
	}
	@SuppressWarnings("unchecked")
	private JSONObject getRssiImbalanceaacpath(List<LinkedHashMap<String, String>> tabelData1, Double carrierRssi,
			String string, String enbId, Double pathDiff1) {

		StringBuilder pathIssue = new StringBuilder();
		JSONObject result = new JSONObject();
		try {
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (NumberUtils.isNumber(tdData.get("carrier-rssi")) && NumberUtils.isNumber(tdData.get("path"))) {
					Double carrierRssi1 = Double.parseDouble(tdData.get("carrier-rssi").trim());
					String path1 = tdData.get("path").trim();

					if (string.trim().contains("1")
							&& (path1.contains("2") || path1.contains("3") || path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					} else if (string.trim().contains("2") && (path1.contains("3") || path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					} else if (string.trim().contains("3") && (path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					} else if (string.trim().contains("5")
							&& (path1.contains("6") || path1.contains("7") || path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					} else if (string.trim().contains("6") && (path1.contains("7") || path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					} else if (string.trim().contains("7") && (path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					}

				}

			}
			if (pathIssue.length() != 0) {
				result.put("Status", "fail");

				result.put("pathIssue", pathIssue);
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}

		return result;
	}

	private void trimTabledataString2(List<LinkedHashMap<String, String>> tabelData, List<String> pathList1, String key) {
		try {
			List<LinkedHashMap<String,String>> deleteData = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData) {
				if(tdData.containsKey(key) && !ObjectUtils.isEmpty(pathList1)) {
					if(!pathList1.contains(tdData.get(key).replaceAll("^0+(?!$)", ""))) {
						deleteData.add(tdData);
					}
				}
			}
			
			for (LinkedHashMap<String, String> tdData : deleteData) {
				tabelData.remove(tdData);
			}
		} catch(Exception e) {
			logger.error("AuditXmlRuleServiceUtil trimTabledata() " + ExceptionUtils.getFullStackTrace(e));
		}		
	}
	private void trimTabledataString1(List<LinkedHashMap<String, String>> tabelData1, Set<String> gnodebIdset,
			String key) {
		try {
			List<LinkedHashMap<String,String>> deleteData = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if(tdData.containsKey(key) && !ObjectUtils.isEmpty(gnodebIdset)) {
					if(!gnodebIdset.contains(tdData.get(key).replaceAll("^0+(?!$)", ""))) {
						deleteData.add(tdData);
					}
				}
			}
			
			for (LinkedHashMap<String, String> tdData : deleteData) {
				tabelData1.remove(tdData);
			}
		} catch(Exception e) {
			logger.error("AuditXmlRuleServiceUtil trimTabledata() " + ExceptionUtils.getFullStackTrace(e));
		}		
	}
	private String getCellCarrierMapping(List<LinkedHashMap<String, String>> tabelData1, String cellnum) {
		String carrierInfo = "";
		try {
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("cell-number").equals(cellnum)) {
					carrierInfo = tdData.get("carrier-index");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return carrierInfo;
		}
		return carrierInfo;

	}

	private List<LinkedHashMap<String, String>> getCarrierInfo(String fullOutputLog, String command,
			String enbId, String dbcollectionFileName) {

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("carrier-index");
			headerList1.add("cell-number");

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild = (Element) inChildNode;
					NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("carrier-control-info");
							for (int l = 0; l < childNodeList2.getLength(); l++) {
								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();

									objtableData.put(header, getXmlElementData(elementchild1, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return tabelData1;
	}

	@SuppressWarnings("unchecked")
	private JSONObject getRssiImbalanceaac(List<LinkedHashMap<String, String>> tabelData1, Double carrierRssi,
			String string, String enbId, Double pathDiff1) {
		StringBuilder auditIssuePathImbalance = new StringBuilder();
		JSONObject result = new JSONObject();
		try {
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (NumberUtils.isNumber(tdData.get("carrier-rssi")) && NumberUtils.isNumber(tdData.get("path"))) {
					Double carrierRssi1 = Double.parseDouble(tdData.get("carrier-rssi").trim());
					String path1 = tdData.get("path").trim();

					if (string.trim().contains("1")
							&& (path1.contains("2") || path1.contains("3") || path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					} else if (string.trim().contains("2") && (path1.contains("3") || path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					} else if (string.trim().contains("3") && (path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					} else if (string.trim().contains("5")
							&& (path1.contains("6") || path1.contains("7") || path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					} else if (string.trim().contains("6") && (path1.contains("7") || path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1|| (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					} else if (string.trim().contains("7") && (path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					}

				}

			}
			if (auditIssuePathImbalance.length() != 0) {
				result.put("Status", "fail");
				result.put("auditIssuePathImbalance", auditIssuePathImbalance);

			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}

		return result;
	}
	
	public StringBuilder get4GAuditSdlcState(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			String entry1="hdlc-connect-state";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("hdlc-id");
			headerList1.add("antenna-line-device-state");
			headerList1.add("vendor-code");
			headerList1.add("serial-number");
			headerList1.add("antenna-line-device-id");
			headerList1.add("hdlc-address");
			headerList1.add("hdlc-connect-state");
			headerList1.add("device-type");
			headerList1.add("device-status");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("hdlc-state");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header,
									getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}
			if(tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}	
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "4GAudit_hdlc_state"
					+ "</b></td></tr>\n");
			
			StringBuilder deviceStateAuditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			 String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList1) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				StringBuilder tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData1) {
					tableData.append("<tr>\n");
					
					
					
					 for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
							if(tdData.get("hdlc-connect-state").equalsIgnoreCase("connected") &&
									resultTableData.getKey().equalsIgnoreCase("device-status") && !resultTableData.getValue().equalsIgnoreCase("configured")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>"
										+ resultTableData.getValue() + "</td>\n");
								deviceStateAuditIssue.append("hdlc-id : "+ tdData.get("hdlc-id") + " device-type : " + tdData.get("device-type")+
								" hdlc-connect-state : "+ tdData.get("hdlc-connect-state") + " device-status : " + tdData.get("device-status")
								+ "\n");					
							}  else {

								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							}
						}
						tableData.append("</tr>\n");

					}
					htmlContent.append(tableHeader);
					htmlContent.append(tableData);
					
					htmlContent.append("</table>\n");
					
					AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
							.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

					auditIssueAll.append(deviceStateAuditIssue);
					auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
					if(deviceStateAuditIssue.length() != 0) {
						audit4GSummaryService.createAudit4GSummaryEntity(31, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
								deviceStateAuditIssue.toString());
						audit4GSummaryService.createAudit4GPassFailEntity(31, runTestEntity.getId(),
								enbId.replaceAll("^0+(?!$)", ""), "fail");
					} else {
						audit4GSummaryService.createAudit4GPassFailEntity(31, runTestEntity.getId(),
								enbId.replaceAll("^0+(?!$)", ""), "pass");
					}
			
			
              } catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
				return htmlContent;
		
				
				
				
	}

	public StringBuilder get4GAuditRetAlarm(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
	        headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("antenna-line-device-id");
			headerList1.add("antenna-id");
			headerList1.add("alarm-type");
			headerList1.add("unique-id");
			
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
						NodeList childNodeList1 = element.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									
									NodeList childNodeList2= elementchild1.getElementsByTagName("antenna-line-device-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2= (Element) ChildNode2;
											
											NodeList childNodeList3= elementchild2.getElementsByTagName("ret-info");
											for (int m = 0; m < childNodeList3.getLength(); m++) {

												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3= (Element) ChildNode3;
									
							
									           
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											
											
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											
											
											
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild3, header));
											}
											
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
					
				}
			}
						
							
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");


		

          StringBuilder alarmTypeAuditIssue = new StringBuilder();
          StringBuilder auditIssueAll = new StringBuilder();
              String	tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

             tableHeader = tableHeader + "</tr>\n";
		StringBuilder	tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData1) {
			tableData.append("<tr>\n");
			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (key.equals("alarm-type")){
					if (!value.equals("-")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						alarmTypeAuditIssue.append("connected-digital-unit-board-id : "+ tdData.get("connected-digital-unit-board-id") 
						+" connected-digital-unit-port-id : "+ tdData.get("connected-digital-unit-port-id") +"alarm-type : "+ tdData.get("alarm-type") + "\n");
						
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
						
					}
				} else {
					tableData.append("<td align=center >" + value + "</td>\n");
					
				}
			}
			tableData.append("</tr>\n");

		

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			
			
            htmlContent.append("</table>\n");
            
            
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

	        auditIssueAll.append(alarmTypeAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			
           if(alarmTypeAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(32, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						alarmTypeAuditIssue.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(32, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
		}	else {
			audit4GSummaryService.createAudit4GPassFailEntity(32, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
					
			
              } catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
				return htmlContent;
		
	}
	
	public String getrssiValue(String bandName, String bandwidth){
		String rssiValue = "0";
		try {
			if(bandName.contains(AuditConstants.BANDNAME_AWS)) {
				bandName = AuditConstants.BANDNAME_AWS;
			} else if(bandName.contains(AuditConstants.BANDNAME_PCS)) {
				bandName = AuditConstants.BANDNAME_PCS;
			} else if(bandName.contains(AuditConstants.BANDNAME_LAA)) {
				bandName = AuditConstants.BANDNAME_LAA;
			} else if(bandName.contains(AuditConstants.BANDNAME_CBRS)) {
				bandName = AuditConstants.BANDNAME_CBRS;
			} else if(bandName.contains(AuditConstants.BANDNAME_700)) {
				bandName = AuditConstants.BANDNAME_700;
			} else if(bandName.contains(AuditConstants.BANDNAME_850)) {
				bandName = AuditConstants.BANDNAME_850;
			}
			
			if(bandwidth.contains("5") && !bandwidth.contains("15")) {
				bandwidth = AuditConstants.BANDWIDTH_5MHZ;
			} else if(bandwidth.contains("10")) {
				bandwidth = AuditConstants.BANDWIDTH_10MHZ;
			} else if(bandwidth.contains("15")) {
				bandwidth = AuditConstants.BANDWIDTH_15MHZ;
			} else if(bandwidth.contains("20")) {
				bandwidth = AuditConstants.BANDWIDTH_20MHZ;
			}
			
			List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_4G_USM_LIVE, bandName, bandwidth);
			
			if(!ObjectUtils.isEmpty(auditConstantsList)) {
				rssiValue = auditConstantsList.get(0).getParameterValue();
			}
			
		} catch(Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return rssiValue;	
	}
	
	public List<String> getPathList(String bandName, String txDiversity){
		List<String> pathList = new ArrayList<>();
		if(bandName.contains(AuditConstants.BANDNAME_AWS)) {
			if(txDiversity.equals("2")) {
				pathList.add("1");
				pathList.add("2");
			} else if(txDiversity.equals("4")) {
				pathList.add("1");
				pathList.add("2");
				pathList.add("3");
				pathList.add("4");
			}
		} else if(bandName.contains(AuditConstants.BANDNAME_PCS)) {
			if(txDiversity.equals("2")) {
				pathList.add("5");
				pathList.add("6");
			} else if(txDiversity.equals("4")) {
				pathList.add("5");
				pathList.add("6");
				pathList.add("7");
				pathList.add("8");
			}
		} else if(bandName.contains(AuditConstants.BANDNAME_LAA)) {
			pathList.add("1");
			pathList.add("2");
			pathList.add("3");
			pathList.add("4");
		} else if(bandName.contains(AuditConstants.BANDNAME_CBRS)) {
			pathList.add("1");
			pathList.add("2");
			pathList.add("3");
			pathList.add("4");
		} else if(bandName.contains(AuditConstants.BANDNAME_700)) {
			if(txDiversity.equals("2")) {
				pathList.add("1");
				pathList.add("2");
			} else if(txDiversity.equals("4")) {
				pathList.add("1");
				pathList.add("2");
				pathList.add("3");
				pathList.add("4");
			}
		} else if(bandName.contains(AuditConstants.BANDNAME_850)) {
			if(txDiversity.equals("2")) {
				pathList.add("5");
				pathList.add("6");
			} else if(txDiversity.equals("4")) {
				pathList.add("5");
				pathList.add("6");
				pathList.add("7");
				pathList.add("8");
			}
		}
		return pathList;
	}

	public String getCbandSourceIp(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		String sourceIp = "";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("external-interfaces");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															NodeList childNodeList7 = elementchild6
																.getElementsByTagName("ipv6-address");
															for (int f = 0; f < childNodeList7.getLength(); f++) {
																Node ChildNode7 = childNodeList7.item(f);
																if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
																	Element elementchild7 = (Element) ChildNode7;
																	
																	if(getXmlElementData(elementchild5, "pod-type").trim().equalsIgnoreCase("dpp")
																			&& getXmlElementData(elementchild6, "interface-name").trim().equalsIgnoreCase("mh0")) {
																		sourceIp = getXmlElementData(elementchild7, "ip").trim();
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			
			
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return sourceIp;
	}

	public LinkedHashMap<String,String> getCbandDestinationIp(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		LinkedHashMap<String,String> destinationIp = new LinkedHashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("vnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("vnfc");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("vnfc-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("external-interfaces");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															NodeList childNodeList7 = elementchild6
																.getElementsByTagName("ipv6-address");
															for (int f = 0; f < childNodeList7.getLength(); f++) {
																Node ChildNode7 = childNodeList7.item(f);
																if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
																	Element elementchild7 = (Element) ChildNode7;
																	
																	if(getXmlElementData(elementchild5, "vnfc-type").trim().equalsIgnoreCase("upc")) {
																		String key = "vnfc-id : " + getXmlElementData(elementchild5, "vnfc-id") + 
																				" interface-name : " + getXmlElementData(elementchild6, "interface-name");
																		destinationIp.put(key, getXmlElementData(elementchild7, "ip").trim());
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			
			
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return destinationIp;
	}

	public StringBuilder get5GCbandTwampTest(String fullOutputLog, String command, String enbId, String dbcollectionFileName, 
			NetworkConfigEntity networkConfigEntity, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>" + "F1U Interface Connectivity"  + "</b></td></tr>\n");
			htmlContent.append("</table>\n");
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			LinkedHashMap<String, String> destinationIpList = getCbandDestinationIp(fullOutputLog, XmlCommandsConstants.CBAND_F1U_DESTINATIONIP, enbId, dbcollectionFileName, networkConfigEntity);
			List<LinkedHashMap<String, String>> destinationIpListList = new ArrayList<>();
			for(Map.Entry<String, String> destinationIp : destinationIpList.entrySet()) {
				String key = destinationIp.getKey();
				String value = destinationIp.getValue();
				
				if(!compareIPAddr(value, value)) {
					continue;
				}
				JSONObject result = get5GCBandF1U(fullOutputLog, key, enbId, dbcollectionFileName, networkConfigEntity, runTestEntity);
				if(result.containsKey("htmlContent")) {
					htmlContent.append(result.get("htmlContent").toString());
				}
				if(result.containsKey("auditIssue1")) {
					auditIssue1.append(result.get("auditIssue1").toString());
				}
				if(result.containsKey("auditIssue2")) {
					auditIssue2.append(result.get("auditIssue2").toString());
				}
				if(result.containsKey("auditIssue3")) {
					auditIssue3.append(result.get("auditIssue3").toString());
				}
				if(result.containsKey("auditIssue4")) {
					auditIssue4.append(result.get("auditIssue4").toString());
				}
				if(result.containsKey("auditIssue5")) {
					auditIssue5.append(result.get("auditIssue5").toString());
				}
			}
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, destinationIpListList, auditIssueAll);
			if(auditIssue1.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(21, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue1.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(21, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(21, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue2.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(22, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue2.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(22, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(22, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue3.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(23, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue3.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(23, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(23, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue4.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(24, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue4.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(24, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(24, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue5.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(25, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue5.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(25, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			}	else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(25, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	
	}
	
	@SuppressWarnings("unchecked")
	public JSONObject get5GCBandF1U(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		JSONObject resultMap = new JSONObject();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String result = "";
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("test-id");
			headerList1.add("result-saved-time");
			headerList1.add("test-type");
			headerList1.add("result-type");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			NodeList nodeList = document.getElementsByTagName("diagnostic-test-result-list");
			for (int o = 0; o < nodeList.getLength(); o++) {
				Node ChildNode5 = nodeList.item(o);
				if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
					Element element = (Element) ChildNode5;
					result = getXmlElementData(element,"result-additional-info");
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					for(String header : headerList1) {
						objtableData.put(header, getXmlElementData(element, header));
					}
					tabelData1.add(objtableData);
					
				}
			}
			htmlContent.append(
					"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			String entry = "Test Data";
			htmlContent.append(createHtmltable(headerList1, entry, tabelData1));
			
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			
			String[] twampHeaderList = {"[ Packet Count ]","[ Loss(ratio) ]"};
			for(String twampHeader : twampHeaderList) {
				String packetCount = StringUtils.substringBetween(result, twampHeader, "[").trim();				
				ArrayList<String> resultData = new ArrayList<>(Arrays.asList(packetCount.split("\\r?\\n")));
				ArrayList<String> replaceData = new ArrayList<>();
				for(String r : resultData) {
					if(r.trim().replaceAll(" +", " ").contains("Skip packets") || r.trim().replaceAll(" +", " ").contains("Drop packets")) {
						replaceData.add(r);
					}
				}
				for(int i=0; i<replaceData.size(); i++) {
					resultData.remove(replaceData.get(i));
					resultData.add(i+1, replaceData.get(i));
				}
				LinkedHashMap<String, String> column = new LinkedHashMap<>();
				for(String r : resultData) {
					String[] d = r.split(":", 2);
					if(d.length == 2) {
						column.put(d[0].trim().replaceAll(" +", " "), d[1].trim());
					}					
				}
				
				if(twampHeader.contains("Packet Count")) {
					entry = "Packet Count";
				} else {
					entry = "Loss(ratio)";
				}
				
				LinkedHashSet<String> headerList2 = new LinkedHashSet<>(column.keySet());
				List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
				tabelData2.add(column);
				
				
				htmlContent.append("<tr><td colspan=" + column.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList2) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				StringBuilder tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData2) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						/*if(resultTableData.getKey().trim().equalsIgnoreCase("Skip packets") 
								|| resultTableData.getKey().trim().equalsIgnoreCase("Drop packets")
								|| resultTableData.getKey().trim().equalsIgnoreCase("UpLink Loss")
								|| resultTableData.getKey().trim().equalsIgnoreCase("DnLink Loss")) {
							if(resultTableData.getValue().trim().replaceAll("(\\d+).*", "$1").equals("0")) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								if(resultTableData.getKey().trim().equalsIgnoreCase("Skip packets")) {
									auditIssue1.append(command + " " + " Skip Packets : " + resultTableData.getValue() + "\n");
								} else if(resultTableData.getKey().trim().equalsIgnoreCase("Drop packets")) {
									auditIssue2.append(command + " " + " Drop packets : " + resultTableData.getValue() + "\n");
								} else if(resultTableData.getKey().trim().equalsIgnoreCase("Network Loss")) {
									auditIssue3.append(command + " " + " Network Loss : " + resultTableData.getValue() + "\n");
								} else if(resultTableData.getKey().trim().equalsIgnoreCase("UpLink Loss")) {
									auditIssue4.append(command + " " + " UpLink Loss : " + resultTableData.getValue() + "\n");
								} else if(resultTableData.getKey().trim().equalsIgnoreCase("DnLink Loss")) {
									auditIssue5.append(command + " " + " DnLink Loss : " + resultTableData.getValue() + "\n");
								} 
								tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
							}
						} else */
						if(resultTableData.getKey().trim().equalsIgnoreCase("Network Loss")) {
							String netLoss = StringUtils.substringAfter(resultTableData.getValue().trim(), "(");
							netLoss = StringUtils.substringBefore(netLoss, ")").replaceAll("%", "").trim();
							if(NumberUtils.isNumber(netLoss)) {
								Double txPower = Double.parseDouble(netLoss);
								if(txPower>5.0) {
									auditIssue3.append(command + " " + " Network Loss : " + resultTableData.getValue() + "\n");
									tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
								} else {
									tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								}
							} else {
								auditIssue3.append(command + " " + " Network Loss : " + resultTableData.getValue() + "\n");
								tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						}						
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			}
			
			htmlContent.append("</table>\n");
			
			if(auditIssue1.length()!=0) {
				resultMap.put("auditIssue1", auditIssue1.toString());
			}
			if(auditIssue2.length()!=0) {
				resultMap.put("auditIssue2", auditIssue2.toString());
			}
			if(auditIssue3.length()!=0) {
				resultMap.put("auditIssue3", auditIssue3.toString());
			}
			if(auditIssue4.length()!=0) {
				resultMap.put("auditIssue4", auditIssue4.toString());
			}
			if(auditIssue5.length()!=0) {
				resultMap.put("auditIssue5", auditIssue5.toString());
			}			
		} catch(Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		resultMap.put("htmlContent", htmlContent.toString());
		return resultMap;
	}
	
	public StringBuilder getvDUAuditCBandPostAudit(String fullOutputLog, String command, String enbId, String dbcollectionFileName, RunTestEntity runTestEntity, NetworkConfigEntity networkConfigEntity) {StringBuilder htmlContent = new StringBuilder();
	try {
		String softwareVersion = "";
		softwareVersion = get4GsoftwareVersion(fullOutputLog, XmlCommandsConstants.CBAND_VDU_PACKAGEINVENTORY, enbId, dbcollectionFileName, runTestEntity);
		
		String outputLog = StringUtils.substringAfter(fullOutputLog, command);
		outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		outputLog = "<parent>" + outputLog + "</parent>";
		Document document = builder.parse(new InputSource(new StringReader(outputLog)));
		String softwareVersion1 = "";
		softwareVersion1 = get4GsoftwareVersion(fullOutputLog, XmlCommandsConstants.CBAND_VDU_PACKAGEINVENTORY, enbId, dbcollectionFileName, runTestEntity);
        String neVersion1 = StringUtils.substringBefore(softwareVersion1, "-");
		if(neVersion1.isEmpty()) {
         neVersion1 = networkConfigEntity.getNeVersionEntity().getNeVersion();
		}
		String entry1 = "o-ran-radio-unit-info";
		LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
		headerList1.add("o-ran-ru-id");
		if(neVersion1.contains("22.C")){
		headerList1.add("sub-type");
		}
		headerList1.add("unit-type");
		headerList1.add("serial-number");
		if(neVersion1.contains("21.D") || neVersion1.contains("22")){
		headerList1.add("nr-support-cell-number");
		}else {
		headerList1.add("support-cell-number");
		}
		if(neVersion1.contains("22.C")){
		headerList1.add("fsu-ne-id");
		}
		headerList1.add("operational-mode");
		
		String entry2 = "software-slot";
		LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
		headerList2.add("o-ran-ru-id");
		headerList2.add("name");
		headerList2.add("status");
		headerList2.add("active");
		headerList2.add("running");
		headerList2.add("access");
		headerList2.add("product-code");
		headerList2.add("vendor-code");
		headerList2.add("build-id");
		headerList2.add("build-name");
		headerList2.add("build-version");
		
		String entry3 = "cell-call-status";
		LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
		headerList3.add("cell-identity");
		headerList3.add("cell-call-count");
		
		String entry4 = "operational-mode-status";
		LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
		headerList4.add("du-reparenting");
		headerList4.add("ne-id");
		headerList4.add("ne-type");
		headerList4.add("system-type");
		headerList4.add("user-label");
		headerList4.add("administrative-state");
		headerList4.add("operational-state");
		headerList4.add("gpl-version");
		headerList4.add("operational-mode");
		
		String entry5 = "sync-status";
		LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
		headerList5.add("o-ran-ru-id");
		headerList5.add("sync-state");
		if(neVersion1.contains("22.C")){
		headerList5.add("time-error");
		headerList5.add("frequency-error");
		}
		
		String entry6 = "active-alarm-entries";
		LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
		headerList6.add("alarm-unit-type");
		headerList6.add("alarm-type");
		headerList6.add("probable-cause");
		headerList6.add("specific-problem");
		headerList6.add("severity");
		headerList6.add("location");
		
		String entry7 = "port-transceiver-data";
		LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
		headerList7.add("o-ran-ru-id");
		headerList7.add("interface-name");
		headerList7.add("port-number");
		headerList7.add("name");
		headerList7.add("present");
		headerList7.add("vendor-id");
		headerList7.add("vendor-part");
		headerList7.add("vendor-rev");
		headerList7.add("serial-no");
		headerList7.add("SFF8472-compliance-code");
		headerList7.add("connector-type");
		headerList7.add("identifier");
		headerList7.add("nominal-bitrate");
		headerList7.add("low-bitrate-margin");
		headerList7.add("high-bitrate-margin");
		headerList7.add("rx-power-type");
		headerList7.add("rx-power");
		headerList7.add("tx-power");
		headerList7.add("tx-bias-current");
		headerList7.add("voltage");
		headerList7.add("temperature");
		headerList7.add("tx-wavelength");
		headerList7.add("manufacture-date");
		
		String entry8 = "pod entries sync";
		LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
		headerList8.add("pod-type");
		headerList8.add("pod-id");
		if(!neVersion1.contains("21.D") && !neVersion1.contains("22.A")){
		headerList8.add("holdover-timer-threshold");
		}
		headerList8.add("sync-state");
		
		String entry9 = "external-interfaces";
		LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
		headerList9.add("pod-type");
		headerList9.add("pod-id");
		headerList9.add("interface-name");
		headerList9.add("ip");
		headerList9.add("prefix-length");
		headerList9.add("dhcp-server-enable");
		headerList9.add("f1");
		if(neVersion1.contains("22")){
		headerList9.add("dss");
		}
		headerList9.add("carrier-aggregation");
		headerList9.add("mplane");

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
		List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
		List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
		List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
		List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
		List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
		List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
		List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();

		NodeList nodeList = document.getElementsByTagName("managed-element");
		for (int i = 0; i < nodeList.getLength(); i++) {
			Node ChildNode1 = nodeList.item(i);
			if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

				Element elementchild1 = (Element) ChildNode1;

				NodeList nodelist1 = elementchild1.getElementsByTagName("active-alarm-entries");
				for (int k = 0; k < nodelist1.getLength(); k++) {
					Node ChildNode = nodelist1.item(k);
					if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
						Element elementchild6 = (Element) ChildNode;
						LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
						Iterator<String> itr = headerList6.iterator();
						String header = itr.next();
						objtableData.put(header, getXmlElementData(elementchild6, header));
						while (itr.hasNext()) {
							header = itr.next();
							objtableData.put(header,
								getXmlElementData(elementchild6, header));
						}
						tabelData6.add(objtableData);
					}
				}
				
				
				NodeList childNodeList2 = elementchild1.getElementsByTagName("hardware-management");
				for (int j = 0; j < childNodeList2.getLength(); j++) {

					Node ChildNode2 = childNodeList2.item(j);
					if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
						Element elementchild2 = (Element) ChildNode2;
						NodeList childNodeList3 = elementchild2.getElementsByTagName("o-ran-radio-unit-info");
						for (int k = 0; k < childNodeList3.getLength(); k++) {
							Node ChildNode3 = childNodeList3.item(k);
							if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
								Element elementchild3 = (Element) ChildNode3;
								
								NodeList childNodeList4 = elementchild3.getElementsByTagName("software-slot");
								for (int c = 0; c < childNodeList4.getLength(); c++) {
									Node ChildNode4 = childNodeList4.item(c);
									if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
										Element elementchild4 = (Element) ChildNode4;
										
										LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
										Iterator<String> itr = headerList2.iterator();
										String header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
										while (itr.hasNext()) {
											header = itr.next();
											objtableData.put(header,
												getXmlElementData(elementchild4, header));
										}
										tabelData2.add(objtableData);											
									}
								}
								
								childNodeList4 = elementchild3.getElementsByTagName("port-transceiver-data");
								for (int c = 0; c < childNodeList4.getLength(); c++) {
									Node ChildNode4 = childNodeList4.item(c);
									if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
										Element elementchild4 = (Element) ChildNode4;
										
										LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
										Iterator<String> itr = headerList7.iterator();
										String header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
										while (itr.hasNext()) {
											header = itr.next();
											objtableData.put(header,
												getXmlElementData(elementchild4, header));
										}
										tabelData7.add(objtableData);											
									}
								}
								
								LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
								Iterator<String> itr = headerList1.iterator();
								String header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild3, header));
								while (itr.hasNext()) {
									header = itr.next();
									objtableData.put(header,
										getXmlElementData(elementchild3, header));
								}
								tabelData1.add(objtableData);
								
								
								objtableData = new LinkedHashMap<>();
								itr = headerList5.iterator();
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild3, header));
								while (itr.hasNext()) {
									header = itr.next();
									objtableData.put(header,
										getXmlElementData(elementchild3, header));
								}
								tabelData5.add(objtableData);
							}
						}
					}
				}
				
				childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
				for (int j = 0; j < childNodeList2.getLength(); j++) {

					Node ChildNode2 = childNodeList2.item(j);
					if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
						Element elementchild2 = (Element) ChildNode2;
						NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
						for (int k = 0; k < childNodeList3.getLength(); k++) {
							Node ChildNode3 = childNodeList3.item(k);
							if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
								Element elementchild3 = (Element) ChildNode3;
								NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
								for (int c = 0; c < childNodeList4.getLength(); c++) {
									Node ChildNode4 = childNodeList4.item(c);
									if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
										Element elementchild4 = (Element) ChildNode4;
										NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
										for (int d = 0; d < childNodeList5.getLength(); d++) {
											Node ChildNode5 = childNodeList5.item(d);
											if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
												Element elementchild5 = (Element) ChildNode5;
												NodeList childNodeList6 = elementchild5
														.getElementsByTagName("sync");
												for (int e = 0; e < childNodeList6.getLength(); e++) {
													Node ChildNode6 = childNodeList6.item(e);
													if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
														Element elementchild6 = (Element) ChildNode6;
														LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
														Iterator<String> itr = headerList8.iterator();
														String header = itr.next();
														objtableData.put(header, getXmlElementData(elementchild5, header));
														header = itr.next();
														objtableData.put(header, getXmlElementData(elementchild5, header));
														

														while (itr.hasNext()) {
															header = itr.next();
															objtableData.put(header,
															getXmlElementData(elementchild6, header));
														}
														/*objtableData.put("pod-type",
																getXmlElementData(elementchild5, "pod-type"));
														objtableData.put("pod-id",
																getXmlElementData(elementchild5, "pod-id"));
														objtableData.put("holdover-timer-threshold",
																getXmlElementData(elementchild6,
																		"holdover-timer-threshold"));
														objtableData.put("sync-state",
																getXmlElementData(elementchild6, "sync-state"));*/
														tabelData8.add(objtableData);
													}
												}
									childNodeList6 = elementchild5
														.getElementsByTagName("external-interfaces");
												for (int e = 0; e < childNodeList6.getLength(); e++) {
													Node ChildNode6 = childNodeList6.item(e);
													if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
														Element elementchild6 = (Element) ChildNode6;
														NodeList childNodeList7 = elementchild6
															.getElementsByTagName("ipv6-address");
														for (int f = 0; f < childNodeList7.getLength(); f++) {
															Node ChildNode7 = childNodeList7.item(f);
															if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
																Element elementchild7 = (Element) ChildNode7;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																Iterator<String> itr = headerList9.iterator();
																String header = itr.next();
																objtableData.put(header, getXmlElementData(elementchild5, header));
																header = itr.next();
																objtableData.put(header, getXmlElementData(elementchild5, header));
																header = itr.next();
																objtableData.put(header, getXmlElementData(elementchild6, header));

																while (itr.hasNext()) {
																	header = itr.next();
																	objtableData.put(header,
																	getXmlElementData(elementchild7, header));
																}
																tabelData9.add(objtableData);
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				
				childNodeList2 = elementchild1.getElementsByTagName("gnb-du-function");
				for (int j = 0; j < childNodeList2.getLength(); j++) {

					Node ChildNode2 = childNodeList2.item(j);
					if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
						Element elementchild2 = (Element) ChildNode2;
						NodeList childNodeList3 = elementchild2.getElementsByTagName("gutran-du-cell-entries");
						for (int k = 0; k < childNodeList3.getLength(); k++) {
							Node ChildNode3 = childNodeList3.item(k);
							if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
								Element elementchild3 = (Element) ChildNode3;
								
								NodeList childNodeList4 = elementchild3.getElementsByTagName("cell-call-status");
								for (int c = 0; c < childNodeList4.getLength(); c++) {
									Node ChildNode4 = childNodeList4.item(c);
									if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
										Element elementchild4 = (Element) ChildNode4;
										
										LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
										Iterator<String> itr = headerList3.iterator();
										String header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
										while (itr.hasNext()) {
											header = itr.next();
											objtableData.put(header,
												getXmlElementData(elementchild4, header));
										}
										tabelData3.add(objtableData);											
									}
								}			
								
							}
						}
					}
				}
				
				LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
				Iterator<String> itr = headerList4.iterator();
				String header = itr.next();
				objtableData.put(header, getXmlElementData(elementchild1, header));
				while (itr.hasNext()) {
					header = itr.next();
					if(header.equalsIgnoreCase("operational-mode") && elementchild1.getElementsByTagName(header) != null
							&& elementchild1.getElementsByTagName(header).getLength() > 0) {
						for(int z=0; z< elementchild1.getElementsByTagName(header).getLength();z++) {
							if(elementchild1.getElementsByTagName(header).item(z).getParentNode().getNodeName().equalsIgnoreCase("managed-element")) {
								objtableData.put(header, elementchild1.getElementsByTagName(header).item(z).getTextContent());
							}
						}
					} else {
						objtableData.put(header,
								getXmlElementData(elementchild1, header));
					}
				}
				tabelData4.add(objtableData);
				
			}
		}
		

		checkEmptyTableCband(tabelData1, entry1, runTestEntity, enbId);
		checkEmptyTableCband(tabelData2, entry2, runTestEntity, enbId);
		checkEmptyTableCband(tabelData3, entry3, runTestEntity, enbId);
		checkEmptyTableCband(tabelData4, entry4, runTestEntity, enbId);
		checkEmptyTableCband(tabelData5, entry5, runTestEntity, enbId);
		//checkEmptyTableCband(tabelData7, entry7, runTestEntity, enbId);
		

		htmlContent.append(
				"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
		htmlContent.append(
				"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		StringBuilder auditIssue1 = new StringBuilder();
		StringBuilder auditIssue2 = new StringBuilder();
		StringBuilder auditIssue3 = new StringBuilder();
		StringBuilder auditIssue4 = new StringBuilder();
		StringBuilder auditIssue5 = new StringBuilder();
		StringBuilder auditIssue6 = new StringBuilder();
		StringBuilder auditIssue7 = new StringBuilder();
		StringBuilder auditIssue8 = new StringBuilder();
		StringBuilder auditIssue9 = new StringBuilder();
		StringBuilder auditIssue10 = new StringBuilder();
		StringBuilder auditIssue11 = new StringBuilder();
		StringBuilder auditIssue12 = new StringBuilder();
		StringBuilder auditIssue13 = new StringBuilder();
		StringBuilder auditIssue14 = new StringBuilder();
		StringBuilder auditIssue15 = new StringBuilder();
		StringBuilder auditIssue16 = new StringBuilder();
		StringBuilder auditIssue17 = new StringBuilder();
		StringBuilder auditIssue18 = new StringBuilder();
		StringBuilder auditIssue19 = new StringBuilder();
		StringBuilder auditIssueAll = new StringBuilder();
		Set<String> oranidSet = new HashSet<>();
		
		String f1cIpAddr = "";
		String f1uIpAddr = "";
		String cuIpAddr = "";
		List<CIQDetailsModel> listOfCiqDetailsday01 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
				"Day0_1", "eNBId");
		if (!ObjectUtils.isEmpty(listOfCiqDetailsday01)) {
			if(listOfCiqDetailsday01.get(0).getCiqMap().containsKey("cuIPaddress")) {
				cuIpAddr = listOfCiqDetailsday01.get(0).getCiqMap().get("cuIPaddress").getHeaderValue().trim();
			}
			if(listOfCiqDetailsday01.get(0).getCiqMap().containsKey("f1cAddress")) {
				f1cIpAddr = listOfCiqDetailsday01.get(0).getCiqMap().get("f1cAddress").getHeaderValue().trim();
			}
			if(listOfCiqDetailsday01.get(0).getCiqMap().containsKey("f1uAddress")) {
				f1uIpAddr = listOfCiqDetailsday01.get(0).getCiqMap().get("f1uAddress").getHeaderValue().trim();
			}
		}
		
		List<CIQDetailsModel> listOfCiqDetailsday2 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
				"Day2", "eNBId");
		
		
		//o-ran-radio-unit-info
		htmlContent
		.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList1) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData1) {
			oranidSet.add(tdData.get("o-ran-ru-id").trim());
			tableData.append("<tr>\n");
			String oruid = "";
			String supportcellnum = "";
			if(!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
				for(CIQDetailsModel ciqData : listOfCiqDetailsday2) {
					if(ciqData.getCiqMap().containsKey("oruId") && ciqData.getCiqMap().get("oruId").getHeaderValue().trim().equals(tdData.get("o-ran-ru-id").trim())) {
						oruid = tdData.get("o-ran-ru-id").trim();
						if(ciqData.getCiqMap().containsKey("oruSupportCellNumber")) {
							supportcellnum = ciqData.getCiqMap().get("oruSupportCellNumber").getHeaderValue().trim();
						}
					}
				}
			}
			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (key.equals("support-cell-number") || key.equals("nr-support-cell-number") ) {
					if (value.equals(supportcellnum)) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						if(neVersion1.contains("21.D") || neVersion1.contains("22")) {
						auditIssue11.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " nr-support-cell-number : " + value + "\n");
						}else {
							auditIssue11.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " support-cell-number : " + value + "\n");
						}
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else if (key.equals("operational-mode")) {
					if (value.equals("normal-mode")) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						auditIssue2.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " operational-mode : " + value + "\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);
		
		//software-slot
		String neVersion = StringUtils.substringBefore(softwareVersion, "-");
		String relVersion = StringUtils.substringAfter(StringUtils.substringBefore(softwareVersion, "("), "-");
		htmlContent
		.append("<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");
		tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList2) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData2) {
			String firmwareName = tdData.get("name");
			String runningstate = "true";
			String activeState = "true";
			String buildVersion = "";
			String prodCode = tdData.get("product-code").trim();
			List<Audit5GCbandFirmwareDetailsEntity> auditFirmwareList = audit5GCbandFirmwareDetailsRepository.
					getAuditFirmwareDetailsEntityList(firmwareName, relVersion, neVersion, prodCode);
			ArrayList<String> ipList2 =new ArrayList<>();
			if (!ObjectUtils.isEmpty(auditFirmwareList)) {
				//buildVersion = auditFirmwareList.get(0).getBuildVersion().trim();
				String[] ipList = auditFirmwareList.get(0).getBuildVersion().trim().split(",");
				for(int i=0;i<ipList.length;i++) {
					ipList2.add(ipList[i]);
				}
			}
			
			tableData.append("<tr>\n");
			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if(key.equals("build-version") && tdData.get("running").equalsIgnoreCase(runningstate) && tdData.get("active").equalsIgnoreCase(activeState)) {
					if(ipList2.contains(value)) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						if(tdData.get("o-ran-ru-id").equals("0")) {
							auditIssue15.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +" name : " + tdData.get("name") + " product-code : "
									+ tdData.get("product-code") + " vendor-code : " + tdData.get("vendor-code")
									+ " build-version : " + tdData.get("build-version") + "\n");
						} else if(tdData.get("o-ran-ru-id").equals("1")) {
							auditIssue16.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +" name : " + tdData.get("name") + " product-code : "
									+ tdData.get("product-code") + " vendor-code : " + tdData.get("vendor-code")
									+ " build-version : " + tdData.get("build-version") + "\n");
						} else if(tdData.get("o-ran-ru-id").equals("2")) {
							auditIssue17.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +" name : " + tdData.get("name") + " product-code : "
									+ tdData.get("product-code") + " vendor-code : " + tdData.get("vendor-code")
									+ " build-version : " + tdData.get("build-version") + "\n");
						}
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);
		
		//cell-call-status
		htmlContent
		.append("<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");
		tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList3) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData3) {
			tableData.append("<tr>\n");
			String cellid = "";
			if(!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
				for(CIQDetailsModel ciqData : listOfCiqDetailsday2) {
					if(ciqData.getCiqMap().containsKey("cell_identity") && ciqData.getCiqMap().get("cell_identity").getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
						cellid = tdData.get("cell-identity");
					}
				}
			}
			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				/*if (key.equals("cell-identity")) {
					if (value.equals(cellid)) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				}  else if (key.equals("cell-call-count")) {
					if (tdData.get("cell-identity").equals(cellid) && NumberUtils.isNumber(value) && NumberUtils.toInt(value)>0) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						auditIssue3.append("cell-identity : " + tdData.get("cell-identity") + " cell-call-count : " + tdData.get("cell-call-count") + "\n");
					}
				} else {*/
					tableData.append("<td align=center>" + value + "</td>\n");
				//}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);
		
		//operational-mode-status
		htmlContent
		.append("<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");
		tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList4) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData4) {
			tableData.append("<tr>\n");
			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (key.equals("operational-mode")) {
					if (value.equals("normal-mode")) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						auditIssue4.append("ne-id : " + tdData.get("ne-id") + " operational-mode : " + value + "\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else if (key.equals("administrative-state")) {
					if (value.equals("locked")) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						auditIssue9.append("ne-id : " + tdData.get("ne-id") + " operational-mode : " + value + "\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else if (key.equals("operational-state")) {
					if (value.equals("disabled")) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						auditIssue10.append("ne-id : " + tdData.get("ne-id") + " operational-mode : " + value + "\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);
		

		//active-alarm-entries
		htmlContent
		.append("<tr><td colspan=" + headerList6.size() + " bgcolor=#EEEEEE><b>" + entry6 + "</b></td></tr>\n");
		tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList6) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData6) {
			tableData.append("<tr>\n");
			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (key.equals("alarm-type")) {
					if (value.equals("service-off")) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else if (value.equals("port-down") && checkportDownAlarmEntries(tdData.get("location"),oranidSet)){
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						auditIssue6.append("alarm-type : " + tdData.get("alarm-type") + " probable-cause : " + 
								tdData.get("probable-cause") + " specific-problem : " + tdData.get("specific-problem") + "\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);
		
		//sync-status
		htmlContent
		.append("<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");
		tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList5) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData5) {
			tableData.append("<tr>\n");
			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (key.equals("sync-state")) {
					if (value.equals("LOCKED")) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						if(tdData.get("o-ran-ru-id").trim().equals("0")) {
							auditIssue5.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " sync-state : " + tdData.get("sync-state") + "\n");
						} else if(tdData.get("o-ran-ru-id").trim().equals("1")) {
							auditIssue7.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " sync-state : " + tdData.get("sync-state") + "\n");
						} else if(tdData.get("o-ran-ru-id").trim().equals("2")) {
							auditIssue8.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " sync-state : " + tdData.get("sync-state") + "\n");
						}
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);
		
		//port-transceiver-data
		htmlContent
		.append("<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");
		tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList7) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}
		
		//List<AuditCbandHardwareDetailsEntity> auditCbandHardwareDetailsEntityList = auditCbandHardwareDetailsRepository.getAuditHardwareDetailsEntityList("");
		
		tableHeader = tableHeader + "</tr>\n";
		tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData7) {
			tableData.append("<tr>\n");
			//boolean entryPresent =  false;
			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				
				tableData.append("<td align=center>" + value + "</td>\n");
									
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);
		
		
		//pod sync status
		htmlContent
		.append("<tr><td colspan=" + headerList8.size() + " bgcolor=#EEEEEE><b>" + entry8 + "</b></td></tr>\n");
		tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList8) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData8) {
			tableData.append("<tr>\n");
			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (key.equals("sync-state")) {
					if (value.equals("locked")) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						auditIssue11.append("pod-type : " + tdData.get("pod-type") + " sync-state : " + tdData.get("sync-state") + "\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);
		
		String mh1Code = "";
		mh1Code = getMH1IpForValidation(fullOutputLog, XmlCommandsConstants.CBAND_VDU_MH1IPFETCH,
				enbId, dbcollectionFileName, runTestEntity);
		int mh1Value=0;
		if(NumberUtils.isNumber(mh1Code)) {
			mh1Value=Integer.parseInt(mh1Code);
			mh1Value++;
		}
		if(!mh1Code.isEmpty()) {
		mh1Code=String.valueOf(mh1Value);
		}
		String ipMh1="";
		if(mh1Code.length()==1) {
		 ipMh1="fd00:4888:20:520:0:406:0:40"+mh1Code;
		}else if(mh1Code.length()==2) {
		ipMh1="fd00:4888:20:520:0:406:0:4"+mh1Code;
		}else {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(202, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					XmlCommandsConstants.CBAND_VDU_MH1IPFETCH + " : No Data From vdu.conf File");	
		}
		htmlContent
		.append("<tr><td colspan=" + headerList9.size() + " bgcolor=#EEEEEE><b>" + entry9 + "</b></td></tr>\n");
		tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList9) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData9) {
			tableData.append("<tr>\n");
			List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_5G_CBAND, tdData.get("pod-type").trim() + "_ip", tdData.get("interface-name").trim());
			String ip = "::";
			if(!ObjectUtils.isEmpty(auditConstantsList)) {
				String[] ipList = auditConstantsList.get(0).getParameterValue().trim().split(",");
				for(String ipAddr : ipList) {
					if(compareIPAddr(ipAddr.trim(), tdData.get("ip").trim())) {
						ip = ipAddr.trim();
						break;
					}
				}
			} else if(tdData.get("pod-type").equalsIgnoreCase("dpp")&& tdData.get("interface-name").equalsIgnoreCase("mh0")) {
				ip = f1uIpAddr;
			} else if(tdData.get("pod-type").equalsIgnoreCase("dip")&& tdData.get("interface-name").equalsIgnoreCase("mh0")) {
				ip = f1cIpAddr;
			}
			if (tdData.get("pod-type").equalsIgnoreCase("dpp")
					&& tdData.get("interface-name").equalsIgnoreCase("mh1")) {
				if (tdData.get("ip").equalsIgnoreCase("fd00:4888:20:520:0:406:0:400")) {
					ip = "fd00:4888:20:520:0:406:0:400";
				}else if(!(mh1Code.length()==1 || mh1Code.length()==2)) {
					ip = tdData.get("ip").trim();
				}else {
					ip = ipMh1;
				}
			}
			boolean ipMatch=false;
			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
			
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (key.equals("ip")  ) {
					if (compareIPAddr(ip, value.trim()) ) {
						tableData.append("<td align=center>" + value + "</td>\n");
						ipMatch=true;
					} else {
						auditIssue18.append("pod-type : " + tdData.get("pod-type") + " interface-name : " + 
								tdData.get("interface-name") + " ip : " + value + "\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				}else if (key.equals("mplane")  ) {
					if (!value.equalsIgnoreCase("true") && tdData.get("interface-name").equalsIgnoreCase("fh0") && tdData.get("pod-type").equalsIgnoreCase("rmp") && ipMatch) {
						auditIssue19.append("pod-type : " + tdData.get("pod-type") + " interface-name : " + 
								tdData.get("interface-name")  +"ip : " + tdData.get("ip")+
								" mplane : " + tdData.get("mplane")+"\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					} else if (!value.equalsIgnoreCase("true") && tdData.get("interface-name").equalsIgnoreCase("fh1") && tdData.get("pod-type").equalsIgnoreCase("rmp") && ipMatch) {
						auditIssue19.append("pod-type : " + tdData.get("pod-type") + " interface-name : " + 
								tdData.get("interface-name")  +" ip : " + tdData.get("ip")+
								"mplane : " + tdData.get("mplane")+"\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}else if (!value.equalsIgnoreCase("true") && tdData.get("interface-name").equalsIgnoreCase("fh2") && tdData.get("pod-type").equalsIgnoreCase("rmp") && ipMatch) {
						auditIssue19.append("pod-type : " + tdData.get("pod-type") + " interface-name : " + 
								tdData.get("interface-name")  +"ip : " + tdData.get("ip")+
								"mplane : " + tdData.get("mplane")+"\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}else {
					
						
						tableData.append("<td align=center >" + value + "</td>\n");
					}
				}else if (key.equals("f1")  ) {
					if (!value.equalsIgnoreCase("true") && tdData.get("interface-name").equalsIgnoreCase("mh0") && tdData.get("pod-type").equalsIgnoreCase("dpp") && ipMatch) {
						auditIssue19.append("pod-type : " + tdData.get("pod-type") + " interface-name : " + 
								tdData.get("interface-name")  +"ip : " + tdData.get("ip")+
								"f1 : " + tdData.get("f1")+"\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					} else if (!value.equalsIgnoreCase("true") && tdData.get("interface-name").equalsIgnoreCase("mh0") && tdData.get("pod-type").equalsIgnoreCase("dip") && ipMatch) {
						auditIssue19.append("pod-type : " + tdData.get("pod-type") + " interface-name : " + 
								tdData.get("interface-name")  +"ip : " + tdData.get("ip")+
								"f1 : " + tdData.get("f1")+"\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}else {
					
						
						tableData.append("<td align=center >" + value + "</td>\n");
					}
				}else if (key.equals("carrier-aggregation")  ) {
					if (!value.equalsIgnoreCase("true") && tdData.get("interface-name").equalsIgnoreCase("mh1") && tdData.get("pod-type").equalsIgnoreCase("dpp") && ipMatch) {
						auditIssue19.append("pod-type : " + tdData.get("pod-type") + " interface-name : " + 
								tdData.get("interface-name")  +"ip : " + tdData.get("ip")+
								"carrier-aggregation : " + tdData.get("carrier-aggregation")+"\n");
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					} else {
					 tableData.append("<td align=center >" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);
		htmlContent.append("</table>\n");
		
		AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
		auditIssueAll.append(auditIssue1);
		auditIssueAll.append(auditIssue2);
		auditIssueAll.append(auditIssue3);
		auditIssueAll.append(auditIssue4);
		auditIssueAll.append(auditIssue5);
		auditIssueAll.append(auditIssue6);
		auditIssueAll.append(auditIssue7);
		auditIssueAll.append(auditIssue8);
		auditIssueAll.append(auditIssue9);
		auditIssueAll.append(auditIssue10);
		auditIssueAll.append(auditIssue11);
		auditIssueAll.append(auditIssue12);
		auditIssueAll.append(auditIssue13);
		auditIssueAll.append(auditIssue14);
		auditIssueAll.append(auditIssue15);
		auditIssueAll.append(auditIssue16);
		auditIssueAll.append(auditIssue17);
		auditIssueAll.append(auditIssue18);
		auditIssueAll.append(auditIssue19);
		auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
		auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
		auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
		auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
		auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
		auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData6, auditIssueAll);
		auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData7, auditIssueAll);
		auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData8, auditIssueAll);
		auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData9, auditIssueAll);
											
		if(auditIssue1.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(26, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue1.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(26, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(26, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue2.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(27, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue2.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(27, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(27, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue3.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(28, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue3.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(28, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(28, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue4.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(29, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue4.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(29, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(29, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue5.length()!=0 && auditIssue11.length()==0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(30, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue5.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(30, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(30, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue6.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(20, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue6.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(20, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(20, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue7.length()!=0 && auditIssue11.length()==0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(59, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue7.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(59, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(59, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue8.length()!=0 && auditIssue11.length()==0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(60, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue8.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(60, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(60, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue9.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(69, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue9.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(69, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(69, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue10.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(70, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue10.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(70, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(70, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue11.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(71, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue11.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(71, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(71, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		/*if(auditIssue12.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(72, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue12.toString());
		}
		if(auditIssue13.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(73, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue13.toString());
		}
		if(auditIssue14.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(74, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue14.toString());
		}*/
		if(auditIssue15.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(75, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue15.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(75, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(75, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue16.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(76, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue16.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(76, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(76, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue17.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(77, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue17.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(77, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(77, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue18.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(7, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue18.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(7, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(7, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		if(auditIssue19.length()!=0) {
			audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(79, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
					auditIssue19.toString());
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(79, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "fail");
		} else {
			audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(79, runTestEntity.getId(),
					enbId.replaceAll("^0+(?!$)", ""), "pass");
		}
		

	} catch (Exception e) {
		logger.error(ExceptionUtils.getFullStackTrace(e));
		htmlContent.setLength(0);
		htmlContent.append(
				"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
		htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
		htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
		htmlContent.append("</table>");
	}
	return htmlContent;
}
	
	public StringBuilder get5GCBandeNBaactivealarmentries(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("alarm-unit-type");
			headerList1.add("alarm-type");
			headerList1.add("location");
			headerList1.add("raised-time");
			headerList1.add("alarm-group");
			headerList1.add("probable-cause");
			headerList1.add("specific-problem");
			headerList1.add("severity");
			headerList1.add("alarm-code");
			headerList1.add("sequence-number");
			headerList1.add("time-info");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("fault-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("active-alarm");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			StringBuilder auditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					if (resultTableData.getKey().equals("alarm-type")) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						if(resultTableData.getKey().equals("alarm-type")) {
							auditIssue.append("alarm-type : " + tdData.get("alarm-type") + " probable-cause : " + tdData.get("probable-cause") +
									" location : " + tdData.get("location") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if(auditIssue.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(57, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(57, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(57, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get5GCBandACPFaactivealarmentries(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("alarm-unit-type");
			headerList1.add("alarm-type");
			headerList1.add("location");
			headerList1.add("raised-time");
			headerList1.add("alarm-group");
			headerList1.add("probable-cause");
			headerList1.add("specific-problem");
			headerList1.add("severity");
			headerList1.add("alarm-code");
			headerList1.add("sequence-number");
			headerList1.add("time-info");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("fault-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("active-alarm");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			
			List<CIQDetailsModel> listOfCiqDetailsday01 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"Day0_1", "eNBId");
			String gnbId = "";
			if(!ObjectUtils.isEmpty(listOfCiqDetailsday01)) {
				if(listOfCiqDetailsday01.get(0).getCiqMap().containsKey("gnb_ID")) {
					gnbId = listOfCiqDetailsday01.get(0).getCiqMap().get("gnb_ID").getHeaderValue().trim().replaceAll("^0+(?!$)", "");
				}
			}
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (value.equals("service-off") && !gnbId.isEmpty() && tdData.get("location").contains(gnbId)) {
							auditIssue1.append("ACPF ALARMS : alarm-type : " + tdData.get("alarm-type") + " probable-cause : " + 
									tdData.get("probable-cause") + " location : " + tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							auditIssue2.append("ACPF ALARMS : alarm-type : " + tdData.get("alarm-type") + " probable-cause : " + 
									tdData.get("probable-cause") + " location : " + tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if(auditIssue1.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(55, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue1.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(55, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(55, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue2.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(56, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue2.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(56, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(56, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get5GCBandAUPFaactivealarmentries(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("alarm-unit-type");
			headerList1.add("alarm-type");
			headerList1.add("location");
			headerList1.add("raised-time");
			headerList1.add("alarm-group");
			headerList1.add("probable-cause");
			headerList1.add("specific-problem");
			headerList1.add("severity");
			headerList1.add("alarm-code");
			headerList1.add("sequence-number");
			headerList1.add("time-info");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("fault-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("active-alarm");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}	
			
			List<CIQDetailsModel> listOfCiqDetailsday01 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"Day0_1", "eNBId");
			String gnbId = "";
			if(!ObjectUtils.isEmpty(listOfCiqDetailsday01)) {
				if(listOfCiqDetailsday01.get(0).getCiqMap().containsKey("gnb_ID")) {
					gnbId = listOfCiqDetailsday01.get(0).getCiqMap().get("gnb_ID").getHeaderValue().trim().replaceAll("^0+(?!$)", "");
				}
			}
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (value.equals("service-off") && !gnbId.isEmpty() && tdData.get("location").contains(gnbId)) {
							auditIssue1.append("AUPF ALARMS : alarm-type : " + tdData.get("alarm-type") + " probable-cause : " + 
									tdData.get("probable-cause") + " location : " + tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							auditIssue2.append("AUPF ALARMS : alarm-type : " + tdData.get("alarm-type") + " probable-cause : " + 
									tdData.get("probable-cause") + " location : " + tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			
			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);

			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if(auditIssue1.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(53, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue1.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(53, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(53, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue2.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(54, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue2.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(54, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(54, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	
	public StringBuilder get5GCBandACPFX2E1F1(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			String entry1 = "end-point-x2-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("gnodeb-id");
			headerList1.add("x2-neighbor-index");
			headerList1.add("remote-ip-address");
			headerList1.add("secondary-remote-ip-address");
			headerList1.add("enb-id");
			headerList1.add("sctp-state");
			headerList1.add("x2-ap-state");
			headerList1.add("mcc");
			headerList1.add("mnc");
			
			String entry2 = "end-point-f1c-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("gnodeb-id");
			headerList2.add("end-point-f1-index");
			headerList2.add("gnb-du-id");
			headerList2.add("remote-ip-address");
			headerList2.add("secondary-remote-ip-address");
			headerList2.add("sctp-state");
			headerList2.add("f1-ap-state");

			String entry3 = "end-point-e1-entries";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("gnodeb-id");
			headerList3.add("end-point-e1-index");
			headerList3.add("cu-up-id");
			headerList3.add("remote-ip-address");
			headerList3.add("sctp-state");
			headerList3.add("e1-ap-state");
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("gnb-cu-cp-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//gnb-cu-cp-function-entries
					NodeList childNodeList = element.getElementsByTagName("gnb-cu-cp-function-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//end-point-x2
							NodeList childNodeList1 = elementchild.getElementsByTagName("end-point-x2");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//end-point-x2-entries
									NodeList childNodeList2 = elementchild1.getElementsByTagName("end-point-x2-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
							
							//end-point-f1c
							childNodeList1 = elementchild.getElementsByTagName("end-point-f1c");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//end-point-f1c-entries
									NodeList childNodeList2 = elementchild1.getElementsByTagName("end-point-f1c-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}
							
							//end-point-e1
							childNodeList1 = elementchild.getElementsByTagName("end-point-e1");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//end-point-e1-entries
									NodeList childNodeList2 = elementchild1.getElementsByTagName("end-point-e1-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList3.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData3.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}
			
			//checkEmptyTableCband(tabelData1, entry1, runTestEntity, enbId);
			checkEmptyTableCband(tabelData2, entry2, runTestEntity, enbId);
			checkEmptyTableCband(tabelData3, entry3, runTestEntity, enbId);
			
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			List<CIQDetailsModel> listOfCiqDetailsday01 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"Day0_1", "eNBId");
			String gnbId = "";
			String enodeBId = "";
			if(!ObjectUtils.isEmpty(listOfCiqDetailsday01)) {
				if(listOfCiqDetailsday01.get(0).getCiqMap().containsKey("gnb_ID")) {
					gnbId = listOfCiqDetailsday01.get(0).getCiqMap().get("gnb_ID").getHeaderValue().trim().replaceAll("^0+(?!$)", "");
				}
				if(listOfCiqDetailsday01.get(0).getCiqMap().containsKey("ENB_ID")) {
					enodeBId = listOfCiqDetailsday01.get(0).getCiqMap().get("ENB_ID").getHeaderValue().trim().replaceAll("^0+(?!$)", "");
				}
			}
			Set<String> gnodebIdset = new HashSet<>();
			gnodebIdset.add(gnbId);
			
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			trimTabledataString(tabelData1, gnodebIdset, "gnodeb-id");
			
			
			List<String> al = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
	      		al.add(tdData.get("enb-id"));
			}
			boolean pqr=false;
		  if( al.contains(enodeBId)) {
		    pqr=true;
		  }
			boolean abc=false;
			htmlContent
			.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sctp-state") && tdData.get("enb-id").trim().replaceAll("^0+(?!$)", "").equals(enodeBId)) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("gnodeb-id : " + tdData.get("gnodeb-id") + " x2-neighbor-index : " + tdData.get("x2-neighbor-index") +
									" sctp-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("x2-ap-state") && tdData.get("enb-id").trim().replaceAll("^0+(?!$)", "").equals(enodeBId)) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("gnodeb-id : " + tdData.get("gnodeb-id") + " x2-neighbor-index : " + tdData.get("x2-neighbor-index") +
									" x2-ap-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("enb-id")  ) {
						if ( pqr) {
							tableData.append("<td align=center>" + value + "</td>\n");
							
							
						} else {
							abc=true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
						
					}else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			
			trimTabledataString(tabelData2, gnodebIdset, "gnodeb-id");
			htmlContent
			.append("<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sctp-state") && tdData.get("gnb-du-id").trim().replaceAll("^0+(?!$)", "").equals(enbId.trim().replaceAll("^0+(?!$)", ""))) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue3.append("gnodeb-id : " + tdData.get("gnodeb-id") + " end-point-f1-index : " + tdData.get("end-point-f1-index") +
									" sctp-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("f1-ap-state") && tdData.get("gnb-du-id").trim().replaceAll("^0+(?!$)", "").equals(enbId.trim().replaceAll("^0+(?!$)", ""))) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("gnodeb-id : " + tdData.get("gnodeb-id") + " end-point-f1-index : " + tdData.get("end-point-f1-index") +
									" f1-ap-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			trimTabledataString(tabelData3, gnodebIdset, "gnodeb-id");
			boolean sctpEnbalebool = false;
			boolean e1ApStatebool = false;
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				if(tdData.get("sctp-state").equalsIgnoreCase("enabled")) {
					sctpEnbalebool = true;
				}
				if(tdData.get("e1-ap-state").equalsIgnoreCase("enabled")) {
					e1ApStatebool = true;
				}
			}
			
			htmlContent
			.append("<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sctp-state")) {
						if (value.equals("enabled") || sctpEnbalebool) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue5.append("gnodeb-id : " + tdData.get("gnodeb-id") + " end-point-e1-index : " + tdData.get("end-point-e1-index") +
									" sctp-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("e1-ap-state")) {
						if (value.equals("enabled") || e1ApStatebool) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue6.append("gnodeb-id : " + tdData.get("gnodeb-id") + " end-point-e1-index : " + tdData.get("end-point-e1-index") +
									" e1-ap-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			auditIssueAll.append(auditIssue7);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if(abc) {
				auditIssue7.append("For gnodeb-id : " + gnbId  +
						" enb-id : " +enodeBId + "Is not present"+"\n");
			}
			
			if(auditIssue1.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(31, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue1.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(31, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(31, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue2.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(32, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue2.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(32, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(32, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue3.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(33, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue3.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(33, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(33, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue4.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(34, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue4.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue5.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(35, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue5.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue6.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(36, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue6.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(36, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(36, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue7.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(78, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue7.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(78, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}


	public StringBuilder get5GCBandpackageinventory(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					
					Element element = (Element) inChildNode;
					NodeList nodeList1 = element.getChildNodes();
					
					for (int j = 0; j < nodeList1.getLength(); j++) {
						Node nodeList2 = nodeList1.item(j);
						if (Node.ELEMENT_NODE == nodeList2.getNodeType()) {

							Element element1 = (Element) nodeList2;
							NodeList nodeList3 = element1.getChildNodes();
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							for (int k = 0; k < nodeList3.getLength(); k++) {
								
								Node n1 = nodeList3.item(k);
								if (Node.ELEMENT_NODE == n1.getNodeType()) {									
									headerList1.add(n1.getNodeName().trim());
									objtableData.put(n1.getNodeName().trim(), n1.getTextContent());									
								}
							}
							tabelData1.add(objtableData);
						}
					}
					
				}
			}
			checkEmptyTableCband(tabelData1, command, runTestEntity, enbId);
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			StringBuilder softwareAuditIssue = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();

			String softwareVersion = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName, "Day0_1", "eNBId");
			if(!ObjectUtils.isEmpty(listOfCiqDetails)) {
				CIQDetailsModel ciqDetailsModel = listOfCiqDetails.get(0);
				if(ciqDetailsModel.getCiqMap().containsKey("eNB_Version")) {
					softwareVersion = ciqDetailsModel.getCiqMap().get("eNB_Version").getHeaderValue().trim();
				}
			}
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				
				String softwareName = "";
				
				if(tdData.containsKey("software-name")) {
					softwareName = tdData.get("software-name");
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
//					if(resultTableData.getKey().equalsIgnoreCase("software-version") 
//							&& !resultTableData.getValue().trim().equalsIgnoreCase(softwareVersion)) {
//						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
//								+ resultTableData.getValue() + "</td>\n");
//						softwareAuditIssue.append("software-name: " + softwareName + " software-version : "+ resultTableData.getValue() + "\n");
//					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
	//			}
				tableData.append("</tr>\n");
				
			}
		
			
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
//			if(softwareAuditIssue.length() != 0) {
//				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(37, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
//						softwareAuditIssue.toString());
//			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get5GCBandeNBpackageinventory(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					
					Element element = (Element) inChildNode;
					NodeList nodeList1 = element.getChildNodes();
					
					for (int j = 0; j < nodeList1.getLength(); j++) {
						Node nodeList2 = nodeList1.item(j);
						if (Node.ELEMENT_NODE == nodeList2.getNodeType()) {

							Element element1 = (Element) nodeList2;
							NodeList nodeList3 = element1.getChildNodes();
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							for (int k = 0; k < nodeList3.getLength(); k++) {
								
								Node n1 = nodeList3.item(k);
								if (Node.ELEMENT_NODE == n1.getNodeType()) {									
									headerList1.add(n1.getNodeName().trim());
									objtableData.put(n1.getNodeName().trim(), n1.getTextContent());									
								}
							}
							tabelData1.add(objtableData);
						}
					}
					
				}
			}
			checkEmptyTableCband(tabelData1, command, runTestEntity, enbId);
			
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			StringBuilder softwareAuditIssue = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();

			String softwareVersion = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName, "Day0_1", "eNBId");
			if(!ObjectUtils.isEmpty(listOfCiqDetails)) {
				CIQDetailsModel ciqDetailsModel = listOfCiqDetails.get(0);
				if(ciqDetailsModel.getCiqMap().containsKey("eNBVersion")) {
					softwareVersion = ciqDetailsModel.getCiqMap().get("eNBVersion").getHeaderValue().trim();
				}
			}
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String packageId = "";
				String softwareName = "";
				
				if(tdData.containsKey("software-name")) {
					softwareName = tdData.get("software-name");
				}
				if(tdData.containsKey("package-id")) {
					packageId = tdData.get("package-id");
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if(resultTableData.getKey().equalsIgnoreCase("software-version") && packageId.equalsIgnoreCase("active-software")
							//&& !resultTableData.getValue().trim().equalsIgnoreCase(softwareVersion)) {
							&& !versionCompare(StringUtils.substringBefore(softwareVersion, "("), StringUtils.substringBefore(resultTableData.getValue().trim(), "("))) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>"
								+ resultTableData.getValue() + "</td>\n");
						softwareAuditIssue.append("software-name: " + softwareName + " software-version : "+ resultTableData.getValue() + "\n");
					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
				}
				tableData.append("</tr>\n");
				
			}
		
			
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			if(softwareAuditIssue.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(46, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						softwareAuditIssue.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(46, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(46, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public String get4GsoftwareVersion(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		String softwareVersion = "";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					
					Element element = (Element) inChildNode;
					NodeList nodeList1 = element.getChildNodes();
					
					for (int j = 0; j < nodeList1.getLength(); j++) {
						Node nodeList2 = nodeList1.item(j);
						if (Node.ELEMENT_NODE == nodeList2.getNodeType()) {

							Element element1 = (Element) nodeList2;
							NodeList nodeList3 = element1.getChildNodes();
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							for (int k = 0; k < nodeList3.getLength(); k++) {
								
								Node n1 = nodeList3.item(k);
								if (Node.ELEMENT_NODE == n1.getNodeType()) {									
									headerList1.add(n1.getNodeName().trim());
									objtableData.put(n1.getNodeName().trim(), n1.getTextContent());									
								}
							}
							tabelData1.add(objtableData);
						}
					}
					
				}
			}
			
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if(tdData.containsKey("package-id") && tdData.get("package-id").equalsIgnoreCase("active-software")
						&& tdData.containsKey("software-version")) {
					softwareVersion = tdData.get("software-version");
				}
				
			}
			
			
		} catch(Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return softwareVersion;
	}
		
	public boolean checkportDownAlarmEntries(String value, Set<String> oranidSet) {
		boolean status = true;
		try {
			if((value.contains("FRONTHAUL_PORT[0]") || value.contains("FRONTHAUL_PORT[3]")) 
					&& oranidSet.contains("0")) {
				status = false;
			} else if((value.contains("FRONTHAUL_PORT[1]") || value.contains("FRONTHAUL_PORT[4]")) 
					&& oranidSet.contains("1")) {
				status = false;
			} else if((value.contains("FRONTHAUL_PORT[2]") || value.contains("FRONTHAUL_PORT[5]")) 
					&& oranidSet.contains("2")) {
				status = false;
			}else if(value.contains("MIDHAUL")) {
				status = false;
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return status;
	}

	public StringBuilder getHtmlErrorOutput(String fullOutputLog,String command, String programName, RunTestEntity runTestEntity, String enbId, String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String errorMessage = "";
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			if(outputLog.contains("<rpc-reply") && outputLog.contains("<rpc-error")) {
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
				DocumentBuilder builder = factory.newDocumentBuilder();
				outputLog = "<parent>" + outputLog + "</parent>";

				Document document = builder.parse(new InputSource(new StringReader(outputLog)));
				NodeList nodeList = document.getElementsByTagName("rpc-error");
				for (int i = 0; i < nodeList.getLength(); i++) {
					Node inChildNode = nodeList.item(i);
					if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
						
						Element element = (Element) inChildNode;
						errorMessage = getXmlElementData(element, "error-message");
					}
				}
				if(errorMessage.isEmpty() || errorMessage.equals("-")) {
					errorMessage = "Error has occured while executing curl command";
				}
			} else if(command.equalsIgnoreCase(XmlCommandsConstants.CBAND_F1U_SOURCEIP) && outputLog.contains("<rpc-reply")){
				command = XmlCommandsConstants.CBAND_F1U_DESTINATIONIP;
				outputLog = StringUtils.substringAfter(fullOutputLog, command);
				outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
				if(outputLog.contains("<rpc-reply") && outputLog.contains("<rpc-error")) {
					DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
					DocumentBuilder builder = factory.newDocumentBuilder();
					outputLog = "<parent>" + outputLog + "</parent>";

					Document document = builder.parse(new InputSource(new StringReader(outputLog)));
					NodeList nodeList = document.getElementsByTagName("rpc-error");
					for (int i = 0; i < nodeList.getLength(); i++) {
						Node inChildNode = nodeList.item(i);
						if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
							
							Element element = (Element) inChildNode;
							errorMessage = getXmlElementData(element, "error-message");
						}
					}
					if(errorMessage.isEmpty() || errorMessage.equals("-")) {
						errorMessage = "Error has occured while executing curl command";
					}
				} else {
					errorMessage = "Script not Executed";
				}
			} else if(command.equalsIgnoreCase(XmlCommandsConstants.DSS_F1U_SOURCEIP) && outputLog.contains("<rpc-reply")){
				command = XmlCommandsConstants.DSS_F1U_DESTINATIONIP;
				outputLog = StringUtils.substringAfter(fullOutputLog, command);
				outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
				if(outputLog.contains("<rpc-reply") && outputLog.contains("<rpc-error")) {
					DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
					DocumentBuilder builder = factory.newDocumentBuilder();
					outputLog = "<parent>" + outputLog + "</parent>";

					Document document = builder.parse(new InputSource(new StringReader(outputLog)));
					NodeList nodeList = document.getElementsByTagName("rpc-error");
					for (int i = 0; i < nodeList.getLength(); i++) {
						Node inChildNode = nodeList.item(i);
						if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
							
							Element element = (Element) inChildNode;
							errorMessage = getXmlElementData(element, "error-message");
						}
					}
					if(errorMessage.isEmpty() || errorMessage.equals("-")) {
						errorMessage = "Error has occured while executing curl command";
					}
				} else {
					errorMessage = "Script not Executed";
				}
			} else if(command.equalsIgnoreCase(XmlCommandsConstants.RSSI_USE_CASE) && outputLog.contains("DUO ERROR")){
				errorMessage = "DUO SANE ERROR : RSSI Test did not run because of DUO SANE issue";
			} else {
				errorMessage = "Script not Executed";
			}
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>" + errorMessage + "</td></tr>\n");
			htmlContent.append("</table>");
			addErrorauditSummaryReport(command, errorMessage, programName, runTestEntity, enbId, dbcollectionFileName);
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public void addErrorauditSummaryReport(String command, String errorMessage, String programName, RunTestEntity runTestEntity, String enbId, String dbcollectionFileName) {
		if(programName.contains("4G-USM-LIVE")) {
			if(errorMessage.equals("Script not Executed")) {
				audit4GSummaryService.createAudit4GSummaryEntity(102, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			} else if(errorMessage.toUpperCase().contains("TARGET NE IS NOT FOUND")) {
				audit4GSummaryService.createAudit4GSummaryEntity(103, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			} else if (errorMessage.equals("DUO SANE ERROR : RSSI Test did not run because of DUO SANE issue")) {
				audit4GSummaryService.createAudit4GSummaryEntity(81, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						 errorMessage);
			} else {
				audit4GSummaryService.createAudit4GSummaryEntity(101, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			}
		}else if(programName.contains("4G-FSU")) {
			if(errorMessage.equals("Script not Executed")) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(102, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			} else if(errorMessage.toUpperCase().contains("TARGET NE IS NOT FOUND")) {
				int auditRuleId = 103;
				if(command.contains("Audit4G_eNB")) {
					auditRuleId = 106;
				}  else if(command.contains("Audit4G_FSU")) {
					auditRuleId = 107;
				}
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(auditRuleId, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			} else {

				int auditRuleId = 101;
				if(command.contains("Audit4G_eNB")) {
					auditRuleId = 104;
				}  else if(command.contains("Audit4G_FSU")) {
					auditRuleId = 105;
				}
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(auditRuleId, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			}
		}  else if(programName.contains("5G-CBAND")) {
			if(errorMessage.equals("Script not Executed")) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(102, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			} else if(errorMessage.toUpperCase().contains("TARGET NE IS NOT FOUND") || errorMessage.toUpperCase().contains("TARGET NE IS NOT INITIALIZED")) {
				int auditRuleId = 103;
				if(command.contains("CBand_eNB")) {
					auditRuleId = 104;
					String enb4GVendor = "";
					List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName, "Day0_1", "eNBId");
					if(!ObjectUtils.isEmpty(listOfCiqDetails)) {
						CIQDetailsModel ciqDetailsModel = listOfCiqDetails.get(0);
						if(ciqDetailsModel.getCiqMap().containsKey("eNBVendor")) {
							enb4GVendor = ciqDetailsModel.getCiqMap().get("eNBVendor").getHeaderValue().trim();
						}
					}
					if(enb4GVendor.isEmpty() || !enb4GVendor.equalsIgnoreCase("Nokia")) {
						auditRuleId = 107;
					}
				} else if(command.contains("CBand_AUPF") || command.contains(XmlCommandsConstants.CBAND_F1U_DESTINATIONIP)) {
					auditRuleId = 105;
				} else if(command.contains("CBand_vDU")) {
					auditRuleId = 106;
				} else if(command.contains("CBand_ACPF")) {
					auditRuleId = 108;
				}
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(auditRuleId, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			} else {
				int auditRuleId = 101;
				if(command.contains("CBand_eNB")) {
					auditRuleId = 109;
				} else if(command.contains("CBand_AUPF") || command.contains(XmlCommandsConstants.CBAND_F1U_DESTINATIONIP)) {
					auditRuleId = 111;
				} else if(command.contains("CBand_vDU")) {
					auditRuleId = 110;
				} else if(command.contains("CBand_ACPF")) {
					auditRuleId = 112;
				}
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(auditRuleId, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			}
		} else if(programName.contains("5G-DSS")) {
			if(errorMessage.equals("Script not Executed")) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(102, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			} else if(errorMessage.toUpperCase().contains("TARGET NE IS NOT FOUND")) {
				int auditRuleId = 103;
				if(command.contains("DSS_eNB")) {
					auditRuleId = 104;
					String enb4G = "";
					List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName, "vDUGrowSiteLevel(Day1)CQ", "eNBId");
					if(!ObjectUtils.isEmpty(listOfCiqDetails)) {
						CIQDetailsModel ciqDetailsModel = listOfCiqDetails.get(0);
						if(ciqDetailsModel.getCiqMap().containsKey("4GeNB")) {
							enb4G = ciqDetailsModel.getCiqMap().get("4GeNB").getHeaderValue().trim();
						}
					}
					if(!enb4G.isEmpty()) {
						NeMappingModel neMappingModel = new NeMappingModel();
						CustomerDetailsEntity programDetailsEntity = new CustomerDetailsEntity();
						programDetailsEntity.setProgramName("VZN-4G-USM-LIVE");
						neMappingModel.setProgramDetailsEntity(programDetailsEntity);
						neMappingModel.setEnbId(enb4G);
						List<NeMappingEntity> neMappingEntities = neMappingService.getNeMapping(neMappingModel);
						if ((CommonUtil.isValidObject(neMappingEntities) && neMappingEntities.size() > 0) 
								&& (CommonUtil.isValidObject(neMappingEntities.get(0))
										&& CommonUtil.isValidObject(neMappingEntities.get(0).getSiteConfigType())
										&& (neMappingEntities.get(0).getSiteConfigType().length() > 0))) {
							auditRuleId = 107;
						}
					}
				} else if(command.contains("DSS_AUPF")) {
					auditRuleId = 105;
				} else if(command.contains("DSS_vDU")) {
					auditRuleId = 106;
				} else if(command.contains("DSS_ACPF")) {
					auditRuleId = 108;
				} else if(command.contains("DSS_FSU")) {
					auditRuleId = 114;
					String enb4G = "";
					List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName, "vDUGrowSiteLevel(Day1)CQ", "eNBId");
					if(!ObjectUtils.isEmpty(listOfCiqDetails)) {
						CIQDetailsModel ciqDetailsModel = listOfCiqDetails.get(0);
						if(ciqDetailsModel.getCiqMap().containsKey("4GeNB")) {
							enb4G = ciqDetailsModel.getCiqMap().get("4GeNB").getHeaderValue().trim();
						}
					}
					if(!enb4G.isEmpty()) {
						NeMappingModel neMappingModel = new NeMappingModel();
						CustomerDetailsEntity programDetailsEntity = new CustomerDetailsEntity();
						programDetailsEntity.setProgramName("VZN-4G-USM-LIVE");
						neMappingModel.setProgramDetailsEntity(programDetailsEntity);
						neMappingModel.setEnbId(enb4G);
						List<NeMappingEntity> neMappingEntities = neMappingService.getNeMapping(neMappingModel);
						if ((CommonUtil.isValidObject(neMappingEntities) && neMappingEntities.size() > 0) 
								&& (CommonUtil.isValidObject(neMappingEntities.get(0))
										&& CommonUtil.isValidObject(neMappingEntities.get(0).getSiteConfigType())
										&& (neMappingEntities.get(0).getSiteConfigType().length() > 0))) {
							auditRuleId = 115;
						}
					}
				}
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(auditRuleId, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			} else {
				int auditRuleId = 101;
				if(command.contains("DSS_eNB")) {
					auditRuleId = 109;
				} else if(command.contains("DSS_AUPF")) {
					auditRuleId = 111;
				} else if(command.contains("DSS_vDU")) {
					auditRuleId = 110;
				} else if(command.contains("DSS_ACPF")) {
					auditRuleId = 112;
				} else if(command.contains("DSS_FSU")) {
					auditRuleId = 113;
				}
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(auditRuleId, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						command + " : " + errorMessage);
			}
		}
	}

	public StringBuilder getvDUAuditCBandCellStatus(String fullOutputLog, String command, String enbId, String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			String entry12 = "gutran-du-cell-entries";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("cell-identity");
			headerList12.add("cell-num");
			headerList12.add("cell-path-type");
			headerList12.add("administrative-state");
			headerList12.add("operational-state");
			headerList12.add("activation-state");
			headerList12.add("dpp-id");
			headerList12.add("user-label");
			headerList12.add("test-flag");
			headerList12.add("power");
			headerList12.add("subcarrier-spacing-common");
			headerList12.add("dl-subcarrier-spacing");
			headerList12.add("ul-subcarrier-spacing");
			headerList12.add("auto-unlock-flag");

			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("gnb-du-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("gutran-du-cell-entries");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList12.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
											getXmlElementData(elementchild3, header));
									}
									tabelData12.add(objtableData);
								}
							}
						}
					}
					
				}
			}

			checkEmptyTableCband(tabelData12, entry12, runTestEntity, enbId);
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList12.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue18 = new StringBuilder();
			StringBuilder auditIssue25 = new StringBuilder();
			StringBuilder auditIssue26 = new StringBuilder();
			StringBuilder auditIssue27 = new StringBuilder();
			StringBuilder auditIssue28 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			Set<String> oranidSet = new HashSet<>();
			
			String f1cIpAddr = "";
			String f1uIpAddr = "";
			String cuIpAddr = "";
			List<CIQDetailsModel> listOfCiqDetailsday01 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"Day0_1", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailsday01)) {
				if(listOfCiqDetailsday01.get(0).getCiqMap().containsKey("cuIPaddress")) {
					cuIpAddr = listOfCiqDetailsday01.get(0).getCiqMap().get("cuIPaddress").getHeaderValue().trim();
				}
				if(listOfCiqDetailsday01.get(0).getCiqMap().containsKey("f1cAddress")) {
					f1cIpAddr = listOfCiqDetailsday01.get(0).getCiqMap().get("f1cAddress").getHeaderValue().trim();
				}
				if(listOfCiqDetailsday01.get(0).getCiqMap().containsKey("f1uAddress")) {
					f1uIpAddr = listOfCiqDetailsday01.get(0).getCiqMap().get("f1uAddress").getHeaderValue().trim();
				}
			}
			
			List<CIQDetailsModel> listOfCiqDetailsday2 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"Day2", "eNBId");
			
			LinkedHashMap<String, List<String>> validationMap1 = new LinkedHashMap<>();
			//validationMap1.put("operational-state", Arrays.asList("enabled"));
			//htmlContent.append(createHtmltableDSS(headerList1, entry1, tabelData1, validationMap1));
			
			htmlContent
			.append("<tr><td colspan=" + headerList12.size() + " bgcolor=#EEEEEE><b>" + entry12 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList12) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData12) {
				tableData.append("<tr>\n");
				String cellid = "";
				String cellnum = "";
				String cellPathType = "";
				String adminState = "locked";
				String operationalState = "disabled";
				String activationstate = "activated";
				if(!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
					for(CIQDetailsModel ciqData : listOfCiqDetailsday2) {
						if(ciqData.getCiqMap().containsKey("cell_identity") && ciqData.getCiqMap().get("cell_identity").getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if(ciqData.getCiqMap().containsKey("cellNum")) {
								cellnum = ciqData.getCiqMap().get("cellNum").getHeaderValue().trim();
							}
							if(ciqData.getCiqMap().containsKey("Cell_Path_Type")) {
								cellPathType = ciqData.getCiqMap().get("Cell_Path_Type").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					}  else if (key.equals("cell-num")) {
						if (value.equals(cellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue25.append("cell-identity : " + tdData.get("cell-identity") + " cell-num : " + tdData.get("cell-num") + "\n");
						}
					} else if (key.equals("cell-path-type")) {
						if (value.equals(cellPathType)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue18.append("cell-identity : " + tdData.get("cell-identity") + " cell-path-type : " + tdData.get("cell-path-type") + "\n");
							
						}
					}  else if (key.equals("administrative-state")) {
						if (value.equals(adminState)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue26.append("cell-identity : " + tdData.get("cell-identity") + " administrative-state : " + tdData.get("administrative-state") + "\n");
						}
					}else if (key.equals("operational-state")) {
						if (value.equals(operationalState)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue27.append("cell-identity : " + tdData.get("cell-identity") + " operational-state : " + tdData.get("operational-state") + "\n");
						}
					}  else if (key.equals("activation-state")) {
						if (value.equals(activationstate)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue28.append("cell-identity : " + tdData.get("cell-identity") + " activation-state : " + tdData.get("activation-state") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);			
			
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue18);
			auditIssueAll.append(auditIssue25);
			auditIssueAll.append(auditIssue26);
			auditIssueAll.append(auditIssue27);
			auditIssueAll.append(auditIssue28);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData12, auditIssueAll);
			
			
			if(auditIssue18.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(18, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue18.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue25.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(42, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue25.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue26.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(43, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue26.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue27.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(44, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue27.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue28.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(45, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue28.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	

	public StringBuilder getACPFA2Checks(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("cell-identity");
			headerList2.add("index");
			headerList2.add("a2-threshold-rsrp");
			headerList2.add("a2-time-to-trigger");
			headerList2.add("a2-purpose");
			
			NodeList nodeList = document.getElementsByTagName("gutran-cu-cell");
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("gutran-cu-cell-entries");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("report-config-entries");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("a2-report-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild, "cell-identity"));
											objtableData.put("index", getXmlElementData(elementchild1, "index"));
											objtableData.put("a2-threshold-rsrp",
													getXmlElementData(elementchild2, "a2-threshold-rsrp"));
											objtableData.put("a2-time-to-trigger",
													getXmlElementData(elementchild2, "a2-time-to-trigger"));
											objtableData.put("a2-purpose",
													getXmlElementData(elementchild2, "a2-purpose"));

											tabelData2.add(objtableData);
										}
									}
								}
							}

						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>"
					+ "ACPF_A2_Checks" + "</b></td></tr>\n");

			Set<Integer> cellIdset = getcellIds(enbId, dbcollectionFileName, "5GNRCIQAU", "eNBId");

			String entry = "a2-report-config";
			trimTabledata(tabelData2, cellIdset, "cell-identity");
			htmlContent.append(createHtmltable(headerList2, entry, tabelData2));

			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + "ACPF_A2_checks" + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	
	public StringBuilder getACPFA3Checks(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("cell-identity");
			headerList3.add("index");
			headerList3.add("a3-time-to-trigger");
			headerList3.add("a3-purpose");
			
			NodeList nodeList = document.getElementsByTagName("gutran-cu-cell");
			
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList childNodeList = element.getElementsByTagName("gutran-cu-cell-entries");

					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("report-config-entries");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("a3-report-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {

										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											objtableData.put("cell-identity",
													getXmlElementData(elementchild, "cell-identity"));
											objtableData.put("index", getXmlElementData(elementchild1, "index"));
											objtableData.put("a3-time-to-trigger",
													getXmlElementData(elementchild2, "a3-time-to-trigger"));
											objtableData.put("a3-purpose",
													getXmlElementData(elementchild2, "a3-purpose"));

											tabelData3.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>"
					+ "ACPF_A3_Checks" + "</b></td></tr>\n");

			Set<Integer> cellIdset = getcellIds(enbId, dbcollectionFileName, "5GNRCIQAU", "eNBId");

			String entry = "a3-report-config";
			trimTabledata(tabelData3, cellIdset, "cell-identity");
			htmlContent.append(createHtmltable(headerList3, entry, tabelData3));

			htmlContent.append("</table>\n");
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + "ACPF_A3_checks" + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	
	static boolean versionCompare(String v1, String v2)
	{
		try {
			int vnum1 = 0, vnum2 = 0;

			for (int i = 0, j = 0; (i < v1.length()
			|| j < v2.length());) {
				while (i < v1.length()
						&& v1.charAt(i) != '.') {
						vnum1 = vnum1 * 10
						+ (v1.charAt(i) - '0');
						i++;
				}

				while (j < v2.length()
						&& v2.charAt(j) != '.') {
					vnum2 = vnum2 * 10
							+ (v2.charAt(j) - '0');
					j++;
				}

				if (vnum1 > vnum2)
					return false;
				if (vnum2 > vnum1)
					return true;

				vnum1 = vnum2 = 0;
				i++;
				j++;
			}
			return true;
		} catch (Exception e) {
			
			logger.error(ExceptionUtils.getFullStackTrace(e));
			return false;
		}
		
	}
	
	public void checkEmptyTableCband(List<LinkedHashMap<String, String>> tabelData, String entry, RunTestEntity runTestEntity, String enbId) {
		try {
			if(tabelData.isEmpty()) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(201, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						entry + " : No Data From USM");
			}
		} catch(Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public boolean putMplaneipv6ErrorCband(List<LinkedHashMap<String, String>> mplanetabelData, LinkedHashMap<String, String> alarmtabelData, Set<String> locationSet,
			RunTestEntity runTestEntity, String enbId) {
		boolean status = false;
		try {
			Map<String, String> ipList = new HashMap<>();
			for(LinkedHashMap<String, String> tdData : mplanetabelData) {
				if(compareIPAddr(tdData.get("mplane-ipv6").trim(), tdData.get("mplane-ipv6").trim())) {
					ipList.put(tdData.get("o-ran-ru-id"), tdData.get("mplane-ipv6"));
				}
			}
			if(alarmtabelData.get("alarm-type").equals("port-down")) {
				if(alarmtabelData.get("location").contains("FRONTHAUL_PORT[0]") && ipList.containsKey("0")) {
					audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(47, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
							"mplaneipv6 : " + ipList.get("0") + " Alarm Location : " + alarmtabelData.get("location"));
					status = true;
				} else if(alarmtabelData.get("location").contains("FRONTHAUL_PORT[1]") && ipList.containsKey("1")) {
					audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(48, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
							"mplaneipv6 : " + ipList.get("1") + " Alarm Location : " + alarmtabelData.get("location"));
					status = true;
				} else if(alarmtabelData.get("location").contains("FRONTHAUL_PORT[2]") && ipList.containsKey("2")) {
					audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(49, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
							"mplaneipv6 : " + ipList.get("2") + " Alarm Location : " + alarmtabelData.get("location"));
					status = true;
				} else if(alarmtabelData.get("location").contains("FRONTHAUL_PORT[3]") && ipList.containsKey("0") && !locationSet.contains("00")) {
					audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(50, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
							"mplaneipv6 : " + ipList.get("0") + " Alarm Location : " + alarmtabelData.get("location"));
					status = true;
				} else if(alarmtabelData.get("location").contains("FRONTHAUL_PORT[4]") && ipList.containsKey("1") && !locationSet.contains("10")) {
					audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(51, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
							"mplaneipv6 : " + ipList.get("1") + " Alarm Location : " + alarmtabelData.get("location"));
					status = true;
				} else if(alarmtabelData.get("location").contains("FRONTHAUL_PORT[5]") && ipList.containsKey("2") && !locationSet.contains("20")) {
					audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(52, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
							"mplaneipv6 : " + ipList.get("2") + " Alarm Location : " + alarmtabelData.get("location"));
					status = true;
				}
			}
		} catch(Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return status;
	}
	
	public StringBuilder get5GCBandvDUMMUSerialNum(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			
			String softwareVersion1 = "";
			softwareVersion1 = get4GsoftwareVersion(fullOutputLog, XmlCommandsConstants.CBAND_VDU_PACKAGEINVENTORY, enbId, dbcollectionFileName, runTestEntity);
	        String neVersion1 = StringUtils.substringBefore(softwareVersion1, "-");
			

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("o-ran-ru-id");
			headerList1.add("name");
			headerList1.add("class");
			headerList1.add("serial-num");
			headerList1.add("hardware-rev");
			headerList1.add("mfg-name");
			headerList1.add("mfg-date");
			headerList1.add("product-code");
			headerList1.add("dying-gasp-support");
			headerList1.add("dynamic-power-amplifier-control-enabled");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			
			//gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("o-ran-radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					
					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("o-ran-hardware");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("component");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(element, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					
				}
			}
			if(tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}								
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
					+ "</b></td></tr>\n");
			
			List<CIQDetailsModel> listOfCiqDetailsday2 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"Day2", "eNBId");
			
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			StringBuilder auditIssue = new StringBuilder();
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			StringBuilder auditIssue9 = new StringBuilder();
			StringBuilder auditIssue10 = new StringBuilder();
			StringBuilder auditIssue11 = new StringBuilder();
			StringBuilder auditIssue12 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String hardwareRev =tdData.get("hardware-rev");
				hardwareRev = StringUtils.substringBefore(hardwareRev,".");
				int hardwareResvalue = Integer.valueOf(hardwareRev);
				String oruid = "";
				String serialNumber = "";
				if(!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
					for(CIQDetailsModel ciqData : listOfCiqDetailsday2) {
						if(ciqData.getCiqMap().containsKey("oruSerialNumber") && ciqData.getCiqMap().get("oruSerialNumber").getHeaderValue().trim().equalsIgnoreCase(tdData.get("serial-num").trim())) {
							serialNumber = tdData.get("serial-num").trim();
							if(ciqData.getCiqMap().containsKey("oruId")) {
								oruid = ciqData.getCiqMap().get("oruId").getHeaderValue().trim();
							}
						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("serial-num")) {
						if (value.trim().equalsIgnoreCase(serialNumber)) {
							if(oruid.equalsIgnoreCase(tdData.get("o-ran-ru-id").trim())) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								if(tdData.get("o-ran-ru-id").trim().equals("0") && oruid.equals("1")) {
									auditIssue4.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " serial-num : " + tdData.get("serial-num") + "\n");
								} else if(tdData.get("o-ran-ru-id").trim().equals("0") && oruid.equals("2")) {
									auditIssue5.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " serial-num : " + tdData.get("serial-num") + "\n");
								} else if(tdData.get("o-ran-ru-id").trim().equals("1") && oruid.equals("0")) {
									auditIssue6.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " serial-num : " + tdData.get("serial-num") + "\n");
								} else if(tdData.get("o-ran-ru-id").trim().equals("1") && oruid.equals("2")) {
									auditIssue7.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " serial-num : " + tdData.get("serial-num") + "\n");
								} else if(tdData.get("o-ran-ru-id").trim().equals("2") && oruid.equals("0")) {
									auditIssue8.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " serial-num : " + tdData.get("serial-num") + "\n");
								} else if(tdData.get("o-ran-ru-id").trim().equals("2") && oruid.equals("1")) {
									auditIssue9.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " serial-num : " + tdData.get("serial-num") + "\n");
								}
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
							
						} else {
							/*tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if(tdData.get("o-ran-ru-id").trim().equals("0")) {
								auditIssue1.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " serial-num : " + tdData.get("serial-num") + "\n");
							} else if(tdData.get("o-ran-ru-id").trim().equals("1")) {
								auditIssue2.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " serial-num : " + tdData.get("serial-num") + "\n");
							} else if(tdData.get("o-ran-ru-id").trim().equals("2")) {
								auditIssue3.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " serial-num : " + tdData.get("serial-num") + "\n");
							} else {
								auditIssue.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " serial-num : " + tdData.get("serial-num") + "\n");
							}*/
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}else if (key.equals("hardware-rev")) {
						if (hardwareResvalue>4 && !(neVersion1.contains("22") )) {
							if(tdData.get("o-ran-ru-id").trim().equals("0"))
								auditIssue10.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +" software-version : " + neVersion1+ " hardware-rev : " + value + "\n");
								else if(tdData.get("o-ran-ru-id").trim().equals("1")) {
								auditIssue11.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +" software-version : " + neVersion1+ " hardware-rev : " + value + "\n");
								}else if(tdData.get("o-ran-ru-id").trim().equals("2")) {
								auditIssue12.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +" software-version : " + neVersion1+ " hardware-rev : " + value + "\n");
								}
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			auditIssueAll.append(auditIssue7);
			auditIssueAll.append(auditIssue8);
			auditIssueAll.append(auditIssue9);
			auditIssueAll.append(auditIssue10);
			auditIssueAll.append(auditIssue11);
			auditIssueAll.append(auditIssue12);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			/*if(auditIssue.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(58, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue.toString());
			}
			if(auditIssue1.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(61, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue1.toString());
			}
			if(auditIssue2.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(62, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue2.toString());
			}
			if(auditIssue3.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(63, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue3.toString());
			}*/
			if(auditIssue4.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(61, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue4.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(61, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(61, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue5.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(62, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue5.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(62, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(62, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue6.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(63, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue6.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(63, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(63, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue7.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(64, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue7.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(64, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(64, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue8.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(65, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue8.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(65, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(65, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
	
			if(auditIssue9.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(66, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue9.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(66, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(66, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue10.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(82, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue10.toString());
			}
			if(auditIssue11.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(83, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue11.toString());
			}
			if(auditIssue12.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(84, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue12.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder getvDUAuditCBandvDuStatus(String fullOutputLog, String command, String enbId, String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			String entry4 = "operational-mode-status";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("du-reparenting");
			headerList4.add("ne-id");
			headerList4.add("ne-type");
			headerList4.add("system-type");
			headerList4.add("user-label");
			headerList4.add("administrative-state");
			headerList4.add("operational-state");
			headerList4.add("gpl-version");
			headerList4.add("operational-mode");
			
			
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Iterator<String> itr = headerList4.iterator();
					String header = itr.next();
					objtableData.put(header, getXmlElementData(elementchild1, header));
					while (itr.hasNext()) {
						header = itr.next();
						if(header.equalsIgnoreCase("operational-mode") && elementchild1.getElementsByTagName(header) != null
								&& elementchild1.getElementsByTagName(header).getLength() > 0) {
							for(int z=0; z< elementchild1.getElementsByTagName(header).getLength();z++) {
								if(elementchild1.getElementsByTagName(header).item(z).getParentNode().getNodeName().equalsIgnoreCase("managed-element")) {
									objtableData.put(header, elementchild1.getElementsByTagName(header).item(z).getTextContent());
								}
							}
						} else {
							objtableData.put(header,
									getXmlElementData(elementchild1, header));
						}
					}
					tabelData4.add(objtableData);
					
				}
			}
			

			checkEmptyTableCband(tabelData4, entry4, runTestEntity, enbId);
			

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			//operational-mode-status
			htmlContent
			.append("<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("administrative-state")) {
						if (value.equals("locked")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("ne-id : " + tdData.get("ne-id") + " operational-mode : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("operational-state")) {
						if (value.equals("disabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("ne-id : " + tdData.get("ne-id") + " operational-mode : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
				
			htmlContent.append("</table>\n");
			
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			
			if(auditIssue1.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(67, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue1.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(67, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(67, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue2.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(68, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue2.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(68, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(68, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	
	public StringBuilder getvDUAuditCBandPortTranscieverData(String fullOutputLog, String command, String enbId, String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			String entry7 = "port-transceiver-data";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("o-ran-ru-id");
			headerList7.add("interface-name");
			headerList7.add("port-number");
			headerList7.add("name");
			headerList7.add("present");
			headerList7.add("vendor-id");
			headerList7.add("vendor-part");
			headerList7.add("vendor-rev");
			headerList7.add("serial-no");
			headerList7.add("SFF8472-compliance-code");
			headerList7.add("connector-type");
			headerList7.add("identifier");
			headerList7.add("nominal-bitrate");
			headerList7.add("low-bitrate-margin");
			headerList7.add("high-bitrate-margin");
			headerList7.add("rx-power-type");
			headerList7.add("rx-power");
			headerList7.add("tx-power");
			headerList7.add("tx-bias-current");
			headerList7.add("voltage");
			headerList7.add("temperature");
			headerList7.add("tx-wavelength");
			headerList7.add("manufacture-date");
			
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList childNodeList2 = elementchild1.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("o-ran-radio-unit-info");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									
									NodeList childNodeList4 = elementchild3.getElementsByTagName("port-transceiver-data");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList7.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
													getXmlElementData(elementchild4, header));
											}
											tabelData7.add(objtableData);											
										}
									}									
								}
							}
						}
					}					
				}
			}
			

			//checkEmptyTableCband(tabelData7, entry7, runTestEntity, enbId);
			

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue12 = new StringBuilder();
			StringBuilder auditIssue13 = new StringBuilder();
			StringBuilder auditIssue14 = new StringBuilder();
			
			
			//port-transceiver-data
			htmlContent
			.append("<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList7) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			
			List<AuditCbandHardwareDetailsEntity> auditCbandHardwareDetailsEntityList = auditCbandHardwareDetailsRepository.getAuditHardwareDetailsEntityList("");
			
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData7) {
				tableData.append("<tr>\n");
				boolean entryPresent =  false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if(key.equals("vendor-id")) {
						if(!ObjectUtils.isEmpty(auditCbandHardwareDetailsEntityList)) {
							String[] vendorID = auditCbandHardwareDetailsEntityList.get(0).getHardwareName().split(",");
							boolean vendorIdpresent = false;
							for(String venId : vendorID) {
								if(value.trim().equalsIgnoreCase(venId))
									vendorIdpresent = true;
							}
							if(vendorIdpresent) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								if(tdData.get("o-ran-ru-id").equals("0") && !entryPresent) {
									auditIssue12.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
										+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
									entryPresent = true;
								} else if(tdData.get("o-ran-ru-id").equals("1") && !entryPresent) {
									auditIssue13.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
										+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
									entryPresent = true;
								} else if(tdData.get("o-ran-ru-id").equals("2") && !entryPresent) {
									auditIssue14.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
										+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
									entryPresent = true;
								}
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {
							if(tdData.get("o-ran-ru-id").equals("0") && !entryPresent) {
								auditIssue12.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
									+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
								entryPresent = true;
							} else if(tdData.get("o-ran-ru-id").equals("1") && !entryPresent) {
								auditIssue13.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
									+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
								entryPresent = true;
							} else if(tdData.get("o-ran-ru-id").equals("2") && !entryPresent) {
								auditIssue14.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
									+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
								entryPresent = true;
							}
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("vendor-part")) {
						if(!ObjectUtils.isEmpty(auditCbandHardwareDetailsEntityList)) {
							String[] vendorNames = auditCbandHardwareDetailsEntityList.get(0).getVendorName().split(",");
							boolean vendorNamepresent = false;
							for(String venId : vendorNames) {
								if(value.trim().equalsIgnoreCase(venId))
									vendorNamepresent = true;
							}
							if(vendorNamepresent) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								if(tdData.get("o-ran-ru-id").equals("0") && !entryPresent) {
									auditIssue12.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
										+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
									entryPresent = true;
								} else if(tdData.get("o-ran-ru-id").equals("1") && !entryPresent) {
									auditIssue13.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
										+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
									entryPresent = true;
								} else if(tdData.get("o-ran-ru-id").equals("2") && !entryPresent) {
									auditIssue14.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
										+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
									entryPresent = true;
								}
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {
							if(tdData.get("o-ran-ru-id").equals("0") && !entryPresent) {
								auditIssue12.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
									+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
								entryPresent = true;
							} else if(tdData.get("o-ran-ru-id").equals("1") && !entryPresent) {
								auditIssue13.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
									+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
								entryPresent = true;
							} else if(tdData.get("o-ran-ru-id").equals("2") && !entryPresent) {
								auditIssue14.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " port-number: " + tdData.get("port-number") 
									+ " vendor-id: " + tdData.get("vendor-id") + " vendor-part: " + tdData.get("vendor-part") + "\n");
								entryPresent = true;
							}
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}					
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			
			htmlContent.append("</table>\n");
			
			if(auditIssue12.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(72, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue12.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(72, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(72, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue13.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(73, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue13.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(73, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(73, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if(auditIssue14.length()!=0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(74, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						auditIssue14.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(74, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(74, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	public StringBuilder get4GAuditcbrsid(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cbrs-mode");
			headerList1.add("user-id");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild = (Element) inChildNode;

					NodeList childNodeList1 = elementchild.getElementsByTagName("enb-function");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("cbrs");
							for (int l = 0; l < childNodeList2.getLength(); l++) {
								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();

									objtableData.put(header, getXmlElementData(elementchild2, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}

			if (tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			ArrayList<String> al = new ArrayList<>();

			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {
					if (!ObjectUtils.isEmpty(ciqDetailsModel)) {
						if (ciqDetailsModel.getCiqMap().containsKey("CBRS_user_id")) {
							al.add(ciqDetailsModel.getCiqMap().get("CBRS_user_id").getHeaderValue().trim()
									.replaceAll("[^a-zA-Z0-9]", ""));
						}

					}

				}
			}

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					String uid = "";
					if (tdData.containsKey("user-id")) {
						uid = tdData.get("user-id");
					}
					if (key.equals("cbrs-mode")) {
						if (value.equals("cbrs-on")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("cbrs-mode : " + tdData.get("cbrs-mode") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("user-id")) {
						if (al.contains(uid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("user-id : " + tdData.get("user-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					}

					else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(33, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(33, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(33, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	public StringBuilder get4GAuditfccid(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("fcc-id");
			headerList1.add("call-sign");
			headerList1.add("cbsd-category");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("cbrs");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			if (tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					String cbrsfccid = "";
					String cbsdcategory = "";
					String lcc = "";
					String cpri = "";
					String band = "";
					if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
						for (CIQDetailsModel ciqData : listOfCiqDetails) {
							if (ciqData.getCiqMap().containsKey("lCCCard")
									&& ciqData.getCiqMap().get("lCCCard").getHeaderValue().trim()
											.equals(tdData.get("connected-digital-unit-board-id").trim())
									&& ciqData.getCiqMap().containsKey("CRPIPortID")
									&& ciqData.getCiqMap().get("CRPIPortID").getHeaderValue().trim()
											.equalsIgnoreCase(tdData.get("connected-digital-unit-port-id").trim())) {

								lcc = tdData.get("connected-digital-unit-board-id");
								if (ciqData.getCiqMap().containsKey("CRPIPortID")) {
									cpri = ciqData.getCiqMap().get("CRPIPortID").getHeaderValue().trim();
								}
								if (ciqData.getCiqMap().containsKey("BandName")) {
									band = ciqData.getCiqMap().get("BandName").getHeaderValue().trim();
								}
								if (ciqData.getCiqMap().containsKey("CBRS_FCC_ID")) {
									cbrsfccid = ciqData.getCiqMap().get("CBRS_FCC_ID").getHeaderValue().trim();
								}
								if (ciqData.getCiqMap().containsKey("CBSD_Category")) {
									cbsdcategory = ciqData.getCiqMap().get("CBSD_Category").getHeaderValue().trim();
								}

							}
						}
					}

					if (key.equals("fcc-id")) {
						if (value.equalsIgnoreCase(cbrsfccid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("fcc-id : " + tdData.get("fcc-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("cbsd-category")) {
						if (cbsdcategory.contains(value)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("cbsd-category : " + tdData.get("cbsd-category") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("call-sign")) {
						if (value.equals("123")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue3.append("call-sign : " + tdData.get("call-sign") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}

			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(36, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(36, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(36, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	public StringBuilder get4Genbbandwidth(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("cell-band-carrier");
			headerList1.add("dl-bandwidth");
			headerList1.add("ul-bandwidth");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("eutran-cell-conf-idle");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			if (tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				String cellnum = "";
				String bandwidth = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("Cell_ID")
								&& ciqData.getCiqMap().get("Cell_ID").getHeaderValue().trim()
										.equals(tdData.get("cell-num").trim())
								&& ciqData.getCiqMap().containsKey("Bandwidth(MHz)")
								&& ciqData.getCiqMap().get("Bandwidth(MHz)").getHeaderValue().trim()
										.equalsIgnoreCase(bwCompare(tdData.get("dl-bandwidth").trim()))) {

							cellnum = tdData.get("cell-num");
							if (ciqData.getCiqMap().containsKey("Bandwidth(MHz)")) {
								bandwidth = ciqData.getCiqMap().get("Bandwidth(MHz)").getHeaderValue().trim();
							}
						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equalsIgnoreCase("cell-num")) {
						if (value.equalsIgnoreCase(cellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							// auditIssue1.append("cell-num : " + tdData.get("cell-num") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("dl-bandwidth")) {
						if (value.equalsIgnoreCase(bwCompare2(bandwidth))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("cell-num : " + tdData.get("cell-num") + "dl-bandwidth : "
									+ tdData.get("dl-bandwidth") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}

			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			/*
			 * if(auditIssue1.length() != 0) {
			 * audit4GSummaryService.createAudit4GSummaryEntity(38, runTestEntity.getId(),
			 * enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString()); }
			 */
			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(39, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(39, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(39, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	private String bwCompare(String lm) {
		if(lm != null && lm.equalsIgnoreCase("system-bandwidth-n25")) {
			return "5MHz";
			
		}
		else if(lm != null && lm.equalsIgnoreCase("system-bandwidth-n50")) {
			return "10MHz";
			
		}
		else if(lm != null && lm.equalsIgnoreCase("system-bandwidth-n75")) {
			return "15Mhz";
			
		}
		else if(lm != null && lm.equalsIgnoreCase("system-bandwidth-n100")) {
			return "20Mhz";
			
		}
		return null;
		
		
	}
	private String bwCompare2(String lm) {
		if(lm != null && lm.equalsIgnoreCase("5MHz")) {
			return "system-bandwidth-n25";
			
		}
		else if(lm != null && lm.equalsIgnoreCase("10MHz")) {
			return "system-bandwidth-n50";
			
		}
		else if(lm != null && lm.equalsIgnoreCase("15MHz")) {
			return "system-bandwidth-n75";
			
		}
		else if(lm != null && lm.equalsIgnoreCase("20MHz")) {
			return "system-bandwidth-n100";
			
		}
		return null;
		
		
	}
	public StringBuilder get4GAuditEnbCbsdState(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("cbsd-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("cbrs-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			if (tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cbsd-state")) {
						if (value.equals("cbrs-registered")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("cbsd-state : " + tdData.get("cbsd-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	public StringBuilder get4GAuditEnbCbsdAndGrantState(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("administrative-state");
			headerList1.add("cell-band-carrier");
			headerList1.add("operational-state");
			headerList1.add("cbsd-id");
			headerList1.add("grant-id");
			headerList1.add("cbsd-state");
			headerList1.add("grant-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("cbrs-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			if (tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					String cbsdstate = "";
					String grantstate = "";
					String administrativestate = "";
					String operationalstate = "";
					if (tdData.containsKey("cbsd-state")) {
						cbsdstate = tdData.get("cbsd-state");
					}
					if (tdData.containsKey("grant-state")) {
						grantstate = tdData.get("grant-state");
					}
					if (tdData.containsKey("administrative-state")) {
						administrativestate = tdData.get("administrative-state");
					}
					if (tdData.containsKey("operational-state")) {
						operationalstate = tdData.get("operational-state");
					}

					if (cbsdstate.equalsIgnoreCase("cbrs-registered") && grantstate.equalsIgnoreCase("cbrs-authorized")
							&& administrativestate.equalsIgnoreCase("unlocked")
							&& operationalstate.equalsIgnoreCase("disabled")) {
						if (!entryPresent)
							auditIssue1.append("cbsd-state : " + tdData.get("cbsd-state") + "grant-state : "
									+ tdData.get("grant-state") + "   administrative-state : "
									+ tdData.get("administrative-state") + "    operational-state : "
									+ tdData.get("operational-state") + "\n");
						entryPresent = true;
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					} else if (cbsdstate.equalsIgnoreCase("cbrs-registered")
							&& grantstate.equalsIgnoreCase("cbrs-authorized")
							&& administrativestate.equalsIgnoreCase("locked")
							&& operationalstate.equalsIgnoreCase("-")) {
						if (!entryPresent)
							auditIssue2.append("cbsd-state : " + tdData.get("cbsd-state") + " grant-state : "
									+ tdData.get("grant-state") + " administrative-state : "
									+ tdData.get("administrative-state") + " operational-state : "
									+ tdData.get("operational-state") + "\n");
						entryPresent = true;
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

					} else if (cbsdstate.equalsIgnoreCase("cbrs-registered")
							&& grantstate.equalsIgnoreCase("cbrs-granted") && administrativestate.equalsIgnoreCase("-")
							&& operationalstate.equalsIgnoreCase("-")) {
						if (!entryPresent)
							auditIssue3.append("cbsd-state : " + tdData.get("cbsd-state") + " grant-state : "
									+ tdData.get("grant-state") + " administrative-state : "
									+ tdData.get("administrative-state") + " operational-state : "
									+ tdData.get("operational-state") + "\n");
						entryPresent = true;
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

					} else if (cbsdstate.equalsIgnoreCase("cbrs-registered") && grantstate.equalsIgnoreCase("cbrs-idle")
							&& administrativestate.equalsIgnoreCase("-") && operationalstate.equalsIgnoreCase("-")) {
						if (!entryPresent)
							auditIssue4.append("cbsd-state : " + tdData.get("cbsd-state") + "grant-state : "
									+ tdData.get(" grant-state") + "administrative-state : "
									+ tdData.get(" administrative-state") + " operational-state : "
									+ tdData.get("operational-state") + "\n");
						entryPresent = true;
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

					} else if (cbsdstate.equalsIgnoreCase("cbrs-registered")
							&& grantstate.equalsIgnoreCase("cbrs-authorized")
							&& administrativestate.equalsIgnoreCase("unlocked")
							&& operationalstate.equalsIgnoreCase("enabled")) {
						tableData.append("<td align=center >" + value + "</td>\n");
					}

					else {
						if (!entryPresent)
							auditIssue5.append("cbsd-state : " + tdData.get("cbsd-state") + " grant-state : "
									+ tdData.get("grant-state") + " administrative-state : "
									+ tdData.get("administrative-state") + " operational-state : "
									+ tdData.get("operational-state") + "\n");
						entryPresent = true;

						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue5.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder get4GAuditPciAllocState(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("cell-band-carrier");
			headerList1.add("pci-alloc-status");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("eutran-cell-conf-idle");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			if (tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("pci-alloc-status")) {
						if (value.equals("real-alloc")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("cell-num : " + tdData.get("cell-num") +" pci-alloc-status : " + tdData.get("pci-alloc-status") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(46, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(46, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(46, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	public StringBuilder get4GAuditpreferredearfcn(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("cell-band-carrier");
			headerList1.add("preferred-earfcn");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("eutran-generic-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("cbrs-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			if (tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String cellnum = "";
				String earfcn = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("Cell_ID")
								&& ciqData.getCiqMap().get("Cell_ID").getHeaderValue().trim()
										.equals(tdData.get("cell-num").trim())
								&& ciqData.getCiqMap().containsKey("Preferred_Earfcn")
								&& ciqData.getCiqMap().get("Preferred_Earfcn").getHeaderValue().trim()
										.equals(tdData.get("preferred-earfcn").trim())) {
							cellnum = tdData.get("cell-num");
							if (ciqData.getCiqMap().containsKey("Preferred_Earfcn")) {
								earfcn = ciqData.getCiqMap().get("Preferred_Earfcn").getHeaderValue().trim();
							}
						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-num")) {
						if (value.equals(cellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("preferred-earfcn")) {
						if (value.equals(earfcn)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("cell-num: " + tdData.get("cell-num") + "preferred-earfcn: "
									+ tdData.get("preferred-earfcn") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(47, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(47, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(47, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	
	public StringBuilder get21BAUParamCheck(String fullOutputLog, String command, String enbId, String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "drx-profile-du";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("drx-cycle");
			headerList1.add("drx-on-duration-timer-msec-normal");
			headerList1.add("drx-inactivity-timer-normal");
			//Removed For Ticket SCRT-413
			/*String entry2 = "band-parameters-eutra";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("index");
			headerList2.add("band-indicator-eutra");
			headerList2.add("ca-bandwidth-class-dl-eutra");
			headerList2.add("ca-bandwidth-class-ul-eutra");
			String entry3 = "band-parameters-nr";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("index");
			headerList3.add("band-indicator-nr");
			headerList3.add("ca-bandwidth-class-dl-nr");
			headerList3.add("ca-bandwidth-class-ul-nr");*/
			String entry4 = "beam-management";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cell-identity");
			headerList4.add("dl-mu-mimo-switch");
			headerList4.add("num-trs-restriction-sdx50");
			String entry5 = "cell-cac-info";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-identity");
			headerList5.add("nsa-call-threshold");
			String entry6 = "coloc-covered-cell-num";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cell-identity");
			headerList6.add("coloc-covered-cell-num");
			String entry7 = "csl-tce-ems-server";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("csl-tce-ems-server-port");
			headerList7.add("csl-tce-ems-option");
			String entry8 = "csl-tce-server";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("csl-tce-server-ip-address");
			headerList8.add("csl-tce-server-port");
			headerList8.add("csl-tce-option");
			String entry9 = "drb-rlc-info-func";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("config-type");
			headerList9.add("qci");
			headerList9.add("gnb-timer-poll-retransmit");
			headerList9.add("ue-t-reassembly");
			headerList9.add("ue-timer-status-prohibit");
			String entry10 = "dl-mimo-configuration";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("dl-prb-bundling-size-static");
			headerList10.add("pmi-cycling-switch");
			String entry11 = "ul-power-control-common-config";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("cell-identity");
			headerList11.add("p0-nominal-with-grant");
			headerList11.add("p0-nominal-pucch");
			String entry12 = "tssi-info";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("modem-id");
			headerList12.add("cell-num");
			headerList12.add("path");
			headerList12.add("tssi");
			String entry13 = "ul-mimo-configuration";
			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("cell-identity");
			headerList13.add("ul-su-mimo-switch");
			headerList13.add("ul-mu-mimo-switch");
			headerList13.add("dynamic-srs-port-adaptation");
			String entry14 = "logical-channel-config";
			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("qci");
			headerList14.add("prioritised-bitrate");
			String entry15 = "nr-carrier-aggregation";
			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("cell-identity");
			headerList15.add("ca-available-type");
			headerList15.add("p-cell-only-flag");
			headerList15.add("max-dl-ca-cc-num");
			headerList15.add("max-ul-ca-cc-num");
			String entry16 = "pdsch-config";
			LinkedHashSet<String> headerList16 = new LinkedHashSet<>();
			headerList16.add("cell-identity");
			headerList16.add("dmrs-pdsch-fdm");
			headerList16.add("pdcch-pdsch-fdm");
			String entry17 = "prach-config";
			LinkedHashSet<String> headerList17 = new LinkedHashSet<>();
			headerList17.add("cell-identity");
			headerList17.add("preamble-receiver-target-power");
			headerList17.add("rsrp-threshold");
			headerList17.add("preamble-trans-max");
			headerList17.add("msg1-frequency-start");
			headerList17.add("prach-configuration-index");
			headerList17.add("ssb-per-rach-occasion-choice");
			headerList17.add("cb-preambles-per-ssb");
			/*String entry18 = "srs-resource-config";
			LinkedHashSet<String> headerList18 = new LinkedHashSet<>();
			headerList18.add("cell-identity");
			headerList18.add("b-srs-periodic");*/
			String entry19 = "ssb-configuration";
			LinkedHashSet<String> headerList19 = new LinkedHashSet<>();
			headerList19.add("cell-identity");
			headerList19.add("ssb-subcarrier-spacing");
			headerList19.add("ssb-periodicity");
			headerList19.add("nr-of-tx-ssb");
			headerList19.add("rmsi-coreset-index");
			headerList19.add("ssb-position");
			headerList19.add("ssb-freq-offset");
			headerList19.add("ssb-freq-align");
			headerList19.add("ssb-freq-config-mode");
			String entry20 = "managed-element";
			LinkedHashSet<String> headerList20 = new LinkedHashSet<>();
			headerList20.add("administrative-state");
			headerList20.add("operational-state");
			headerList20.add("sw-version");			
			String entry21 = "gutran-du-cell-entries";
			LinkedHashSet<String> headerList21 = new LinkedHashSet<>();
			headerList21.add("cell-identity");
			headerList21.add("administrative-state");
			headerList21.add("operational-state");
			String entry22 = "active-alarm-entries";
			LinkedHashSet<String> headerList22 = new LinkedHashSet<>();
			headerList22.add("alarm-unit-type");
			headerList22.add("alarm-unit-id");
			headerList22.add("alarm-type");
			headerList22.add("location");
			headerList22.add("raised-time");
			//headerList22.add("alarm-group");
			headerList22.add("probable-cause");
			headerList22.add("specific-problem");
			headerList22.add("severity");
			//headerList22.add("alarm-code");
			//headerList22.add("sequence-number");
			//headerList22.add("time-info");
			String entry23 = "pusch-power-control-config";
			LinkedHashSet<String> headerList23 = new LinkedHashSet<>();
			headerList23.add("cell-identity");
			headerList23.add("max-target-sinr-64qam");
			headerList23.add("rerror-tpc-up-cmd");
			String entry24 = "ul-ca-scheduler-config";
			LinkedHashSet<String> headerList24 = new LinkedHashSet<>();
			headerList24.add("cell-identity");
			headerList24.add("ul-total-power-limit-offset");
			String entry25 = "ip-interface";
			LinkedHashSet<String> headerList25 = new LinkedHashSet<>();
			headerList25.add("interface-name");
			headerList25.add("ip");
			headerList25.add("management");
			headerList25.add("control");
			headerList25.add("bearer");
			headerList25.add("ieee1588");
			String entry26 = "radio-unit-info";
			LinkedHashSet<String> headerList26 = new LinkedHashSet<>();
			headerList26.add("electrical-tilt");
			String entry27 = "digital-unit-entries";
			LinkedHashSet<String> headerList27 = new LinkedHashSet<>();
			headerList27.add("mtu");
			headerList27.add("tx-wavelength");
			headerList27.add("tx-power");
			headerList27.add("rx-power");
			
			String entry28 = "ul-mini-slot-config";
			LinkedHashSet<String> headerList28 = new LinkedHashSet<>();
			headerList28.add("cell-identity");
			headerList28.add("msg3-mini-slot-on-off");
			headerList28.add("ul-mini-slot-on-off");
			headerList28.add("ap-csi-rep-mini-slot-on-off");
			
			String entry29 = "pusch-waveform-config-idle";
			LinkedHashSet<String> headerList29 = new LinkedHashSet<>();
			headerList29.add("cell-identity");
			headerList29.add("pusch-waveform-adaptation-mode");
			
			String entry30 = "ul-scheduling-common-config";
			LinkedHashSet<String> headerList30 = new LinkedHashSet<>();
			headerList30.add("cell-identity");
			headerList30.add("retx-bsr-timer");
			
			String entry31 = "tdd-config-idle";
			LinkedHashSet<String> headerList31 = new LinkedHashSet<>();
			headerList31.add("cell-identity");
			headerList31.add("tdd-index");
			headerList31.add("nr-of-downlink-symbols-1");
			
			String entry32 = "multicarrier-scenario-functionality-config";
			LinkedHashSet<String> headerList32 = new LinkedHashSet<>();
			headerList32.add("fr2-ue-overheating-mitigation-support");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData16 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData17 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData18 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData19 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData20 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData21 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData22 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData23 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData24 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData25 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData26 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData27 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData28 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData29 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData30 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData31 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData32 = new ArrayList<>();
			
			//gnb-du-function
			NodeList nodeList = document.getElementsByTagName("gnb-du-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//gutran-du-cell
					NodeList childNodeList = element.getElementsByTagName("gutran-du-cell");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// gutran-du-cell-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("gutran-du-cell-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//drx-config-du-cell
									NodeList childNodeList2 = elementchild1.getElementsByTagName("drx-config-du-cell");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//drx-profile-du
											NodeList childNodeList3 = elementchild2.getElementsByTagName("drx-profile-du");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);
												}
											}
										}
									}
									
									//beam-management
									childNodeList2 = elementchild1.getElementsByTagName("beam-management");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList4.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData4.add(objtableData);
										}
									}
									
									//ul-scheduling-common-config
									childNodeList2 = elementchild1.getElementsByTagName("ul-scheduling-common-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList30.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData30.add(objtableData);
										}
									}
									
									//tdd-config-list
									childNodeList2 = elementchild1.getElementsByTagName("tdd-config-list");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList31.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData31.add(objtableData);
										}
									}
									
									//ul-mini-slot-config
									childNodeList2 = elementchild1.getElementsByTagName("ul-mini-slot-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList28.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData28.add(objtableData);
										}
									}
									
									//cell-cac-info
									childNodeList2 = elementchild1.getElementsByTagName("cell-cac-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList5.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData5.add(objtableData);
										}
									}
									
									//nr-carrier-aggregation
									childNodeList2 = elementchild1.getElementsByTagName("nr-carrier-aggregation");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											for (int z = 0; z < elementchild2
													.getElementsByTagName("coloc-covered-cell-num").getLength(); z++) {
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												objtableData.put("cell-identity",
														getXmlElementData(elementchild1, "cell-identity"));
												objtableData.put("coloc-covered-cell-num",
														elementchild2.getElementsByTagName("coloc-covered-cell-num")
																.item(z).getTextContent());
												tabelData6.add(objtableData);
											}
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList15.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData15.add(objtableData);
										}
									}
									
									//ul-power-control-config
									childNodeList2 = elementchild1.getElementsByTagName("ul-power-control-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//ul-power-control-common-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ul-power-control-common-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList11.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData11.add(objtableData);
												}
											}
											
											//pusch-power-control-config
											childNodeList3 = elementchild2.getElementsByTagName("pusch-power-control-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList23.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData23.add(objtableData);
												}
											}
										}
									}
									
									//ul-ca-scheduler-config
									childNodeList2 = elementchild1.getElementsByTagName("ul-ca-scheduler-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//ul-ca-power-sharing-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ul-ca-power-sharing-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList24.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData24.add(objtableData);
												}
											}
										}
									}
									
									//ul-mimo-configuration
									childNodeList2 = elementchild1.getElementsByTagName("ul-mimo-configuration");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList13.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData13.add(objtableData);
										}
									}
									
									//dl-physical-resource-config
									childNodeList2 = elementchild1.getElementsByTagName("dl-physical-resource-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//pdsch-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("pdsch-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList16.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData16.add(objtableData);
												}
											}
										}
									}
									
									//ul-physical-resource-config
									childNodeList2 = elementchild1.getElementsByTagName("ul-physical-resource-config");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//pdsch-config
											NodeList childNodeList3 = elementchild2.getElementsByTagName("prach-config");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList17.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData17.add(objtableData);
												}
											}
											
											//srs-resource-config
											childNodeList3 = elementchild2.getElementsByTagName("pusch-waveform-config-idle");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList29.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData29.add(objtableData);
												}
											}
										}
									}
									
									
									//ssb-configuration
									childNodeList2 = elementchild1.getElementsByTagName("ssb-configuration");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList19.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData19.add(objtableData);
										}
									}
									
									//gutran-du-cell-entries
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									for(String headername : headerList21) {
										objtableData.put(headername, getXmlElementData(elementchild1, headername));
									}
									tabelData21.add(objtableData);
								}
							}
						}
					}

					//endc-bc-information
					/*childNodeList = element.getElementsByTagName("endc-bc-information");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							//endc-bc-information-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("endc-bc-information-entries");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//band-parameters-eutra
									NodeList childNodeList2 = elementchild1.getElementsByTagName("band-parameters-eutra");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
											
										}
									}
									
									//band-parameters-nr
									childNodeList2 = elementchild1.getElementsByTagName("band-parameters-nr");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList3.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header,
														getXmlElementData(elementchild2, header));
											}
											tabelData3.add(objtableData);
											
										}
									}
								}
							}
						}
					}*/
					
					//rlc-functions
					childNodeList = element.getElementsByTagName("rlc-functions");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							//endc-bc-information-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("drb-rlc-info-func");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList9.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData9.add(objtableData);
								}
							}
						}
					}
					
					//dl-mimo-configuration
					childNodeList = element.getElementsByTagName("dl-mimo-configuration");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							headerList10.forEach(header -> {
								objtableData.put(header, getXmlElementData(elementchild, header));
							});
							tabelData10.add(objtableData);
						}
					}
					
					//multicarrier-scenario-functionality-config
					childNodeList = element.getElementsByTagName("multicarrier-scenario-functionality-config");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							headerList32.forEach(header -> {
								objtableData.put(header, getXmlElementData(elementchild, header));
							});
							tabelData32.add(objtableData);
						}
					}
					
					//gutran-du-qci
					childNodeList = element.getElementsByTagName("gutran-du-qci");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							
							//logical-channel-config
							NodeList childNodeList1 = elementchild.getElementsByTagName("logical-channel-config");

							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList14.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header,
												getXmlElementData(elementchild1, header));
									}
									tabelData14.add(objtableData);
								}
							}
						}
					}
				}
			}
			
			//common-management
			nodeList = document.getElementsByTagName("common-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//csl-configuration
					NodeList childNodeList = element.getElementsByTagName("csl-configuration");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//csl-tce-ems-server
							NodeList childNodeList1 = elementchild.getElementsByTagName("csl-tce-ems-server");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList7.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData7.add(objtableData);
								}
							}
							
							//csl-tce-server
							childNodeList1 = elementchild.getElementsByTagName("csl-tce-server");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList8.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData8.add(objtableData);
								}
							}
						}
					}
				}
			}
			
			//hardware-management
			nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//digital-unit
					NodeList childNodeList = element.getElementsByTagName("digital-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//tssi
							NodeList childNodeList1 = elementchild.getElementsByTagName("tssi");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//tssi-info
									NodeList childNodeList2 = elementchild1.getElementsByTagName("tssi-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											headerList12.forEach(header -> {
												objtableData.put(header, getXmlElementData(elementchild2, header));
											});
											tabelData12.add(objtableData);
											
										}
									}
								}
							}
							
							//digital-unit-entries
							childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									//external-port
									NodeList childNodeList2 = elementchild1.getElementsByTagName("external-port");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											//ethernet-port
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ethernet-port");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;
													//ethernet-port-entries
													NodeList childNodeList4 = elementchild3.getElementsByTagName("ethernet-port-entries");

													for (int n = 0; n < childNodeList4.getLength(); n++) {
														Node ChildNode4 = childNodeList4.item(n);

														if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
															Element elementchild4 = (Element) ChildNode4;

															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															headerList27.forEach(header -> {
																objtableData.put(header, getXmlElementData(elementchild4, header));
															});
															tabelData27.add(objtableData);

														}
													}
												}
											}
										}
									}
								}
							}							
						}
					}
					
					//radio-unit
					childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//radio-unit-info
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList26.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData26.add(objtableData);
								}
							}
						}
					}					
				}
			}
			
			//fault-management
			nodeList = document.getElementsByTagName("fault-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//active-alarm
					NodeList childNodeList = element.getElementsByTagName("active-alarm");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//active-alarm-entries
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									headerList22.forEach(header -> {
										objtableData.put(header, getXmlElementData(elementchild1, header));
									});
									tabelData22.add(objtableData);
								}
							}
						}
					}
				}
			}
			
			nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					headerList20.forEach(header -> {
						objtableData.put(header, getXmlElementData(element, header));
					});
					tabelData20.add(objtableData);
				}
			}
			
			//ip-interface
			nodeList = document.getElementsByTagName("ip-system");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					//cpu
					NodeList childNodeList = element.getElementsByTagName("cpu");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							//ip-interface
							NodeList childNodeList1 = elementchild.getElementsByTagName("ip-interface");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									
									//external-interfaces
									NodeList childNodeList2 = elementchild1.getElementsByTagName("external-interfaces");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;
											
											//ipv6-address
											NodeList childNodeList3 = elementchild2.getElementsByTagName("ipv6-address");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);

												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList25.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData25.add(objtableData);
												}
											}
											
										}
									}
								}
							}
						}
					}
				}
			}
			
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "AU_Param_Checks"
					+ "</b></td></tr>\n");
			
			/*String msgstartfreq = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName, "5GNRCIQAU", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("msg1_frequency_start")) {
				msgstartfreq = listOfCiqDetails.get(0).getCiqMap().get("msg1_frequency_start").getHeaderValue();
			}*/
			
			HashMap<String, List<String>> validationMap = new HashMap<>();
			validationMap.put("administrative-state", Arrays.asList("unlocked"));
			validationMap.put("operational-state", Arrays.asList("enabled"));
			//htmlContent.append(createHtmltableendc(headerList1, entry, tabelData1, validationMap));
			htmlContent.append(createHtmltableWithValidation(headerList20, entry20, tabelData20,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("administrative-state", Arrays.asList("unlocked"));
			validationMap.put("operational-state", Arrays.asList("enabled"));
			htmlContent.append(createHtmltableWithValidation(headerList21, entry21, tabelData21,validationMap));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList25, entry25, tabelData25));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList26, entry26, tabelData26));
			
			//htmlContent.append(createHtmltableAU20AParamCheck(headerList27, entry27, tabelData27));
			htmlContent.append("<tr><td colspan=" + headerList27.size() + " bgcolor=#EEEEEE><b>" + entry27 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList27) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData27) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if ("rx-power".equalsIgnoreCase(resultTableData.getKey())) {
						if (NumberUtils.isNumber(resultTableData.getValue().trim())) {
							Float txPower = Float.parseFloat(resultTableData.getValue().trim());
							if (Float.compare(txPower, -10.4f) >= 0) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							} else {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						}

					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
					

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

	
			
			validationMap = new HashMap<>();
			validationMap.put("drx-cycle", Arrays.asList("drx-long-cycle-normal-ms160"));
			validationMap.put("drx-on-duration-timer-msec-normal", Arrays.asList("drx-on-duration-ms10"));
			validationMap.put("drx-inactivity-timer-normal", Arrays.asList("drx-inactivity-ms100"));
			htmlContent.append(createHtmltableWithValidation(headerList1, entry1, tabelData1,validationMap));
			
			//htmlContent.append(createHtmltableAU20AParamCheck(headerList2, entry2, tabelData2));
			
			//htmlContent.append(createHtmltableAU20AParamCheck(headerList3, entry3, tabelData3));
			
			validationMap = new HashMap<>();
			validationMap.put("dl-mu-mimo-switch", Arrays.asList("on"));
			validationMap.put("num-trs-restriction-sdx50", Arrays.asList("disable"));
			htmlContent.append(createHtmltableWithValidation(headerList4, entry4, tabelData4,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("nsa-call-threshold", Arrays.asList("100.0","100"));
			htmlContent.append(createHtmltableWithValidation(headerList5, entry5, tabelData5,validationMap));
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList6, entry6, tabelData6));
			
			validationMap = new HashMap<>();
			validationMap.put("csl-tce-ems-option", Arrays.asList("abnormal-call-only"));
			htmlContent.append(createHtmltableWithValidation(headerList7, entry7, tabelData7,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("csl-tce-server-port", Arrays.asList("50021"));
			validationMap.put("csl-tce-option", Arrays.asList("normal-and-abnormal-and-intra-ho-call"));
			htmlContent.append(createHtmltableWithValidation(headerList8, entry8, tabelData8,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("qci", Arrays.asList("7","132","8","9"));
			validationMap.put("gnb-timer-poll-retransmit", Arrays.asList("t-poll-retransmit-ms30"));
			validationMap.put("ue-t-reassembly", Arrays.asList("ms15"));
			validationMap.put("ue-timer-status-prohibit", Arrays.asList("ms15"));
			htmlContent.append(createHtmltableWithValidation(headerList9, entry9, tabelData9,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("dl-prb-bundling-size-static", Arrays.asList("prb-bundling-size-n2"));
			validationMap.put("pmi-cycling-switch", Arrays.asList("on"));
			htmlContent.append(createHtmltableWithValidation(headerList10, entry10, tabelData10,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("p0-nominal-with-grant", Arrays.asList("-76"));
			validationMap.put("p0-nominal-pucch", Arrays.asList("-80"));
			htmlContent.append(createHtmltableWithValidation(headerList11, entry11, tabelData11,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("max-target-sinr-64qam", Arrays.asList("28"));
			validationMap.put("rerror-tpc-up-cmd", Arrays.asList("0"));
			htmlContent.append(createHtmltableWithValidation(headerList23, entry23, tabelData23,validationMap));
			
			validationMap = new HashMap<>();
			/*if(networkConfigEntity.getNeVersionEntity().getNeVersion().contains("21.A")) {
				validationMap.put("ul-total-power-limit-offset", Arrays.asList("0"));
			}else {
				validationMap.put("ul-total-power-limit-offset", Arrays.asList("1"));
			}*/		
			htmlContent.append(createHtmltableWithValidation(headerList24, entry24, tabelData24,validationMap));
			
			//tssi
			validationMap = new HashMap<>();
			validationMap.put("tssi", Arrays.asList("0","-"));
			htmlContent.append(createHtmltablewithInverseValidation(headerList12, entry12, tabelData12,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("ul-su-mimo-switch", Arrays.asList("on"));
			validationMap.put("dynamic-srs-port-adaptation", Arrays.asList("off"));
			htmlContent.append(createHtmltableWithValidation(headerList13, entry13, tabelData13,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("qci", Arrays.asList("7","8","9","132"));
			validationMap.put("prioritised-bitrate", Arrays.asList("prioritised-bit-rate-infinity"));
			htmlContent.append(createHtmltableWithValidation(headerList14, entry14, tabelData14,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("max-dl-ca-cc-num", Arrays.asList("8"));
			validationMap.put("max-ul-ca-cc-num", Arrays.asList("2"));
			htmlContent.append(createHtmltableWithValidation(headerList15, entry15, tabelData15,validationMap));
			
			validationMap = new HashMap<>();
			//validationMap.put("dmrs-pdsch-fdm", Arrays.asList("0","false"));
			validationMap.put("pdcch-pdsch-fdm", Arrays.asList("true"));
			htmlContent.append(createHtmltableWithValidation(headerList16, entry16, tabelData16,validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("preamble-receiver-target-power", Arrays.asList("-69"));
			validationMap.put("rsrp-threshold", Arrays.asList("48"));
			validationMap.put("preamble-trans-max", Arrays.asList("preamble-trans-max-n8"));
			/*if(StringUtils.isNotEmpty(msgstartfreq)) {
				validationMap.put("msg1-frequency-start", Arrays.asList(msgstartfreq));
			}*/
			validationMap.put("prach-configuration-index", Arrays.asList("194"));
			validationMap.put("ssb-per-rach-occasion-choice", Arrays.asList("ssb-per-ro-two-choice"));
			validationMap.put("cb-preambles-per-ssb", Arrays.asList("28"));
			htmlContent.append(createHtmltableWithValidation(headerList17, entry17, tabelData17,validationMap));
			
			/*validationMap = new HashMap<>();
			validationMap.put("b-srs-periodic", Arrays.asList("1"));
			htmlContent.append(createHtmltableWithValidation(headerList18, entry18, tabelData18,validationMap));*/
			
			//validationMap = new HashMap<>();
			//validationMap.put("ssb-freq-align", Arrays.asList("center"));
			//validationMap.put("ssb-freq-config-mode", Arrays.asList("gscn-based"));
			//htmlContent.append(createHtmltableWithValidation(headerList19, entry19, tabelData19,validationMap));
			htmlContent.append("<tr><td colspan=" + headerList19.size() + " bgcolor=#EEEEEE><b>" + entry19 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList19) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData19) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if ("ssb-freq-align".equalsIgnoreCase(resultTableData.getKey())) {
						if (resultTableData.getValue().equals("center")) {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						}
					} else if ("ssb-freq-config-mode".equalsIgnoreCase(resultTableData.getKey())) {
						if (resultTableData.getValue().equals("gscn-based")) {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						}
					} else if ("rmsi-coreset-index".equalsIgnoreCase(resultTableData.getKey())) {
						if (tdData.get("ssb-freq-offset").equals("-1") && resultTableData.getValue().equals("1")) {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						} else if ((tdData.get("ssb-freq-offset").equals("0") || tdData.get("ssb-freq-offset").equals("1")) && 
								resultTableData.getValue().equals("0")) {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						}
					} else if ("nr-of-tx-ssb".equalsIgnoreCase(resultTableData.getKey())) {
						if (resultTableData.getValue().equals("48")) {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						}
					} else if ("ssb-position".equalsIgnoreCase(resultTableData.getKey())) {
						if (resultTableData.getValue().equals("1111111111110000000011111111111111111111111100000000111111111111")) {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
					

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append(createHtmltableAU20AParamCheck(headerList22, entry22, tabelData22));
			
			validationMap = new HashMap<>();
			validationMap.put("msg3-mini-slot-on-off", Arrays.asList("1"));
			validationMap.put("ul-mini-slot-on-off", Arrays.asList("1"));
			validationMap.put("ap-csi-rep-mini-slot-on-off", Arrays.asList("1"));
			htmlContent.append(createHtmltableWithValidation(headerList28, entry28, tabelData28, validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("pusch-waveform-adaptation-mode", Arrays.asList("fixed-with-cp-ofdm"));
			htmlContent.append(createHtmltableWithValidation(headerList29, entry29, tabelData29, validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("retx-bsr-timer", Arrays.asList("retx-bsr-timer-sf40"));
			htmlContent.append(createHtmltableWithValidation(headerList30, entry30, tabelData30, validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("nr-of-downlink-symbols-1", Arrays.asList("9"));
			htmlContent.append(createHtmltableWithValidation(headerList31, entry31, tabelData31, validationMap));
			
			validationMap = new HashMap<>();
			validationMap.put("fr2-ue-overheating-mitigation-support", Arrays.asList("on"));
			htmlContent.append(createHtmltableWithValidation(headerList32, entry32, tabelData32, validationMap));
			
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	
	//mmu audit use case for CBand
	public StringBuilder getCBandMMUAudit(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
			StringBuilder htmlContent = new StringBuilder();

	        try {
	            LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
	            String check = "mmu-audit.sh" + " " + enbId;
	            int count = StringUtils.countMatches(fullOutputLog, check );
	            
	            String outputLog1 = StringUtils.substringAfter(fullOutputLog, command);
	            outputLog1 = StringUtils.substringBefore(outputLog1, XmlCommandsConstants.ENDTEXT5G);
	            
				StringBuilder auditIssue1 = new StringBuilder();
				StringBuilder auditIssue2 = new StringBuilder();
				StringBuilder auditIssue3 = new StringBuilder();
				StringBuilder auditIssueAll = new StringBuilder();
				
				StringBuilder auditPass1 = new StringBuilder();
				StringBuilder auditPass2 = new StringBuilder();
				StringBuilder auditPass3 = new StringBuilder();
				
            	headerList1.add("Test-Case");
	            headerList1.add("Result");
	            headerList1.add("Remarks");
	            
	            for(int i = 0; i < count ;i++) {
	            	
		            htmlContent.append(
		                    "<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");

		            
		            List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		            ArrayList<String> Al = new ArrayList<String>();
		            ArrayList<String> Am = new ArrayList<String>();
		            ArrayList<String> An = new ArrayList<String>();
	            	
	            	String s1 = "";
	            	int xyz = 0;
	            	if(outputLog1.contains("mmu-audit.sh "+ enbId + " 0")) {
	            		xyz = 0;
	            		s1 = "mmu-audit.sh" + " " + enbId + " " + xyz;
	            	} else {
	            		
	            		if(outputLog1.contains("mmu-audit.sh "+ enbId + " 1")) {
	            			xyz = 1;
	            			s1 = "mmu-audit.sh" + " " + enbId + " " + xyz;
	            		} else {
	            			if(outputLog1.contains("mmu-audit.sh "+ enbId + " 2")) {
		            			xyz = 2;
		            			s1 = "mmu-audit.sh" + " " + enbId + " " + xyz;
		            		} 
	            		}
	            	}
	            	
	            	String outputLog = "";
	            	if(i<count-1) {
	            		int j = i+1;
	            		String s2 = "mmu-audit.sh" + " " + enbId + " " + j;
		            	outputLog = outputLog1.substring(outputLog1.indexOf(s1), outputLog1.indexOf(s2));
	            	}
	            	else if(i == count - 1) {
	            		outputLog = outputLog1.substring(outputLog1.indexOf(s1));
	            	}
	            	
	            	if(outputLog.contains("fail") || outputLog.contains("Failure") || outputLog.contains("FAILURE")){
	            		
	            		if(outputLog.contains("mmu-audit.sh "+ enbId + " 0")) {
		            		
		            		htmlContent.append("<tr><td align=center colspan=" + headerList1.size() + " bgcolor=#fa8c8c><b>" + "MMU - 0"  + " Report Failed"
				                    + "</b></td></tr>\n");
		            		htmlContent.append("</table>\n");
		            		
		            		auditIssue1.append("MMU - 0 Report Failed"
	                    			+ "\n");
		            		
							if(auditIssue1.length() != 0) {
								audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(90, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
										auditIssue1.toString());
							}
		            		
	            		} else if(outputLog.contains("mmu-audit.sh "+ enbId + " 1")) {
		            		
		            		htmlContent.append("<tr><td align=center colspan=" + headerList1.size() + " bgcolor=#fa8c8c><b>" + "MMU - 1"  + " Report Failed"
				                    + "</b></td></tr>\n");
		            		htmlContent.append("</table>\n");
		            		
		            		auditIssue2.append("MMU - 1 Report Failed"
	                    			+ "\n");
		            		
							if(auditIssue2.length() != 0) {
								audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(91, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
										auditIssue2.toString());
							}
		            		
	            		} else if(outputLog.contains("mmu-audit.sh "+ enbId + " 2")) {
		            		
		            		htmlContent.append("<tr><td align=center colspan=" + headerList1.size() + " bgcolor=#fa8c8c><b>" + "MMU - 2"  + " Report Failed"
				                    + "</b></td></tr>\n");
		            		htmlContent.append("</table>\n");
		            		
		            		auditIssue3.append("MMU - 2 Report Failed"
	                    			+ "\n");
		            		
		            		
							if(auditIssue3.length() != 0) {
								audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(92, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
										auditIssue3.toString());
							}
	            		}

	            	}
	            	else {
	            		
			            htmlContent.append("<tr><td align=center colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "MMU - " + xyz + " Test Report"
			                    + "</b></td></tr>\n");
	            		
	            		String s8 = outputLog.substring(outputLog.indexOf("1. MMU"), outputLog.indexOf("2. MMU")+1);
			            Al.add(s8.substring(s8.indexOf("1. MMU"), s8.indexOf("[")));
			            Am.add(s8.substring(s8.indexOf("["), s8.indexOf("]")+1));
			            An.add(s8.substring(s8.indexOf("]")+1, s8.length()-1));
			            
			            String s = outputLog.substring(outputLog.indexOf("2. MMU"), outputLog.indexOf("3. MMU")+1);
			            Al.add(s.substring(s.indexOf("2. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.length()-1));
			            
			            s = outputLog.substring(outputLog.indexOf("3. MMU"), outputLog.indexOf("4. MMU")+1);
			            Al.add(s.substring(s.indexOf("3. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.length()-1));
		            
			            s = outputLog.substring(outputLog.indexOf("4. MMU"), outputLog.indexOf("5. MMU")+1);
			            Al.add(s.substring(s.indexOf("4. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.length()-1));
			            
			            s = outputLog.substring(outputLog.indexOf("5. MMU"), outputLog.indexOf("6. MMU")+1);
			            Al.add(s.substring(s.indexOf("5. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.length()-1));
			            
			            s = outputLog.substring(outputLog.indexOf("6. MMU"), outputLog.indexOf("7. MMU")+1);
			            Al.add(s.substring(s.indexOf("6. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.length()-1));
			            
			            s = outputLog.substring(outputLog.indexOf("7. MMU"), outputLog.indexOf("8. MMU")+1);
			            Al.add(s.substring(s.indexOf("7. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.length()-1));
			            
			            s = outputLog.substring(outputLog.indexOf("8. MMU"), outputLog.indexOf("9. MMU")+1);
			            Al.add(s.substring(s.indexOf("8. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.length()-1));
		            
			            s = outputLog.substring(outputLog.indexOf("9. MMU"), outputLog.indexOf("10. MMU")+1);
			            Al.add(s.substring(s.indexOf("9. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.length()-1));
			            
			            s = outputLog.substring(outputLog.indexOf("10. MMU"), outputLog.indexOf("11. MMU")+1);
			            Al.add(s.substring(s.indexOf("10. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.length()-1));
			            
			            s = outputLog.substring(outputLog.indexOf("11. MMU"), outputLog.indexOf("12. MMU")+1);
			            Al.add(s.substring(s.indexOf("11. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.length()-1));
			            
			            s = outputLog.substring(outputLog.indexOf("12. MMU"));
			            Al.add(s.substring(s.indexOf("12. MMU"), s.indexOf("[")));
			            Am.add(s.substring(s.indexOf("["), s.indexOf("]")+1));
			            An.add(s.substring(s.indexOf("]")+1, s.indexOf("##### Above")));
//			            if(!s.substring(s.indexOf("]")+1).isEmpty() || !s.substring(s.indexOf("]")+1).equals("")) {
//			            	An.add(s.substring(s.indexOf("]")+1));
//			            }
			            
			       
			            
			            for (int m = 0; m < Al.size(); m++) {
			                LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
			                Iterator<String> itr = headerList1.iterator();
			                String header = itr.next();
			                objtableData.put(header, Al.get(m));
			                header = itr.next();
			                objtableData.put(header, Am.get(m));
			                header = itr.next();
			                objtableData.put(header, An.get(m));
			                tabelData1.add(objtableData);
			            }
	
			            String tableHeader = "";
			            tableHeader = tableHeader + "<tr>\n";
			            for (String headerName : headerList1) {
			                tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			            }
			            tableHeader = tableHeader + "</tr>\n";
			            StringBuilder tableData = new StringBuilder();
			            for (LinkedHashMap<String, String> tdData : tabelData1) {
			                tableData.append("<tr>\n");
			                for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
			                    String key = resultTableData.getKey();
			                    String value = resultTableData.getValue();
			                    
			                    if(value!=null) {
			                    	
				                    if((value.contains("Fail") || value.contains("FAIL")) && xyz == 0) {
				                    	
				                    	auditIssue1.append(tdData.get("Test-Case") + " Result : "
				                    			+ tdData.get("Result") + "\n");
				                    	tableData.append("<td align=center bgcolor=#fa8c8c>" + value + "</td>\n");
				                    	
				                    } else if((value.contains("Fail") || value.contains("FAIL")) && xyz == 1) {
				                    	
				                    	auditIssue2.append(tdData.get("Test-Case") + " Result : "
				                    			+ tdData.get("Result") + "\n");
				                    	tableData.append("<td align=center bgcolor=#fa8c8c>" + value + "</td>\n");
				                    	
				                    } else if((value.contains("Fail") || value.contains("FAIL")) && xyz == 2) {
				                    	
				                    	auditIssue3.append(tdData.get("Test-Case") + " Result : "
				                    			+ tdData.get("Result") + "\n");
				                    	tableData.append("<td align=center bgcolor=#fa8c8c>" + value + "</td>\n");
				                    	
				                    } else {
				                    	tableData.append("<td align=center>" + value + "</td>\n");
				                    }
			                    }
			                    
			                }
			                tableData.append("</tr>\n");
			            }
			            htmlContent.append(tableHeader);
			            htmlContent.append(tableData);
			            htmlContent.append("</table>\n");
						
						AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

					auditIssueAll.append(auditIssue1);
					auditIssueAll.append(auditIssue2);
					auditIssueAll.append(auditIssue3);
					auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
						if(auditIssue1.length() != 0) {
							audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(90, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
									auditIssue1.toString());
							audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(90, runTestEntity.getId(),
									enbId.replaceAll("^0+(?!$)", ""), "fail");
						} else {
							audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(90, runTestEntity.getId(),
									enbId.replaceAll("^0+(?!$)", ""), "pass");
						}
						if(auditIssue2.length() != 0) {
							audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(91, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
									auditIssue2.toString());
						}
						if(auditIssue3.length() != 0) {
							audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(92, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
									auditIssue3.toString());
						}
						if(auditPass1.length() != 0) {
							audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(90, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
									auditPass1.toString());
						}
						if(auditPass2.length() != 0) {
							audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(90, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
									auditPass2.toString());
						}
						if(auditPass3.length() != 0) {
							audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(90, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
									auditPass3.toString());
						}
	            	}
	            	outputLog1 = outputLog1.replace(outputLog, "");
	            }
  
			} catch (Exception e) {
				
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
		
	}
		
	}	
		
	
