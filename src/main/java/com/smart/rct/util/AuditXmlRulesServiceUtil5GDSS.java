package com.smart.rct.util;

import java.io.StringReader;
import java.net.InetAddress;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.smart.rct.common.entity.NetworkConfigEntity;
import com.smart.rct.constants.AuditConstants;
import com.smart.rct.constants.XmlCommandsConstants;
import com.smart.rct.migration.entity.RetTestEntity;
import com.smart.rct.migration.entity.RunTestEntity;
import com.smart.rct.migration.repository.RetRepository;
import com.smart.rct.postmigration.entity.Audit4GfsuHardwareDetailsEntity;
import com.smart.rct.postmigration.entity.Audit5GCbandFirmwareDetailsEntity;
import com.smart.rct.postmigration.entity.AuditConstantsEntity;
import com.smart.rct.postmigration.entity.AuditCriticalParamsIndex1Entity;
import com.smart.rct.postmigration.entity.AuditCriticalParamsIndex2Entity;
import com.smart.rct.postmigration.entity.AuditCriticalParamsIndex3Entity;
import com.smart.rct.postmigration.entity.AuditCriticalParamsIndex4Entity;
import com.smart.rct.postmigration.entity.AuditCriticalParamsIndex5Entity;
import com.smart.rct.postmigration.entity.AuditCriticalParamsIndex6Entity;
import com.smart.rct.postmigration.entity.AuditCriticalParamsSummaryEntity;
import com.smart.rct.postmigration.entity.AuditHardwareDetailsEntity;
import com.smart.rct.postmigration.repository.Audit5GCbandFirmwareDetailsRepository;
import com.smart.rct.postmigration.repository.AuditConstantsRepository;
import com.smart.rct.postmigration.repository.AuditFSUHardwareDetailsRepository;
import com.smart.rct.postmigration.repository.AuditFirmwareDetailsRepository;
import com.smart.rct.postmigration.repository.AuditHardwareDetailsRepository;
import com.smart.rct.postmigration.service.Audit4GFsuSummaryService;
import com.smart.rct.postmigration.service.Audit4GSummaryService;
import com.smart.rct.postmigration.service.Audit5GCBandSummaryService;
import com.smart.rct.postmigration.service.Audit5GDSSSummaryService;
import com.smart.rct.postmigration.service.AuditCriticalParamsService;
import com.smart.rct.premigration.models.CIQDetailsModel;
import com.smart.rct.premigration.repositoryImpl.GenerateCsvRepositoryImpl;
import com.smart.rct.premigration.service.NeMappingService;

@Component
public class AuditXmlRulesServiceUtil5GDSS {

	final static Logger logger = LoggerFactory.getLogger(AuditXmlRulesServiceUtil5GDSS.class);

	@Autowired
	MongoTemplate mongoTemplate;

	@Autowired
	NeMappingService neMappingService;

	@Autowired
	GenerateCsvRepositoryImpl generateCsvRepository;

	@Autowired
	Audit4GSummaryService audit4GSummaryService;

	@Autowired
	Audit4GFsuSummaryService audit4GFsuSummaryService;

	@Autowired
	AuditHardwareDetailsRepository auditHardwareDetailsRepository;

	@Autowired
	AuditFirmwareDetailsRepository auditFirmwareDetailsRepository;

	@Autowired
	AuditConstantsRepository auditConstantsRepository;

	@Autowired
	Audit5GCBandSummaryService audit5GCBandSummaryService;

	@Autowired
	Audit5GDSSSummaryService audit5GDSSSummaryService;
	
	@Autowired
	Audit5GCbandFirmwareDetailsRepository audit5GCbandFirmwareDetailsRepository;
	
	@Autowired
	RetRepository retRepository;

	@Autowired
	AuditFSUHardwareDetailsRepository auditFSUHardwareDetailsRepository;
	
	@Autowired
	AuditCriticalParamsService auditCriticalParamsService;
	
	public String getXmlElementData(Element element, String elementName) {
		String outPut = null;
		if (element.getElementsByTagName(elementName) != null
				&& element.getElementsByTagName(elementName).getLength() > 0) {
			outPut = element.getElementsByTagName(elementName).item(0).getTextContent();

		} else {
			outPut = "-";
		}
		return outPut;
	}

	public List<CIQDetailsModel> getCiqDetailsForRuleValidationsheet(String enbId, String dbcollectionFileName,
			String sheetname, String idname) {
		List<CIQDetailsModel> resultList = null;
		Query query = new Query();
		query.addCriteria(Criteria.where(idname).is(enbId).and("sheetAliasName").is(sheetname));
		try {
			resultList = mongoTemplate.find(query, CIQDetailsModel.class, dbcollectionFileName);

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return resultList;
	}

	StringBuilder createHtmltableDSS(LinkedHashSet<String> headerList, String command,
			List<LinkedHashMap<String, String>> tabelData, HashMap<String, List<String>> validationMap) {
		StringBuilder htmlContent = new StringBuilder();

		htmlContent
				.append("<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

		String tableHeader = "";
		tableHeader = tableHeader + "<tr>\n";
		for (String headerName : headerList) {
			tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
		}

		tableHeader = tableHeader + "</tr>\n";
		StringBuilder tableData = new StringBuilder();
		for (LinkedHashMap<String, String> tdData : tabelData) {
			tableData.append("<tr>\n");

			for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				String key = resultTableData.getKey();
				String value = resultTableData.getValue();
				if (validationMap.containsKey(key)) {
					if (validationMap.get(key).contains(value)) {
						tableData.append("<td align=center>" + value + "</td>\n");
					} else {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
					}
				} else {
					tableData.append("<td align=center>" + value + "</td>\n");
				}
			}
			tableData.append("</tr>\n");

		}
		htmlContent.append(tableHeader);
		htmlContent.append(tableData);

		return htmlContent;
	}

	private boolean compareIPAddr(String ip1, String ip2) {
		boolean result = false;
		try {
			InetAddress ipAddr1 = InetAddress.getByName(ip1);
			InetAddress ipAddr2 = InetAddress.getByName(ip2);
			if (ipAddr1.equals(ipAddr2)) {
				result = true;
			}
		} catch (Exception e) {
			result = false;
		}
		return result;
	}

	private void trimTabledataString(List<LinkedHashMap<String, String>> tabelData, Set<String> cellidset, String key) {
		try {
			List<LinkedHashMap<String, String>> deleteData = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData) {
				if (tdData.containsKey(key) && !ObjectUtils.isEmpty(cellidset)) {
					if (!cellidset.contains(tdData.get(key).replaceAll("^0+(?!$)", ""))) {
						deleteData.add(tdData);
					}
				}
			}

			for (LinkedHashMap<String, String> tdData : deleteData) {
				tabelData.remove(tdData);
			}
		} catch (Exception e) {
			logger.error("AuditXmlRuleServiceUtil trimTabledata() " + ExceptionUtils.getFullStackTrace(e));
		}
	}

	public StringBuilder getvDUAuditDSS(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			RunTestEntity runTestEntity, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String softwareVersion = "";
			String softwareVersionnetwork = "";
			List<CIQDetailsModel> listOfCiqDetailssv = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailssv)) {
				if (listOfCiqDetailssv.get(0).getCiqMap().containsKey("vDU_Version")) {
					softwareVersion = listOfCiqDetailssv.get(0).getCiqMap().get("vDU_Version").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			softwareVersionnetwork = ge5gGsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_VDU_PREAUDIT, enbId,
					dbcollectionFileName, runTestEntity);
			if(!softwareVersionnetwork.isEmpty() && !softwareVersionnetwork.equals("-") ) {
				softwareVersion=softwareVersionnetwork;
			}
			String neVersion = StringUtils.substringBefore(softwareVersion, "-");
			
			String entry1 = "pod entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("pod-type");
			headerList1.add("pod-id");
			if (neVersion.contains("22.C")) {
			headerList1.add("dpp-flavor-option");
			}
			headerList1.add("operational-state");

			String entry2 = "config-info";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("ne-id");
			headerList2.add("flavor-id");
			headerList2.add("ems-ip-address");
			headerList2.add("software-version");

			String entry3 = "pod entries sync";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("pod-type");
			headerList3.add("pod-id");
			if (!neVersion.contains("21.D") && !neVersion.contains("22.A")) {
				headerList3.add("holdover-timer-threshold");
			}
			headerList3.add("sync-state");

			String entry4 = "end-point-dss";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("dss-index");
			headerList4.add("remote-ip-address");
			headerList4.add("secondary-remote-ip-address");
			if (!neVersion.contains("21.D") && !neVersion.contains("22")) {
				headerList4.add("enb-id");
			}

			String entry5 = "spectrum-sharing-scheduler-config";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-identity");
			if (neVersion.contains("22.C")) {
			headerList5.add("adjacent-lte-crs-rate-matching-sinr-in-threshold");
            headerList5.add("adjacent-lte-crs-rate-matching-sinr-out-threshold");
            headerList5.add("adjacent-lte-crs-rate-matching-slot-usage-threshold");
            headerList5.add("dss-lte-ss-pbch-rate-matching");
            headerList5.add("adjacent-lte-crs-rate-matching");
			}
            headerList5.add("spectrum-sharing");
            headerList5.add("dl-prb-usage-threshold-for-increasing-nr-resource");
            headerList5.add("ul-prb-usage-threshold-for-increasing-nr-resource");
            headerList5.add("dl-pdcch-fail-threshold-for-increasing-nr-resource");
            headerList5.add("ul-pdcch-fail-threshold-for-increasing-nr-resource");
            headerList5.add("slot-level-operation-mode");
            headerList5.add("dss-target-lte-cell-num");
            headerList5.add("end-point-dss-index");
            headerList5.add("sa-early-crs-rate-matching-after-msg4-enable");
            headerList5.add("change-dss-nr-prach-offset");

			String entry6 = "virtual-port-entries";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("pod-type");
			headerList6.add("pod-id");
			headerList6.add("port-id");
			headerList6.add("administrative-state");
			headerList6.add("operational-state");
			headerList6.add("mtu");
			headerList6.add("user-label");
			headerList6.add("interface-name");
			headerList6.add("hw-address");

			String entry7 = "external-interfaces";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("pod-type");
			headerList7.add("pod-id");
			headerList7.add("interface-name");
			headerList7.add("ip");
			headerList7.add("prefix-length");
			headerList7.add("dhcp-server-enable");
			headerList7.add("f1");
			if (neVersion.contains("21.D") || neVersion.contains("22")) {
			headerList7.add("dss");
			}
			headerList7.add("carrier-aggregation");
			headerList7.add("mplane");

			String entry8 = "end-point-f1c";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("gnb-cu-cp-name");
			headerList8.add("remote-ip-address");
			headerList8.add("secondary-remote-ip-address");
			headerList8.add("sctp-state");
			headerList8.add("f1-ap-state");

			String entry9 = "vru-entries";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("fsu-id");
			headerList9.add("vru-id");
			headerList9.add("unit-type");
			headerList9.add("serial-number");
			headerList9.add("support-cell-number");
			headerList9.add("operational-mode");

			String entry10 = "cuplane-interfaces";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("fsu-id");
			headerList10.add("connected-pod-type");
			headerList10.add("connected-pod-id");
			headerList10.add("connected-pod-port-id");
			headerList10.add("connected-fsu-port-id");
			headerList10.add("vlan-id");
			headerList10.add("support-cell-number");

			String entry11 = "sharing-info";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("fsu-id");
			headerList11.add("vru-id");
			headerList11.add("sharing-enabled");

			String entry12 = "active-alarm-entries";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("alarm-unit-type");
			headerList12.add("alarm-type");
			headerList12.add("probable-cause");
			headerList12.add("specific-problem");
			headerList12.add("severity");
			headerList12.add("location");

			String entry13 = "dl-antenna-count";
			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("cell-identity");
			headerList13.add("cell-num");
			headerList13.add("user-label");
			headerList13.add("dl-antenna-count");

			String entry14 = "ul-antenna-count";
			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("cell-identity");
			headerList14.add("cell-num");
			headerList14.add("user-label");
			headerList14.add("ul-antenna-count");
			headerList14.add("number-of-rx-paths-per-ru");
			if (neVersion.contains("22.C")) {
			headerList14.add("ul-ranks2-mcs-th-cp-ofdm-to-dft-s-ofdm");
			headerList14.add("ul-rank2-mcs-th-dft-s-ofdm-to-cp-ofdm");
			headerList14.add("ul-256qam-mcs-th-cp-ofdm-to-dft-s-ofdm");
			headerList14.add("ul-256qam-mcs-th-dft-s-ofdm-to-cp-ofdm");
			headerList14.add("ul-256qam-ranks2-mcs-th-cp-ofdm-to-dft-s-ofdm");
			headerList14.add("ul-256qam-rank2-mcs-th-dft-s-ofdm-to-cp-ofdm");
			}
			
			String entry15 = "cell-physical-conf-idle";
			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("cell-identity");
			headerList15.add("cell-num");
			headerList15.add("user-label");
			headerList15.add("nr-physical-cell-id");
			headerList15.add("nr-arfcn-dl");
			headerList15.add("nr-arfcn-ul");
			if (neVersion.contains("22.C")) {
			headerList15.add("sdl-support");
			}
			headerList15.add("nr-bandwidth-dl");
			headerList15.add("nr-bandwidth-ul");

			String entry16 = "gutran-du-cell-entries";
			LinkedHashSet<String> headerList16 = new LinkedHashSet<>();
			headerList16.add("cell-identity");
			headerList16.add("cell-num");
			headerList16.add("cell-path-type");
			headerList16.add("administrative-state");
			headerList16.add("operational-state");
			headerList16.add("activation-state");
			headerList16.add("dpp-id");
			headerList16.add("user-label");
			headerList16.add("test-flag");
			headerList16.add("power");
			headerList16.add("subcarrier-spacing-common");
			headerList16.add("dl-subcarrier-spacing");
			headerList16.add("ul-subcarrier-spacing");
			headerList16.add("auto-unlock-flag");
			
			String entry17 = "cuplane-interfaces";
			LinkedHashSet<String> headerList17 = new LinkedHashSet<>();
			headerList17.add("o-ran-ru-id");
			headerList17.add("connected-pod-type");
			headerList17.add("connected-pod-id");
			headerList17.add("connected-pod-port-id");
			headerList17.add("connected-fsu-port-id");
			headerList17.add("vlan-id");
			headerList17.add("nr-support-cell-number");
			
			String entry18 = "mplane-info";
			LinkedHashSet<String> headerList18 = new LinkedHashSet<>();
			headerList18.add("o-ran-ru-id");
			headerList18.add("mplane-ipv6");
			
			String entry19 = "o-ran-radio-unit-info";
			LinkedHashSet<String> headerList19 = new LinkedHashSet<>();
			headerList19.add("o-ran-ru-id");
			headerList19.add("unit-type");
			headerList19.add("unit-type");
			headerList19.add("serial-number");
			headerList19.add("nr-support-cell-number");
			headerList19.add("operational-mode");
			
			String entry20 = "sharing-info";
			LinkedHashSet<String> headerList20 = new LinkedHashSet<>();
			headerList20.add("o-ran-ru-id");
			headerList20.add("sharing-enabled");
		

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData16 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData17 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData18 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData19 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData20 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("sync");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															Iterator<String> itr = headerList3.iterator();
															String header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));
															header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));

															while (itr.hasNext()) {
																header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild6, header));
															}
															/*
															 * objtableData.put("pod-type",
															 * getXmlElementData(elementchild5, "pod-type"));
															 * objtableData.put("pod-id",
															 * getXmlElementData(elementchild5, "pod-id"));
															 * objtableData.put("holdover-timer-threshold",
															 * getXmlElementData(elementchild6,
															 * "holdover-timer-threshold"));
															 * objtableData.put("sync-state",
															 * getXmlElementData(elementchild6, "sync-state"));
															 */
															tabelData3.add(objtableData);
														}
													}
													childNodeList6 = elementchild5
															.getElementsByTagName("virtual-port-entries");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															Iterator<String> itr = headerList6.iterator();
															String header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));
															header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));

															while (itr.hasNext()) {
																header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild6, header));
															}
															tabelData6.add(objtableData);
														}
													}

													childNodeList6 = elementchild5
															.getElementsByTagName("external-interfaces");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															NodeList childNodeList7 = elementchild6
																	.getElementsByTagName("ipv6-address");
															for (int f = 0; f < childNodeList7.getLength(); f++) {
																Node ChildNode7 = childNodeList7.item(f);
																if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
																	Element elementchild7 = (Element) ChildNode7;
																	LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																	Iterator<String> itr = headerList7.iterator();
																	String header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild5, header));
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild5, header));
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild6, header));

																	while (itr.hasNext()) {
																		header = itr.next();
																		objtableData.put(header, getXmlElementData(
																				elementchild7, header));
																	}
																	tabelData7.add(objtableData);
																}
															}
														}
													}
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = "";
													while (itr.hasNext()) {
														header = itr.next();
														if ((header.equalsIgnoreCase("pod-type")
																|| header.equalsIgnoreCase("pod-id")
																|| header.equalsIgnoreCase("operational-state"))
																&& elementchild5.getElementsByTagName(header) != null
																&& elementchild5.getElementsByTagName(header)
																		.getLength() > 0) {
															for (int z = 0; z < elementchild5
																	.getElementsByTagName(header).getLength(); z++) {
																if (elementchild5.getElementsByTagName(header).item(z)
																		.getParentNode().getNodeName()
																		.equalsIgnoreCase("pod-entries")
																		&& !elementchild5.getElementsByTagName(header)
																				.item(z).getParentNode().getNodeName()
																				.equalsIgnoreCase(
																						"virtual-port-entries")) {
																	objtableData.put(header,
																			elementchild5.getElementsByTagName(header)
																					.item(z).getTextContent());
																}
															}
														} else {
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));
														}
													}

													if ((objtableData.size()>=3) && !getXmlElementData(elementchild5, "operational-state")
															 .equalsIgnoreCase("-")) {
														tabelData1.add(objtableData);
													}
												}
											}
										}
									}

									childNodeList4 = elementchild3.getElementsByTagName("config-info");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild4, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}
						}
					}
					childNodeList2 = elementchild1.getElementsByTagName("gnb-du-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("end-point-dss");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									// objtableData.put("dss-index", getXmlElementData(elementchild3, "dss-index"));
									// objtableData.put("remote-ip-address",
									// getXmlElementData(elementchild3, "remote-ip-address"));
									// objtableData.put("secondary-remote-ip-address",
									// getXmlElementData(elementchild3, "secondary-remote-ip-address"));
									// objtableData.put("enb-id", getXmlElementData(elementchild3, "enb-id"));
									Iterator<String> itr = headerList4.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData4.add(objtableData);
								}
							}
							childNodeList3 = elementchild2.getElementsByTagName("gutran-du-cell");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3
											.getElementsByTagName("gutran-du-cell-entries");
									for (int m = 0; m < childNodeList4.getLength(); m++) {
										Node ChildNode4 = childNodeList4.item(m);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {

											Element elementchild5 = (Element) ChildNode4;
											NodeList nodelist = elementchild5
													.getElementsByTagName("spectrum-sharing-scheduler-config");
											for (int n = 0; n < nodelist.getLength(); n++) {
												Node ChildNode5 = nodelist.item(k);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild6 = (Element) ChildNode5;
													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList5.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild5, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild6, header));
													}
													tabelData5.add(objtableData);
												}
											}

										}
									}

								}
							}
						}
					}

					childNodeList2 = elementchild1.getElementsByTagName("gnb-du-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("gutran-du-cell-entries");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									NodeList childNodeList4 = elementchild3
											.getElementsByTagName("dl-physical-resource-config");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList13.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData13.add(objtableData);
										}
									}

									childNodeList4 = elementchild3.getElementsByTagName("ul-physical-resource-config");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList14.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData14.add(objtableData);
										}
									}

									childNodeList4 = elementchild3.getElementsByTagName("cell-physical-conf-idle");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList15.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData15.add(objtableData);
										}
									}

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList16.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData16.add(objtableData);
								}
							}
						}
					}

					NodeList nodelist = elementchild1.getElementsByTagName("fsu-entries");
					for (int k = 0; k < nodelist.getLength(); k++) {
						Node ChildNode = nodelist.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							NodeList nodelist1 = elementchild6.getElementsByTagName("vru-entries");
							for (int a = 0; a < nodelist1.getLength(); a++) {
								Node ChildNodex = nodelist1.item(a);
								if (Node.ELEMENT_NODE == ChildNodex.getNodeType()) {
									Element elementchild7 = (Element) ChildNodex;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList9.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild6, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild7, header));
									}
									tabelData9.add(objtableData);

									objtableData = new LinkedHashMap<>();
									itr = headerList11.iterator();
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild6, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild7, header));
									}
									tabelData11.add(objtableData);

								}
							}
						}

					}

					nodelist = elementchild1.getElementsByTagName("fsu-entries");
					for (int k = 0; k < nodelist.getLength(); k++) {
						Node ChildNode = nodelist.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							NodeList nodelist1 = elementchild6.getElementsByTagName("cuplane-interfaces");
							for (int a = 0; a < nodelist1.getLength(); a++) {
								Node ChildNodex = nodelist1.item(a);
								if (Node.ELEMENT_NODE == ChildNodex.getNodeType()) {
									Element elementchild7 = (Element) ChildNodex;

									NodeList nodelist2 = elementchild7.getElementsByTagName("support-cell-number");
									for (int b = 0; b < nodelist2.getLength(); b++) {
										Node ChildNode2 = nodelist2.item(b);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList10.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild6, header));

											while (itr.hasNext()) {
												header = itr.next();
												if (header.equals("support-cell-number")) {
													objtableData.put(header, ChildNode2.getTextContent());
												} else {
													objtableData.put(header, getXmlElementData(elementchild7, header));
												}
											}
											tabelData10.add(objtableData);
										}
									}

								}
							}
						}

					}

					NodeList nodelist1 = elementchild1.getElementsByTagName("end-point-f1c");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("gnb-cu-cp-name", getXmlElementData(elementchild6, "gnb-cu-cp-name"));
							objtableData.put("remote-ip-address",
									getXmlElementData(elementchild6, "remote-ip-address"));
							objtableData.put("secondary-remote-ip-address",
									getXmlElementData(elementchild6, "secondary-remote-ip-address"));
							objtableData.put("sctp-state", getXmlElementData(elementchild6, "sctp-state"));
							objtableData.put("f1-ap-state", getXmlElementData(elementchild6, "f1-ap-state"));
							tabelData8.add(objtableData);

						}

					}

					nodelist1 = elementchild1.getElementsByTagName("active-alarm-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList12.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData12.add(objtableData);
						}
					}
				}
			}

			checkEmptyTableDss(tabelData1, entry1, runTestEntity, enbId);
			checkEmptyTableDss(tabelData2, entry2, runTestEntity, enbId);
			//checkEmptyTableDss(tabelData3, entry3, runTestEntity, enbId);
		//	checkEmptyTableDss(tabelData4, entry4, runTestEntity, enbId);
			checkEmptyTableDss(tabelData5, entry5, runTestEntity, enbId);
			checkEmptyTableDss(tabelData6, entry6, runTestEntity, enbId);
			checkEmptyTableDss(tabelData7, entry7, runTestEntity, enbId);
			checkEmptyTableDss(tabelData8, entry8, runTestEntity, enbId);
			
			checkEmptyTableDss(tabelData16, entry16, runTestEntity, enbId);
			checkEmptyTableDss(tabelData14, entry14, runTestEntity, enbId);
			checkEmptyTableDss(tabelData15, entry15, runTestEntity, enbId);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			StringBuilder auditIssue9 = new StringBuilder();
			StringBuilder auditIssue10 = new StringBuilder();
			StringBuilder auditIssue11 = new StringBuilder();
			StringBuilder auditIssue12 = new StringBuilder();
			StringBuilder auditIssue13 = new StringBuilder();
			StringBuilder auditIssue14 = new StringBuilder();
			StringBuilder auditIssue15 = new StringBuilder();
			StringBuilder auditIssue16 = new StringBuilder();
			StringBuilder auditIssue17 = new StringBuilder();
			StringBuilder auditIssue18 = new StringBuilder();
			StringBuilder auditIssue19 = new StringBuilder();
			StringBuilder auditIssue20 = new StringBuilder();
			StringBuilder auditIssue21 = new StringBuilder();
			StringBuilder auditIssue22 = new StringBuilder();
			StringBuilder auditIssue23 = new StringBuilder();
			StringBuilder auditIssue24 = new StringBuilder();
			StringBuilder auditIssue25 = new StringBuilder();
			StringBuilder auditIssue26 = new StringBuilder();
			StringBuilder auditIssue27 = new StringBuilder();
			StringBuilder auditIssue28 = new StringBuilder();
			String vDUType = "";
			String softwareVersionFSU = "";
			vDUType = get5gDSSVDUType(fullOutputLog, XmlCommandsConstants.DSS_VDU_PREAUDIT, enbId, dbcollectionFileName,
					runTestEntity);
            Set<String> gnodduebIdset = new HashSet<>();			
			gnodduebIdset = getEnbPathlist(fullOutputLog, XmlCommandsConstants.DSS_ENB_PREAUDIT, enbId, dbcollectionFileName,
					runTestEntity);
			softwareVersionFSU = get4GsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_FSU_SOFTWAREVERSION, enbId,
					dbcollectionFileName, runTestEntity);
			String neid = "";
			String remoteIp = "";
			String gnbcuIpAddr = "";
			String enb4G = "";
			String f1uIpAddr = "";
			String f1cIpAddr = "";
			String flavorId = "";
			String sw = "";
			String cleanNr = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("EndpointCUIPaddress")) {
					gnbcuIpAddr = listOfCiqDetails.get(0).getCiqMap().get("EndpointCUIPaddress").getHeaderValue()
							.trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("flavor_id")) {
					flavorId = listOfCiqDetails.get(0).getCiqMap().get("flavor_id").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("vDU_Version")) {
					sw = listOfCiqDetails.get(0).getCiqMap().get("vDU_Version").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("FR1_Solution")) {
					cleanNr = listOfCiqDetails.get(0).getCiqMap().get("FR1_Solution").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName, "DSS_MOP_Parameters-1",
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)
					&& listOfCiqDetails.get(0).getCiqMap().containsKey("remote-ip-address")) {
				remoteIp = listOfCiqDetails.get(0).getCiqMap().get("remote-ip-address").getHeaderValue().trim();
			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"vDUHELM(Day0)Orchestrator", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("addr0")) {
					f1uIpAddr = listOfCiqDetails.get(0).getCiqMap().get("addr0").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("addr")) {
					f1cIpAddr = listOfCiqDetails.get(0).getCiqMap().get("addr").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			List<CIQDetailsModel> listOfCiqDetailsDay2 = getCiqDetailsForRuleValidationsheet(enb4G,
					dbcollectionFileName, "vDUDay_2", "eNBId");
			if (flavorId.equalsIgnoreCase("CascadeLake")) {
				flavorId = "medium";
			} else {
				flavorId = "medium-icl";
			}
			// pod entries
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("operational-state") && tdData.get("pod-id").equals("0")) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("pod-type : " + tdData.get("pod-type") + " operational-state : "
									+ tdData.get("operational-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// config-info
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("flavor-id")) {
						if (value.equals("small-fdd") && (!neVersion.contains("21.D") || !neVersion.contains("22"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equals(flavorId) ) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if (neVersion.contains("21.D") || neVersion.contains("22")) {
								auditIssue25.append("ne-id : " + tdData.get("ne-id") + " flavor-id : "
										+ tdData.get("flavor-id") + "\n");
							} else {
								auditIssue2.append("ne-id : " + tdData.get("ne-id") + " flavor-id : "
										+ tdData.get("flavor-id") + "\n");
							}
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					}else if (key.equals("software-version")) {
						if (!versionCompare(StringUtils.substringBefore(sw, "("),
								StringUtils.substringBefore(value, "("))) {
							
							auditIssue27.append("ne-id: " + tdData.get("ne-id")+" software-version: " + tdData.get("software-version") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// pod entries sync
			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					/*if (key.equals("holdover-timer-threshold")) {
						if (value.equals("10")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue3.append("pod-type : " + tdData.get("pod-type") + " holdover-timer-threshold : "
									+ tdData.get("holdover-timer-threshold") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else*/ if (key.equals("sync-state")) {
						if (value.equals("locked")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("pod-type : " + tdData.get("pod-type") + " sync-state : "
									+ tdData.get("sync-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// end-point-dss
			/*if (!remoteIp.isEmpty() && !ObjectUtils.isEmpty(tabelData4)) {
				if (compareIPAddr(remoteIp, tabelData4.get(0).get("remote-ip-address"))) {
					remoteIp = tabelData4.get(0).get("remote-ip-address");
				}
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("enb-id")) {
						if (value.replaceAll("^0+(?!$)", "").equals(enb4G)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue5.append("dss-index : " + tdData.get("dss-index") + " enb-id : "
									+ tdData.get("enb-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("remote-ip-address")) {
						if (value.equals(remoteIp)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue6.append("dss-index : " + tdData.get("dss-index") + " remote-ip-address : "
									+ tdData.get("remote-ip-address") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
*/
			// spectrum-sharing-scheduler-config
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList5) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData5) {
				tableData.append("<tr>\n");

				String frSolution = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {

							if (ciqData.getCiqMap().containsKey("FR1_SolutionCell")) {
								frSolution = ciqData.getCiqMap().get("FR1_SolutionCell").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("spectrum-sharing")) {
						if (value.equals("true") && frSolution.toLowerCase().contains("dss")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase("false") && frSolution.toLowerCase().contains("cleannr")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue7.append("cell-identity : " + tdData.get("cell-identity") + " spectrum-sharing : "
									+ tdData.get("spectrum-sharing") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// virtual-port-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList6.size() + " bgcolor=#EEEEEE><b>" + entry6 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList6) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			if (tabelData6.size() != 7 && vDUType.equals("medium")) {
				auditIssue8.append("Cascadelake LS3 vDU should have 7 virtual-port." + "\n");
			} else if (tabelData6.size() != 12 &&  tabelData6.size() != 13 && vDUType.equals("medium-icl") && !neVersion.contains("22")) {
				auditIssue8.append("Icelake LS3 vDU should have 12 or 13 virtual-port." + "\n");
			}else if ( tabelData6.size() != 13 && vDUType.equals("medium-icl")  && neVersion.contains("22")) {
				auditIssue8.append("Icelake LS3 vDU should have 13 virtual-port." + "\n");
			} else if (tabelData6.size() != 6 && vDUType.equals("small-fdd")) {
				auditIssue8.append("LS3 vDU should have 6 virtual-port." + "\n");
			}
			System.out.println(tabelData6.size());
			if(vDUType.equals("medium-icl")) {
			int countdpp=0;
			int countrmp=0;
			int countdip=0;
			for (LinkedHashMap<String, String> tdData : tabelData6) {
				if(tdData.get("pod-type").equals("rmp")) {
					countrmp++;
				}
				if(tdData.get("pod-type").equals("dpp")) {
					countdpp++;
				}
				if(tdData.get("pod-type").equals("dip")) {
					countdip++;
				}
			}
			if(!neVersion.contains("22")) {
			if(tabelData6.size() == 12) {
				if(!(countrmp==3 && countdpp==8 && countdip==1)) {
					auditIssue8.append("Icelake LS3 vDU should have 3 RMP ,8 DPP & 1 DIP Pod." + "\n");	
				}
			}else if(tabelData6.size() == 13) {
				if(!(countrmp==4 && countdpp==8 && countdip==1)) {
					auditIssue8.append("Icelake LS3 vDU should have 4 RMP ,8 DPP & 1 DIP Pod" + "\n");
				}
			}
			}else if(neVersion.contains("22")) {
				if(tabelData6.size() == 13) {
					if(!(countrmp==4 && countdpp==8 && countdip==1)) {
						auditIssue8.append("Icelake LS3 vDU should have 4 RMP ,8 DPP & 1 DIP Pod" + "\n");
					}
				}
			}
			}	
			for (LinkedHashMap<String, String> tdData : tabelData6) {
				tableData.append("<tr>\n");
				List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository.getAuditConstantsEntityList(
						AuditConstants.PROGRAMNAME_5G_DSS, tdData.get("pod-type").trim(),
						tdData.get("interface-name").trim());
				String mtu = "";
				if (!ObjectUtils.isEmpty(auditConstantsList)) {
					mtu = auditConstantsList.get(0).getParameterValue().trim();
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("mtu") && tdData.get("operational-state").equals("enabled") ) {
						if (mtu.equals(value) ) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue8.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + " mtu : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// external-interfaces
		/*	String mh1Code = "";
			mh1Code = getMH1IpForValidation(fullOutputLog, XmlCommandsConstants.DSS_VDU_MH1IPFETCH,
					enbId, dbcollectionFileName, runTestEntity);
			int mh1Value=0;
			if(NumberUtils.isNumber(mh1Code)) {
				mh1Value=Integer.parseInt(mh1Code);
				mh1Value++;
			}
			if(!mh1Code.isEmpty()) {
			mh1Code=String.valueOf(mh1Value);
			}
			String ipMh1="";
			if(mh1Code.length()==1) {
			 ipMh1="fd00:4888:20:520:0:406:0:40"+mh1Code;
			}else if(mh1Code.length()==2) {
			ipMh1="fd00:4888:20:520:0:406:0:4"+mh1Code;
			}else {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(202, runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
						XmlCommandsConstants.DSS_VDU_MH1IPFETCH + " : No Data From vdu.conf File");	
			}*/
			htmlContent.append(
					"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList7) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			if (tabelData7.size() != 4) {
				auditIssue21.append("LS3 vDU should have 4 external interfaces" + "\n");
			}
			for (LinkedHashMap<String, String> tdData : tabelData7) {
				tableData.append("<tr>\n");
				List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository.getAuditConstantsEntityList(
						AuditConstants.PROGRAMNAME_5G_DSS, tdData.get("pod-type").trim() + "_ip",
						tdData.get("interface-name").trim());
				String ip = "::";
				if (!ObjectUtils.isEmpty(auditConstantsList)) {
					String[] ipList = auditConstantsList.get(0).getParameterValue().trim().split(",");
					for (String ipAddr : ipList) {
						if (compareIPAddr(ipAddr.trim(), tdData.get("ip").trim())) {
							ip = ipAddr.trim();
							break;
						}
					}
				} else if (tdData.get("pod-type").equalsIgnoreCase("dpp")
						&& tdData.get("interface-name").equalsIgnoreCase("mh0")) {
					ip = f1uIpAddr;
				} else if (tdData.get("pod-type").equalsIgnoreCase("dip")
						&& tdData.get("interface-name").equalsIgnoreCase("mh0")) {
					ip = f1cIpAddr;
				}
				/*if (tdData.get("pod-type").equalsIgnoreCase("dpp")
						&& tdData.get("interface-name").equalsIgnoreCase("mh1")) {
					if (tdData.get("ip").equalsIgnoreCase("fd00:4888:20:520:0:406:0:400")) {
						ip = "fd00:4888:20:520:0:406:0:400";
					}else if(!(mh1Code.length()==1 || mh1Code.length()==2)) {
						ip = tdData.get("ip").trim();
					}else {
						ip = ipMh1;
					}
				}*/
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("ip")) {
						if (compareIPAddr(ip, value.trim())) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue21.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + " ip : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					}else if (key.equals("dss") && tdData.get("interface-name").equalsIgnoreCase("mh0")
							&& (tdData.get("pod-type").equalsIgnoreCase("dip") || tdData.get("pod-type").equalsIgnoreCase("dpp"))
							&& (neVersion.contains("21.D") || neVersion.contains("22"))) {
						if (value.equalsIgnoreCase("true")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue26.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + " dss : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// end-point-f1c
			if (!gnbcuIpAddr.isEmpty() && !ObjectUtils.isEmpty(tabelData8)) {
				if (compareIPAddr(gnbcuIpAddr, tabelData8.get(0).get("remote-ip-address"))) {
					gnbcuIpAddr = tabelData8.get(0).get("remote-ip-address");
				}
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList8.size() + " bgcolor=#EEEEEE><b>" + entry8 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList8) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData8) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sctp-state")) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue9.append("gnb-cu-cp-name : " + tdData.get("gnb-cu-cp-name") + " sctp-state : "
									+ tdData.get("sctp-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("f1-ap-state")) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue10.append("gnb-cu-cp-name : " + tdData.get("gnb-cu-cp-name") + " f1-ap-state : "
									+ tdData.get("f1-ap-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("remote-ip-address")) {
						if (value.equals(gnbcuIpAddr)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue11.append("gnb-cu-cp-name : " + tdData.get("gnb-cu-cp-name")
									+ " remote-ip-address : " + tdData.get("remote-ip-address") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
        if(!neVersion.contains("22") || softwareVersionFSU.contains("21.D")) {
        	checkEmptyTableDss(tabelData9, entry9, runTestEntity, enbId);
			checkEmptyTableDss(tabelData10, entry10, runTestEntity, enbId);
			checkEmptyTableDss(tabelData11, entry11, runTestEntity, enbId);
			// vru-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList9.size() + " bgcolor=#EEEEEE><b>" + entry9 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList9) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData9) {
				tableData.append("<tr>\n");
				String fsuid = "";
				String vruid = "";
				String unitType = "";
				String supportcellNum = "";
				
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("fsu-id")
								&& ciqData.getCiqMap().get("fsu-id").getHeaderValue().trim()
										.equals(tdData.get("fsu-id").trim())
								&& ciqData.getCiqMap().containsKey("support-cell-number")
								&& ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim()
										.equals(tdData.get("support-cell-number").trim())) {
							fsuid = tdData.get("fsu-id").trim();
							if (ciqData.getCiqMap().containsKey("unit-type")) {
								unitType = ciqData.getCiqMap().get("unit-type").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("vru-id")) {
								vruid = ciqData.getCiqMap().get("vru-id").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("support-cell-number")) {
								supportcellNum = ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim();
							}
						}
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("fsu-id") || key.equals("vru-id") || key.equals("unit-type")
							|| key.equals("support-cell-number") ) {
						if (value.equalsIgnoreCase(fsuid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(vruid) && key.equals("vru-id")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(unitType)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(supportcellNum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if (!entryPresent)
								auditIssue13.append("fsu-id : " + tdData.get("fsu-id") + " vru-id : "
										+ tdData.get("vru-id") + " unit-type : " + tdData.get("unit-type")
										+ " support-cell-number : " + tdData.get("support-cell-number")
										+ " operational-mode : " + tdData.get("operational-mode") + "\n");
							entryPresent = true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			// cuplane-interfaces
			htmlContent.append(
					"<tr><td colspan=" + headerList10.size() + " bgcolor=#EEEEEE><b>" + entry10 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList10) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData10) {
				tableData.append("<tr>\n");
				String fsuid = "";
				String podType = "";
				String podID = "";
				String portID = "";
				String fsuportID = "";
				String vlanID = "";
				String supportcellNum = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("fsu-id")
								&& ciqData.getCiqMap().get("fsu-id").getHeaderValue().trim()
										.equals(tdData.get("fsu-id").trim())
								&& ciqData.getCiqMap().containsKey("support-cell-number")
								&& ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim()
										.equals(tdData.get("support-cell-number").trim())) {
							fsuid = tdData.get("fsu-id").trim();
							if (ciqData.getCiqMap().containsKey("connected-pod-type")) {
								podType = ciqData.getCiqMap().get("connected-pod-type").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("connected-pod-id")) {
								podID = ciqData.getCiqMap().get("connected-pod-id").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("connected-pod-port-id")) {
								portID = ciqData.getCiqMap().get("connected-pod-port-id").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("vlan-id")) {
								vlanID = ciqData.getCiqMap().get("vlan-id").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("support-cell-number")) {
								supportcellNum = ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim();
							}
						}
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("fsu-id") || key.equals("connected-pod-type") || key.equals("connected-pod-id")
							|| key.equals("support-cell-number") || key.equals("connected-pod-port-id")
							|| key.equalsIgnoreCase("vlan-id")) {
						if (value.equalsIgnoreCase(fsuid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(podType)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(podID) && key.equals("connected-pod-id")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(supportcellNum) && key.equals("support-cell-number")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(portID) && key.equals("connected-pod-port-id")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(vlanID) && key.equals("vlan-id")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if (!entryPresent)
								auditIssue14.append("fsu-id : " + tdData.get("fsu-id") + " connected-pod-type : "
										+ tdData.get("connected-pod-type") + " connected-pod-id : "
										+ tdData.get("connected-pod-id") + " support-cell-number : "
										+ tdData.get("support-cell-number") + " connected-pod-port-id : "
										+ tdData.get("connected-pod-port-id") + " connected-fsu-port-id : "
										+ tdData.get("connected-fsu-port-id") + " vlan-id : " + tdData.get("vlan-id")
										+ "\n");
							entryPresent = true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					}else if(key.equals("connected-fsu-port-id")) {
						if(!value.equals("0") && vDUType.equals("medium")) {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue28.append("fsu-id : " + tdData.get("fsu-id") + " connected-pod-type : "
									+ tdData.get("connected-pod-type") + " connected-pod-id : "
									+ tdData.get("connected-pod-id") + " support-cell-number : "
									+ tdData.get("support-cell-number") + " connected-pod-port-id : "
									+ tdData.get("connected-pod-port-id") + " connected-fsu-port-id : "
									+ tdData.get("connected-fsu-port-id") + " vlan-id : " + tdData.get("vlan-id")
									+ "\n");
						}else if(!value.equals("1") && vDUType.equals("medium-icl")) {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue28.append("fsu-id : " + tdData.get("fsu-id") + " connected-pod-type : "
									+ tdData.get("connected-pod-type") + " connected-pod-id : "
									+ tdData.get("connected-pod-id") + " support-cell-number : "
									+ tdData.get("support-cell-number") + " connected-pod-port-id : "
									+ tdData.get("connected-pod-port-id") + " connected-fsu-port-id : "
									+ tdData.get("connected-fsu-port-id") + " vlan-id : " + tdData.get("vlan-id")
									+ "\n");
						}else {
							tableData.append("<td align=center>" + value + "</td>\n");	
						}
					}else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// sharing-info
			htmlContent.append(
					"<tr><td colspan=" + headerList11.size() + " bgcolor=#EEEEEE><b>" + entry11 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList11) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData11) {
				tableData.append("<tr>\n");
				String fsuid = "";
				String vruid = "";
				String sharingEnable = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("fsu-id")
								&& ciqData.getCiqMap().get("fsu-id").getHeaderValue().trim()
										.equals(tdData.get("fsu-id").trim())
								&& ciqData.getCiqMap().containsKey("vru-id") && ciqData.getCiqMap().get("vru-id")
										.getHeaderValue().trim().equals(tdData.get("vru-id").trim())) {
							fsuid = tdData.get("fsu-id").trim();
							if (ciqData.getCiqMap().containsKey("vru-id")) {
								vruid = ciqData.getCiqMap().get("vru-id").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("sharing-enabled")) {
								sharingEnable = ciqData.getCiqMap().get("sharing-enabled").getHeaderValue().trim();
							}
						}
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("fsu-id") || key.equals("vru-id") || key.equals("sharing-enabled")) {
						if (value.equalsIgnoreCase(fsuid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(vruid) && key.equals("vru-id")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(sharingEnable)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if (!entryPresent)
								auditIssue15
										.append("fsu-id : " + tdData.get("fsu-id") + " vru-id : " + tdData.get("vru-id")
												+ " sharing-enabled : " + tdData.get("sharing-enabled") + "\n");
							entryPresent = true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
        }
			// active-alarm-entries
			if(!(tabelData12.size()==0)) {
			htmlContent.append(
					"<tr><td colspan=" + headerList12.size() + " bgcolor=#EEEEEE><b>" + entry12 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList12) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData12) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (value.equals("service-off")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						}  else if (value.equals("port-down")  && vDUType.equals("medium-icl")
								&& !checkportDownAlarmEntries(tdData.get("location"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						}else {
							auditIssue12.append("alarm-type : " + tdData.get("alarm-type") + " probable-cause : "
									+ tdData.get("probable-cause") + " specific-problem : "
									+ tdData.get("specific-problem") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			}else {
            	htmlContent.append(
    					"<tr><td colspan=" + headerList11.size() + " bgcolor=#EEEEEE><b>" + entry12 + "</b></td></tr>\n");
            	htmlContent.append("<tr>\n<td align=center colspan=" + headerList11.size() + " bgcolor=FFFF00>NO DATA</td></tr>\n");	
            }
			// dl-antenna-count
			htmlContent.append(
					"<tr><td colspan=" + headerList13.size() + " bgcolor=#EEEEEE><b>" + entry13 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList13) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData13) {
				tableData.append("<tr>\n");
				String cellid = "";
				String dlantennaCount = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("dl-antenna-count")) {
								dlantennaCount = ciqData.getCiqMap().get("dl-antenna-count").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("dl-antenna-count")) {
						if (value.equals(dlantennaCount)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue16.append("cell-identity : " + tdData.get("cell-identity")
									+ " dl-antenna-count : " + tdData.get("dl-antenna-count") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// ul-antenna-count
			htmlContent.append(
					"<tr><td colspan=" + headerList14.size() + " bgcolor=#EEEEEE><b>" + entry14 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList14) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData14) {
				tableData.append("<tr>\n");
				String cellid = "";
				String ulantennaCount = "";
				String rxpath = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("ul-antenna-count")) {
								ulantennaCount = ciqData.getCiqMap().get("ul-antenna-count").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("number-of-rx-paths-per-ru")) {
								rxpath = ciqData.getCiqMap().get("number-of-rx-paths-per-ru").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("ul-antenna-count")) {
						if (value.equals(ulantennaCount)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue17.append("cell-identity : " + tdData.get("cell-identity")
									+ " ul-antenna-count : " + tdData.get("ul-antenna-count") + "\n");
						}
					} else if (key.equals("number-of-rx-paths-per-ru")) {
						if (value.equals(rxpath)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue18.append("cell-identity : " + tdData.get("cell-identity")
									+ " number-of-rx-paths-per-ru : " + tdData.get("number-of-rx-paths-per-ru") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// cell-physical-conf-idle
			htmlContent.append(
					"<tr><td colspan=" + headerList15.size() + " bgcolor=#EEEEEE><b>" + entry15 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList15) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData15) {
				tableData.append("<tr>\n");
				String cellid = "";
				String nrPci = "";
				String arfcndl = "";
				String arfcnul = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("nr-arfcn-dl")) {
								arfcndl = ciqData.getCiqMap().get("nr-arfcn-dl").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("nr-arfcn-ul")) {
								arfcnul = ciqData.getCiqMap().get("nr-arfcn-ul").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("nr-physical-cell-id")) {
								nrPci = ciqData.getCiqMap().get("nr-physical-cell-id").getHeaderValue().trim();
							}
						}
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("nr-physical-cell-id")) {
						if (value.equals(nrPci)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue19.append("cell-identity : " + tdData.get("cell-identity")
										+ " nr-physical-cell-id : " + tdData.get("nr-physical-cell-id")
										+ " nr-arfcn-dl: " + tdData.get("nr-arfcn-dl") + " nr-arfcn-ul : "
										+ tdData.get("nr-arfcn-ul") + "\n");
								entryPresent = true;
							}
						}
					} else if (key.equals("nr-arfcn-dl")) {
						if (value.equals(arfcndl)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue19.append("cell-identity : " + tdData.get("cell-identity")
										+ " nr-physical-cell-id : " + tdData.get("nr-physical-cell-id")
										+ " nr-arfcn-dl: " + tdData.get("nr-arfcn-dl") + " nr-arfcn-ul : "
										+ tdData.get("nr-arfcn-ul") + "\n");
								entryPresent = true;
							}
						}
					} else if (key.equals("nr-arfcn-ul")) {
						if (value.equals(arfcnul)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue19.append("cell-identity : " + tdData.get("cell-identity")
										+ " nr-physical-cell-id : " + tdData.get("nr-physical-cell-id")
										+ " nr-arfcn-dl: " + tdData.get("nr-arfcn-dl") + " nr-arfcn-ul : "
										+ tdData.get("nr-arfcn-ul") + "\n");
								entryPresent = true;
							}
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// gutran-du-cell-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList16.size() + " bgcolor=#EEEEEE><b>" + entry16 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList16) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData16) {
				tableData.append("<tr>\n");
				/*String cellPathType = "";
				List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository
						.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_5G_DSS, "cell-path-type");
				if (!ObjectUtils.isEmpty(auditConstantsList)) {
					cellPathType = auditConstantsList.get(0).getParameterValue().trim();
				}*/
				String frSolution = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {

							if (ciqData.getCiqMap().containsKey("FR1_SolutionCell")) {
								frSolution = ciqData.getCiqMap().get("FR1_SolutionCell").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-path-type") && frSolution.toLowerCase().contains("dss") && !gnodduebIdset.isEmpty()) {
						if (gnodduebIdset.contains(value)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue20.append("cell-identity : " + tdData.get("cell-identity") + " cell-path-type : "
									+ tdData.get("cell-path-type") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			if(neVersion.contains("22")) {
				tabelData17 = getOruEntriesTable(fullOutputLog, XmlCommandsConstants.DSS_VDU_ORUTABLE, enbId,
						dbcollectionFileName, runTestEntity);
				tabelData18 = getOruEntriesTableMplain(fullOutputLog, XmlCommandsConstants.DSS_VDU_ORUTABLE, enbId,
						dbcollectionFileName, runTestEntity);
				tabelData19 = getOruOperationState(fullOutputLog, XmlCommandsConstants.DSS_VDU_ORUTABLE, enbId,
						dbcollectionFileName, runTestEntity);
				tabelData20 = getOruSharingTable(fullOutputLog, XmlCommandsConstants.DSS_VDU_ORUTABLE, enbId,
						dbcollectionFileName, runTestEntity);
				htmlContent.append(
						"<tr><td colspan=" + headerList17.size() + " bgcolor=#EEEEEE><b>" + entry17 + "</b></td></tr>\n");
				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList17) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData17) {
					tableData.append("<tr>\n");
	
					String podType = "";
					String podID = "";
					String portID = "";
					String vlanID = "";
					String supportcellNum = "";
					if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
						for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
							if ( ciqData.getCiqMap().containsKey("support-cell-number")
									&& ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim()
											.equals(tdData.get("nr-support-cell-number").trim())) {
								supportcellNum = tdData.get("nr-support-cell-number").trim();
								if (ciqData.getCiqMap().containsKey("connected-pod-type")) {
									podType = ciqData.getCiqMap().get("connected-pod-type").getHeaderValue().trim();
								}
								if (ciqData.getCiqMap().containsKey("connected-pod-id")) {
									podID = ciqData.getCiqMap().get("connected-pod-id").getHeaderValue().trim();
								}
								if (ciqData.getCiqMap().containsKey("connected-pod-port-id")) {
									portID = ciqData.getCiqMap().get("connected-pod-port-id").getHeaderValue().trim();
								}
								if (ciqData.getCiqMap().containsKey("vlan-id")) {
									vlanID = ciqData.getCiqMap().get("vlan-id").getHeaderValue().trim();
								}

							}
						}
					}
					boolean entryPresent = false;
					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if ( key.equals("connected-pod-type") || key.equals("connected-pod-id")
								|| key.equals("nr-support-cell-number") || key.equals("connected-pod-port-id")
								|| key.equalsIgnoreCase("vlan-id")) {
							 if (value.equalsIgnoreCase(podType)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (value.equalsIgnoreCase(podID) && key.equals("connected-pod-id")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (value.equalsIgnoreCase(supportcellNum) && key.equals("nr-support-cell-number")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (value.equalsIgnoreCase(portID) && key.equals("connected-pod-port-id")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (value.equalsIgnoreCase(vlanID) && key.equals("vlan-id")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
                                if(!softwareVersionFSU.contains("21.D")) {
								if (!entryPresent )
									auditIssue14.append("connected-pod-type : "
											+ tdData.get("connected-pod-type") + " connected-pod-id : "
											+ tdData.get("connected-pod-id") + " nr-support-cell-number : "
											+ tdData.get("nr-support-cell-number") + " connected-pod-port-id : "
											+ tdData.get("connected-pod-port-id") + " connected-fsu-port-id : "
											+ tdData.get("connected-fsu-port-id") + " vlan-id : " + tdData.get("vlan-id")
											+ "\n");
								entryPresent = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
                                }else {
                                	tableData.append("<td align=center>" + value + "</td>\n");
                                }
							}
						}else if(key.equals("connected-fsu-port-id")) {
							if(!value.equals("0") && vDUType.equals("medium")  && !softwareVersionFSU.contains("21.D") ) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue28.append("connected-pod-type : "
										+ tdData.get("connected-pod-type") + " connected-pod-id : "
										+ tdData.get("connected-pod-id") + " support-cell-number : "
										+ tdData.get("nr-support-cell-number") + " connected-pod-port-id : "
										+ tdData.get("connected-pod-port-id") + " connected-fsu-port-id : "
										+ tdData.get("connected-fsu-port-id") + " vlan-id : " + tdData.get("vlan-id")
										+ "\n");
							}else if(!value.equals("1") && vDUType.equals("medium-icl") && !softwareVersionFSU.contains("21.D")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue28.append("connected-pod-type : "
										+ tdData.get("connected-pod-type") + " connected-pod-id : "
										+ tdData.get("connected-pod-id") + " support-cell-number : "
										+ tdData.get("nr-support-cell-number") + " connected-pod-port-id : "
										+ tdData.get("connected-pod-port-id") + " connected-fsu-port-id : "
										+ tdData.get("connected-fsu-port-id") + " vlan-id : " + tdData.get("vlan-id")
										+ "\n");
							}else {
								tableData.append("<td align=center>" + value + "</td>\n");	
							}
						}else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				
				htmlContent.append(
						"<tr><td colspan=" + headerList18.size() + " bgcolor=#EEEEEE><b>" + entry18 + "</b></td></tr>\n");
				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList18) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData18) {
					tableData.append("<tr>\n");
					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();

						tableData.append("<td align=center>" + value + "</td>\n");

					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				
				htmlContent.append(
						"<tr><td colspan=" + headerList19.size() + " bgcolor=#EEEEEE><b>" + entry19 + "</b></td></tr>\n");
				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList19) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData19) {
					tableData.append("<tr>\n");
					String fsuid = "";
					String vruid = "";
					String unitType = "";
					String supportcellNum = "";
					/*String operationalMode = "normal-mode";
					String operationalMode1 = "growth-mode";*/
					if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
						for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
							if (ciqData.getCiqMap().containsKey("vru-id")
									&& ciqData.getCiqMap().get("vru-id").getHeaderValue().trim()
											.equals(tdData.get("o-ran-ru-id").trim())
									&& ciqData.getCiqMap().containsKey("support-cell-number")
									&& ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim()
											.equals(tdData.get("nr-support-cell-number").trim())) {
								vruid = tdData.get("o-ran-ru-id").trim();
								if (ciqData.getCiqMap().containsKey("unit-type")) {
									unitType = ciqData.getCiqMap().get("unit-type").getHeaderValue().trim();
								}
								if (ciqData.getCiqMap().containsKey("support-cell-number")) {
									supportcellNum = ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim();
								}
							}
						}
					}
					boolean entryPresent = false;
					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("o-ran-ru-id") || key.equals("unit-type")
								|| key.equals("nr-support-cell-number")) {
							 if (value.equalsIgnoreCase(vruid) && key.equals("o-ran-ru-id")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if ((value.equalsIgnoreCase("oru") || value.equalsIgnoreCase(unitType)) && key.equals("unit-type")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (value.equalsIgnoreCase(supportcellNum) && key.equals("nr-support-cell-number")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} /*else if ((value.equalsIgnoreCase(operationalMode)
									|| value.equalsIgnoreCase(operationalMode1)) && key.equals("operational-mode")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							}*/ else {
								if(!softwareVersionFSU.contains("21.D")) {
								if (!entryPresent)
									auditIssue13.append( "o-ran-ru-id : "
											+ tdData.get("o-ran-ru-id") + " unit-type : " + tdData.get("unit-type")
											+ " nr-support-cell-number : " + tdData.get("nr-support-cell-number")
											+ " operational-mode : " + tdData.get("operational-mode") + "\n");
								entryPresent = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								}else {
									tableData.append("<td align=center>" + value + "</td>\n");	
								}
							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			
			if(!(tabelData20.size()==0)) {
				htmlContent.append(
						"<tr><td colspan=" + headerList20.size() + " bgcolor=#EEEEEE><b>" + entry20 + "</b></td></tr>\n");
				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList20) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData20) {
					tableData.append("<tr>\n");
					String vruid = "";
					String sharingEnable = "";
					if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
						for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
							if (ciqData.getCiqMap().containsKey("vru-id") && ciqData.getCiqMap().get("vru-id")
											.getHeaderValue().trim().equals(tdData.get("o-ran-ru-id").trim())) {
								vruid = tdData.get("o-ran-ru-id").trim();
								if (ciqData.getCiqMap().containsKey("sharing-enabled")) {
									sharingEnable = ciqData.getCiqMap().get("sharing-enabled").getHeaderValue().trim();
								}
							}
						}
					}
					boolean entryPresent = false;
					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("o-ran-ru-id") || key.equals("sharing-enabled")) {
							if (value.equalsIgnoreCase(vruid) && key.equals("o-ran-ru-id")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (value.equalsIgnoreCase(sharingEnable) && key.equals("sharing-enabled")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								if(!softwareVersionFSU.contains("21.D")) {
								if (!entryPresent)
									auditIssue15
											.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id")
													+ " sharing-enabled : " + tdData.get("sharing-enabled") + "\n");
								entryPresent = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								}else {
									tableData.append("<td align=center>" + value + "</td>\n");	
								}
							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			}
			}
	
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());		
			StringBuilder auditIssueAll = new StringBuilder();
			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			auditIssueAll.append(auditIssue7);
			auditIssueAll.append(auditIssue8);
			auditIssueAll.append(auditIssue9);
			auditIssueAll.append(auditIssue10);
			auditIssueAll.append(auditIssue11);
			auditIssueAll.append(auditIssue12);
			auditIssueAll.append(auditIssue13);
			auditIssueAll.append(auditIssue14);
			auditIssueAll.append(auditIssue15);
			auditIssueAll.append(auditIssue16);
			auditIssueAll.append(auditIssue17);
			auditIssueAll.append(auditIssue18);
			auditIssueAll.append(auditIssue19);
			auditIssueAll.append(auditIssue20);
			auditIssueAll.append(auditIssue21);
			auditIssueAll.append(auditIssue22);
			auditIssueAll.append(auditIssue23);
			auditIssueAll.append(auditIssue24);
			auditIssueAll.append(auditIssue25);
			auditIssueAll.append(auditIssue26);
			auditIssueAll.append(auditIssue27);
			auditIssueAll.append(auditIssue28);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData6, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData7, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData8, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData9, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData10, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData11, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData12, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData13, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData14, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData15, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData16, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData17, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData18, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData19, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData20, auditIssueAll);

			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(2, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(2, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(2, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			/*if (auditIssue3.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
			}*/
			if (auditIssue4.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			/*if (auditIssue5.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(5, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
			}
			if (auditIssue6.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
			}*/
			if (auditIssue7.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue8.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue8.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue9.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue9.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue10.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(10, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue10.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(10, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(10, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue11.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(11, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue11.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(11, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(11, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue12.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(12, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue12.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(12, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(12, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue13.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(13, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue13.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(13, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(13, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue14.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue14.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue15.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue15.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue16.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue16.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue17.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue17.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue18.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue18.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue19.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue19.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue20.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(20, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue20.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(20, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(20, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue21.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(21, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue21.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(21, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(21, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue25.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(71, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue25.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(71, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(71, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue26.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(77, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue26.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(77, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(77, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue27.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(89, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue27.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(89, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(89, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue28.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(90, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue28.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(90, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(90, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	private List<LinkedHashMap<String, String>> getOruSharingTable(String fullOutputLog, String command,
			String enbId, String dbcollectionFileName, RunTestEntity runTestEntity) {

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("o-ran-ru-id");
			headerList1.add("sharing-enabled");
			
			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("o-ran-radio-unit-info");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("sharing-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return tabelData1;
	}

	private List<LinkedHashMap<String, String>> getOruEntriesTableMplain(String fullOutputLog, String command,
			String enbId, String dbcollectionFileName, RunTestEntity runTestEntity) {

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("o-ran-ru-id");
			headerList1.add("mplane-ipv6");
			
			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("o-ran-radio-unit-info");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("mplane-interfaces");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return tabelData1;
	}

	private List<LinkedHashMap<String, String>> getOruEntriesTable(String fullOutputLog, String command,
			String enbId, String dbcollectionFileName, RunTestEntity runTestEntity) {

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("o-ran-ru-id");
			headerList1.add("connected-pod-type");
			headerList1.add("connected-pod-id");
			headerList1.add("connected-pod-port-id");
			headerList1.add("connected-fsu-port-id");
			headerList1.add("vlan-id");
			headerList1.add("nr-support-cell-number");

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("o-ran-radio-unit-info");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("cuplane-interfaces");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return tabelData1;
	}

	private String getMH1IpForValidation(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		
		String ip="";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			outputLog = StringUtils.substringAfter(outputLog, "clusters");
			outputLog = StringUtils.substringBefore(outputLog, "cluster");
			outputLog = StringUtils.substringAfter(outputLog, "name");
			outputLog =outputLog.trim().replaceAll("[^a-zA-Z0-9]", "");
			if (outputLog != null && outputLog.length() >= 2) { 
			ip=outputLog.substring(outputLog.length()-2);
			}
           
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			return ip;
		}
		return ip;
	}

	private boolean checkportDownAlarmEntries(String value) {
		boolean status = true;
		try {
			if ((value.contains("RMP[0]/FRONTHAUL_PORT[1]") || value.contains("RMP[0]/FRONTHAUL_PORT[2]"))) {
				status = false;
			} else if ((value.contains("RMP[0]/FRONTHAUL_PORT[3]") || value.contains("RMP[0]/FRONTHAUL_PORT[5]"))) {
				status = false;
			} else if ((value.contains("DPP[0]/FRONTHAUL_PORT[1]") || value.contains("DPP[0]/FRONTHAUL_PORT[3]") || value.contains("DPP[0]/FRONTHAUL_PORT[4]"))) {
				status = false;
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return status;
	}

	private Set<String> getEnbPathlist(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		Set<String> gnodduebIdset = new HashSet<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("internal-cell-num");
			headerList1.add("administrative-state");
			headerList1.add("battery-saving-option");
			headerList1.add("channel-card-id");
			headerList1.add("cell-band-carrier");
			headerList1.add("user-label");
			headerList1.add("test-flag");
			headerList1.add("cbrs-op-state");
			headerList1.add("cell-tx-path-type");
			headerList1.add("crsic-support-cell-conf");
			headerList1.add("dsp-id");
			headerList1.add("dsp-logical-cell-number");
			headerList1.add("emtc-edrx-switch");
			headerList1.add("lte-edrx-switch");
			headerList1.add("measurement-quantity-cdma2000");
			headerList1.add("multi-carrier-type");
			headerList1.add("traffic-control-prb-threshold");
			headerList1.add("virtual-rf-port-mapping-switch");
			headerList1.add("auto-unlock-flag");
			headerList1.add("operational-state");
			headerList1.add("usage-state");
			headerList1.add("resource-state");
			headerList1.add("cell-setup-state");
			headerList1.add("s1-ap-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("enb-function");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}
			String neid = "";
			String enb4G = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {

				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}

			}
			List<CIQDetailsModel> listOfCiqDetails2 = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"DSS_MOP_Parameters-4", "eNBId");
			String CellId = "";
			Set<String> cellidday2Set2 = new HashSet<>();
			if (!ObjectUtils.isEmpty(listOfCiqDetails2)) {
				for (CIQDetailsModel ciqData : listOfCiqDetails2) {
					if (!ObjectUtils.isEmpty(listOfCiqDetails2) && ciqData.getCiqMap().containsKey("cell-num")) {
						CellId = ciqData.getCiqMap().get("cell-num").getHeaderValue().trim();
						cellidday2Set2.add(CellId);
					}
				}
			}
			trimTabledataString(tabelData1, cellidday2Set2, "cell-num");

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.containsKey("cell-tx-path-type")) {
					gnodduebIdset.add(tdData.get("cell-tx-path-type"));
				}

			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return gnodduebIdset;
	}

	private String get5gDSSVDUType(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			RunTestEntity runTestEntity) {
		String softwareVersion = "";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("ne-id");
			headerList1.add("flavor-id");
			headerList1.add("ems-ip-address");
			headerList1.add("software-version");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("config-info");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.containsKey("flavor-id")) {
					softwareVersion = tdData.get("flavor-id");
				}

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return softwareVersion;
	}

	private String ge5gGsoftwareVersion(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			RunTestEntity runTestEntity) {
		String softwareVersion = "";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "config-info";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("ne-id");
			headerList1.add("flavor-id");
			headerList1.add("ems-ip-address");
			headerList1.add("software-version");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("config-info");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.containsKey("software-version")) {
					softwareVersion = tdData.get("software-version");
				}

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return softwareVersion;
	}

	public String getCbandSourceIp(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			NetworkConfigEntity networkConfigEntity) {
		String sourceIp = "";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("external-interfaces");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															NodeList childNodeList7 = elementchild6
																	.getElementsByTagName("ipv6-address");
															for (int f = 0; f < childNodeList7.getLength(); f++) {
																Node ChildNode7 = childNodeList7.item(f);
																if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
																	Element elementchild7 = (Element) ChildNode7;

																	if (getXmlElementData(elementchild5, "pod-type")
																			.trim().equalsIgnoreCase("dpp")
																			&& getXmlElementData(elementchild6,
																					"interface-name").trim()
																							.equalsIgnoreCase("mh0")) {
																		sourceIp = getXmlElementData(elementchild7,
																				"ip").trim();
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return sourceIp;
	}

	public LinkedHashMap<String, String> getCbandDestinationIp(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, NetworkConfigEntity networkConfigEntity) {
		LinkedHashMap<String, String> destinationIp = new LinkedHashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("vnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("vnfc");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4
													.getElementsByTagName("vnfc-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("external-interfaces");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															NodeList childNodeList7 = elementchild6
																	.getElementsByTagName("ipv6-address");
															for (int f = 0; f < childNodeList7.getLength(); f++) {
																Node ChildNode7 = childNodeList7.item(f);
																if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
																	Element elementchild7 = (Element) ChildNode7;

																	if (getXmlElementData(elementchild5, "vnfc-type")
																			.trim().equalsIgnoreCase("upc")) {
																		String key = "vnfc-id : "
																				+ getXmlElementData(elementchild5,
																						"vnfc-id")
																				+ " interface-name : "
																				+ getXmlElementData(elementchild6,
																						"interface-name");
																		destinationIp.put(key,
																				getXmlElementData(elementchild7, "ip")
																						.trim());
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return destinationIp;
	}

	public StringBuilder get5GCbandTwampTest(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, NetworkConfigEntity networkConfigEntity, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>" + "F1U Interface Connectivity"
					+ "</b></td></tr>\n");
			htmlContent.append("</table>\n");
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			LinkedHashMap<String, String> destinationIpList = getCbandDestinationIp(fullOutputLog,
					XmlCommandsConstants.DSS_F1U_DESTINATIONIP, enbId, dbcollectionFileName, networkConfigEntity);
			for (Map.Entry<String, String> destinationIp : destinationIpList.entrySet()) {
				String key = destinationIp.getKey();
				String value = destinationIp.getValue();

				if (!compareIPAddr(value, value)) {
					continue;
				}
				JSONObject result = get5GCBandF1U(fullOutputLog, key, enbId, dbcollectionFileName, networkConfigEntity,
						runTestEntity);
				if (result.containsKey("htmlContent")) {
					htmlContent.append(result.get("htmlContent").toString());
				}
				if (result.containsKey("auditIssue1")) {
					auditIssue1.append(result.get("auditIssue1").toString());
				}
				if (result.containsKey("auditIssue2")) {
					auditIssue2.append(result.get("auditIssue2").toString());
				}
				if (result.containsKey("auditIssue3")) {
					auditIssue3.append(result.get("auditIssue3").toString());
				}
				if (result.containsKey("auditIssue4")) {
					auditIssue4.append(result.get("auditIssue4").toString());
				}
				if (result.containsKey("auditIssue5")) {
					auditIssue5.append(result.get("auditIssue5").toString());
				}
			}
			/*
			 * if(auditIssue1.length()!=0) {
			 * audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(21,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue1.toString()); } if(auditIssue2.length()!=0) {
			 * audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(22,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue2.toString()); }
			 */
			if (auditIssue3.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(22, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(22, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(22, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			/*
			 * if(auditIssue4.length()!=0) {
			 * audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(24,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue4.toString()); } if(auditIssue5.length()!=0) {
			 * audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(25,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue5.toString()); }
			 */

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	@SuppressWarnings("unchecked")
	public JSONObject get5GCBandF1U(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			NetworkConfigEntity networkConfigEntity, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		JSONObject resultMap = new JSONObject();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String result = "";

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("test-id");
			headerList1.add("result-saved-time");
			headerList1.add("test-type");
			headerList1.add("result-type");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("diagnostic-test-result-list");
			for (int o = 0; o < nodeList.getLength(); o++) {
				Node ChildNode5 = nodeList.item(o);
				if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
					Element element = (Element) ChildNode5;
					result = getXmlElementData(element, "result-additional-info");
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					for (String header : headerList1) {
						objtableData.put(header, getXmlElementData(element, header));
					}
					tabelData1.add(objtableData);

				}
			}
			htmlContent.append(
					"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String entry = "Test Data";
			htmlContent.append(createHtmltableDSS(headerList1, entry, tabelData1, new HashMap<>()));

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String[] twampHeaderList = { "[ Packet Count ]", "[ Loss(ratio) ]" };
			for (String twampHeader : twampHeaderList) {
				String packetCount = StringUtils.substringBetween(result, twampHeader, "[").trim();
				ArrayList<String> resultData = new ArrayList<>(Arrays.asList(packetCount.split("\\r?\\n")));
				ArrayList<String> replaceData = new ArrayList<>();
				for (String r : resultData) {
					if (r.trim().replaceAll(" +", " ").contains("Skip packets")
							|| r.trim().replaceAll(" +", " ").contains("Drop packets")) {
						replaceData.add(r);
					}
				}
				for (int i = 0; i < replaceData.size(); i++) {
					resultData.remove(replaceData.get(i));
					resultData.add(i + 1, replaceData.get(i));
				}
				LinkedHashMap<String, String> column = new LinkedHashMap<>();
				for (String r : resultData) {
					String[] d = r.split(":", 2);
					if (d.length == 2) {
						column.put(d[0].trim().replaceAll(" +", " "), d[1].trim());
					}
				}

				if (twampHeader.contains("Packet Count")) {
					entry = "Packet Count";
				} else {
					entry = "Loss(ratio)";
				}

				LinkedHashSet<String> headerList2 = new LinkedHashSet<>(column.keySet());
				List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
				tabelData2.add(column);

				htmlContent.append(
						"<tr><td colspan=" + column.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList2) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				StringBuilder tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData2) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						/*
						 * if(resultTableData.getKey().trim().equalsIgnoreCase("Skip packets") ||
						 * resultTableData.getKey().trim().equalsIgnoreCase("Drop packets") ||
						 * resultTableData.getKey().trim().equalsIgnoreCase("UpLink Loss") ||
						 * resultTableData.getKey().trim().equalsIgnoreCase("DnLink Loss")) {
						 * if(resultTableData.getValue().trim().replaceAll("(\\d+).*",
						 * "$1").equals("0")) { tableData.append("<td align=center>" +
						 * resultTableData.getValue() + "</td>\n"); } else {
						 * if(resultTableData.getKey().trim().equalsIgnoreCase("Skip packets")) {
						 * auditIssue1.append(command + " " + " Skip Packets : " +
						 * resultTableData.getValue() + "\n"); } else
						 * if(resultTableData.getKey().trim().equalsIgnoreCase("Drop packets")) {
						 * auditIssue2.append(command + " " + " Drop packets : " +
						 * resultTableData.getValue() + "\n"); } else
						 * if(resultTableData.getKey().trim().equalsIgnoreCase("Network Loss")) {
						 * auditIssue3.append(command + " " + " Network Loss : " +
						 * resultTableData.getValue() + "\n"); } else
						 * if(resultTableData.getKey().trim().equalsIgnoreCase("UpLink Loss")) {
						 * auditIssue4.append(command + " " + " UpLink Loss : " +
						 * resultTableData.getValue() + "\n"); } else
						 * if(resultTableData.getKey().trim().equalsIgnoreCase("DnLink Loss")) {
						 * auditIssue5.append(command + " " + " DnLink Loss : " +
						 * resultTableData.getValue() + "\n"); }
						 * tableData.append("<td align=center bgcolor=fa8c8c>" +
						 * resultTableData.getValue() + "</td>\n"); } } else
						 */
						if (resultTableData.getKey().trim().equalsIgnoreCase("Network Loss")) {
							String netLoss = StringUtils.substringAfter(resultTableData.getValue().trim(), "(");
							netLoss = StringUtils.substringBefore(netLoss, ")").replaceAll("%", "").trim();
							if (NumberUtils.isNumber(netLoss)) {
								Double txPower = Double.parseDouble(netLoss);
								if (txPower > 5.0) {
									auditIssue3.append(
											command + " " + " Network Loss : " + resultTableData.getValue() + "\n");
									tableData.append("<td align=center bgcolor=fa8c8c>" + resultTableData.getValue()
											+ "</td>\n");
								} else {
									tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								}
							} else {
								auditIssue3
										.append(command + " " + " Network Loss : " + resultTableData.getValue() + "\n");
								tableData.append(
										"<td align=center bgcolor=fa8c8c>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			}

			htmlContent.append("</table>\n");

			if (auditIssue1.length() != 0) {
				resultMap.put("auditIssue1", auditIssue1.toString());
			}
			if (auditIssue2.length() != 0) {
				resultMap.put("auditIssue2", auditIssue2.toString());
			}
			if (auditIssue3.length() != 0) {
				resultMap.put("auditIssue3", auditIssue3.toString());
			}
			if (auditIssue4.length() != 0) {
				resultMap.put("auditIssue4", auditIssue4.toString());
			}
			if (auditIssue5.length() != 0) {
				resultMap.put("auditIssue5", auditIssue5.toString());
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
			resultMap.put("auditIssue3", "No Data Found");
		}
		resultMap.put("htmlContent", htmlContent.toString());
		return resultMap;
	}

	public String gettestIdtwamp(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			NetworkConfigEntity networkConfigEntity) {
		String testId = null;
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					testId = getXmlElementData(element, "test-id").trim();
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return testId;
	}
	@SuppressWarnings("unused")
	private String get5gDSSFSUType(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			RunTestEntity runTestEntity) {
		String softwareVersion = "";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("o-du-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("o-du-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.containsKey("unit-type")) {
					softwareVersion = tdData.get("unit-type");
				}

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return softwareVersion;
	}
	public StringBuilder getENBAuditDSSPreAudit(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-num");
			headerList1.add("internal-cell-num");
			headerList1.add("administrative-state");
			headerList1.add("battery-saving-option");
			headerList1.add("channel-card-id");
			headerList1.add("cell-band-carrier");
			headerList1.add("user-label");
			headerList1.add("test-flag");
			headerList1.add("cbrs-op-state");
			headerList1.add("cell-tx-path-type");
			headerList1.add("crsic-support-cell-conf");
			headerList1.add("dsp-id");
			headerList1.add("dsp-logical-cell-number");
			headerList1.add("emtc-edrx-switch");
			headerList1.add("lte-edrx-switch");
			headerList1.add("measurement-quantity-cdma2000");
			headerList1.add("multi-carrier-type");
			headerList1.add("traffic-control-prb-threshold");
			headerList1.add("virtual-rf-port-mapping-switch");
			headerList1.add("auto-unlock-flag");
			headerList1.add("operational-state");
			headerList1.add("usage-state");
			headerList1.add("resource-state");
			headerList1.add("cell-setup-state");
			headerList1.add("s1-ap-state");

			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("cell-num");
			headerList2.add("user-label");
			headerList2.add("cell-identity");
			headerList2.add("physical-cell-id");
			headerList2.add("cell-type");
			headerList2.add("duplex-type");
			headerList2.add("dl-antenna-count");
			headerList2.add("ul-antenna-count");
			headerList2.add("earfcn-dl");
			headerList2.add("earfcn-ul");
			headerList2.add("dl-bandwidth");
			headerList2.add("ul-bandwidth");
			headerList2.add("frequency-band-indicator");
			headerList2.add("group-id");
			headerList2.add("subframe-assignment");
			headerList2.add("special-subframe-patterns");
			headerList2.add("dl-crs-port-count");
			headerList2.add("pci-alloc-status");
			headerList2.add("emtc-switch");
			headerList2.add("emtc-volte-usage");
			headerList2.add("sdl-support");
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("alarm-unit-type");
			headerList3.add("alarm-type");
			headerList3.add("location");
			headerList3.add("raised-time");
			headerList3.add("alarm-group");
			headerList3.add("probable-cause");
			headerList3.add("specific-problem");
			headerList3.add("severity");
			headerList3.add("alarm-code");
			headerList3.add("sequence-number");
			headerList3.add("time-info");

			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("unit-type");
			headerList4.add("unit-id");
			headerList4.add("dsp-id");
			headerList4.add("optic-distance-option");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("enb-function");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("eutran-cell-conf-idle");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("fault-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("active-alarm-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList3.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData3.add(objtableData);
										}
									}
								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("dsp-miscellaneous-info-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList4.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData4.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String enb4G = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}

			List<CIQDetailsModel> listOfCiqDetails3 = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"vDUDay_2", "eNBId");

			Set<String> nrFreq = new HashSet<>();
			if (!ObjectUtils.isEmpty(listOfCiqDetails3)) {
				for (CIQDetailsModel ciqData : listOfCiqDetails3) {

					if (ciqData.getCiqMap().containsKey("nrfrequency")
							&& ciqData.getCiqMap().containsKey("FR1_SolutionCell") && ciqData.getCiqMap()
									.get("FR1_SolutionCell").getHeaderValue().trim().toLowerCase().contains("cleannr")) {
						nrFreq.add(ciqData.getCiqMap().get("nrfrequency").getHeaderValue().trim());
					}
				}
			}

			String fsuType = "";
			fsuType = get5gDSSFSUType(fullOutputLog, XmlCommandsConstants.DSS_FSU_PREAUDIT, enbId, dbcollectionFileName,
					runTestEntity);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			String entry = "eutran-cell-fdd-tdd";
			checkEmptyTableDss(tabelData1, entry, runTestEntity, enbId);
			htmlContent.append(createHtmltableDSS(headerList1, entry, tabelData1, new HashMap<>()));

			entry = "eutran-cell-conf-idle";
			// checkEmptyTableDss(tabelData2, entry, runTestEntity, enbId);
			// htmlContent.append(createHtmltableDSS(headerList2, entry, tabelData2, new
			// HashMap<>()));
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("frequency-band-indicator")) {
						if (nrFreq.contains(value)) {
							auditIssue2.append("cell-num : " + tdData.get("cell-num") + " frequency-band-indicator : "
									+ tdData.get("frequency-band-indicator") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			entry = "dsp-miscellaneous-info";
			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("optic-distance-option") && fsuType.contains("fsup")) {
						if (!value.equals("20-km")) {
							auditIssue1.append(
									"unit-type : " + tdData.get("unit-type") + " unit-id : " + tdData.get("unit-id")
											+ " optic-distance-option : " + tdData.get("optic-distance-option") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			entry = "active-alarm-entries";

			if (!(tabelData3.size() == 0)) {
				htmlContent.append(
						"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList3) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData3) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("alarm-type")) {
							if (!value.equals("-")) {
								auditIssue3.append("ENB ALARMS : alarm-type : " + tdData.get("alarm-type")
										+ " probable-cause : " + tdData.get("probable-cause") + " location : "
										+ tdData.get("location") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}

					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			} else {
				htmlContent.append(
						"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");
				htmlContent.append(
						"<tr>\n<td align=center colspan=" + headerList4.size() + " bgcolor=FFFF00>NO DATA</td></tr>\n");
			}

			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);	
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);	
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);	


			if (auditIssue3.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(58, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(58, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(58, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(92, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(92, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(92, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder get5GDSSACPFX2E1F1(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "end-point-x2-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("gnodeb-id");
			headerList1.add("x2-neighbor-index");
			headerList1.add("remote-ip-address");
			headerList1.add("secondary-remote-ip-address");
			headerList1.add("enb-id");
			headerList1.add("sctp-state");
			headerList1.add("x2-ap-state");
			headerList1.add("mcc");
			headerList1.add("mnc");

			String entry2 = "end-point-f1c-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("gnodeb-id");
			headerList2.add("end-point-f1-index");
			headerList2.add("gnb-du-id");
			headerList2.add("remote-ip-address");
			headerList2.add("secondary-remote-ip-address");
			headerList2.add("sctp-state");
			headerList2.add("f1-ap-state");

			String entry3 = "end-point-e1-entries";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("gnodeb-id");
			headerList3.add("end-point-e1-index");
			headerList3.add("cu-up-id");
			headerList3.add("remote-ip-address");
			headerList3.add("sctp-state");
			headerList3.add("e1-ap-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("gnb-cu-cp-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// gnb-cu-cp-function-entries
					NodeList childNodeList = element.getElementsByTagName("gnb-cu-cp-function-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// end-point-x2
							NodeList childNodeList1 = elementchild.getElementsByTagName("end-point-x2");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-x2-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("end-point-x2-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}

							// end-point-f1c
							childNodeList1 = elementchild.getElementsByTagName("end-point-f1c");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-f1c-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("end-point-f1c-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}

							// end-point-e1
							childNodeList1 = elementchild.getElementsByTagName("end-point-e1");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-e1-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("end-point-e1-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList3.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData3.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}
			// checkEmptyTableDss(tabelData1, entry1, runTestEntity, enbId);
			checkEmptyTableDss(tabelData2, entry2, runTestEntity, enbId);
			checkEmptyTableDss(tabelData3, entry3, runTestEntity, enbId);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			List<CIQDetailsModel> listOfCiqDetailsday01 = getCiqDetailsForRuleValidationsheet(enbId,
					dbcollectionFileName, "vDUGrowSiteLevel(Day1)CQ", "eNBId");
			String gnbId = "";
			String enodeBId = "";
			String gnbdu = "";
			if (!ObjectUtils.isEmpty(listOfCiqDetailsday01)) {
				if (listOfCiqDetailsday01.get(0).getCiqMap().containsKey("gNBID")) {
					gnbId = listOfCiqDetailsday01.get(0).getCiqMap().get("gNBID").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetailsday01.get(0).getCiqMap().containsKey("4GeNB")) {
					enodeBId = listOfCiqDetailsday01.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetailsday01.get(0).getCiqMap().containsKey("gNBDUID")) {
					gnbdu = listOfCiqDetailsday01.get(0).getCiqMap().get("gNBDUID").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			Set<String> gnodebIdset = new HashSet<>();
			gnodebIdset.add(gnbId);
			Set<String> enbIdset = new HashSet<>();
			enbIdset.add(enodeBId);
			Set<String> gnodduebIdset = new HashSet<>();
			gnodduebIdset.add(gnbdu);
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			trimTabledataString(tabelData1, gnodebIdset, "gnodeb-id");
			trimTabledataString(tabelData1, enbIdset, "enb-id");
			trimTabledataString(tabelData2, gnodduebIdset, "gnb-du-id");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sctp-state")
							&& tdData.get("enb-id").trim().replaceAll("^0+(?!$)", "").equals(enodeBId)) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("gnodeb-id : " + tdData.get("gnodeb-id") + " x2-neighbor-index : "
									+ tdData.get("x2-neighbor-index") + " sctp-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("x2-ap-state")
							&& tdData.get("enb-id").trim().replaceAll("^0+(?!$)", "").equals(enodeBId)) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("gnodeb-id : " + tdData.get("gnodeb-id") + " x2-neighbor-index : "
									+ tdData.get("x2-neighbor-index") + " x2-ap-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			trimTabledataString(tabelData2, gnodebIdset, "gnodeb-id");
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sctp-state") && tdData.get("gnb-du-id").trim().replaceAll("^0+(?!$)", "")
							.equals(enbId.trim().replaceAll("^0+(?!$)", ""))) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue3.append("gnodeb-id : " + tdData.get("gnodeb-id") + " end-point-f1-index : "
									+ tdData.get("end-point-f1-index") + " sctp-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("f1-ap-state") && tdData.get("gnb-du-id").trim().replaceAll("^0+(?!$)", "")
							.equals(enbId.trim().replaceAll("^0+(?!$)", ""))) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("gnodeb-id : " + tdData.get("gnodeb-id") + " end-point-f1-index : "
									+ tdData.get("end-point-f1-index") + " f1-ap-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			trimTabledataString(tabelData3, gnodebIdset, "gnodeb-id");
			boolean sctpEnbalebool = false;
			boolean e1ApStatebool = false;
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				if (tdData.get("sctp-state").equalsIgnoreCase("enabled")) {
					sctpEnbalebool = true;
				}
				if (tdData.get("e1-ap-state").equalsIgnoreCase("enabled")) {
					e1ApStatebool = true;
				}
			}

			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sctp-state")) {
						if (value.equals("enabled") || sctpEnbalebool) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue5.append("gnodeb-id : " + tdData.get("gnodeb-id") + " end-point-e1-index : "
									+ tdData.get("end-point-e1-index") + " sctp-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("e1-ap-state")) {
						if (value.equals("enabled") || e1ApStatebool) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue6.append("gnodeb-id : " + tdData.get("gnodeb-id") + " end-point-e1-index : "
									+ tdData.get("end-point-e1-index") + " e1-ap-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(23, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(23, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(23, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(24, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(24, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(24, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(25, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(25, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(25, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(26, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(26, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(26, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue5.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(27, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(27, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(27, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue6.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(28, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(28, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(28, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditDSSPostAudit(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			
			String softwareVersion = "";
			String softwareVersionnetwork = "";
			List<CIQDetailsModel> listOfCiqDetailssv = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailssv)) {
				if (listOfCiqDetailssv.get(0).getCiqMap().containsKey("vDU_Version")) {
					softwareVersion = listOfCiqDetailssv.get(0).getCiqMap().get("vDU_Version").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			softwareVersionnetwork = ge5gGsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_VDU_FLAVORANDSV, enbId,
					dbcollectionFileName, runTestEntity);
			if(!softwareVersionnetwork.isEmpty() && !softwareVersionnetwork.equals("-") ) {
				softwareVersion=softwareVersionnetwork;
			}
			String neVersion = StringUtils.substringBefore(softwareVersion, "-");

			String entry1 = "vru-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("fsu-id");
			headerList1.add("unit-type");
			headerList1.add("serial-number");
			headerList1.add("support-cell-number");
			headerList1.add("operational-mode");

			String entry2 = "cell-call-status";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("cell-identity");
			headerList2.add("cell-call-count");

			String entry3 = "operational-mode-status";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("du-reparenting");
			headerList3.add("ne-id");
			headerList3.add("user-label");
			headerList3.add("administrative-state");
			headerList3.add("gpl-version");
			headerList3.add("operational-state");
			headerList3.add("operational-mode");

			String entry4 = "active-alarm-entries";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("alarm-unit-type");
			headerList4.add("alarm-type");
			headerList4.add("probable-cause");
			headerList4.add("specific-problem");
			headerList4.add("severity");

			String entry5 = "end-point-dss";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("dss-index");
			headerList5.add("remote-ip-address");
			headerList5.add("secondary-remote-ip-address");
			if (!neVersion.contains("21.D")  && !neVersion.contains("22")) {
				headerList5.add("enb-id");
			}

			String entry6 = "dss-interface-conf-idle";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cell-identity");
			headerList6.add("target-enb-cell-identity");

			String entry7 = "mplane-interfaces";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("fsu-id");
			headerList7.add("fsu-mplane-ipv6");

			String entry8 = "pod entries sync";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("pod-type");
			headerList8.add("pod-id");
			if (!neVersion.contains("21.D") && !neVersion.contains("22.A")) {
				headerList8.add("holdover-timer-threshold");
			}
			headerList8.add("sync-state");

			String entry9 = "prach-config";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("cell-identity");
			headerList9.add("zero-correlation-zone-config");
			headerList9.add("prach-root-sequence-index");
			headerList9.add("prach-configuration-index");
			
			String entry10 = "gutran-du-cell-entries";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("cell-identity");
			headerList10.add("cell-num");
			headerList10.add("cell-path-type");
			headerList10.add("administrative-state");
			headerList10.add("operational-state");
			
			String entry11 = "o-ran-radio-unit-info";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("o-ran-ru-id");
			headerList11.add("unit-type");
			headerList11.add("serial-number");
			headerList11.add("nr-support-cell-number");
			headerList11.add("operational-mode");
			
			String entry12 = "mplane-interfaces";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("o-ran-ru-id");
			headerList12.add("mplane-ipv6");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("active-alarm-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList4.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData4.add(objtableData);
						}
					}
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("sync");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															/*
															 * objtableData.put("pod-type",
															 * getXmlElementData(elementchild5, "pod-type"));
															 * objtableData.put("pod-id",
															 * getXmlElementData(elementchild5, "pod-id"));
															 * objtableData.put("holdover-timer-threshold",
															 * getXmlElementData(elementchild6,
															 * "holdover-timer-threshold"));
															 * objtableData.put("sync-state",
															 * getXmlElementData(elementchild6, "sync-state"));
															 */
															Iterator<String> itr = headerList8.iterator();
															String header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));
															header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));
															while (itr.hasNext()) {
																header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild6, header));
															}

															tabelData8.add(objtableData);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					childNodeList2 = elementchild1.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("vru-entries");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild2, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData1.add(objtableData);
								}
							}

							childNodeList3 = elementchild2.getElementsByTagName("fsu-entries");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList7.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData7.add(objtableData);
								}
							}
						}
					}

					childNodeList2 = elementchild1.getElementsByTagName("gnb-du-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;

							NodeList childNodeList3 = elementchild2.getElementsByTagName("end-point-dss");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									// objtableData.put("dss-index", getXmlElementData(elementchild3, "dss-index"));
									// objtableData.put("remote-ip-address",
									// getXmlElementData(elementchild3, "remote-ip-address"));
									// objtableData.put("secondary-remote-ip-address",
									// getXmlElementData(elementchild3, "secondary-remote-ip-address"));
									// objtableData.put("enb-id", getXmlElementData(elementchild3, "enb-id"));
									Iterator<String> itr = headerList5.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData5.add(objtableData);
								}
							}

							childNodeList3 = elementchild2.getElementsByTagName("gutran-du-cell-entries");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									NodeList childNodeList4 = elementchild3.getElementsByTagName("cell-call-status");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData2.add(objtableData);
										}
									}

									childNodeList4 = elementchild3.getElementsByTagName("dss-interface-conf-idle");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList6.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData6.add(objtableData);
										}
									}
									childNodeList4 = elementchild3.getElementsByTagName("prach-config");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList9.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData9.add(objtableData);
										}
									}
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList10.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData10.add(objtableData);
								}
							}
						}
					}

					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Iterator<String> itr = headerList3.iterator();
					String header = itr.next();
					objtableData.put(header, getXmlElementData(elementchild1, header));
					while (itr.hasNext()) {
						header = itr.next();
						if (header.equalsIgnoreCase("operational-mode")
								&& elementchild1.getElementsByTagName(header) != null
								&& elementchild1.getElementsByTagName(header).getLength() > 0) {
							for (int z = 0; z < elementchild1.getElementsByTagName(header).getLength(); z++) {
								if (elementchild1.getElementsByTagName(header).item(z).getParentNode().getNodeName()
										.equalsIgnoreCase("managed-element")) {
									objtableData.put(header,
											elementchild1.getElementsByTagName(header).item(z).getTextContent());
								}
							}
						} else {
							objtableData.put(header, getXmlElementData(elementchild1, header));
						}
					}
					tabelData3.add(objtableData);

				}
			}
			String softwareVersionFSU="";
			softwareVersionFSU = get4GsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_FSU_SOFTWAREVERSION, enbId,
					dbcollectionFileName, runTestEntity);
			if(!neVersion.contains("22" )|| softwareVersionFSU.contains("21.D")) {
			checkEmptyTableDss(tabelData1, entry1, runTestEntity, enbId);
			checkEmptyTableDss(tabelData7, entry7, runTestEntity, enbId);
			}
			checkEmptyTableDss(tabelData2, entry2, runTestEntity, enbId);
			checkEmptyTableDss(tabelData3, entry3, runTestEntity, enbId);
			checkEmptyTableDss(tabelData5, entry5, runTestEntity, enbId);
			checkEmptyTableDss(tabelData8, entry8, runTestEntity, enbId);
			checkEmptyTableDss(tabelData9, entry9, runTestEntity, enbId);
			checkEmptyTableDss(tabelData10, entry10, runTestEntity, enbId);
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			StringBuilder auditIssue9 = new StringBuilder();
			StringBuilder auditIssue10 = new StringBuilder();
			StringBuilder auditIssue11 = new StringBuilder();
			StringBuilder auditIssue12 = new StringBuilder();
			StringBuilder auditIssue13 = new StringBuilder();
			StringBuilder auditIssue14 = new StringBuilder();
			StringBuilder auditIssue15 = new StringBuilder();
			StringBuilder auditIssue16 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String neid = "";
			String remoteIp = "";
			String enb4G = "";
			String ip = "";
			String pciNR = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("PRACH_Configuration_Index_NR")) {
					pciNR = listOfCiqDetails.get(0).getCiqMap().get("PRACH_Configuration_Index_NR").getHeaderValue()
							.trim().replaceAll("^0+(?!$)", "");
				}
			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName, "DSS_MOP_Parameters-1",
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)
					&& listOfCiqDetails.get(0).getCiqMap().containsKey("remote-ip-address")) {
				remoteIp = listOfCiqDetails.get(0).getCiqMap().get("remote-ip-address").getHeaderValue().trim();
			}
			if (!ObjectUtils.isEmpty(listOfCiqDetails) && listOfCiqDetails.get(0).getCiqMap().containsKey("ip")) {
				ip = listOfCiqDetails.get(0).getCiqMap().get("ip").getHeaderValue().trim();
			}

			List<CIQDetailsModel> listOfCiqDetailsparaMeter2 = getCiqDetailsForRuleValidationsheet(neid,
					dbcollectionFileName, "DSS_MOP_Parameters-2", "eNBName");
			List<CIQDetailsModel> listOfCiqDetailsday2 = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"vDUDay_2", "eNBId");
			// vru-entries
			String tableHeader = "";
			StringBuilder tableData = new StringBuilder();
			if(!neVersion.contains("22" )|| softwareVersionFSU.contains("21.D")) {
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
			 tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			 tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("operational-mode")) {
						if (value.equals("normal-mode")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1
									.append("vru-id : " + tdData.get("vru-id") + " operational-mode : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			}
			// cell-call-count
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-call-count")) {
						if (NumberUtils.isNumber(value) && NumberUtils.toInt(value) > 0) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue7.append("cell-identity : " + tdData.get("cell-identity") + " cell-call-count : "
									+ tdData.get("cell-call-count") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			ArrayList<String> cellOpState=new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData10) {
				if(!tdData.get("operational-state").isEmpty()) {
					cellOpState.add(tdData.get("operational-state"));
				}
				
			}
			boolean growShouldBeRemoved=false;
			if(!cellOpState.contains("disabled") && tabelData4.size()==0) {
				growShouldBeRemoved=true;
			}
				
			// operational-mode-status
			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("operational-mode")) {
						if (value.equalsIgnoreCase("normal-mode")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2
									.append("ne-id : " + tdData.get("ne-id") + " operational-mode : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("administrative-state")) {
						if (value.equalsIgnoreCase("unlocked")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue9.append(
									"ne-id : " + tdData.get("ne-id") + " administrative-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("operational-state")) {
						if (value.equalsIgnoreCase("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue10
									.append("ne-id : " + tdData.get("ne-id") + " operational-state : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					}else if (key.equals("user-label")) {
						if (value.toLowerCase().contains("grow") && growShouldBeRemoved) {
							auditIssue16
							.append("ne-id : " + tdData.get("ne-id") + " user-label : " + value + "\n");
					tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// active-alarm-entries
			 if(!(tabelData4.size()==0)) {
			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {						
							auditIssue8.append("alarm-type : " + tdData.get("alarm-type") + " probable-cause : "
									+ tdData.get("probable-cause") + " specific-problem : "
									+ tdData.get("specific-problem") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			 }else {
	            	htmlContent.append(
	    					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");
	            	htmlContent.append("<tr>\n<td align=center colspan=" + headerList4.size() + " bgcolor=FFFF00>NO DATA</td></tr>\n");	
	            }
			// end-point-dss
			if (!remoteIp.isEmpty() && !ObjectUtils.isEmpty(tabelData5)) {
				if (compareIPAddr(remoteIp, tabelData5.get(0).get("remote-ip-address"))) {
					remoteIp = tabelData5.get(0).get("remote-ip-address");
				}
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList5) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData5) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("enb-id")) {
						if (value.replaceAll("^0+(?!$)", "").equals(enb4G)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue3.append("dss-index : " + tdData.get("dss-index") + " enb-id : "
									+ tdData.get("enb-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("remote-ip-address")) {
						if (value.equals(remoteIp)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("dss-index : " + tdData.get("dss-index") + " remote-ip-address : "
									+ tdData.get("remote-ip-address") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// dss-interface-conf-idle
			htmlContent.append(
					"<tr><td colspan=" + headerList6.size() + " bgcolor=#EEEEEE><b>" + entry6 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList6) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData6) {
				tableData.append("<tr>\n");
				String cellid = "";
				String targetenbId = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsparaMeter2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsparaMeter2) {
						if (ciqData.getCiqMap().containsKey("cellId") && ciqData.getCiqMap().get("cellId")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity").trim();
							if (ciqData.getCiqMap().containsKey("target-enb-cell-identity")) {
								targetenbId = ciqData.getCiqMap().get("target-enb-cell-identity").getHeaderValue()
										.trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("target-enb-cell-identity")) {
						if (value.equals(targetenbId)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue5.append("cell-identity : " + tdData.get("cell-identity")
									+ " target-enb-cell-identity : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// mplane-interfaces
			if(!neVersion.contains("22" )|| softwareVersionFSU.contains("21.D")) {
			if (!ip.isEmpty() && !ObjectUtils.isEmpty(tabelData7)) {
				if (compareIPAddr(ip, tabelData7.get(0).get("fsu-mplane-ipv6"))) {
					ip = tabelData7.get(0).get("fsu-mplane-ipv6");
				}
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList7) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData7) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("fsu-mplane-ipv6")) {
						if (value.equals(ip)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue6.append("fsu-id : " + tdData.get("fsu-id") + " fsu-mplane-ipv6 : "
									+ tdData.get("fsu-mplane-ipv6") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			}
			// ptp sync
			htmlContent.append(
					"<tr><td colspan=" + headerList8.size() + " bgcolor=#EEEEEE><b>" + entry8 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList8) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData8) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("holdover-timer-threshold")) {
						if (value.equals("10")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue11.append("pod-type : " + tdData.get("pod-type") + " holdover-timer-threshold : "
									+ tdData.get("holdover-timer-threshold") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} /*
						 * else if (key.equals("sync-state")) { if (value.equals("locked")) {
						 * tableData.append("<td align=center>" + value + "</td>\n"); } else {
						 * auditIssue12.append("pod-type : " + tdData.get("pod-type") + " sync-state : "
						 * + tdData.get("sync-state") + "\n");
						 * tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						 * } }
						 */ else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			// prach config
			htmlContent.append(
					"<tr><td colspan=" + headerList9.size() + " bgcolor=#EEEEEE><b>" + entry9 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList9) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData9) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("prach-configuration-index")) {
						if (value.equals(pciNR)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue13.append(
									"prach-configuration-index : " + tdData.get("prach-configuration-index") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			//gutran-du-cell-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList10.size() + " bgcolor=#EEEEEE><b>" + entry10 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList10) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData10) {
				tableData.append("<tr>\n");
				String cellidentity = "";
				String cellnum = "";

				if (!ObjectUtils.isEmpty(listOfCiqDetailsday2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsday2) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellidentity = tdData.get("cell-identity");

							if (ciqData.getCiqMap().containsKey("cell-num")) {
								cellnum = ciqData.getCiqMap().get("cell-num").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellidentity)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							
						}
					} else if (key.equals("administrative-state")) {
						if (value.equals("unlocked")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue14.append("cell-identity : " + tdData.get("cell-identity") + " administrative-state : " + tdData.get("administrative-state")+"\n");
						}
					}  else if (key.equals("operational-state")) {
						if (value.equalsIgnoreCase("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue15.append("cell-identity : " + tdData.get("cell-identity") + " operational-state : " + tdData.get("operational-state")+"\n");
						}
					}else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			if(neVersion.contains("22")) {
				tabelData11 = getOruOperationState(fullOutputLog, XmlCommandsConstants.DSS_VDU_ORUPOSTTABLE, enbId,
						dbcollectionFileName, runTestEntity);
				tabelData12 = getOruEntriesTableMplain(fullOutputLog, XmlCommandsConstants.DSS_VDU_ORUPOSTTABLE, enbId,
						dbcollectionFileName, runTestEntity);
				htmlContent.append(
						"<tr><td colspan=" + headerList11.size() + " bgcolor=#EEEEEE><b>" + entry11 + "</b></td></tr>\n");
				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList11) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData11) {
					tableData.append("<tr>\n");
					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("operational-mode")) {
							if (value.equals("normal-mode")) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								if(!softwareVersionFSU.contains("21.D")) {
								auditIssue1
										.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " operational-mode : " + value + "\n");
								
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								}else {
								tableData.append("<td align=center>" + value + "</td>\n");
								}
							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				
				htmlContent.append(
						"<tr><td colspan=" + headerList12.size() + " bgcolor=#EEEEEE><b>" + entry12 + "</b></td></tr>\n");
				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList12) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData12) {
					tableData.append("<tr>\n");
					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						/*if (key.equals("mplane-ipv6")) {
							if (value.equals(ip)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditIssue6.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " mplane-ipv6 : "
										+ tdData.get("mplane-ipv6") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {*/
							tableData.append("<td align=center>" + value + "</td>\n");
						//}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			};
			htmlContent.append("</table>\n");
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData6, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData7, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData8, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData9, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData10, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData11, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData12, auditIssueAll);
			if (auditIssue11.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue11.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue12.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue12.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(29, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(29, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(29, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(30, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(30, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(30, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(31, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(31, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(31, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(32, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(32, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(32, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue5.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(33, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(33, runTestEntity.getId(),
					 	enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(33, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue6.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue7.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(60, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(60, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(60, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue8.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(61, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue8.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(61, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(61, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue9.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(62, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue9.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(62, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(62, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue10.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(63, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue10.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(63, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(63, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue11.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue11.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue13.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue13.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue14.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(75, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue14.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(75, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(75, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue15.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(76, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue15.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(76, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(76, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue16.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(91, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue16.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(91, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(91, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	private List<LinkedHashMap<String, String>> getOruOperationState(String fullOutputLog, String command,
			String enbId, String dbcollectionFileName, RunTestEntity runTestEntity) {

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("o-ran-ru-id");
			headerList1.add("unit-type");
			headerList1.add("serial-number");
			headerList1.add("nr-support-cell-number");
			headerList1.add("operational-mode");
			

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("o-ran-radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return tabelData1;
	}

	public StringBuilder get5GDSSACPFaactivealarmentries(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("alarm-unit-type");
			headerList1.add("alarm-type");
			headerList1.add("location");
			headerList1.add("raised-time");
			headerList1.add("alarm-group");
			headerList1.add("probable-cause");
			headerList1.add("specific-problem");
			headerList1.add("severity");
			headerList1.add("alarm-code");
			headerList1.add("sequence-number");
			headerList1.add("time-info");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("fault-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("active-alarm");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}

		
			List<CIQDetailsModel> listOfCiqDetailsday01 = getCiqDetailsForRuleValidationsheet(enbId,
					dbcollectionFileName, "vDUGrowSiteLevel(Day1)CQ", "eNBId");
			String gnbId = "";
			String neid = "";
			if (!ObjectUtils.isEmpty(listOfCiqDetailsday01)) {
				if (listOfCiqDetailsday01.get(0).getCiqMap().containsKey("gNBID")) {
					gnbId = listOfCiqDetailsday01.get(0).getCiqMap().get("gNBID").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetailsday01.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetailsday01.get(0).getCiqMap().get("NEID").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}

			}
			List<LinkedHashMap<String, String>> deleteData = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData1) {

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (value.equals("service-off") && !gnbId.isEmpty() && tdData.get("location").contains(gnbId)) {
							deleteData.add(tdData);
						} else if (!value.equals("service-off") && tdData.get("location").contains("GNODEB_DU")
								&& tdData.get("location").contains(neid)) {
							deleteData.add(tdData);
						}
					}
				}

			}

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			if (deleteData.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : deleteData) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (value.equals("service-off") && !gnbId.isEmpty() && tdData.get("location").contains(gnbId)) {
							auditIssue1.append("ACPF ALARMS : alarm-type : " + tdData.get("alarm-type")
									+ " probable-cause : " + tdData.get("probable-cause") + " location : "
									+ tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else if (!value.equals("service-off") && tdData.get("location").contains("GNODEB_DU")
								&& tdData.get("location").contains(neid)) {
							auditIssue1.append("ACPF ALARMS : alarm-type : " + tdData.get("alarm-type")
									+ " probable-cause : " + tdData.get("probable-cause") + " location : "
									+ tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(56, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(56, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(56, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public void checkEmptyTableDss(List<LinkedHashMap<String, String>> tabelData, String entry,
			RunTestEntity runTestEntity, String enbId) {
		try {
			if (tabelData.isEmpty()) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(201, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), entry + " : No Data From USM");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
	}

	public StringBuilder get5GDSSAUPFaactivealarmentries(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("alarm-unit-type");
			headerList1.add("alarm-type");
			headerList1.add("location");
			headerList1.add("raised-time");
			headerList1.add("alarm-group");
			headerList1.add("probable-cause");
			headerList1.add("specific-problem");
			headerList1.add("severity");
			headerList1.add("alarm-code");
			headerList1.add("sequence-number");
			headerList1.add("time-info");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("fault-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("active-alarm");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}

			
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			List<CIQDetailsModel> listOfCiqDetailsday01 = getCiqDetailsForRuleValidationsheet(enbId,
					dbcollectionFileName, "vDUGrowSiteLevel(Day1)CQ", "eNBId");
			String gnbId = "";
			String neid = "";
			if (!ObjectUtils.isEmpty(listOfCiqDetailsday01)) {
				if (listOfCiqDetailsday01.get(0).getCiqMap().containsKey("gNBID")) {
					gnbId = listOfCiqDetailsday01.get(0).getCiqMap().get("gNBID").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetailsday01.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetailsday01.get(0).getCiqMap().get("NEID").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}

			}
			List<LinkedHashMap<String, String>> deleteData = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData1) {

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (value.equals("service-off") && !gnbId.isEmpty() && tdData.get("location").contains(gnbId)) {
							deleteData.add(tdData);
						} else if (!value.equals("service-off") && tdData.get("location").contains("GNODEB_DU")
								&& tdData.get("location").contains(neid)) {
							deleteData.add(tdData);
						}
					}
				}

			}
			if (deleteData.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : deleteData) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (value.equals("service-off") && !gnbId.isEmpty() && tdData.get("location").contains(gnbId)) {
							auditIssue1.append("AUPF ALARMS : alarm-type : " + tdData.get("alarm-type")
									+ " probable-cause : " + tdData.get("probable-cause") + " location : "
									+ tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else if (!value.equals("service-off") && tdData.get("location").contains("GNODEB_DU")
								&& tdData.get("location").contains(neid)) {
							auditIssue1.append("AUPF ALARMS : alarm-type : " + tdData.get("alarm-type")
									+ " probable-cause : " + tdData.get("probable-cause") + " location : "
									+ tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
				
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(57, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(57, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(57, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getENBAuditDSSPostAudit(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("fsu-internode-id");
			headerList1.add("cpri-connection-type");
			headerList1.add("administrative-state");
			headerList1.add("connected-radio-unit-type");
			headerList1.add("auto-speed-configuration");
			headerList1.add("cpri-speed-saved");
			headerList1.add("cpri-speed-running");
			headerList1.add("cpri-compression-saved");
			headerList1.add("cpri-compression-running");
			headerList1.add("fsu-ne-id");
			headerList1.add("fsu-du-cpri-port-id");
			headerList1.add("fsu-ru-cpri-port-id");
			headerList1.add("fsu-config-tx-delay");
			headerList1.add("fsu-config-rx-delay");
			headerList1.add("bit-rate");
			headerList1.add("tx-wavelength");
			headerList1.add("tx-power");
			headerList1.add("rx-power");

			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("alarm-unit-type");
			headerList2.add("alarm-type");
			headerList2.add("location");
			headerList2.add("raised-time");
			headerList2.add("alarm-group");
			headerList2.add("probable-cause");
			headerList2.add("specific-problem");
			headerList2.add("severity");
			headerList2.add("alarm-code");
			headerList2.add("sequence-number");
			headerList2.add("time-info");

			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("dss-index");
			headerList3.add("gnodeb-id");
			headerList3.add("gnodeb-id-length");
			// headerList3.add("gnb-du-id");
			headerList3.add("ip-ver");
			headerList3.add("gnb-ipv6");
			headerList3.add("secondary-gnb-ipv6");
			headerList3.add("sctp-state");

			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cell-num");
			headerList4.add("spectrum-sharing-lte");
			headerList4.add("pusch-allocation-mode");
			headerList4.add("cfi-dss-2crs");
			headerList4.add("rb-blanking-case-for-spectrum-sharing");
			headerList4.add("resource-pattern-change-period");
			headerList4.add("minimum-number-of-nr-slots");
			headerList4.add("maximum-number-of-nr-slots");
			headerList4.add("target-number-of-nr-slots");
			headerList4.add("initial-number-of-nr-slots");
			headerList4.add("resource-pattern-out-of-synch-determination-count-threshold");
			headerList4.add("dl-prb-usage-threshold-for-increasing-lte-resource");
			headerList4.add("ul-prb-usage-threshold-for-increasing-lte-resource");
			headerList4.add("dl-pdcch-fail-threshold-for-increasing-lte-resource");
			headerList4.add("ul-pdcch-fail-threshold-for-increasing-lte-resource");
			headerList4.add("slot-level-operation-mode");
			headerList4.add("dss-coordination-delay-q1");
			headerList4.add("dss-coordination-delay-q2");
			headerList4.add("spectrum-sharing-dl-operation-mode");
			headerList4.add("spectrum-sharing-ul-operation-mode");
			headerList4.add("rb-blanking-case-for-spectrum-sharing");
			headerList4.add("spectrum-sharing-dl-idle-pattern");
			headerList4.add("spectrum-sharing-dl-busy-pattern");
			headerList4.add("spectrum-sharing-ul-idle-pattern");
			headerList4.add("spectrum-sharing-ul-busy-pattern");
			headerList4.add("term-point-to-dss-index");
			headerList4.add("dss-target-nr-cell-num");
			headerList4.add("spectrum-sharing-rb-blanking-lower");
			headerList4.add("spectrum-sharing-rb-blanking-upper");
			headerList4.add("dss-pucch-harqack-for-ca-fdd");
			headerList4.add("heavy-bo-ue-ratio-target-config");
			headerList4.add("mv-io-site-migration-indicator");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("cpri-port-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}

					childNodeList = element.getElementsByTagName("fault-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("active-alarm-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("enb-function");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("term-point-to-dss");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList3.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData3.add(objtableData);
								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("enb-function");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList4.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData4.add(objtableData);
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String neid = "";
			String fsuinternodeID = "";
			String enb4G = "";
			String gNBDUID = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("gNBDUID")) {
					gNBDUID = listOfCiqDetails.get(0).getCiqMap().get("gNBDUID").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName, "DSS_MOP_Parameters-1",
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)
					&& listOfCiqDetails.get(0).getCiqMap().containsKey("fsu-internode-id1")) {
				fsuinternodeID = listOfCiqDetails.get(0).getCiqMap().get("fsu-internode-id1").getHeaderValue().trim();
			}
			String f1cIpAddr = "";
			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"vDUHELM(Day0)Orchestrator", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {

				if (listOfCiqDetails.get(0).getCiqMap().containsKey("addr")) {
					f1cIpAddr = listOfCiqDetails.get(0).getCiqMap().get("addr").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			List<CIQDetailsModel> listOfCiqDetails2 = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"DSS_MOP_Parameters-4", "eNBId");
			List<CIQDetailsModel> listOfCiqDetails1 = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"vDUDay_2", "eNBId");
			String cellidday2;
			Set<String> cellidday2Set = new HashSet<>();
			Set<String> spectrumSharingLte = new HashSet<>();
			for (CIQDetailsModel ciqData : listOfCiqDetails1) {
				if (!ObjectUtils.isEmpty(listOfCiqDetails1) && ciqData.getCiqMap().containsKey("cell-num")) {
					cellidday2 = ciqData.getCiqMap().get("cell-num").getHeaderValue().trim();
					cellidday2Set.add(cellidday2);
				}
			}
			String CellId = "";
			Set<String> cellidday2Set2 = new HashSet<>();
			if (!ObjectUtils.isEmpty(listOfCiqDetails2)) {
				for (CIQDetailsModel ciqData : listOfCiqDetails2) {
					if (!ObjectUtils.isEmpty(listOfCiqDetails2) && ciqData.getCiqMap().containsKey("cell-num")) {
						CellId = ciqData.getCiqMap().get("cell-num").getHeaderValue().trim();
						cellidday2Set2.add(CellId);
					}
				}
			}
			trimTabledataString(tabelData4, cellidday2Set2, "cell-num");
			// cell-num
			// spectrum-sharing-lte
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			StringBuilder auditIssue9 = new StringBuilder();
			StringBuilder auditIssue10 = new StringBuilder();
			StringBuilder auditIssue11 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String entry = "cpri-port-entries";
			checkEmptyTableDss(tabelData1, entry, runTestEntity, enbId);
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("fsu-internode-id") && !tdData.get("fsu-internode-id").equalsIgnoreCase("-1")) {
						if (value.equals(fsuinternodeID)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id")
									+ " fsu-internode-id : " + tdData.get("fsu-internode-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("cpri-connection-type")
							&& !tdData.get("fsu-internode-id").equalsIgnoreCase("-1")) {
						if (value.trim().equalsIgnoreCase("indirect-via-fsu")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id")
									+ " cpri-connection-type : " + tdData.get("cpri-connection-type") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			entry = "active-alarm-entries";
			 if(!(tabelData2.size()==0)) {
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (!value.equals("-")) {
							auditIssue3.append("ENB ALARMS : alarm-type : " + tdData.get("alarm-type")
									+ " probable-cause : " + tdData.get("probable-cause") + " location : "
									+ tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			 }else {
	            	htmlContent.append(
	    					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");
	            	htmlContent.append("<tr>\n<td align=center colspan=" + headerList3.size() + " bgcolor=FFFF00>NO DATA</td></tr>\n");	
	            }
			entry = "term-point-to-dss";
			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sctp-state")) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("sctp-state : " + tdData.get("sctp-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("gnb-ipv6")) {
						if (compareIPAddr(f1cIpAddr, value.trim())) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue5.append("gnb-ipv6 : " + tdData.get("gnb-ipv6") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			entry = "spectrum-sharing-scheduler-config-idle";
			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			// spectrum sharing-->table not present in post audit
			// DSS MOP Parameters 4 of the CIQ, column C give cnum match with
			// <cell-num>1</cell-num> in yang,
			// and then check the correposnding <spectrum-sharing-lte> = spectrum-sharing-on
			// else flag,
			// <slot-level-operation-mode> should be slot-level-dss-mode,
			// <dss-target-nr-cell-num> match with Day2 column J,
			// <mv-io-site-migration-indicator> add rule just to check config-option-0 or
			// config-option-1, then pass

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");
				String SpectrumSharingLte = "";
				String Cellabc = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetails2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails2) {
						if (ciqData.getCiqMap().containsKey("cell-num") && ciqData.getCiqMap().get("cell-num")
								.getHeaderValue().trim().equals(tdData.get("cell-num").trim())) {
							Cellabc = tdData.get("cell-num");
							if (ciqData.getCiqMap().containsKey("spectrum-sharing-lte")) {
								SpectrumSharingLte = ciqData.getCiqMap().get("spectrum-sharing-lte").getHeaderValue()
										.trim();
							}

						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					if (key.equals("cell-num")) {
						if (!value.contains(Cellabc)) {

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}

					else if (key.equals("spectrum-sharing-lte")) {
						if (!value.contains(SpectrumSharingLte)) {
							auditIssue7.append("spectrum-sharing-lte : " + tdData.get("spectrum-sharing-lte") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else if (key.equals("slot-level-operation-mode")) {
						if (!value.equals("slot-level-dss-mode") && !cellidday2Set2.isEmpty()
								&& cellidday2Set2.contains(tdData.get("cell-num"))) {
							auditIssue8.append(
									"slot-level-operation-mode : " + tdData.get("slot-level-operation-mode") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else if (key.equals("mv-io-site-migration-indicator")) {
						if (!(value.equals("config-option-0") || value.equals("config-option-1"))
								&& !cellidday2Set2.isEmpty() && cellidday2Set2.contains(tdData.get("cell-num"))) {
							auditIssue10.append("mv-io-site-migration-indicator : "
									+ tdData.get("mv-io-site-migration-indicator") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else if (key.equals("dss-target-nr-cell-num")) {
						if (!cellidday2Set.contains(value) && !cellidday2Set2.isEmpty()
								&& cellidday2Set2.contains(tdData.get("cell-num"))) {
							auditIssue11
									.append("dss-target-nr-cell-num : " + tdData.get("dss-target-nr-cell-num") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			auditIssueAll.append(auditIssue7);
			auditIssueAll.append(auditIssue8);
			auditIssueAll.append(auditIssue9);
			auditIssueAll.append(auditIssue10);
			auditIssueAll.append(auditIssue11);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);	
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);	
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);	
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);	
	

			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(36, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(36, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
					audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(36, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), "pass");
					
			}
			if (auditIssue3.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(58, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(58, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(58, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(64, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(64, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(64, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue5.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(65, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(65, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(65, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue6.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(66, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(66, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(66, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue7.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(67, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(67, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(67, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue8.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(68, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue8.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(68, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(68, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue10.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(69, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue10.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(69, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(69, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue11.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(70, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue11.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(70, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(70, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getENBAuditDSSSoftwareVersion(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("package-id");
			headerList1.add("ne-id");
			headerList1.add("software-name");
			headerList1.add("software-version");
			headerList1.add("software-vendor-name");
			headerList1.add("software-classification");
			headerList1.add("software-status");
			headerList1.add("software-installed-time");
			headerList1.add("software-activated-time");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("package-inventory");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Iterator<String> itr = headerList1.iterator();
					String header = itr.next();
					objtableData.put(header, getXmlElementData(elementchild1, header));

					while (itr.hasNext()) {
						header = itr.next();
						objtableData.put(header, getXmlElementData(elementchild1, header));
					}
					tabelData1.add(objtableData);
				}
			}

			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			String enbVersion = "";

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("eNBVersion")) {
					enbVersion = listOfCiqDetails.get(0).getCiqMap().get("eNBVersion").getHeaderValue().trim();
				}
			}

			StringBuilder softwareAuditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String packageId = "";
				String softwareName = "";

				if (tdData.containsKey("software-name")) {
					softwareName = tdData.get("software-name");
				}
				if (tdData.containsKey("package-id")) {
					packageId = tdData.get("package-id");
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					if (resultTableData.getKey().equalsIgnoreCase("software-version")
							&& packageId.equalsIgnoreCase("active-software")
							// && !resultTableData.getValue().trim().equalsIgnoreCase(enbVersion)
							&& !versionCompare(StringUtils.substringBefore(enbVersion, "("),
									StringUtils.substringBefore(resultTableData.getValue().trim(), "("))) {
						tableData.append(
								"<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						softwareAuditIssue.append("software-name: " + softwareName + " software-version : "
								+ resultTableData.getValue() + "\n");
					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			
			auditIssueAll.append(softwareAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (softwareAuditIssue.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), softwareAuditIssue.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(42, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getFSUAuditDSSSoftwareVersion(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			String softwareVersion = "";
			if(fullOutputLog.contains(XmlCommandsConstants.DSS_VDU_PREAUDIT)) {
			    softwareVersion = ge5gGsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_VDU_PREAUDIT, enbId,
					dbcollectionFileName, runTestEntity);
			}else if(fullOutputLog.contains(XmlCommandsConstants.DSS_VDU_FLAVORANDSV)) {
				softwareVersion = ge5gGsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_VDU_FLAVORANDSV,
						enbId, dbcollectionFileName, runTestEntity);
			}
			String neVersionVDU = StringUtils.substringBefore(softwareVersion, "-");
			
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList nodeList1 = element.getChildNodes();

					for (int j = 0; j < nodeList1.getLength(); j++) {
						Node nodeList2 = nodeList1.item(j);
						if (Node.ELEMENT_NODE == nodeList2.getNodeType()) {

							Element element1 = (Element) nodeList2;
							NodeList nodeList3 = element1.getChildNodes();
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							for (int k = 0; k < nodeList3.getLength(); k++) {

								Node n1 = nodeList3.item(k);
								if (Node.ELEMENT_NODE == n1.getNodeType()) {
									headerList1.add(n1.getNodeName().trim());
									objtableData.put(n1.getNodeName().trim(), n1.getTextContent());
								}
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}
			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			String fsuVersion = "";

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("FSUVersion")) {
					fsuVersion = listOfCiqDetails.get(0).getCiqMap().get("FSUVersion").getHeaderValue().trim();
				}
			}

			StringBuilder softwarefsuAuditIssue = new StringBuilder();
			StringBuilder softwarevDUAuditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			String softwareVersionFSU="";
			softwareVersionFSU = get4GsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_FSU_SOFTWAREVERSION, enbId,
					dbcollectionFileName, runTestEntity);
			String neVersionFSU = StringUtils.substringBefore(softwareVersionFSU, "-");
          boolean vduswfail=false;
           if(neVersionVDU.contains("22") && !neVersionFSU.contains("22")) {
        	   vduswfail=true;
        	   softwarevDUAuditIssue.append("WHEN vDU version is 22 FSU version should be 22.A ");
           }
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String packageId = "";
				String softwareName = "";

				if (tdData.containsKey("software-name")) {
					softwareName = tdData.get("software-name");
				}
				if (tdData.containsKey("package-id")) {
					packageId = tdData.get("package-id");
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("software-version")) {
						if (packageId.equalsIgnoreCase("active-software")
								&& (!versionCompare(StringUtils.substringBefore(fsuVersion, "("),
										StringUtils.substringBefore(value.trim(), "(")) || vduswfail)) {
							tableData.append(
									"<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if(!versionCompare(StringUtils.substringBefore(fsuVersion, "("),
									StringUtils.substringBefore(value.trim(), "(")) ) {
							softwarefsuAuditIssue.append("software-name: " + softwareName + " software-version : "
									+ value + "\n");
							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				
					/*if (resultTableData.getKey().equalsIgnoreCase("software-version")
							&& packageId.equalsIgnoreCase("active-software")
							// && !fsuVersion.contains(resultTableData.getValue().trim())
							&& !versionCompare(StringUtils.substringBefore(fsuVersion, "("),
									StringUtils.substringBefore(resultTableData.getValue().trim(), "("))) {
						tableData.append(
								"<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() + "</td>\n");
						softwarefsuAuditIssue.append("software-name: " + softwareName + " software-version : "
								+ resultTableData.getValue() + "\n");
					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}*/
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(softwarefsuAuditIssue);
			auditIssueAll.append(softwarevDUAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (softwarefsuAuditIssue.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), softwarefsuAuditIssue.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(43, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getFSUAuditDSSPostAudit(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity, NetworkConfigEntity networkConfigEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String softwareVersion = "";
			String softwareVersionnetwork = "";
			List<CIQDetailsModel> listOfCiqDetailssv = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailssv)) {
				if (listOfCiqDetailssv.get(0).getCiqMap().containsKey("vDU_Version")) {
					softwareVersion = listOfCiqDetailssv.get(0).getCiqMap().get("vDU_Version").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			softwareVersionnetwork = ge5gGsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_VDU_FLAVORANDSV,
					enbId, dbcollectionFileName, runTestEntity);
			if (!softwareVersionnetwork.isEmpty() && !softwareVersionnetwork.equals("-")) {
				softwareVersion = softwareVersionnetwork;
			}
			String neVersion = StringUtils.substringBefore(softwareVersion, "-");

			String vDUType = "";
			vDUType = get5gDSSVDUType(fullOutputLog, XmlCommandsConstants.DSS_VDU_FLAVORANDSV, enbId,
					dbcollectionFileName, runTestEntity);

			String entry1 = "mplane-ipv6-info";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("mplane-ipv6");

			String entry2 = "o-du-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("unit-type");
			headerList2.add("unit-id");
			headerList2.add("port-id");

			String entry3 = "ecpri-interfaces";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("cpu-id");
			headerList3.add("interface-name");
			headerList3.add("vlan-id");
			headerList3.add("mtu");
			headerList3.add("management");
			headerList3.add("control-user");
			headerList3.add("ieee1588");
			headerList3.add("synce");

			String entry4 = "ipv6-address";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cpu-id");
			headerList4.add("interface-name");
			headerList4.add("ip");
			headerList4.add("prefix-length");
			headerList4.add("address-state");
			headerList4.add("forwarding");
			headerList4.add("m-plane-marking");

			String entry5 = "ecpri-port-entries";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("unit-type");
			headerList5.add("unit-id");
			headerList5.add("port-id");
			headerList5.add("administrative-state");
			headerList5.add("user-label");
			headerList5.add("configured-speed");
			headerList5.add("fec-mode");

			String entry6 = "du-cpri-port-entries";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("unit-type");
			headerList6.add("unit-id");
			headerList6.add("port-id");
			headerList6.add("enb-ne-id");
			headerList6.add("enb-inode-id");
			headerList6.add("connected-enb-digital-unit-board-id");
			headerList6.add("connected-enb-digital-unit-port-id");
			headerList6.add("cascade-radio-unit-id");
			headerList6.add("cpri-speed-saved");
			headerList6.add("du-cpri-port-mode");
			headerList6.add("tx-wavelength");
			headerList6.add("tx-power");
			headerList6.add("rx-power");
			headerList6.add("temperature");
			headerList6.add("bit-rate");
			headerList6.add("voltage");
			headerList6.add("electric-current");

			String entry7 = "active-alarm-entries";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("alarm-unit-type");
			headerList7.add("alarm-type");
			headerList7.add("probable-cause");
			headerList7.add("specific-problem");
			headerList7.add("severity");
			headerList7.add("location");

			String entry8 = "ru-cpri-port-entries";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("unit-type");
			headerList8.add("unit-id");
			headerList8.add("port-id");
			headerList8.add("group-id");
			headerList8.add("connected-du-cpri-port-id");
			headerList8.add("adpf-ne-id");
			headerList8.add("tx-wavelength");
			headerList8.add("tx-power");
			headerList8.add("rx-power");
			headerList8.add("temperature");
			headerList8.add("bit-rate");
			headerList8.add("voltage");
			headerList8.add("electric-current");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("active-alarm-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList7.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData7.add(objtableData);
						}
					}

					NodeList childNodeList2 = elementchild1.getElementsByTagName("o-du-entries");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("mplane-ipv6-info");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild2, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild2, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild2, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData1.add(objtableData);
								}
							}

							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList2.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild2, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild2, header));
							}
							tabelData2.add(objtableData);
						}
					}

					childNodeList2 = elementchild1.getElementsByTagName("cpu");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;

							NodeList childNodeList3 = elementchild2.getElementsByTagName("ecpri-interfaces");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									NodeList childNodeList4 = elementchild3.getElementsByTagName("ipv6-address");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList4.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData4.add(objtableData);
										}
									}

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList3.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild2, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData3.add(objtableData);
								}
							}
						}
					}

					childNodeList2 = elementchild1.getElementsByTagName("digital-unit");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;

							NodeList childNodeList3 = elementchild2.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									NodeList childNodeList4 = elementchild3.getElementsByTagName("ecpri-port-entries");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList5.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData5.add(objtableData);
										}
									}

									childNodeList4 = elementchild3.getElementsByTagName("du-cpri-port-entries");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList6.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData6.add(objtableData);
										}
									}
									childNodeList4 = elementchild3.getElementsByTagName("ru-cpri-port-entries");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList8.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData8.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}
			checkEmptyTableDss(tabelData8, entry8, runTestEntity, enbId);
			checkEmptyTableDss(tabelData1, entry1, runTestEntity, enbId);
			checkEmptyTableDss(tabelData2, entry2, runTestEntity, enbId);
			checkEmptyTableDss(tabelData3, entry3, runTestEntity, enbId);
			checkEmptyTableDss(tabelData5, entry5, runTestEntity, enbId);
			checkEmptyTableDss(tabelData6, entry6, runTestEntity, enbId);
			checkEmptyTableDss(tabelData4, entry4, runTestEntity, enbId);
			String fsuType = "";
			for (LinkedHashMap<String, String> tdData1 : tabelData1) {
				if (tdData1.get("unit-type").equals("fsip") || tdData1.get("unit-type").equals("fsmp")) {

					fsuType = "FSU-10";
				} else {
					fsuType = "FSU-20";
				}
			}
			String portIDU = "";
			if (fsuType.equals("FSU-10") && vDUType.equals("medium-icl")) {
				portIDU = "1";
			} else if (fsuType.equals("FSU-20") && vDUType.equals("medium-icl")) {
				portIDU = "1";
			} else {
				portIDU = "0";
			}
			Set<String> interfaceSet = new HashSet<>();
			if (fsuType.equals("FSU-10") && vDUType.equals("medium")) {
				interfaceSet.add("fh_0_1_0_0");
				interfaceSet.add("fh_0_1_0_1");

			} else if (fsuType.equals("FSU-20") && vDUType.equals("medium")) {
				interfaceSet.add("fh_0_0_0_0");
				interfaceSet.add("fh_0_0_0_1");

			} else if (fsuType.equals("FSU-10") && vDUType.equals("medium-icl")) {
				interfaceSet.add("fh_0_1_0_0");
				interfaceSet.add("fh_0_1_1_0");
				interfaceSet.add("fh_0_1_0_1");
				interfaceSet.add("fh_0_1_1_1");

			} else if (fsuType.equals("FSU-20") && vDUType.equals("medium-icl")) {
				interfaceSet.add("fh_0_0_0_0");
				interfaceSet.add("fh_0_0_1_0");
				interfaceSet.add("fh_0_0_0_1");
				interfaceSet.add("fh_0_0_1_1");

			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			StringBuilder auditIssue9 = new StringBuilder();
			StringBuilder auditIssue11 = new StringBuilder();
			StringBuilder auditIssue12 = new StringBuilder();
			StringBuilder auditIssue13 = new StringBuilder();
			StringBuilder auditIssue14 = new StringBuilder();
			StringBuilder auditIssue15 = new StringBuilder();
			StringBuilder auditIssue16 = new StringBuilder();
			StringBuilder auditIssue17 = new StringBuilder();
		

			
			StringBuilder auditSuccess1 = new StringBuilder();
			StringBuilder auditSuccess2 = new StringBuilder();
			StringBuilder auditSuccess3 = new StringBuilder();
			StringBuilder auditSuccess4 = new StringBuilder();
			StringBuilder auditSuccess5 = new StringBuilder();
			StringBuilder auditSuccess6 = new StringBuilder();
			StringBuilder auditSuccess7 = new StringBuilder();
			StringBuilder auditSuccess8 = new StringBuilder();
			StringBuilder auditSuccess9 = new StringBuilder();
			StringBuilder auditSuccess10 = new StringBuilder();
			StringBuilder auditSuccess11 = new StringBuilder();
			StringBuilder auditSuccess12 = new StringBuilder();
			StringBuilder auditSuccess13 = new StringBuilder();
			StringBuilder auditSuccess14 = new StringBuilder();
			StringBuilder auditSuccess15 = new StringBuilder();
			StringBuilder auditSuccess16 = new StringBuilder();
			StringBuilder auditSuccess17 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String neid = "";
			String mplaneIP = "";
			String enb4G = "";
			String vlanid1 = "";
			String mtu1 = "";
			String management1 = "";
			String controluser1 = "";
			String ieee1 = "";
			String synce1 = "";
			String vlanid2 = "";
			String mtu2 = "";
			String management2 = "";
			String controluser2 = "";
			String ieee2 = "";
			String synce2 = "";
			String interfaceIp = "";
			String portId = "";
			String administrativeState = "";
			String configuredSpeed = "";
			String fecmode = "";
			String interfaceName1 = "";
			String interfaceName2 = "";

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName, "DSS_MOP_Parameters-1",
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("mplane-ipv6")) {
					mplaneIP = listOfCiqDetails.get(0).getCiqMap().get("mplane-ipv6").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ip")) {
					interfaceIp = listOfCiqDetails.get(0).getCiqMap().get("ip").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("vlan-id1")) {
					vlanid1 = listOfCiqDetails.get(0).getCiqMap().get("vlan-id1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("mtu1")) {
					mtu1 = listOfCiqDetails.get(0).getCiqMap().get("mtu1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("management1")) {
					management1 = listOfCiqDetails.get(0).getCiqMap().get("management1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("control-user1")) {
					controluser1 = listOfCiqDetails.get(0).getCiqMap().get("control-user1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("vlan-id2")) {
					vlanid2 = listOfCiqDetails.get(0).getCiqMap().get("vlan-id2").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("mtu2")) {
					mtu2 = listOfCiqDetails.get(0).getCiqMap().get("mtu2").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("management2")) {
					management2 = listOfCiqDetails.get(0).getCiqMap().get("management2").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("control-user2")) {
					controluser2 = listOfCiqDetails.get(0).getCiqMap().get("control-user2").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ecpri-pi")) {
					portId = listOfCiqDetails.get(0).getCiqMap().get("ecpri-pi").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ecpri-as")) {
					administrativeState = listOfCiqDetails.get(0).getCiqMap().get("ecpri-as").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("configured-speed")) {
					configuredSpeed = listOfCiqDetails.get(0).getCiqMap().get("configured-speed").getHeaderValue()
							.trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("fec-mode")) {
					fecmode = listOfCiqDetails.get(0).getCiqMap().get("fec-mode").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("interface-name1")) {
					interfaceName1 = listOfCiqDetails.get(0).getCiqMap().get("interface-name1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("interface-name2")) {
					interfaceName2 = listOfCiqDetails.get(0).getCiqMap().get("interface-name2").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ieee1588a")) {
					ieee1 = listOfCiqDetails.get(0).getCiqMap().get("ieee1588a").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ieee1588b")) {
					ieee2 = listOfCiqDetails.get(0).getCiqMap().get("ieee1588b").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("syncea")) {
					synce1 = listOfCiqDetails.get(0).getCiqMap().get("syncea").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("synceb")) {
					synce2 = listOfCiqDetails.get(0).getCiqMap().get("synceb").getHeaderValue().trim();
				}

			}
			List<CIQDetailsModel> listOfCiqDetailsd1 = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"FSUCIQ", "eNBId");
			List<CIQDetailsModel> listOfCiqDetails3 = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"vDUDay_2", "eNBId");
			Set<String> cDuports = new HashSet<>();
			Set<String> nrFreq = new HashSet<>();
			if (!ObjectUtils.isEmpty(listOfCiqDetails3)) {
				for (CIQDetailsModel ciqData : listOfCiqDetails3) {
					if (ciqData.getCiqMap().containsKey("connected-fsu-port-id")) {
						cDuports.add(ciqData.getCiqMap().get("connected-fsu-port-id").getHeaderValue().trim());
					}
					if (ciqData.getCiqMap().containsKey("nrfrequency")) {
						nrFreq.add(ciqData.getCiqMap().get("nrfrequency").getHeaderValue().trim());
					}
				}
			}

			// mplane-ipv6-info
			if (!mplaneIP.isEmpty() && !ObjectUtils.isEmpty(tabelData1)) {
				if (compareIPAddr(mplaneIP, tabelData1.get(0).get("mplane-ipv6"))) {
					mplaneIP = tabelData1.get(0).get("mplane-ipv6");
				}
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			if (tabelData1.size() != 1) {
				auditIssue1.append("Mplane ipv6 should have 1 entry only\n");
			}
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("mplane-ipv6")) {
						if (value.equals(mplaneIP)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id") + " mplane-ipv6 : "
									+ tdData.get("mplane-ipv6") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// o-du-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			if (tabelData2.size() != 1) {
				auditIssue2.append("Only 1 entry should be there for connected vDU\n");
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("unit-id") && (neVersion.contains("21.D") || neVersion.contains("22")) ) {
						if (value.equals("0")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("port-id") && (neVersion.contains("21.D") || neVersion.contains("22"))) {
						if (value.equals(portIDU)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// ecpri-interfaces
			Set<String> interfaceSetNetwork = new HashSet<>();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				if (!tdData.get("interface-name").isEmpty()) {
					interfaceSetNetwork.add(tdData.get("interface-name"));
				}
			}
			for (String iData : interfaceSet) {
				if (!interfaceSetNetwork.contains(iData)) {
					auditIssue3.append("Interface should have " + iData + " entries\n");
				}
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();

			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");

				boolean auditfailure = false;
				if (tdData.get("interface-name").equals(interfaceName1) && vDUType.equals("medium")) {
					if ((!tdData.get("vlan-id").equals(vlanid1)) && (!tdData.get("vlan-id").equals("-"))
							) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals(mtu1)) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase(management1)) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase(controluser1)) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase(ieee1)) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase(synce1)) {
						auditfailure = true;
					}
				} else if (tdData.get("interface-name").equals(interfaceName2) && vDUType.equals("medium")) {
					if ((!tdData.get("vlan-id").equals(vlanid2)) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals(mtu2)) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase(management2)) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase(controluser2)) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase(ieee2)) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase(synce2)) {
						auditfailure = true;
					}
				} else if ((tdData.get("interface-name").equals("fh_0_1_0_1")
						|| tdData.get("interface-name").equals("fh_0_1_1_1")) && vDUType.equals("medium-icl")
						&& fsuType.equals("FSU-10")) {
					if ((!tdData.get("vlan-id").equals("950")) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals("9000")) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase("TRUE")) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
				} else if ((tdData.get("interface-name").equals("fh_0_1_0_0")) && vDUType.equals("medium-icl")
						&& fsuType.equals("FSU-10")) {
					if ((!tdData.get("vlan-id").equals("950")) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals("1500")) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase("TRUE")) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase("TRUE")) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
				} else if ((tdData.get("interface-name").equals("fh_0_1_1_0")) && vDUType.equals("medium-icl")
						&& fsuType.equals("FSU-10")) {
					
					if ((!tdData.get("vlan-id").equals("950")) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}

					if (!tdData.get("mtu").equals("1500")) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase("TRUE")) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
				} else if ((tdData.get("interface-name").equals("fh_0_0_0_1")
						|| tdData.get("interface-name").equals("fh_0_0_1_1")) && vDUType.equals("medium-icl")
						&& fsuType.equals("FSU-20")) {
					if ((!tdData.get("vlan-id").equals("950")) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals("9000")) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase("TRUE")) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
				} else if ((tdData.get("interface-name").equals("fh_0_0_0_0")) && vDUType.equals("medium-icl")
						&& fsuType.equals("FSU-20")) {
					if ((!tdData.get("vlan-id").equals("950")) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals("1500")) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase("TRUE")) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
				} else if ((tdData.get("interface-name").equals("fh_0_0_1_0")) && vDUType.equals("medium-icl")
						&& fsuType.equals("FSU-20")) {
					if ((!tdData.get("vlan-id").equals("950")) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals("1500")) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase("TRUE")) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase("FALSE")) {
						auditfailure = true;
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String value = resultTableData.getValue();
					if (auditfailure) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						if (!entryPresent) {
							auditIssue3.append("interface-name : " + tdData.get("interface-name") + " vlan-id : "
									+ tdData.get("vlan-id") + " mtu : " + tdData.get("mtu") + " management : "
									+ tdData.get("management") + " control-user : " + tdData.get("control-user")
									+ " ieee1588 : " + tdData.get("ieee1588") + " synce : " + tdData.get("synce")
									+ "\n");
							entryPresent = true;
						}

					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// ipv6-address
			if (!interfaceIp.isEmpty() && !ObjectUtils.isEmpty(tabelData4)) {
				if (compareIPAddr(interfaceIp, tabelData4.get(0).get("ip"))) {
					interfaceIp = tabelData4.get(0).get("ip");
				}
			}

			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			if (tabelData4.size() != 1) {
				auditIssue4.append("Mplane ipv6 should have 1 entry\n");
			}
			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");
				List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository
						.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_5G_DSS, fsuType.trim(), vDUType.trim());
				String interfaceName = "";
				if (!ObjectUtils.isEmpty(auditConstantsList)) {
					interfaceName = auditConstantsList.get(0).getParameterValue().trim();
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("ip")) {
						if (value.equals(interfaceIp)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("interface-namee : " + tdData.get("interface-name") + " ip : "
									+ tdData.get("ip") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("interface-name") && (neVersion.contains("21.D") || neVersion.contains("22.A"))) {
						if (value.equals(interfaceName)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("interface-namee : " + tdData.get("interface-name") + " ip : "
									+ tdData.get("ip") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// ecpri-port-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList5) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData5) {
				boolean auditFailure = false;
				if (tdData.get("port-id").equals(portId)) {
					if (!tdData.get("administrative-state").equalsIgnoreCase(administrativeState)) {
						auditFailure = true;
					}
					if (!tdData.get("configured-speed").equalsIgnoreCase(configuredSpeed)) {
						auditFailure = true;
					}
					if (!tdData.get("fec-mode").equalsIgnoreCase(fecmode)) {
						auditFailure = true;
					}
				}
				tableData.append("<tr>\n");
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				
					String value = resultTableData.getValue();
					if (auditFailure) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						if (!entryPresent) {
							auditIssue5.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id")
									+ " administrative-state : " + tdData.get("administrative-state")
									+ " configured-speed : " + tdData.get("configured-speed") + " fec-mode : "
									+ tdData.get("fec-mode") + "\n");
							entryPresent = true;
						}

					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// du-cpri-port-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList6.size() + " bgcolor=#EEEEEE><b>" + entry6 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList6) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData6) {
				tableData.append("<tr>\n");

				String lcc = "";
				String crpi = "";
				String port = "";
				String enb = "";
				String crpi2 = "";
				String UnitType = "";
				boolean isSecondCpriPresent = false;
				if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsd1) {
						if (ciqData.getCiqMap().containsKey("RU_PortID")
								&& ciqData.getCiqMap().get("RU_PortID").getHeaderValue().trim()
										.equals(tdData.get("port-id").trim())
								&& ciqData.getCiqMap().containsKey("Connected_DU_PortID")
								&& ciqData.getCiqMap().get("Connected_DU_PortID").getHeaderValue().trim()
										.equals(tdData.get("port-id").trim())) {
							port = tdData.get("port-id");
							if (ciqData.getCiqMap().containsKey("LCC_Card_Port")) {
								crpi = ciqData.getCiqMap().get("LCC_Card_Port").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("lcc_card_no")) {
								lcc = ciqData.getCiqMap().get("lcc_card_no").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("4G_enB")) {
								enb = ciqData.getCiqMap().get("4G_enB").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("LCC_Card_Port2")) {
								crpi2 = ciqData.getCiqMap().get("LCC_Card_Port2").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("Unit_Type")) {
								UnitType = ciqData.getCiqMap().get("Unit_Type").getHeaderValue().trim();
							}
							if (!ObjectUtils.isEmpty(crpi2)) {
								isSecondCpriPresent = true;
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					if (key.equals("connected-enb-digital-unit-board-id")) {
						if (value.equals(lcc)) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue7.append(
									"port-id: " + tdData.get("port-id") + " connected-enb-digital-unit-board-id: "
											+ tdData.get("connected-enb-digital-unit-board-id") + "\n");

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("connected-enb-digital-unit-port-id")) {
						if (value.equals(crpi) || value.equals(crpi2)) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue8.append(
									"port-id: " + tdData.get("port-id") + " connected-enb-digital-unit-port-id: "
											+ tdData.get("connected-enb-digital-unit-port-id") + "\n");

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("port-id")) {
						if (value.equals(port)) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue9.append("port-id: " + tdData.get("port-id") + "\n");

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("enb-ne-id")) {
						if (value.equals(enb)) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue11.append("port-id: " + tdData.get("port-id") + " enb-ne-id: "
									+ tdData.get("enb-ne-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("du-cpri-port-mode")) {
						if (!value.equals("multiplex") && (cDuports.contains(tdData.get("port-id"))
								|| (isSecondCpriPresent && (nrFreq.contains("2") || nrFreq.contains("66"))))) {
							auditIssue12.append("port-id: " + tdData.get("port-id") + " du-cpri-port-mode: "
									+ tdData.get("du-cpri-port-mode") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						} else if (!value.equals("pass-through") && !(cDuports.contains(tdData.get("port-id"))
								|| (isSecondCpriPresent && (nrFreq.contains("2") || nrFreq.contains("66"))))) {
							auditIssue12.append("port-id: " + tdData.get("port-id") + " du-cpri-port-mode: "
									+ tdData.get("du-cpri-port-mode") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else if (key.equals("unit-type")) {
						if (value.equals(UnitType)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue16.append("port-id: " + tdData.get("port-id") + " unit-type: "
									+ tdData.get("unit-type") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center >" + value + "</td>\n");

					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			// ru-cipriport
			for (LinkedHashMap<String, String> tdData : tabelData8) {
				if (!(tdData.get("port-id").equals(tdData.get("connected-du-cpri-port-id")))) {
					auditIssue17.append("port-id: " + tdData.get("port-id") + " should match with "
							+ " connected-du-cpri-port-id: " + tdData.get("connected-du-cpri-port-id") + "\n");
				}
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList8.size() + " bgcolor=#EEEEEE><b>" + entry8 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList8) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData8) {
				tableData.append("<tr>\n");

				String portid = "";
				String Duport = "";
				String groupId = "";

				if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsd1) {
						if (ciqData.getCiqMap().containsKey("RU_PortID")
								&& ciqData.getCiqMap().get("RU_PortID").getHeaderValue().trim()
										.equals(tdData.get("port-id").trim())
								&& ciqData.getCiqMap().containsKey("Connected_DU_PortID")
								&& ciqData.getCiqMap().get("Connected_DU_PortID").getHeaderValue().trim()
										.equals(tdData.get("connected-du-cpri-port-id").trim())) {
							portid = tdData.get("port-id");
							if (ciqData.getCiqMap().containsKey("Connected_DU_PortID")) {
								Duport = ciqData.getCiqMap().get("Connected_DU_PortID").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("Group_ID")) {
								groupId = ciqData.getCiqMap().get("Group_ID").getHeaderValue().trim();
							}

						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					if (key.equals("port-id")) {
						if (value.equals(portid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue13.append("port-id: " + tdData.get("port-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("connected-du-cpri-port-id")) {
						if (value.equals(Duport)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue14.append("port-id: " + tdData.get("port-id") + " connected-du-cpri-port-id: "
									+ tdData.get("connected-du-cpri-port-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("group-id") && (nrFreq.contains("2") || nrFreq.contains("66"))) {
						if (value.equals(groupId)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue15.append("port-id: " + tdData.get("port-id") + " group-id: "
									+ tdData.get("group-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// active-alarm-entries
			if(!(tabelData7.size()==0)) {
			htmlContent.append(
					"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList7) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData7) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (!value.equals("-")) {
							auditIssue6.append("FSU ALARMS : alarm-type : " + tdData.get("alarm-type")
									+ " probable-cause : " + tdData.get("probable-cause") + " location : "
									+ tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
		 }else {
         	htmlContent.append(
 					"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");
         	htmlContent.append("<tr>\n<td align=center colspan=" + headerList7.size() + " bgcolor=FFFF00>NO DATA</td></tr>\n");	
         }
			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			auditIssueAll.append(auditIssue7);
			auditIssueAll.append(auditIssue8);
			auditIssueAll.append(auditIssue9);
			auditIssueAll.append(auditIssue11);
			auditIssueAll.append(auditIssue12);
			auditIssueAll.append(auditIssue13);
			auditIssueAll.append(auditIssue14);
			auditIssueAll.append(auditIssue15);
			auditIssueAll.append(auditIssue16);
			auditIssueAll.append(auditIssue17);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData6, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData7, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData8, auditIssueAll);

			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(38, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(38, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(38, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(39, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(39, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(39, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue5.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue6.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(59, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(59, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(59, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue7.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(78, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(78, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(78, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue8.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(79, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue8.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(79, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(79, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue9.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(80, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue9.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(80, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(80, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue11.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(81, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue11.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(81, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(81, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue12.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(82, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue12.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(82, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(82, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue13.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(83, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue13.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(83, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(83, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue14.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(84, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue14.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(84, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(84, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue15.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(85, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue15.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(85, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(85, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue16.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(86, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue16.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(86, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(86, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue17.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(87, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue17.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(87, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(87, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditDSSstaticRoute(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("pod-type");
			headerList1.add("pod-id");
			headerList1.add("prefix");
			headerList1.add("gateway");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("pod-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("ipv6-static-route");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String neid = "";
			String fsuinternodeID = "";
			String f1ugw = "";
			String f1cgw = "";
			String fh0mgw = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"vDUHELM(Day0)Orchestrator", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("gw")) {
					f1cgw = listOfCiqDetails.get(0).getCiqMap().get("gw").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("gw1")) {
					f1ugw = listOfCiqDetails.get(0).getCiqMap().get("gw1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("gw2")) {
					fh0mgw = listOfCiqDetails.get(0).getCiqMap().get("gw2").getHeaderValue().trim();
				}
			}

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String entry = "ipv6-static-route";
			checkEmptyTableDss(tabelData1, entry, runTestEntity, enbId);
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				String ip = "";
				if (tdData.get("pod-type").equalsIgnoreCase("dpp")) {
					ip = f1cgw;
				} else if (tdData.get("pod-type").equalsIgnoreCase("dip")) {
					ip = f1ugw;
				} else if (tdData.get("pod-type").equalsIgnoreCase("rmp")) {
					ip = fh0mgw;
				}

				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("gateway") && (tdData.get("pod-type").equalsIgnoreCase("dpp")
							|| tdData.get("pod-type").equalsIgnoreCase("dip")
							|| tdData.get("pod-type").equalsIgnoreCase("rmp"))) {
						if (compareIPAddr(ip, value.trim())) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("pod-type : " + tdData.get("pod-type") + " gateway : "
									+ tdData.get("gateway") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(44, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditPodStatus(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String entry1 = "pod entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("pod-type");
			headerList1.add("pod-id");
			headerList1.add("pod-object-id");
			headerList1.add("operational-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("pod-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("pod-type", getXmlElementData(elementchild6, "pod-type"));
							objtableData.put("pod-id", getXmlElementData(elementchild6, "pod-id"));
							objtableData.put("pod-object-id", getXmlElementData(elementchild6, "pod-object-id"));
							objtableData.put("operational-state",
									getXmlElementData(elementchild6, "operational-state"));
							if (!getXmlElementData(elementchild6, "pod-object-id").equalsIgnoreCase("-")) {
								tabelData1.add(objtableData);
							}
						}
					}

				}
			}
			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("operational-state")) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("pod-type : " + tdData.get("pod-type") + " operational-state : "
									+ tdData.get("operational-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditptpsync(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry3 = "pod entries sync";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("pod-type");
			headerList1.add("pod-id");
			headerList1.add("holdover-timer-threshold");
			headerList1.add("sync-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("sync");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															objtableData.put("pod-type",
																	getXmlElementData(elementchild5, "pod-type"));
															objtableData.put("pod-id",
																	getXmlElementData(elementchild5, "pod-id"));
															objtableData.put("holdover-timer-threshold",
																	getXmlElementData(elementchild6,
																			"holdover-timer-threshold"));
															objtableData.put("sync-state",
																	getXmlElementData(elementchild6, "sync-state"));
															tabelData1.add(objtableData);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			// htmlContent
			// .append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" +
			// entry1 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("holdover-timer-threshold")) {
						if (value.equals("10")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue3.append("pod-type : " + tdData.get("pod-type") + " holdover-timer-threshold : "
									+ tdData.get("holdover-timer-threshold") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("sync-state")) {
						if (value.equals("locked")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("pod-type : " + tdData.get("pod-type") + " sync-state : "
									+ tdData.get("sync-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			if (auditIssue3.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditendpointdss(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "end-point-dss";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("dss-index");
			headerList1.add("remote-ip-address");
			headerList1.add("secondary-remote-ip-address");
			headerList1.add("enb-id");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("gnb-du-function");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("end-point-dss");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									objtableData.put("dss-index", getXmlElementData(elementchild1, "dss-index"));
									objtableData.put("remote-ip-address",
											getXmlElementData(elementchild1, "remote-ip-address"));
									objtableData.put("secondary-remote-ip-address",
											getXmlElementData(elementchild1, "secondary-remote-ip-address"));
									objtableData.put("enb-id", getXmlElementData(elementchild1, "enb-id"));
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}

			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			String enb4G = "";
			String remoteIp = "";
			String neid = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName, "DSS_MOP_Parameters-1",
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)
					&& listOfCiqDetails.get(0).getCiqMap().containsKey("remote-ip-address")) {
				remoteIp = listOfCiqDetails.get(0).getCiqMap().get("remote-ip-address").getHeaderValue().trim();
			}
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			// htmlContent
			// .append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" +
			// entry1 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("enb-id")) {
						if (value.replaceAll("^0+(?!$)", "").equals(enb4G)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue5.append("dss-index : " + tdData.get("dss-index") + " enb-id : "
									+ tdData.get("enb-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("remote-ip-address")) {
						if (value.equals(remoteIp)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue6.append("dss-index : " + tdData.get("dss-index") + " remote-ip-address : "
									+ tdData.get("remote-ip-address") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			if (auditIssue5.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(5, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
			}
			if (auditIssue6.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditflavorsf(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {StringBuilder htmlContent = new StringBuilder();
			try {
				String outputLog = StringUtils.substringAfter(fullOutputLog, command);
				outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
				DocumentBuilder builder = factory.newDocumentBuilder();
				outputLog = "<parent>" + outputLog + "</parent>";
				Document document = builder.parse(new InputSource(new StringReader(outputLog)));

				String entry1 = "config-info";
				LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
				headerList1.add("ne-id");
				headerList1.add("flavor-id");
				headerList1.add("ems-ip-address");
				headerList1.add("software-version");

				List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

				NodeList nodeList = document.getElementsByTagName("managed-element");
				for (int i = 0; i < nodeList.getLength(); i++) {
					Node ChildNode1 = nodeList.item(i);
					if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

						Element elementchild1 = (Element) ChildNode1;

						NodeList nodelist1 = elementchild1.getElementsByTagName("config-info");
						for (int k = 0; k < nodelist1.getLength(); k++) {
							Node ChildNode = nodelist1.item(k);
							if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
								Element elementchild6 = (Element) ChildNode;
								LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
								Iterator<String> itr = headerList1.iterator();
								String header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
								while (itr.hasNext()) {
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild6, header));
								}
								tabelData1.add(objtableData);
							}
						}

					}
				}
				if (tabelData1.size() == 0) {
					htmlContent.setLength(0);
					htmlContent.append(
							"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
					htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
					htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
					htmlContent.append("</table>");
					return htmlContent;
				}

				String flavorId = "";
				String sw = "";
				List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
						"vDUGrowSiteLevel(Day1)CQ", "eNBId");
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {

					if (listOfCiqDetails.get(0).getCiqMap().containsKey("flavor_id")) {
						flavorId = listOfCiqDetails.get(0).getCiqMap().get("flavor_id").getHeaderValue().trim()
								.replaceAll("^0+(?!$)", "");
					}
					if (listOfCiqDetails.get(0).getCiqMap().containsKey("vDU_Version")) {
						sw = listOfCiqDetails.get(0).getCiqMap().get("vDU_Version").getHeaderValue().trim()
								.replaceAll("^0+(?!$)", "");
					}
				}

				if (flavorId.equalsIgnoreCase("CascadeLake")) {
					flavorId = "medium";
				} else {
					flavorId = "medium-icl";
				}

				StringBuilder auditIssue2 = new StringBuilder();
				StringBuilder auditIssue25 = new StringBuilder();
				StringBuilder auditIssue27 = new StringBuilder();
				StringBuilder auditIssueAll = new StringBuilder();
				

				
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>"
						+ "DSS_vDU_FlavorAndVersion" + "</b></td></tr>\n");

				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList1) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				StringBuilder tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData1) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("flavor-id")) {
							if (value.equals("small-fdd") &&
									!(tdData.get("software-version").contains("21.D") || tdData.get("software-version").contains("22"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (value.equals(flavorId) && (tdData.get("software-version").contains("21.D") || tdData.get("software-version").contains("22"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								if (tdData.get("software-version").contains("21.D") || tdData.get("software-version").contains("22")) {

									auditIssue25.append("ne-id : " + tdData.get("ne-id") + " flavor-id : "
											+ tdData.get("flavor-id") + "\n");
								} else {
									auditIssue2.append("ne-id : " + tdData.get("ne-id") + " flavor-id : "
											+ tdData.get("flavor-id") + "\n");
								}
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("software-version")) {
							if (!versionCompare(StringUtils.substringBefore(sw, "("),
									StringUtils.substringBefore(value, "("))) {

								auditIssue27.append("ne-id: " + tdData.get("ne-id") + " software-version: "
										+ tdData.get("software-version") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}
						}else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				htmlContent.append("</table>\n");
				
				
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue25);
			auditIssueAll.append(auditIssue27);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);	
		
			
				if (auditIssue2.length() != 0) {
					audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(6, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				}
				if (auditIssue25.length() != 0) {
					audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(71, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), auditIssue25.toString());
				}
				if (auditIssue27.length() != 0) {
					audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(89, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), auditIssue27.toString());
				}
			} catch (Exception e) {
				logger.error(ExceptionUtils.getFullStackTrace(e));
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
			}
			return htmlContent;}

	public StringBuilder getvDUAuditmplaneip(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "mplane-ipv6-info";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("mplane-ipv6");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("o-du-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String neid = "";
			String mplaneIP = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}

			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName, "DSS_MOP_Parameters-1",
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("mplane-ipv6")) {
					mplaneIP = listOfCiqDetails.get(0).getCiqMap().get("mplane-ipv6").getHeaderValue().trim();
				}
			}

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			if (!mplaneIP.isEmpty() && !ObjectUtils.isEmpty(tabelData1)) {
				if (compareIPAddr(mplaneIP, tabelData1.get(0).get("mplane-ipv6"))) {
					mplaneIP = tabelData1.get(0).get("mplane-ipv6");
				}
			}
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("mplane-ipv6")) {
						if (value.equals(mplaneIP)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id") + " mplane-ipv6 : "
									+ tdData.get("mplane-ipv6") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				htmlContent.append("</table>\n");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditFsuMplainIp(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("fsu-id");
			headerList1.add("fsu-mplane-ipv6");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild = (Element) inChildNode;

					NodeList childNodeList1 = elementchild.getElementsByTagName("fsu-entries");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("mplane-interfaces");
							for (int l = 0; l < childNodeList2.getLength(); l++) {
								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();

									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}

			StringBuilder fsuauditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String neid = "";
			String fsumplaneIP = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}

			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName, "DSS_MOP_Parameters-1",
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ip")) {
					fsumplaneIP = listOfCiqDetails.get(0).getCiqMap().get("ip").getHeaderValue().trim();
				}
			}

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			if (!fsumplaneIP.isEmpty() && !ObjectUtils.isEmpty(tabelData1)) {
				if (compareIPAddr(fsumplaneIP, tabelData1.get(0).get("fsu-mplane-ipv6"))) {
					fsumplaneIP = tabelData1.get(0).get("fsu-mplane-ipv6");
				}
			}
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("fsu-mplane-ipv6")) {
						if (value.equals(fsumplaneIP)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							fsuauditIssue1.append("fsu-mplane-ipv6 : " + tdData.get("fsu-mplane-ipv6") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			
			auditIssueAll.append(fsuauditIssue1);
			auditIssueAll.append(auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);	
			
			
			if (fsuauditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(51, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), fsuauditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(51, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(51, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditvirtualportcheck(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "virtual-port-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("pod-type");
			headerList1.add("pod-id");
			headerList1.add("port-id");
			headerList1.add("administrative-state");
			headerList1.add("operational-state");
			headerList1.add("mtu");
			headerList1.add("user-label");
			headerList1.add("interface-name");
			headerList1.add("hw-address");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;

													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("virtual-port-entries");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
															Iterator<String> itr = headerList1.iterator();
															String header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));
															header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild5, header));

															while (itr.hasNext()) {
																header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild6, header));
															}
															tabelData1.add(objtableData);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			StringBuilder auditIssue8 = new StringBuilder();
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			if (tabelData1.size() != 6) {
				auditIssue8.append("LS3 vDU should have 6 virtual-port." + "\n");
			}
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository.getAuditConstantsEntityList(
						AuditConstants.PROGRAMNAME_5G_DSS, tdData.get("pod-type").trim(),
						tdData.get("interface-name").trim());
				String mtu = "";
				if (!ObjectUtils.isEmpty(auditConstantsList)) {
					mtu = auditConstantsList.get(0).getParameterValue().trim();
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("mtu")) {
						if (mtu.equals(value)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue8.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + " mtu : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			if (auditIssue8.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue8.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditexternalinterface(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "external-interfaces";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("pod-type");
			headerList1.add("pod-id");
			headerList1.add("interface-name");
			headerList1.add("ip");
			headerList1.add("prefix-length");
			headerList1.add("dhcp-server-enable");
			headerList1.add("f1");
			headerList1.add("carrier-aggregation");
			headerList1.add("mplane");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList2 = elementchild1.getElementsByTagName("virtual-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("cnf");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;
									NodeList childNodeList4 = elementchild3.getElementsByTagName("pod");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;
											NodeList childNodeList5 = elementchild4.getElementsByTagName("pod-entries");
											for (int d = 0; d < childNodeList5.getLength(); d++) {
												Node ChildNode5 = childNodeList5.item(d);
												if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
													Element elementchild5 = (Element) ChildNode5;
													NodeList childNodeList6 = elementchild5
															.getElementsByTagName("sync");

													childNodeList6 = elementchild5
															.getElementsByTagName("external-interfaces");
													for (int e = 0; e < childNodeList6.getLength(); e++) {
														Node ChildNode6 = childNodeList6.item(e);
														if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {
															Element elementchild6 = (Element) ChildNode6;
															NodeList childNodeList7 = elementchild6
																	.getElementsByTagName("ipv6-address");
															for (int f = 0; f < childNodeList7.getLength(); f++) {
																Node ChildNode7 = childNodeList7.item(f);
																if (Node.ELEMENT_NODE == ChildNode7.getNodeType()) {
																	Element elementchild7 = (Element) ChildNode7;
																	LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																	Iterator<String> itr = headerList1.iterator();
																	String header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild5, header));
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild5, header));
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild6, header));

																	while (itr.hasNext()) {
																		header = itr.next();
																		objtableData.put(header, getXmlElementData(
																				elementchild7, header));
																	}
																	tabelData1.add(objtableData);
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			StringBuilder auditIssue21 = new StringBuilder();
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String neid = "";
			String f1uIpAddr = "";
			String f1cIpAddr = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}

			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"vDUHELM(Day0)Orchestrator", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("addr0")) {
					f1uIpAddr = listOfCiqDetails.get(0).getCiqMap().get("addr0").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("addr")) {
					f1cIpAddr = listOfCiqDetails.get(0).getCiqMap().get("addr").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";

			StringBuilder tableData = new StringBuilder();
			if (tabelData1.size() != 4) {
				auditIssue21.append("LS3 vDU should have 4 external interfaces" + "\n");
			}
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository.getAuditConstantsEntityList(
						AuditConstants.PROGRAMNAME_5G_DSS, tdData.get("pod-type").trim() + "_ip",
						tdData.get("interface-name").trim());
				String ip = "::";
				if (!ObjectUtils.isEmpty(auditConstantsList)) {
					ip = auditConstantsList.get(0).getParameterValue().trim();
				} else if (tdData.get("pod-type").equalsIgnoreCase("dpp")
						&& tdData.get("interface-name").equalsIgnoreCase("mh0")) {
					ip = f1uIpAddr;
				} else if (tdData.get("pod-type").equalsIgnoreCase("dip")
						&& tdData.get("interface-name").equalsIgnoreCase("mh0")) {
					ip = f1cIpAddr;
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("ip")) {
						if (compareIPAddr(ip, value.trim())) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue21.append("pod-type : " + tdData.get("pod-type") + " interface-name : "
									+ tdData.get("interface-name") + " ip : " + value + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");

			if (auditIssue21.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(21, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue21.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(21, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(21, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditMmuSerialNum(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("o-ran-ru-id");
			headerList1.add("name");
			headerList1.add("class");
			headerList1.add("serial-num");
			headerList1.add("hardware-rev");
			headerList1.add("mfg-name");
			headerList1.add("mfg-date");
			headerList1.add("product-code");
			headerList1.add("dying-gasp-support");
			headerList1.add("dynamic-power-amplifier-control-enabled");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("o-ran-radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("o-ran-hardware");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("component");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(element, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}
			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String enb4G = "";
			List<CIQDetailsModel> listOfCiqDetailsd1 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {

				if (listOfCiqDetailsd1.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetailsd1.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"vDUDay_2", "eNBId");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			StringBuilder auditIssue = new StringBuilder();
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			StringBuilder auditIssue9 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String oruid = "";
				String serialNumber = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("serial-number") && ciqData.getCiqMap().get("serial-number")
								.getHeaderValue().trim().equalsIgnoreCase(tdData.get("serial-num").trim())) {
							serialNumber = tdData.get("serial-num").trim();
							if (ciqData.getCiqMap().containsKey("sector-id")) {
								oruid = ciqData.getCiqMap().get("sector-id").getHeaderValue().trim();
							}
						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("serial-num")) {
						if (value.trim().equalsIgnoreCase(serialNumber)) {
							/*
							 * if(oruid.equalsIgnoreCase(tdData.get("o-ran-ru-id").trim())) {
							 * tableData.append("<td align=center>" + value + "</td>\n"); } else {
							 * if(tdData.get("o-ran-ru-id").trim().equals("0") && oruid.equals("1")) {
							 * auditIssue4.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +
							 * " serial-num : " + tdData.get("serial-num") + "\n"); } else
							 * if(tdData.get("o-ran-ru-id").trim().equals("0") && oruid.equals("2")) {
							 * auditIssue5.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +
							 * " serial-num : " + tdData.get("serial-num") + "\n"); } else
							 * if(tdData.get("o-ran-ru-id").trim().equals("1") && oruid.equals("0")) {
							 * auditIssue6.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +
							 * " serial-num : " + tdData.get("serial-num") + "\n"); } else
							 * if(tdData.get("o-ran-ru-id").trim().equals("1") && oruid.equals("2")) {
							 * auditIssue7.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +
							 * " serial-num : " + tdData.get("serial-num") + "\n"); } else
							 * if(tdData.get("o-ran-ru-id").trim().equals("2") && oruid.equals("0")) {
							 * auditIssue8.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +
							 * " serial-num : " + tdData.get("serial-num") + "\n"); } else
							 * if(tdData.get("o-ran-ru-id").trim().equals("2") && oruid.equals("1")) {
							 * auditIssue9.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +
							 * " serial-num : " + tdData.get("serial-num") + "\n"); }
							 * tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							 * }
							 */
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							/*
							 * tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							 * if(tdData.get("o-ran-ru-id").trim().equals("0")) {
							 * auditIssue1.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +
							 * " serial-num : " + tdData.get("serial-num") + "\n"); } else
							 * if(tdData.get("o-ran-ru-id").trim().equals("1")) {
							 * auditIssue2.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +
							 * " serial-num : " + tdData.get("serial-num") + "\n"); } else
							 * if(tdData.get("o-ran-ru-id").trim().equals("2")) {
							 * auditIssue3.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +
							 * " serial-num : " + tdData.get("serial-num") + "\n"); } else {
							 * auditIssue.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") +
							 * " serial-num : " + tdData.get("serial-num") + "\n"); }
							 */
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else

					{
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
			/*
			 * if(auditIssue.length() != 0) {
			 * audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(58,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue.toString()); } if(auditIssue1.length() != 0) {
			 * audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(61,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue1.toString()); } if(auditIssue2.length() != 0) {
			 * audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(62,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue2.toString()); } if(auditIssue3.length() != 0) {
			 * audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(63,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue3.toString()); }
			 */
			/*
			 * if(auditIssue4.length() != 0) {
			 * audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(52,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue4.toString()); } if(auditIssue5.length() != 0) {
			 * audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(53,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue5.toString()); } if(auditIssue6.length() != 0) {
			 * audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(54,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue6.toString()); } if(auditIssue7.length() != 0) {
			 * audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(55,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue7.toString()); } if(auditIssue8.length() != 0) {
			 * audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(56,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue8.toString()); } if(auditIssue9.length() != 0) {
			 * audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(57,
			 * runTestEntity.getId(), enbId.replaceAll("^0+(?!$)", ""),
			 * auditIssue9.toString()); }
			 */
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditDSSDAY2(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry5 = "spectrum-sharing-scheduler-config";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cell-identity");
			headerList5.add("spectrum-sharing");
			headerList5.add("dl-prb-usage-threshold-for-increasing-nr-resource");
			headerList5.add("ul-prb-usage-threshold-for-increasing-nr-resource");
			headerList5.add("dl-pdcch-fail-threshold-for-increasing-nr-resource");
			headerList5.add("ul-pdcch-fail-threshold-for-increasing-nr-resource");
			headerList5.add("slot-level-operation-mode");
			headerList5.add("dss-target-lte-cell-num");
			headerList5.add("end-point-dss-index");
			headerList5.add("sa-early-crs-rate-matching-after-msg4-enable");

			String entry8 = "end-point-f1c";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("gnb-cu-cp-name");
			headerList8.add("remote-ip-address");
			headerList8.add("secondary-remote-ip-address");
			headerList8.add("sctp-state");
			headerList8.add("f1-ap-state");

			String entry9 = "vru-entries";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("fsu-id");
			headerList9.add("vru-id");
			headerList9.add("unit-type");
			headerList9.add("serial-number");
			headerList9.add("support-cell-number");
			headerList9.add("operational-mode");

			String entry10 = "cuplane-interfaces";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("fsu-id");
			headerList10.add("connected-pod-type");
			headerList10.add("connected-pod-id");
			headerList10.add("connected-pod-port-id");
			headerList10.add("connected-fsu-port-id");
			headerList10.add("vlan-id");
			headerList10.add("support-cell-number");

			String entry11 = "sharing-info";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("fsu-id");
			headerList11.add("vru-id");
			headerList11.add("sharing-enabled");

			String entry12 = "active-alarm-entries";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("alarm-unit-type");
			headerList12.add("alarm-type");
			headerList12.add("probable-cause");
			headerList12.add("specific-problem");
			headerList12.add("severity");
			headerList12.add("location");

			String entry13 = "dl-antenna-count";
			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("cell-identity");
			headerList13.add("cell-num");
			headerList13.add("user-label");
			headerList13.add("dl-antenna-count");

			String entry14 = "ul-antenna-count";
			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("cell-identity");
			headerList14.add("cell-num");
			headerList14.add("user-label");
			headerList14.add("ul-antenna-count");
			headerList14.add("number-of-rx-paths-per-ru");

			String entry15 = "cell-physical-conf-idle";
			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("cell-identity");
			headerList15.add("cell-num");
			headerList15.add("user-label");
			headerList15.add("nr-physical-cell-id");
			headerList15.add("nr-arfcn-dl");
			headerList15.add("nr-arfcn-ul");
			headerList15.add("nr-bandwidth-dl");
			headerList15.add("nr-bandwidth-ul");

			String entry16 = "gutran-du-cell-entries";
			LinkedHashSet<String> headerList16 = new LinkedHashSet<>();
			headerList16.add("cell-identity");
			headerList16.add("cell-num");
			headerList16.add("cell-path-type");
			headerList16.add("administrative-state");
			headerList16.add("operational-state");
			headerList16.add("activation-state");
			headerList16.add("dpp-id");
			headerList16.add("user-label");
			headerList16.add("test-flag");
			headerList16.add("power");
			headerList16.add("subcarrier-spacing-common");
			headerList16.add("dl-subcarrier-spacing");
			headerList16.add("ul-subcarrier-spacing");
			headerList16.add("auto-unlock-flag");

			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData16 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;
					NodeList childNodeList3 = elementchild1.getElementsByTagName("gutran-du-cell");
					for (int k = 0; k < childNodeList3.getLength(); k++) {
						Node ChildNode3 = childNodeList3.item(k);
						if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
							Element elementchild3 = (Element) ChildNode3;
							NodeList childNodeList4 = elementchild3.getElementsByTagName("gutran-du-cell-entries");
							for (int m = 0; m < childNodeList4.getLength(); m++) {
								Node ChildNode4 = childNodeList4.item(m);
								if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {

									Element elementchild5 = (Element) ChildNode4;
									NodeList nodelist = elementchild5
											.getElementsByTagName("spectrum-sharing-scheduler-config");
									for (int n = 0; n < nodelist.getLength(); n++) {
										Node ChildNode5 = nodelist.item(k);
										if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {
											Element elementchild6 = (Element) ChildNode5;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList5.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild5, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild6, header));
											}
											tabelData5.add(objtableData);
										}
									}

								}
							}

						}
					}

					NodeList childNodeList2 = elementchild1.getElementsByTagName("gnb-du-function");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList32 = elementchild2.getElementsByTagName("gutran-du-cell-entries");
							for (int k = 0; k < childNodeList32.getLength(); k++) {
								Node ChildNode3 = childNodeList32.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									NodeList childNodeList4 = elementchild3
											.getElementsByTagName("dl-physical-resource-config");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList13.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData13.add(objtableData);
										}
									}

									childNodeList4 = elementchild3.getElementsByTagName("ul-physical-resource-config");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList14.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData14.add(objtableData);
										}
									}

									childNodeList4 = elementchild3.getElementsByTagName("cell-physical-conf-idle");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList15.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData15.add(objtableData);
										}
									}

									/*
									 * LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									 * Iterator<String> itr = headerList16.iterator(); String header = itr.next();
									 * objtableData.put(header, getXmlElementData(elementchild3, header)); while
									 * (itr.hasNext()) { header = itr.next(); objtableData.put(header,
									 * getXmlElementData(elementchild3, header)); } tabelData16.add(objtableData);
									 */
								}
							}
						}
					}

					NodeList nodelist = elementchild1.getElementsByTagName("fsu-entries");
					for (int k = 0; k < nodelist.getLength(); k++) {
						Node ChildNode = nodelist.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							NodeList nodelist1 = elementchild6.getElementsByTagName("vru-entries");
							for (int a = 0; a < nodelist1.getLength(); a++) {
								Node ChildNodex = nodelist1.item(a);
								if (Node.ELEMENT_NODE == ChildNodex.getNodeType()) {
									Element elementchild7 = (Element) ChildNodex;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList9.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild6, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild7, header));
									}
									tabelData9.add(objtableData);

									objtableData = new LinkedHashMap<>();
									itr = headerList11.iterator();
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild6, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild7, header));
									}
									tabelData11.add(objtableData);

								}
							}
						}

					}

					nodelist = elementchild1.getElementsByTagName("fsu-entries");
					for (int k = 0; k < nodelist.getLength(); k++) {
						Node ChildNode = nodelist.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							NodeList nodelist1 = elementchild6.getElementsByTagName("cuplane-interfaces");
							for (int a = 0; a < nodelist1.getLength(); a++) {
								Node ChildNodex = nodelist1.item(a);
								if (Node.ELEMENT_NODE == ChildNodex.getNodeType()) {
									Element elementchild7 = (Element) ChildNodex;

									NodeList nodelist2 = elementchild7.getElementsByTagName("support-cell-number");
									for (int b = 0; b < nodelist2.getLength(); b++) {
										Node ChildNode2 = nodelist2.item(b);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList10.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild6, header));

											while (itr.hasNext()) {
												header = itr.next();
												if (header.equals("support-cell-number")) {
													objtableData.put(header, ChildNode2.getTextContent());
												} else {
													objtableData.put(header, getXmlElementData(elementchild7, header));
												}
											}
											tabelData10.add(objtableData);
										}
									}

								}
							}
						}

					}

					NodeList nodelist1 = elementchild1.getElementsByTagName("end-point-f1c");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;

							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							objtableData.put("gnb-cu-cp-name", getXmlElementData(elementchild6, "gnb-cu-cp-name"));
							objtableData.put("remote-ip-address",
									getXmlElementData(elementchild6, "remote-ip-address"));
							objtableData.put("secondary-remote-ip-address",
									getXmlElementData(elementchild6, "secondary-remote-ip-address"));
							objtableData.put("sctp-state", getXmlElementData(elementchild6, "sctp-state"));
							objtableData.put("f1-ap-state", getXmlElementData(elementchild6, "f1-ap-state"));
							tabelData8.add(objtableData);

						}

					}

					nodelist1 = elementchild1.getElementsByTagName("active-alarm-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList12.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData12.add(objtableData);
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue7 = new StringBuilder();

			StringBuilder auditIssue9 = new StringBuilder();
			StringBuilder auditIssue10 = new StringBuilder();
			StringBuilder auditIssue11 = new StringBuilder();
			StringBuilder auditIssue12 = new StringBuilder();
			StringBuilder auditIssue13 = new StringBuilder();
			StringBuilder auditIssue14 = new StringBuilder();
			StringBuilder auditIssue15 = new StringBuilder();
			StringBuilder auditIssue16 = new StringBuilder();
			StringBuilder auditIssue17 = new StringBuilder();
			StringBuilder auditIssue18 = new StringBuilder();
			StringBuilder auditIssue19 = new StringBuilder();
			StringBuilder auditIssue20 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String neid = "";
			String remoteIp = "";
			String gnbcuIpAddr = "";
			String enb4G = "";
			String f1uIpAddr = "";
			String f1cIpAddr = "";
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("EndpointCUIPaddress")) {
					gnbcuIpAddr = listOfCiqDetails.get(0).getCiqMap().get("EndpointCUIPaddress").getHeaderValue()
							.trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName, "DSS_MOP_Parameters-1",
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)
					&& listOfCiqDetails.get(0).getCiqMap().containsKey("remote-ip-address")) {
				remoteIp = listOfCiqDetails.get(0).getCiqMap().get("remote-ip-address").getHeaderValue().trim();
			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName,
					"vDUHELM(Day0)Orchestrator", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("addr0")) {
					f1uIpAddr = listOfCiqDetails.get(0).getCiqMap().get("addr0").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("addr")) {
					f1cIpAddr = listOfCiqDetails.get(0).getCiqMap().get("addr").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			List<CIQDetailsModel> listOfCiqDetailsDay2 = getCiqDetailsForRuleValidationsheet(enb4G,
					dbcollectionFileName, "vDUDay_2", "eNBId");

			// spectrum-sharing-scheduler-config
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList5) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData5) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("spectrum-sharing")) {
						if (value.equals("true")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue7.append("dss-index : " + tdData.get("dss-index") + " enb-id : "
									+ tdData.get("enb-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// virtual-port-entries

			// external-interfaces

			// end-point-f1c
			if (!gnbcuIpAddr.isEmpty() && !ObjectUtils.isEmpty(tabelData8)) {
				if (compareIPAddr(gnbcuIpAddr, tabelData8.get(0).get("remote-ip-address"))) {
					gnbcuIpAddr = tabelData8.get(0).get("remote-ip-address");
				}
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList8.size() + " bgcolor=#EEEEEE><b>" + entry8 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList8) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData8) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("sctp-state")) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue9.append("gnb-cu-cp-name : " + tdData.get("gnb-cu-cp-name") + " sctp-state : "
									+ tdData.get("sctp-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("f1-ap-state")) {
						if (value.equals("enabled")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue10.append("gnb-cu-cp-name : " + tdData.get("gnb-cu-cp-name") + " f1-ap-state : "
									+ tdData.get("f1-ap-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("remote-ip-address")) {
						if (value.equals(gnbcuIpAddr)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue11.append("gnb-cu-cp-name : " + tdData.get("gnb-cu-cp-name")
									+ " remote-ip-address : " + tdData.get("remote-ip-address") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// vru-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList9.size() + " bgcolor=#EEEEEE><b>" + entry9 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList9) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData9) {
				tableData.append("<tr>\n");
				String fsuid = "";
				String vruid = "";
				String unitType = "";
				String supportcellNum = "";
				String operationalMode = "normal-mode";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("fsu-id")
								&& ciqData.getCiqMap().get("fsu-id").getHeaderValue().trim()
										.equals(tdData.get("fsu-id").trim())
								&& ciqData.getCiqMap().containsKey("support-cell-number")
								&& ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim()
										.equals(tdData.get("support-cell-number").trim())) {
							fsuid = tdData.get("fsu-id").trim();
							if (ciqData.getCiqMap().containsKey("unit-type")) {
								unitType = ciqData.getCiqMap().get("unit-type").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("vru-id")) {
								vruid = ciqData.getCiqMap().get("vru-id").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("support-cell-number")) {
								supportcellNum = ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim();
							}
						}
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("fsu-id") || key.equals("vru-id") || key.equals("unit-type")
							|| key.equals("support-cell-number") || key.equals("operational-mode")) {
						if (value.equalsIgnoreCase(fsuid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(vruid) && key.equals("vru-id")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(unitType)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(supportcellNum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(operationalMode)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if (!entryPresent)
								auditIssue13.append("fsu-id : " + tdData.get("fsu-id") + " vru-id : "
										+ tdData.get("vru-id") + " unit-type : " + tdData.get("unit-type")
										+ " support-cell-number : " + tdData.get("support-cell-number")
										+ " operational-mode : " + tdData.get("operational-mode") + "\n");
							entryPresent = true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// cuplane-interfaces
			htmlContent.append(
					"<tr><td colspan=" + headerList10.size() + " bgcolor=#EEEEEE><b>" + entry10 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList10) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData10) {
				tableData.append("<tr>\n");
				String fsuid = "";
				String podType = "";
				String podID = "";
				String portID = "";
				String fsuportID = "";
				String vlanID = "";
				String supportcellNum = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("fsu-id")
								&& ciqData.getCiqMap().get("fsu-id").getHeaderValue().trim()
										.equals(tdData.get("fsu-id").trim())
								&& ciqData.getCiqMap().containsKey("support-cell-number")
								&& ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim()
										.equals(tdData.get("support-cell-number").trim())) {
							fsuid = tdData.get("fsu-id").trim();
							if (ciqData.getCiqMap().containsKey("connected-pod-type")) {
								podType = ciqData.getCiqMap().get("connected-pod-type").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("connected-pod-id")) {
								podID = ciqData.getCiqMap().get("connected-pod-id").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("connected-pod-port-id")) {
								portID = ciqData.getCiqMap().get("connected-pod-port-id").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("vlan-id")) {
								vlanID = ciqData.getCiqMap().get("vlan-id").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("support-cell-number")) {
								supportcellNum = ciqData.getCiqMap().get("support-cell-number").getHeaderValue().trim();
							}
						}
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("fsu-id") || key.equals("connected-pod-type") || key.equals("connected-pod-id")
							|| key.equals("support-cell-number") || key.equals("connected-pod-port-id")
							|| key.equalsIgnoreCase("vlan-id")) {
						if (value.equalsIgnoreCase(fsuid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(podType)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(podID) && key.equals("connected-pod-id")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(supportcellNum) && key.equals("support-cell-number")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(portID) && key.equals("connected-pod-port-id")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(vlanID) && key.equals("vlan-id")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if (!entryPresent)
								auditIssue14.append("fsu-id : " + tdData.get("fsu-id") + " connected-pod-type : "
										+ tdData.get("connected-pod-type") + " connected-pod-id : "
										+ tdData.get("connected-pod-id") + " support-cell-number : "
										+ tdData.get("support-cell-number") + " connected-pod-port-id : "
										+ tdData.get("connected-pod-port-id") + " connected-fsu-port-id : "
										+ tdData.get("connected-fsu-port-id") + " vlan-id : " + tdData.get("vlan-id")
										+ "\n");
							entryPresent = true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// sharing-info
			htmlContent.append(
					"<tr><td colspan=" + headerList11.size() + " bgcolor=#EEEEEE><b>" + entry11 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList11) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData11) {
				tableData.append("<tr>\n");
				String fsuid = "";
				String vruid = "";
				String sharingEnable = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("fsu-id")
								&& ciqData.getCiqMap().get("fsu-id").getHeaderValue().trim()
										.equals(tdData.get("fsu-id").trim())
								&& ciqData.getCiqMap().containsKey("vru-id") && ciqData.getCiqMap().get("vru-id")
										.getHeaderValue().trim().equals(tdData.get("vru-id").trim())) {
							fsuid = tdData.get("fsu-id").trim();
							if (ciqData.getCiqMap().containsKey("vru-id")) {
								vruid = ciqData.getCiqMap().get("vru-id").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("sharing-enabled")) {
								sharingEnable = ciqData.getCiqMap().get("sharing-enabled").getHeaderValue().trim();
							}
						}
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("fsu-id") || key.equals("vru-id") || key.equals("sharing-enabled")) {
						if (value.equalsIgnoreCase(fsuid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(vruid) && key.equals("vru-id")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if (value.equalsIgnoreCase(sharingEnable)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if (!entryPresent)
								auditIssue15
										.append("fsu-id : " + tdData.get("fsu-id") + " vru-id : " + tdData.get("vru-id")
												+ " sharing-enabled : " + tdData.get("sharing-enabled") + "\n");
							entryPresent = true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// active-alarm-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList12.size() + " bgcolor=#EEEEEE><b>" + entry12 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList12) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData12) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (value.equals("service-off")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue12.append("alarm-type : " + tdData.get("alarm-type") + " probable-cause : "
									+ tdData.get("probable-cause") + " specific-problem : "
									+ tdData.get("specific-problem") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			// dl-antenna-count
			htmlContent.append(
					"<tr><td colspan=" + headerList13.size() + " bgcolor=#EEEEEE><b>" + entry13 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList13) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData13) {
				tableData.append("<tr>\n");
				String cellid = "";
				String dlantennaCount = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("dl-antenna-count")) {
								dlantennaCount = ciqData.getCiqMap().get("dl-antenna-count").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("dl-antenna-count")) {
						if (value.equals(dlantennaCount)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue16.append("cell-identity : " + tdData.get("cell-identity")
									+ " dl-antenna-count : " + tdData.get("dl-antenna-count") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// ul-antenna-count
			htmlContent.append(
					"<tr><td colspan=" + headerList14.size() + " bgcolor=#EEEEEE><b>" + entry14 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList14) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData14) {
				tableData.append("<tr>\n");
				String cellid = "";
				String ulantennaCount = "";
				String rxpath = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("ul-antenna-count")) {
								ulantennaCount = ciqData.getCiqMap().get("ul-antenna-count").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("number-of-rx-paths-per-ru")) {
								rxpath = ciqData.getCiqMap().get("number-of-rx-paths-per-ru").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("ul-antenna-count")) {
						if (value.equals(ulantennaCount)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue17.append("cell-identity : " + tdData.get("cell-identity")
									+ " ul-antenna-count : " + tdData.get("ul-antenna-count") + "\n");
						}
					} else if (key.equals("number-of-rx-paths-per-ru")) {
						if (value.equals(rxpath)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue18.append("cell-identity : " + tdData.get("cell-identity")
									+ " number-of-rx-paths-per-ru : " + tdData.get("number-of-rx-paths-per-ru") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// cell-physical-conf-idle
			htmlContent.append(
					"<tr><td colspan=" + headerList15.size() + " bgcolor=#EEEEEE><b>" + entry15 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList15) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData15) {
				tableData.append("<tr>\n");
				String cellid = "";
				String nrPci = "";
				String arfcndl = "";
				String arfcnul = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsDay2)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsDay2) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellid = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("nr-arfcn-dl")) {
								arfcndl = ciqData.getCiqMap().get("nr-arfcn-dl").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("nr-arfcn-ul")) {
								arfcnul = ciqData.getCiqMap().get("nr-arfcn-ul").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("nr-physical-cell-id")) {
								nrPci = ciqData.getCiqMap().get("nr-physical-cell-id").getHeaderValue().trim();
							}
						}
					}
				}
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("nr-physical-cell-id")) {
						if (value.equals(nrPci)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue19.append("cell-identity : " + tdData.get("cell-identity")
										+ " nr-physical-cell-id : " + tdData.get("nr-physical-cell-id")
										+ " nr-arfcn-dl: " + tdData.get("nr-arfcn-dl") + " nr-arfcn-ul : "
										+ tdData.get("nr-arfcn-ul") + "\n");
								entryPresent = true;
							}
						}
					} else if (key.equals("nr-arfcn-dl")) {
						if (value.equals(arfcndl)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue19.append("cell-identity : " + tdData.get("cell-identity")
										+ " nr-physical-cell-id : " + tdData.get("nr-physical-cell-id")
										+ " nr-arfcn-dl: " + tdData.get("nr-arfcn-dl") + " nr-arfcn-ul : "
										+ tdData.get("nr-arfcn-ul") + "\n");
								entryPresent = true;
							}
						}
					} else if (key.equals("nr-arfcn-ul")) {
						if (value.equals(arfcnul)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							if (!entryPresent) {
								auditIssue19.append("cell-identity : " + tdData.get("cell-identity")
										+ " nr-physical-cell-id : " + tdData.get("nr-physical-cell-id")
										+ " nr-arfcn-dl: " + tdData.get("nr-arfcn-dl") + " nr-arfcn-ul : "
										+ tdData.get("nr-arfcn-ul") + "\n");
								entryPresent = true;
							}
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// gutran-du-cell-entries
			/*
			 * htmlContent .append("<tr><td colspan=" + headerList16.size() +
			 * " bgcolor=#EEEEEE><b>" + entry16 + "</b></td></tr>\n"); tableHeader = "";
			 * tableHeader = tableHeader + "<tr>\n"; for (String headerName : headerList16)
			 * { tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n"; }
			 * 
			 * tableHeader = tableHeader + "</tr>\n"; tableData = new StringBuilder(); for
			 * (LinkedHashMap<String, String> tdData : tabelData16) {
			 * tableData.append("<tr>\n"); String cellPathType = "";
			 * List<AuditConstantsEntity> auditConstantsList =
			 * auditConstantsRepository.getAuditConstantsEntityList(AuditConstants.
			 * PROGRAMNAME_5G_DSS, "cell-path-type");
			 * if(!ObjectUtils.isEmpty(auditConstantsList)) { cellPathType =
			 * auditConstantsList.get(0).getParameterValue().trim(); } for
			 * (Map.Entry<String, String> resultTableData : tdData.entrySet()) { String key
			 * = resultTableData.getKey(); String value = resultTableData.getValue(); if
			 * (key.equals("cell-path-type")) { if (value.equals(cellPathType)) {
			 * tableData.append("<td align=center>" + value + "</td>\n"); } else {
			 * tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
			 * auditIssue20.append("cell-identity : " + tdData.get("cell-identity") +
			 * " cell-path-type : " + tdData.get("cell-path-type") + "\n"); } } else {
			 * tableData.append("<td align=center>" + value + "</td>\n"); } }
			 * tableData.append("</tr>\n");
			 * 
			 * } htmlContent.append(tableHeader); htmlContent.append(tableData);
			 * 
			 */
			if (auditIssue7.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
			}

			if (auditIssue9.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue9.toString());
			}
			if (auditIssue10.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(10, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue10.toString());
			}
			if (auditIssue11.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(11, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue11.toString());
			}
			if (auditIssue12.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(12, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue12.toString());
			}
			if (auditIssue13.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(13, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue13.toString());
			}
			if (auditIssue14.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue14.toString());
			}
			if (auditIssue15.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue15.toString());
			}
			if (auditIssue16.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue16.toString());
			}
			if (auditIssue17.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue17.toString());
			}
			if (auditIssue18.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue18.toString());
			}
			if (auditIssue19.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue19.toString());
			}
			if (auditIssue20.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(20, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue20.toString());
			}

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder getvDUAuditDSSGutranDuCell(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("cell-num");
			headerList1.add("cell-path-type");
			headerList1.add("administrative-state");
			headerList1.add("operational-state");
			headerList1.add("activation-state");
			headerList1.add("dpp-id");
			headerList1.add("user-label");
			headerList1.add("test-flag");
			headerList1.add("power");
			headerList1.add("subcarrier-spacing-common");
			headerList1.add("dl-subcarrier-spacing");
			headerList1.add("ul-subcarrier-spacing");
			headerList1.add("auto-unlock-flag");
			headerList1.add("dl-subcarrier-spacing");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild = (Element) inChildNode;

					// clock-unit
					NodeList childNodeList1 = elementchild.getElementsByTagName("gutran-du-cell");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							// ucr
							NodeList childNodeList2 = elementchild1.getElementsByTagName("gutran-du-cell-entries");
							for (int l = 0; l < childNodeList2.getLength(); l++) {
								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();

									objtableData.put(header, getXmlElementData(elementchild2, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}

			checkEmptyTableDss(tabelData1, command, runTestEntity, enbId);

			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			String enb4G = "";
			List<CIQDetailsModel> listOfCiqDetailsd1 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {

				if (listOfCiqDetailsd1.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetailsd1.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"vDUDay_2", "eNBId");

			StringBuilder cellIdentityAuditIssue = new StringBuilder();
			StringBuilder cellNumAuditIssue = new StringBuilder();
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String cellidentity = "";
				String cellnum = "";

				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							cellidentity = tdData.get("cell-identity");

							if (ciqData.getCiqMap().containsKey("cell-num")) {
								cellnum = ciqData.getCiqMap().get("cell-num").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(cellidentity)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							cellIdentityAuditIssue.append("cell-identity: " + tdData.get("cell-identity") + "\n");
						}
					} else if (key.equals("cell-num")) {
						if (value.equals(cellnum)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							cellNumAuditIssue.append("cell-num : " + tdData.get("cell-num") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			if (cellIdentityAuditIssue.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), cellIdentityAuditIssue.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(45, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (cellNumAuditIssue.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(46, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), cellNumAuditIssue.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(46, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else { 
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(46, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditDSSNRFrequency(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("nr-frequency-band-index");
			headerList1.add("nr-frequency-band");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild = (Element) inChildNode;

					// clock-unit
					NodeList childNodeList1 = elementchild.getElementsByTagName("gutran-du-cell-entries");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							// ucr
							NodeList childNodeList2 = elementchild1.getElementsByTagName("nr-frequency-band-info");
							for (int l = 0; l < childNodeList2.getLength(); l++) {
								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();

									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}

			checkEmptyTableDss(tabelData1, command, runTestEntity, enbId);
			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String enb4G = "";
			List<CIQDetailsModel> listOfCiqDetailsd1 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {

				if (listOfCiqDetailsd1.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetailsd1.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"vDUDay_2", "eNBId");

			StringBuilder nrFreqAuditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String nrfrequency1 = "";

				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {

						if (ciqData.getCiqMap().containsKey("nrfrequency")) {
							nrfrequency1 = ciqData.getCiqMap().get("nrfrequency").getHeaderValue().trim();
						}

					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("nr-frequency-band")) {
						if (value.equals(nrfrequency1)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							nrFreqAuditIssue.append("nr-frequency-band : " + tdData.get("nr-frequency-band") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			
			auditIssueAll.append(nrFreqAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (nrFreqAuditIssue.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(47, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), nrFreqAuditIssue.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(47, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(47, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getvDUAuditPrachConfig(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("total-number-of-ra-preambles");
			headerList1.add("prach-sequence-length");
			headerList1.add("zero-correlation-zone-config");
			headerList1.add("restricted-set-config");
			headerList1.add("preamble-receiver-target-power");
			headerList1.add("msg1-subcarrier-spacing");
			headerList1.add("rsrp-threshold");
			headerList1.add("msg1-frequency-start");
			headerList1.add("prach-root-sequence-index");
			headerList1.add("ra-contention-resolution-timer");
			headerList1.add("power-ramping-step");
			headerList1.add("preamble-trans-max");
			headerList1.add("msg1-fdm");
			headerList1.add("prach-configuration-index");
			headerList1.add("ssb-per-rach-occasion-choice");
			headerList1.add("cb-preambles-per-ssb");
			headerList1.add("auto-configure-prach-rb-offset-on-off");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild = (Element) inChildNode;// clock-unit
					NodeList childNodeList1 = elementchild.getElementsByTagName("gutran-du-cell-entries");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							// ucr
							NodeList childNodeList2 = elementchild1.getElementsByTagName("prach-config");
							for (int l = 0; l < childNodeList2.getLength(); l++) {
								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();

									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}

			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String pciNR = "";
			String enb4G = "";
			List<CIQDetailsModel> listOfCiqDetailsd1 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {

				if (listOfCiqDetailsd1.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetailsd1.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetailsd1.get(0).getCiqMap().containsKey("PRACH_Configuration_Index_NR")) {
					pciNR = listOfCiqDetailsd1.get(0).getCiqMap().get("PRACH_Configuration_Index_NR").getHeaderValue()
							.trim().replaceAll("^0+(?!$)", "");
				}
			}

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"vDUDay_2", "eNBId");

			StringBuilder zczcAuditIssue = new StringBuilder();
			StringBuilder rsiAuditIssue = new StringBuilder();
			StringBuilder configAuditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String prachzczc = "";
				String prachrsi = "";
				String CellId = "";
				boolean rsiInRange = false;
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("cell-identity") && ciqData.getCiqMap().get("cell-identity")
								.getHeaderValue().trim().equals(tdData.get("cell-identity").trim())) {
							CellId = tdData.get("cell-identity");
							if (ciqData.getCiqMap().containsKey("prachzczc")) {
								prachzczc = ciqData.getCiqMap().get("prachzczc").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("prachrsi")) {
								prachrsi = ciqData.getCiqMap().get("prachrsi").getHeaderValue().trim();
								rsiInRange = inRange(prachrsi, tdData.get("prach-root-sequence-index").trim());
							}

						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cell-identity")) {
						if (value.equals(CellId)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("zero-correlation-zone-config")) {
						if (value.equals(prachzczc)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							zczcAuditIssue.append("zero-correlation-zone-config : "
									+ tdData.get("zero-correlation-zone-config") + "\n");
						}
					} else if (key.equals("prach-root-sequence-index")) {
						if (rsiInRange || value.equals(prachrsi) || value.toLowerCase().contains("auto")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							rsiAuditIssue.append(
									"prach-root-sequence-index : " + tdData.get("prach-root-sequence-index") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(zczcAuditIssue);
			auditIssueAll.append(rsiAuditIssue);
			auditIssueAll.append(configAuditIssue);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (zczcAuditIssue.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(48, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), zczcAuditIssue.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(48, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(48, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (rsiAuditIssue.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(49, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), rsiAuditIssue.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(49, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(49, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (configAuditIssue.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), configAuditIssue.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public boolean inRange(String ciq, String sane) {

		try {
			if (ciq.contains("-")) {
				String[] val = ciq.split("-", 2);
				Integer val1 = Integer.parseInt(val[0]);

				Integer val2 = Integer.parseInt(val[1]);

				if (val1.equals(null)) {
					return false;
				}
				if (val2.equals(null)) {
					val2 = val1;
				}
				Integer response = Integer.parseInt(sane);
				if (response >= val1 && response <= val2) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}

		} catch (Exception e) {

			logger.error(ExceptionUtils.getFullStackTrace(e));
			return false;
		}

	}

	static boolean versionCompare(String v1, String v2) {
		try {
			int vnum1 = 0, vnum2 = 0;

			for (int i = 0, j = 0; (i < v1.length() || j < v2.length());) {
				while (i < v1.length() && v1.charAt(i) != '.') {
					vnum1 = vnum1 * 10 + (v1.charAt(i) - '0');
					i++;
				}

				while (j < v2.length() && v2.charAt(j) != '.') {
					vnum2 = vnum2 * 10 + (v2.charAt(j) - '0');
					j++;
				}

				if (vnum1 > vnum2)
					return false;
				if (vnum2 > vnum1)
					return true;

				vnum1 = vnum2 = 0;
				i++;
				j++;
			}
			return true;
		} catch (Exception e) {

			logger.error(ExceptionUtils.getFullStackTrace(e));
			return false;
		}
	}

	// FSU START
	public StringBuilder fsuaudit(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("db-backup-result");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					objtableData.put("db-backup-result", getXmlElementData(element, "db-backup-result"));
					tabelData1.add(objtableData);
				}
			}

			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			;
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getFsuPostChecks(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String entry1 = "ru-cpri-port-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("group-id");
			headerList1.add("connected-du-cpri-port-id");
			headerList1.add("tx-wavelength");
			headerList1.add("tx-power");
			headerList1.add("rx-power");
			headerList1.add("temperature");
			headerList1.add("bit-rate");
			headerList1.add("voltage");
			headerList1.add("electric-current");
			headerList1.add("cpri-speed-saved");
			String entry2 = "du-cpri-port-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("unit-type");
			headerList2.add("unit-id");
			headerList2.add("port-id");
			headerList2.add("enb-ne-id");
			headerList2.add("enb-inode-id");
			headerList2.add("connected-enb-digital-unit-board-id");
			headerList2.add("connected-enb-digital-unit-port-id");
			headerList2.add("cascade-radio-unit-id");
			headerList2.add("tx-wavelength");
			headerList2.add("tx-power");
			headerList2.add("rx-power");
			headerList2.add("temperature");
			headerList2.add("bit-rate");
			headerList2.add("voltage");
			headerList2.add("electric-current");
			headerList2.add("cpri-speed-saved");
			headerList2.add("du-cpri-port-mode");

			String entry3 = "operational-mode";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("ne-id");
			headerList3.add("ne-type");
			headerList3.add("system-type");
			headerList3.add("user-label");
			headerList3.add("administrative-state");
			headerList3.add("rack-id");
			headerList3.add("sw-version");
			headerList3.add("operational-mode");

			String entry4 = "active-alarm";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("alarm-unit-type");
			headerList4.add("alarm-type");
			headerList4.add("location");
			headerList4.add("name");
			headerList4.add("value");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild11 = (Element) inChildNode;

					NodeList nodelist1 = elementchild11.getElementsByTagName("managed-element");
					for (int x = 0; x < nodelist1.getLength(); x++) {
						Node ChildNode = nodelist1.item(x);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList3.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData3.add(objtableData);
						}
					}
					// gnb-cu-cp-function-entries
					NodeList childNodeList = elementchild11.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// end-point-x2
							NodeList childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-x2-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("ru-cpri-port-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}

							// end-point-f1c
							childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-f1c-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("du-cpri-port-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}

						}
					}

					childNodeList = elementchild11.getElementsByTagName("fault-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("additional-information");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList4.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData4.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			StringBuilder auditIssue9 = new StringBuilder();
			StringBuilder auditIssue10 = new StringBuilder();
			StringBuilder auditIssue11 = new StringBuilder();
			StringBuilder auditIssue12 = new StringBuilder();
			StringBuilder auditIssue13 = new StringBuilder();
			StringBuilder auditIssue14 = new StringBuilder();
			StringBuilder auditIssue15 = new StringBuilder();
			StringBuilder auditIssue16 = new StringBuilder();
			StringBuilder auditIssue17 = new StringBuilder();
			StringBuilder auditIssue18 = new StringBuilder();
			StringBuilder auditIssue19 = new StringBuilder();
			StringBuilder auditIssue20 = new StringBuilder();
			StringBuilder auditIssue21 = new StringBuilder();
			StringBuilder auditIssue22 = new StringBuilder();


			StringBuilder auditSuccess1 = new StringBuilder();
			StringBuilder auditSuccess2 = new StringBuilder();
			StringBuilder auditSuccess3 = new StringBuilder();
			StringBuilder auditSuccess4 = new StringBuilder();
			StringBuilder auditSuccess5 = new StringBuilder();
			StringBuilder auditSuccess6 = new StringBuilder();
			StringBuilder auditSuccess7 = new StringBuilder();
			StringBuilder auditSuccess8 = new StringBuilder();
			StringBuilder auditSuccess9 = new StringBuilder();
			StringBuilder auditSuccess10 = new StringBuilder();
			StringBuilder auditSuccess11 = new StringBuilder();
			StringBuilder auditSuccess12 = new StringBuilder();
			StringBuilder auditSuccess13 = new StringBuilder();
			StringBuilder auditSuccess14 = new StringBuilder();
            StringBuilder auditIssueAll = new StringBuilder();
			Set<String> fsutype = new HashSet<>();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				fsutype.add(tdData.get("unit-type"));
			}
			String fsu = "";
			if (!ObjectUtils.isEmpty(fsutype) && fsutype.contains("fsup")) {

				fsu = "FSUCIQ";
			} else {
				fsu = "FSU10";

			}

			List<CIQDetailsModel> listOfCiqDetailsd1 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					fsu, "eNBId");
			String sw = "";
			if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {
				if (listOfCiqDetailsd1.get(0).getCiqMap().containsKey("NE_Version")) {
					sw = listOfCiqDetailsd1.get(0).getCiqMap().get("NE_Version").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}

			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (!(tdData.get("port-id").equals(tdData.get("connected-du-cpri-port-id")))) {
					auditIssue14.append("port-id: " + tdData.get("port-id") + " should match with "
							+ " connected-du-cpri-port-id: " + tdData.get("connected-du-cpri-port-id") + "\n");
				}
			}
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String portId = tdData.get("port-id");
				String unitId = tdData.get("unit-id");
				String portid = "";
				String duport = "";
				String groupIdCiq = "";
				String hw = "";
				String txPowerUl = "0";
				String txPowerLl = "0";
				String rxPowerUl = "0";
				String rxPowerLl = "0";
				String txPowerMax = "0";
				String txPowerMin = "0";
				String attun = "no";
				String type1 = "cpri-type";

				HashMap<String, String> map = gethadwareAndVenderDuFSU(fullOutputLog,
						XmlCommandsConstants.AUDIT4G_FSU_SFP_INVENTORY, portId, unitId, type1);
				if (!map.isEmpty()) {
					hw = map.get("hardwareName").trim();
				}

				List<Audit4GfsuHardwareDetailsEntity> auditConstantsList1 = auditFSUHardwareDetailsRepository
						.getAuditHardwareDetailsEntityList(hw, "DU");

				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					txPowerUl = auditConstantsList1.get(0).getFailRxPowerUL();
					txPowerLl = auditConstantsList1.get(0).getFailRxPowerLL();
					rxPowerUl = auditConstantsList1.get(0).getWarningRxPowerUL();
					rxPowerLl = auditConstantsList1.get(0).getWarningRxPowerLL();
					txPowerMax = auditConstantsList1.get(0).gettXPowerUL();
					txPowerMin = auditConstantsList1.get(0).gettXPowerLL();
					attun = auditConstantsList1.get(0).getAttenuatorReq();
				}
				Double txPowerUlD = 0.0;
				Double txPowerLlD = 0.0;
				Double rxPowerUlD = 0.0;
				Double rxPowerLlD = 0.0;
				Double txPowerMaxLimit = 0.0;
				Double txPowerMinLimit = 0.0;
				String attunStr = "";
				if (NumberUtils.isNumber(txPowerUl)) {
					txPowerUlD = Double.parseDouble(txPowerUl);
				}
				if (NumberUtils.isNumber(txPowerLl)) {
					txPowerLlD = Double.parseDouble(txPowerLl);
				}
				if (NumberUtils.isNumber(rxPowerUl)) {
					rxPowerUlD = Double.parseDouble(rxPowerUl);
				}
				if (NumberUtils.isNumber(rxPowerLl)) {
					rxPowerLlD = Double.parseDouble(rxPowerLl);
				}
				if (NumberUtils.isNumber(txPowerMax)) {
					txPowerMaxLimit = Double.parseDouble(txPowerMax);
				}
				if (NumberUtils.isNumber(txPowerMin)) {
					txPowerMinLimit = Double.parseDouble(txPowerMin);
				}
				if (!ObjectUtils.isEmpty(attun)) {
					attunStr = attun;

				}
				if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsd1) {
						if (ciqData.getCiqMap().containsKey("RU_PortID")
								&& ciqData.getCiqMap().get("RU_PortID").getHeaderValue().trim()
										.equals(tdData.get("port-id").trim())
								&& ciqData.getCiqMap().containsKey("Connected_DU_PortID")
								&& ciqData.getCiqMap().get("Connected_DU_PortID").getHeaderValue().trim()
										.equals(tdData.get("connected-du-cpri-port-id").trim())) {
							portid = tdData.get("port-id");
							if (ciqData.getCiqMap().containsKey("Connected_DU_PortID")) {
								duport = ciqData.getCiqMap().get("Connected_DU_PortID").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("Group_ID")) {
								groupIdCiq = ciqData.getCiqMap().get("Group_ID").getHeaderValue().trim();
							}
						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					if (key.equals("rx-power")) {

						if (NumberUtils.isNumber(value)) {
							Double rxPower = Double.parseDouble(value);

							if (rxPower >= txPowerLlD && rxPower <= txPowerUlD) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (rxPower >= rxPowerLlD && rxPower <= rxPowerUlD) {
								tableData.append("<td align=center bgcolor ='#FFA500'>" + value + "</td>\n");
								auditIssue15.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power : " + tdData.get("rx-power") + "\n");
							} else if (rxPower > txPowerUlD && !attunStr.isEmpty()
									&& attunStr.equalsIgnoreCase("Yes")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue16.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power : " + tdData.get("rx-power") + "\n");
							} else {
								auditIssue17.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power : " + tdData.get("rx-power") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else if (key.equals("tx-power")) {

						if (NumberUtils.isNumber(value)) {
							Double txPower = Double.parseDouble(value);

							if (txPower >= txPowerMinLimit && txPower <= txPowerMaxLimit) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditIssue18.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " tx-power : " + tdData.get("tx-power") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else if (key.equals("port-id")) {
						if (value.equals(portid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("port-id: " + tdData.get("port-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("connected-du-cpri-port-id")) {
						if (value.equals(duport)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append(
									"connected-du-cpri-port-id: " + tdData.get("connected-du-cpri-port-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("group-id")) {
						if (value.equals(groupIdCiq)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue13.append("connected-du-cpri-port-id: " + tdData.get("connected-du-cpri-port-id")
									+ "  group-id: " + tdData.get("group-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				String portId = tdData.get("port-id");
				String unitId = tdData.get("unit-id");
				String hw = "";
				String txPowerUl = "0";
				String txPowerLl = "0";
				String rxPowerUl = "0";
				String rxPowerLl = "0";
				String txPowerMax = "0";
				String txPowerMin = "0";
				String attun = "no";
				String type1 = "du-cpri-type";

				HashMap<String, String> map = gethadwareAndVenderDuFSU(fullOutputLog,
						XmlCommandsConstants.AUDIT4G_FSU_SFP_INVENTORY, portId, unitId, type1);
				if (!map.isEmpty()) {
					hw = map.get("hardwareName").trim();
				}

				List<Audit4GfsuHardwareDetailsEntity> auditConstantsList1 = auditFSUHardwareDetailsRepository
						.getAuditHardwareDetailsEntityList(hw, "DU");

				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					txPowerUl = auditConstantsList1.get(0).getFailRxPowerUL();
					txPowerLl = auditConstantsList1.get(0).getFailRxPowerLL();
					rxPowerUl = auditConstantsList1.get(0).getWarningRxPowerUL();
					rxPowerLl = auditConstantsList1.get(0).getWarningRxPowerLL();
					txPowerMax = auditConstantsList1.get(0).gettXPowerUL();
					txPowerMin = auditConstantsList1.get(0).gettXPowerLL();
					attun = auditConstantsList1.get(0).getAttenuatorReq();
				}
				Double txPowerUlD = 0.0;
				Double txPowerLlD = 0.0;
				Double rxPowerUlD = 0.0;
				Double rxPowerLlD = 0.0;
				Double txPowerMaxLimit = 0.0;
				Double txPowerMinLimit = 0.0;
				String attunStr = "";
				if (NumberUtils.isNumber(txPowerUl)) {
					txPowerUlD = Double.parseDouble(txPowerUl);
				}
				if (NumberUtils.isNumber(txPowerLl)) {
					txPowerLlD = Double.parseDouble(txPowerLl);
				}
				if (NumberUtils.isNumber(rxPowerUl)) {
					rxPowerUlD = Double.parseDouble(rxPowerUl);
				}
				if (NumberUtils.isNumber(rxPowerLl)) {
					rxPowerLlD = Double.parseDouble(rxPowerLl);
				}
				if (NumberUtils.isNumber(txPowerMax)) {
					txPowerMaxLimit = Double.parseDouble(txPowerMax);
				}
				if (NumberUtils.isNumber(txPowerMin)) {
					txPowerMinLimit = Double.parseDouble(txPowerMin);
				}
				if (!ObjectUtils.isEmpty(attun)) {
					attunStr = attun;

				}
				String lcc = "";
				String crpi = "";
				String port = "";
				String enb = "";
				String crpi2 = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsd1) {
						if (ciqData.getCiqMap().containsKey("RU_PortID")
								&& ciqData.getCiqMap().get("RU_PortID").getHeaderValue().trim()
										.equals(tdData.get("port-id").trim())
								&& ciqData.getCiqMap().containsKey("Connected_DU_PortID")
								&& ciqData.getCiqMap().get("Connected_DU_PortID").getHeaderValue().trim()
										.equals(tdData.get("port-id").trim())) {
							port = tdData.get("port-id");
							if (ciqData.getCiqMap().containsKey("lcc_card_port_no")) {
								crpi = ciqData.getCiqMap().get("lcc_card_port_no").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("lcc_card_no")) {
								lcc = ciqData.getCiqMap().get("lcc_card_no").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("eNB_Name")) {
								enb = ciqData.getCiqMap().get("eNB_Name").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("lcc_card_port_no_2")) {
								crpi2 = ciqData.getCiqMap().get("lcc_card_port_no_2").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("rx-power")) {

						if (NumberUtils.isNumber(value)) {
							Double rxPower = Double.parseDouble(value);
							if (rxPower >= txPowerLlD && rxPower <= txPowerUlD) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (rxPower >= rxPowerLlD && rxPower <= rxPowerUlD) {
								tableData.append("<td align=center bgcolor ='#FFA500'>" + value + "</td>\n");
								auditIssue19.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power : " + tdData.get("rx-power") + "\n");
							} else if (rxPower > txPowerUlD && !attunStr.isEmpty()
									&& attunStr.equalsIgnoreCase("Yes")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue20.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power : " + tdData.get("rx-power") + "\n");
							} else {
								auditIssue21.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power : " + tdData.get("rx-power") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else if (key.equals("tx-power")) {

						if (NumberUtils.isNumber(value)) {
							Double txPower = Double.parseDouble(value);

							if (txPower >= txPowerMinLimit && txPower <= txPowerMaxLimit) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditIssue22.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " tx-power : " + tdData.get("tx-power") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else if (key.equals("connected-enb-digital-unit-board-id")) {
						if (value.equals(lcc)) {
							auditSuccess3.append(
									"port-id: " + tdData.get("port-id") + " connected-enb-digital-unit-board-id: "
											+ tdData.get("connected-enb-digital-unit-board-id") + "\n");
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue3.append(
									"port-id: " + tdData.get("port-id") + " connected-enb-digital-unit-board-id: "
											+ tdData.get("connected-enb-digital-unit-board-id") + "\n");

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("connected-enb-digital-unit-port-id")) {
						if (value.equals(crpi) || value.equals(crpi2)) {
							auditSuccess4.append(
									"port-id: " + tdData.get("port-id") + " connected-enb-digital-unit-port-id: "
											+ tdData.get("connected-enb-digital-unit-port-id") + "\n");
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue4.append(
									"port-id: " + tdData.get("port-id") + " connected-enb-digital-unit-port-id: "
											+ tdData.get("connected-enb-digital-unit-port-id") + "\n");

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("port-id")) {
						if (value.equals(port)) {
							auditSuccess5.append("port-id: " + tdData.get("port-id") + "\n");
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue5.append("port-id: " + tdData.get("port-id") + "\n");

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("enb-ne-id")) {
						if (value.equals(enb)) {
							auditSuccess6.append("port-id: " + tdData.get("port-id") + " enb-ne-id: "
									+ tdData.get("enb-ne-id") + "\n");
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue6.append("port-id: " + tdData.get("port-id") + " enb-ne-id: "
									+ tdData.get("enb-ne-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("du-cpri-port-mode")) {
						if (value.equals("pass-through")) {
							auditSuccess7.append("port-id: " + tdData.get("port-id") + " du-cpri-port-mode: "
									+ tdData.get("du-cpri-port-mode") + "\n");
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue7.append("port-id: " + tdData.get("port-id") + " du-cpri-port-mode: "
									+ tdData.get("du-cpri-port-mode") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center >" + value + "</td>\n");

					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					if (key.equals("administrative-state")) {
						if (value.equals("unlocked")) {
							auditSuccess8.append("ne-id: " + tdData.get("ne-id") + " administrative-state: "
									+ tdData.get("administrative-state") + "\n");
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue8.append("ne-id: " + tdData.get("ne-id") + " administrative-state: "
									+ tdData.get("administrative-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("operational-mode")) {
						if (value.equals("normal-mode")) {
							auditSuccess9.append("ne-id: " + tdData.get("ne-id") + " operational-mode: "
									+ tdData.get("operational-mode") + "\n");
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue9.append("ne-id: " + tdData.get("ne-id") + " operational-mode: "
									+ tdData.get("operational-mode") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("sw-version")) {
						if (versionCompare(StringUtils.substringBefore(sw, "("),
								StringUtils.substringBefore(value, "("))) {
							auditSuccess10.append("ne-id: " + tdData.get("ne-id") + " sw-version: "
									+ tdData.get("sw-version") + "\n");
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue10.append("ne-id: " + tdData.get("ne-id") + " sw-version: "
									+ tdData.get("sw-version") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("user-label")) {
						if (value.toLowerCase().contains("grow")) {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue11.append("ne-id: " + tdData.get("ne-id") + " user-label: "
									+ tdData.get("user-label") + "\n");
						} else {
							tableData.append("<td align=center >" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center >" + value + "</td>\n");

					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					if (key.equals("alarm-type")) {
						if (value.equals("-")) {
							auditSuccess12.append("location: " + tdData.get("location") + " alarm-type: "
									+ tdData.get("alarm-type") + "\n");
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue12.append("location: " + tdData.get("location") + " alarm-type: "
									+ tdData.get("alarm-type") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");

					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			auditIssueAll.append(auditIssue7);
			auditIssueAll.append(auditIssue8);
			auditIssueAll.append(auditIssue9);
			auditIssueAll.append(auditIssue10);
			auditIssueAll.append(auditIssue11);
			auditIssueAll.append(auditIssue12);
			auditIssueAll.append(auditIssue13);
			auditIssueAll.append(auditIssue14);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			

			if (auditIssue15.length() != 0 || auditIssue16.length() != 0 || auditIssue17.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			
			if (auditIssue19.length() != 0 || auditIssue20.length() != 0 || auditIssue21.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(23, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(23, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

			if (auditIssue1.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(3, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(4, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(5, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(5, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(5, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue5.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue6.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue7.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(9, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue8.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(10, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue8.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(10, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(10, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue9.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(11, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue9.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(11, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(11, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue10.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(12, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue10.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(12, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(12, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue11.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(13, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue11.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(13, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(13, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue12.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue12.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(14, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue13.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue13.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(16, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue14.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue14.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(17, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue15.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(19, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue15.toString());
			}
			if (auditIssue16.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(20, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue16.toString());
			}
			if (auditIssue17.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(21, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue17.toString());
			}
			if (auditIssue18.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(22, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue18.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(22, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			}else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(22, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue19.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(23, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue19.toString());
			}
			if (auditIssue20.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(24, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue20.toString());
			}
			if (auditIssue21.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(25, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue21.toString());
			}
			if (auditIssue22.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(26, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue22.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(26, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			}else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(26, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getFsuserialnumbers(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("unit-type");
			headerList1.add("board-type");
			headerList1.add("radio-unit-serial-number");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild = (Element) inChildNode;
					NodeList childNodeList1 = elementchild.getElementsByTagName("hardware-management");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("radio-unit-info");
							for (int l = 0; l < childNodeList2.getLength(); l++) {
								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();

									objtableData.put(header, getXmlElementData(elementchild2, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}

			if (tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder getFsuTXRxPower(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "radio-unit-info";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("path");
			headerList1.add("operational-state");
			headerList1.add("tx-rf-power");
			headerList1.add("vswr");

			String entry2 = "dsp-miscellaneous-info-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("unit-type");
			headerList2.add("unit-id");
			headerList2.add("dsp-id");
			headerList2.add("optic-distance-option");

			String entry3 = "cpri-port-entries";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("unit-type");
			headerList3.add("unit-id");
			headerList3.add("port-id");
			headerList3.add("administrative-state");
			headerList3.add("connected-radio-unit-type");
			headerList3.add("auto-speed-configuration");
			headerList3.add("cpri-speed-saved");
			headerList3.add("cpri-speed-running");
			headerList3.add("cpri-compression-saved");
			headerList3.add("cpri-compression-running");
			headerList3.add("cpri-connection-type");
			headerList3.add("fsu-internode-id");
			headerList3.add("fsu-ne-id");
			headerList3.add("fsu-du-cpri-port-id");
			headerList3.add("fsu-ru-cpri-port-id");
			headerList3.add("fsu-config-tx-delay");
			headerList3.add("fsu-config-rx-delay");
			headerList3.add("bit-rate");
			headerList3.add("tx-wavelength");
			headerList3.add("tx-power");
			headerList3.add("rx-power");

			String entry4 = "cell-call-count-status";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cell-num");
			headerList4.add("active-ue-count");
			headerList4.add("emergency-access-ue-count");
			headerList4.add("high-priority-access-ue-count");
			headerList4.add("mobile-term-access-ue-count");
			headerList4.add("mobile-origin-signal-access-ue-count");
			headerList4.add("mobile-origin-data-access-ue-count");
			headerList4.add("relocated-handover-ue-count");
			headerList4.add("delay-tolerant-access-ue-count");
			headerList4.add("scell-ue-count");
			headerList4.add("mo-voice-call-ue-count");
			headerList4.add("active-emtc-ue-count");

			String entry5 = "active-alarm-entries";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("alarm-unit-type");
			headerList5.add("alarm-type");
			headerList5.add("location");
			headerList5.add("raised-time");
			headerList5.add("alarm-group");
			headerList5.add("probable-cause");
			headerList5.add("specific-problem");
			headerList5.add("severity");
			headerList5.add("alarm-code");
			headerList5.add("sequence-number");
			headerList2.add("time-info");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList1 = element.getElementsByTagName("hardware-management");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("radio-unit-info");
							for (int l = 0; l < childNodeList2.getLength(); l++) {

								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									NodeList childNodeList3 = elementchild2.getElementsByTagName("path-control");
									for (int m = 0; m < childNodeList3.getLength(); m++) {

										Node ChildNode3 = childNodeList3.item(m);
										if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

											Element elementchild3 = (Element) ChildNode3;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();

											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));

											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild3, header));
											}

											tabelData1.add(objtableData);
										}
									}
								}
							}
							childNodeList2 = elementchild1.getElementsByTagName("digital-unit-entries");
							for (int l = 0; l < childNodeList2.getLength(); l++) {

								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									NodeList childNodeList3 = elementchild2
											.getElementsByTagName("dsp-miscellaneous-info-entries");
									for (int m = 0; m < childNodeList3.getLength(); m++) {

										Node ChildNode3 = childNodeList3.item(m);
										if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

											Element elementchild3 = (Element) ChildNode3;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();

											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild3, header));
											}

											tabelData2.add(objtableData);
										}
									}
									childNodeList3 = elementchild2.getElementsByTagName("cpri-port-entries");
									for (int m = 0; m < childNodeList3.getLength(); m++) {

										Node ChildNode3 = childNodeList3.item(m);
										if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

											Element elementchild3 = (Element) ChildNode3;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();

											Iterator<String> itr = headerList3.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild3, header));
											}

											tabelData3.add(objtableData);
										}
									}
								}
							}
						}
					}
					childNodeList1 = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();

							Iterator<String> itr = headerList4.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild1, header));
							}

							tabelData4.add(objtableData);
						}
					}
					childNodeList1 = element.getElementsByTagName("fault-management");
					for (int j = 0; j < childNodeList1.getLength(); j++) {

						Node ChildNode = childNodeList1.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList2 = elementchild.getElementsByTagName("active-alarm");
							for (int k = 0; k < childNodeList2.getLength(); k++) {

								Node ChildNode1 = childNodeList2.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList3 = elementchild1
											.getElementsByTagName("active-alarm-entries");
									for (int l = 0; l < childNodeList3.getLength(); l++) {
										Node ChildNode2 = childNodeList3.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList5.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData5.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>"
					+ "Audit4G_eNB_PostAudit" + "</b></td></tr>\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();

			StringBuilder auditIssueAll = new StringBuilder();
			StringBuilder auditPass1 = new StringBuilder();
			StringBuilder auditPass2 = new StringBuilder();
			StringBuilder auditPass3 = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if ("tx-rf-power".equalsIgnoreCase(key)) {

						if (NumberUtils.isNumber(value)) {
							Double txPower = Double.parseDouble(value);

							if ((txPower < 26.0) && tdData.get("operational-state").equals("enabled")) {

								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue1.append("connected-digital-unit-board-id : "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " tx-rf-power : "
										+ tdData.get("tx-rf-power") + "\n");
							} else {

								tableData.append("<td align=center>" + value + "</td>\n");
							}
						} else {
							if (tdData.get("operational-state").equals("enabled")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue1.append("connected-digital-unit-board-id : "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " tx-rf-power : "
										+ tdData.get("tx-rf-power") + "\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}
						}

					} else if ("vswr".equalsIgnoreCase(key)) {

						if (NumberUtils.isNumber(value)) {
							Double vswr = Double.parseDouble(value);

							if ((vswr > 1.5) && tdData.get("operational-state").equals("enabled")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue2.append("connected-digital-unit-board-id : "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " vswr" + tdData.get("vswr")
										+ "\n");
							} else {

								tableData.append("<td align=center>" + value + "</td>\n");
							}
						} else {
							if (tdData.get("operational-state").equals("enabled")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue2.append("connected-digital-unit-board-id : "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " vswr  :  "
										+ tdData.get("vswr") + "\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}
						}

					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("optic-distance-option")) {
						if (!value.equals("20-km")) {
							auditIssue3.append(
									"unit-type : " + tdData.get("unit-type") + " unit-id : " + tdData.get("unit-id")
											+ " optic-distance-option : " + tdData.get("optic-distance-option") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			if (!(tabelData3.size() == 0)) {
				htmlContent.append(
						"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList3) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData3) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
			}
			
				htmlContent.append(
						"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList4) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData4) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}
					tableData.append("</tr>\n");

				}
			
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList5) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData5) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					if (key.equals("alarm-type")) {
						if (value.equals("-")) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue4.append("location: " + tdData.get("location")+" alarm-type: " + tdData.get("alarm-type") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");

					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
	
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
			if (auditIssue1.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(1, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(2, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(2, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(2, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GFsuSummaryService.createAudit4GFsuPassFailSummaryEntity(15, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(18, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
			}
			
			
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder getFsutypeaudit(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));String softwareVersion = "";
			String softwareVersionnetwork = "";
			List<CIQDetailsModel> listOfCiqDetailssv = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailssv)) {
				if (listOfCiqDetailssv.get(0).getCiqMap().containsKey("vDU_Version")) {
					softwareVersion = listOfCiqDetailssv.get(0).getCiqMap().get("vDU_Version").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			softwareVersionnetwork = ge5gGsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_VDU_PREAUDIT, enbId,
					dbcollectionFileName, runTestEntity);
			if(!softwareVersionnetwork.isEmpty() && !softwareVersionnetwork.equals("-") ) {
				softwareVersion=softwareVersionnetwork;
			}
			String neVersion = StringUtils.substringBefore(softwareVersion, "-");
			
			

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("cell-identity");
			headerList1.add("nr-frequency-band");
			headerList1.add("FSU-Type");
			if(neVersion.contains("22")) {
			headerList1.add("o-ran-ru-id");
			headerList1.add("connected-fsu-ru-cpri-port-id");
			headerList1.add("connected-ru-port-id");			
			headerList1.add("nr-support-cell-number");
			}else {
			headerList1.add("vru-id");
			headerList1.add("connected-fsu-port-id");
			headerList1.add("connected-ru-port-id");
			headerList1.add("support-cell-number");
			}
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("processor-inventory-entries");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					objtableData.put("unit-type", getXmlElementData(element, "unit-type"));
					tabelData1.add(objtableData);
				}
			}

			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			if(neVersion.contains("22")) {
				tabelData2 = getOruEntries(fullOutputLog, XmlCommandsConstants.DSS_VDU_ORUPLUMBING, enbId,
						dbcollectionFileName, runTestEntity);
			
			}else {
				tabelData2 = getvruentries(fullOutputLog, XmlCommandsConstants.DSS_FSU_VRUENTRIES, enbId,
						dbcollectionFileName, runTestEntity);
			}
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			tabelData3 = getvruentries2(fullOutputLog, XmlCommandsConstants.DSS_VDU_NRFREQUENCY, enbId,
					dbcollectionFileName, runTestEntity);
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			tabelData4 = getvruentries1(fullOutputLog, XmlCommandsConstants.DSS_VDU_GUTRANDUCELL, enbId,
					dbcollectionFileName, runTestEntity);

			for (LinkedHashMap<String, String> tdData1 : tabelData4) {
				for (LinkedHashMap<String, String> tdData2 : tabelData3) {
					if (tdData1.get("cell-identity").equals(tdData2.get("cell-identity"))) {

						tdData2.put("cell-num", tdData1.get("cell-num"));
					}

				}
			}
			String fsuType = "";
			for (LinkedHashMap<String, String> tdData1 : tabelData1) {
				if (tdData1.get("unit-type").equals("fsip") || tdData1.get("unit-type").equals("fsmp")) {

					fsuType = "FSU-10";
				} else {
					fsuType = "FSU-20";
				}
			}

			for (LinkedHashMap<String, String> tdData2 : tabelData3) {
				tdData2.put("FSU-Type", fsuType);
			}  
			if(neVersion.contains("22")) {
				for (LinkedHashMap<String, String> tdData1 : tabelData2) {
					for (LinkedHashMap<String, String> tdData2 : tabelData3) {
						if (tdData1.get("nr-support-cell-number").equals(tdData2.get("cell-num"))) {
							tdData2.put("o-ran-ru-id", tdData1.get("o-ran-ru-id"));
							tdData2.put("connected-fsu-ru-cpri-port-id", tdData1.get("connected-fsu-ru-cpri-port-id"));
							tdData2.put("connected-ru-port-id", tdData1.get("connected-ru-port-id"));
							tdData2.put("nr-support-cell-number", tdData1.get("nr-support-cell-number"));
						}

					}
				}
			}else {
			for (LinkedHashMap<String, String> tdData1 : tabelData2) {
				for (LinkedHashMap<String, String> tdData2 : tabelData3) {
					if (tdData1.get("support-cell-number").equals(tdData2.get("cell-num"))) {
						tdData2.put("vru-id", tdData1.get("vru-id"));
						tdData2.put("connected-fsu-port-id", tdData1.get("connected-fsu-port-id"));
						tdData2.put("connected-ru-port-id", tdData1.get("connected-ru-port-id"));
						tdData2.put("support-cell-number", tdData1.get("support-cell-number"));
					}

				}
			}
			}
			for (LinkedHashMap<String, String> tdData2 : tabelData3) {
				tdData2.remove("cell-num");
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "DSS_FSU_Plumbing"
					+ "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			if(!neVersion.contains("22")) {
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					if (key.equals("vru-id")) {
						if ((value.equals("3") || value.equals("4") || value.equals("5") || value.equals("6")
								|| value.equals("7") || value.equals("8") || value.equals("9") || value.equals("10")
								|| value.equals("11"))
								&& tdData.get("FSU-Type").equals("FSU-10")
								&& (tdData.get("connected-ru-port-id").equals("0")
										|| tdData.get("connected-ru-port-id").equals("1"))
								&& (tdData.get("nr-frequency-band").equals("2")
										|| tdData.get("nr-frequency-band").equals("66"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if ((value.equals("4") || value.equals("6") || value.equals("8") || value.equals("10")
								|| value.equals("1") || value.equals("5") || value.equals("9") || value.equals("3")
								|| value.equals("11") || value.equals("7"))
								&& tdData.get("FSU-Type").equals("FSU-20")
								&& (tdData.get("connected-ru-port-id").equals("0")
										|| tdData.get("connected-ru-port-id").equals("1"))
								&& (tdData.get("nr-frequency-band").equals("2")
										|| tdData.get("nr-frequency-band").equals("66"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if ((value.equals("0") || value.equals("1") || value.equals("2") || value.equals("3")
								|| value.equals("4") || value.equals("5")) && tdData.get("FSU-Type").equals("FSU-10")
								&& (tdData.get("connected-ru-port-id").equals("0"))
								&& (tdData.get("nr-frequency-band").equals("5"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if ((value.equals("0") || value.equals("1") || value.equals("3") || value.equals("10")
								|| value.equals("6") || value.equals("8") || value.equals("2") || value.equals("4"))
								&& tdData.get("FSU-Type").equals("FSU-20")
								&& (tdData.get("connected-ru-port-id").equals("0"))
								&& (tdData.get("nr-frequency-band").equals("5"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {

							auditIssue1.append(
									"vru-id: : " + tdData.get("vru-id") + " FSU-Type : " + tdData.get("FSU-Type")
											+ " connected-ru-port-id : " + tdData.get("connected-ru-port-id")
											+ " nr-frequency-band : " + tdData.get("nr-frequency-band") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("connected-fsu-port-id")) {
						if ((value.equals("3") || value.equals("4") || value.equals("5") || value.equals("6")
								|| value.equals("7") || value.equals("8") || value.equals("9") || value.equals("10")
								|| value.equals("11")) && tdData.get("FSU-Type").equals("FSU-10")
								&& (tdData.get("connected-ru-port-id").equals("0"))
								&& (tdData.get("nr-frequency-band").equals("2")
										|| tdData.get("nr-frequency-band").equals("66"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if ((value.equals("1") || value.equals("10") || value.equals("8") || value.equals("6")
								|| value.equals("4") || value.equals("5") || value.equals("9") || value.equals("3")
								|| value.equals("11") || value.equals("7")) && tdData.get("FSU-Type").equals("FSU-20")
								&& (tdData.get("connected-ru-port-id").equals("0"))
								&& (tdData.get("nr-frequency-band").equals("2")
										|| tdData.get("nr-frequency-band").equals("66"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if ((value.equals("8") || value.equals("9") || value.equals("10") || value.equals("11"))
								&& tdData.get("FSU-Type").equals("FSU-10")
								&& (tdData.get("connected-ru-port-id").equals("1"))
								&& (tdData.get("nr-frequency-band").equals("2")
										|| tdData.get("nr-frequency-band").equals("66"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if ((value.equals("2") || value.equals("6") || value.equals("10") || value.equals("5")
								|| value.equals("7") || value.equals("9") || value.equals("11"))
								&& tdData.get("FSU-Type").equals("FSU-20")
								&& (tdData.get("connected-ru-port-id").equals("1"))
								&& (tdData.get("nr-frequency-band").equals("2")
										|| tdData.get("nr-frequency-band").equals("66"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if ((value.equals("0") || value.equals("1") || value.equals("2") || value.equals("3")
								|| value.equals("4") || value.equals("5")) && tdData.get("FSU-Type").equals("FSU-10")
								&& (tdData.get("connected-ru-port-id").equals("0"))
								&& (tdData.get("nr-frequency-band").equals("5"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else if ((value.equals("0") || value.equals("1") || value.equals("3") || value.equals("10")
								|| value.equals("6") || value.equals("8") || value.equals("2") || value.equals("4"))
								&& tdData.get("FSU-Type").equals("FSU-20")
								&& (tdData.get("connected-ru-port-id").equals("0"))
								&& (tdData.get("nr-frequency-band").equals("5"))) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue2.append("connected-fsu-port-id: : " + tdData.get("connected-fsu-port-id")
									+ " FSU-Type : " + tdData.get("FSU-Type") + " connected-ru-port-id : "
									+ tdData.get("connected-ru-port-id") + " nr-frequency-band : "
									+ tdData.get("nr-frequency-band") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			}else {
				for (LinkedHashMap<String, String> tdData : tabelData3) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();

						if (key.equals("o-ran-ru-id")) {
							if ((value.equals("3") || value.equals("4") || value.equals("5") || value.equals("6")
									|| value.equals("7") || value.equals("8") || value.equals("9") || value.equals("10")
									|| value.equals("11"))
									&& tdData.get("FSU-Type").equals("FSU-10")
									&& (tdData.get("connected-ru-port-id").equals("0")
											|| tdData.get("connected-ru-port-id").equals("1"))
									&& (tdData.get("nr-frequency-band").equals("2")
											|| tdData.get("nr-frequency-band").equals("66"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if ((value.equals("4") || value.equals("6") || value.equals("8") || value.equals("10")
									|| value.equals("1") || value.equals("5") || value.equals("9") || value.equals("3")
									|| value.equals("11") || value.equals("7"))
									&& tdData.get("FSU-Type").equals("FSU-20")
									&& (tdData.get("connected-ru-port-id").equals("0")
											|| tdData.get("connected-ru-port-id").equals("1"))
									&& (tdData.get("nr-frequency-band").equals("2")
											|| tdData.get("nr-frequency-band").equals("66"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if ((value.equals("0") || value.equals("1") || value.equals("2") || value.equals("3")
									|| value.equals("4") || value.equals("5")) && tdData.get("FSU-Type").equals("FSU-10")
									&& (tdData.get("connected-ru-port-id").equals("0"))
									&& (tdData.get("nr-frequency-band").equals("5"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if ((value.equals("0") || value.equals("1") || value.equals("3") || value.equals("10")
									|| value.equals("6") || value.equals("8") || value.equals("2") || value.equals("4"))
									&& tdData.get("FSU-Type").equals("FSU-20")
									&& (tdData.get("connected-ru-port-id").equals("0"))
									&& (tdData.get("nr-frequency-band").equals("5"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {

								auditIssue1.append(
										"o-ran-ru-id: : " + tdData.get("o-ran-ru-id") + " FSU-Type : " + tdData.get("FSU-Type")
												+ " connected-ru-port-id : " + tdData.get("connected-ru-port-id")
												+ " nr-frequency-band : " + tdData.get("nr-frequency-band") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("connected-fsu-ru-cpri-port-id")) {
							if ((value.equals("3") || value.equals("4") || value.equals("5") || value.equals("6")
									|| value.equals("7") || value.equals("8") || value.equals("9") || value.equals("10")
									|| value.equals("11")) && tdData.get("FSU-Type").equals("FSU-10")
									&& (tdData.get("connected-ru-port-id").equals("0"))
									&& (tdData.get("nr-frequency-band").equals("2")
											|| tdData.get("nr-frequency-band").equals("66"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if ((value.equals("1") || value.equals("10") || value.equals("8") || value.equals("6")
									|| value.equals("4") || value.equals("5") || value.equals("9") || value.equals("3")
									|| value.equals("11") || value.equals("7")) && tdData.get("FSU-Type").equals("FSU-20")
									&& (tdData.get("connected-ru-port-id").equals("0"))
									&& (tdData.get("nr-frequency-band").equals("2")
											|| tdData.get("nr-frequency-band").equals("66"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if ((value.equals("8") || value.equals("9") || value.equals("10") || value.equals("11"))
									&& tdData.get("FSU-Type").equals("FSU-10")
									&& (tdData.get("connected-ru-port-id").equals("1"))
									&& (tdData.get("nr-frequency-band").equals("2")
											|| tdData.get("nr-frequency-band").equals("66"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if ((value.equals("2") || value.equals("6") || value.equals("10") || value.equals("5")
									|| value.equals("7") || value.equals("9") || value.equals("11"))
									&& tdData.get("FSU-Type").equals("FSU-20")
									&& (tdData.get("connected-ru-port-id").equals("1"))
									&& (tdData.get("nr-frequency-band").equals("2")
											|| tdData.get("nr-frequency-band").equals("66"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if ((value.equals("0") || value.equals("1") || value.equals("2") || value.equals("3")
									|| value.equals("4") || value.equals("5")) && tdData.get("FSU-Type").equals("FSU-10")
									&& (tdData.get("connected-ru-port-id").equals("0"))
									&& (tdData.get("nr-frequency-band").equals("5"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if ((value.equals("0") || value.equals("1") || value.equals("3") || value.equals("10")
									|| value.equals("6") || value.equals("8") || value.equals("2") || value.equals("4"))
									&& tdData.get("FSU-Type").equals("FSU-20")
									&& (tdData.get("connected-ru-port-id").equals("0"))
									&& (tdData.get("nr-frequency-band").equals("5"))) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditIssue2.append("connected-fsu-ru-cpri-port-id: : " + tdData.get("connected-fsu-ru-cpri-port-id")
										+ " FSU-Type : " + tdData.get("FSU-Type") + " connected-ru-port-id : "
										+ tdData.get("connected-ru-port-id") + " nr-frequency-band : "
										+ tdData.get("nr-frequency-band") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}

					}
					tableData.append("</tr>\n");

				}
				}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);

			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(54, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(54, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(54, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(55, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(55, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(55, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	private List<LinkedHashMap<String, String>> getOruEntries(String fullOutputLog, String command,
			String enbId, String dbcollectionFileName, RunTestEntity runTestEntity) {

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("o-ran-ru-id");
			headerList1.add("connected-fsu-ru-cpri-port-id");
			headerList1.add("connected-ru-port-id");
			headerList1.add("nr-support-cell-number");

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("o-ran-radio-unit-info");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("oru-fsu-cuplane-interfaces");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return tabelData1;
	}

	public List<LinkedHashMap<String, String>> getvruentries(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("vru-id");
			headerList1.add("connected-fsu-port-id");
			headerList1.add("connected-ru-port-id");
			headerList1.add("support-cell-number");

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("fsu-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("vru-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return tabelData1;
	}

	public List<LinkedHashMap<String, String>> getvruentries2(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("nr-frequency-band");

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild = (Element) inChildNode;
					NodeList childNodeList1 = elementchild.getElementsByTagName("gutran-du-cell-entries");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							// ucr
							NodeList childNodeList2 = elementchild1.getElementsByTagName("nr-frequency-band-info");
							for (int l = 0; l < childNodeList2.getLength(); l++) {
								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();

									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return tabelData1;
	}

	public List<LinkedHashMap<String, String>> getvruentries1(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cell-identity");
			headerList1.add("cell-num");

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild = (Element) inChildNode;

					// clock-unit
					NodeList childNodeList1 = elementchild.getElementsByTagName("gutran-du-cell");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							// ucr
							NodeList childNodeList2 = elementchild1.getElementsByTagName("gutran-du-cell-entries");
							for (int l = 0; l < childNodeList2.getLength(); l++) {
								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();

									objtableData.put(header, getXmlElementData(elementchild2, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return tabelData1;
	}

	public StringBuilder getDSSTxRxPower(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("fsu-id");
			headerList1.add("vru-id");
			headerList1.add("interface-name");
			headerList1.add("port-number");
			headerList1.add("name");
			headerList1.add("present");
			headerList1.add("vendor-id");
			headerList1.add("vendor-part");
			headerList1.add("vendor-rev");
			headerList1.add("serial-no");
			headerList1.add("nominal-bitrate");
			headerList1.add("rx-power");
			headerList1.add("tx-power");
			headerList1.add("tx-bias-current");
			headerList1.add("voltage");
			headerList1.add("temperature");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList1 = element.getElementsByTagName("fsu-entries");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("vru-entries");
							for (int l = 0; l < childNodeList2.getLength(); l++) {

								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									NodeList childNodeList3 = elementchild2
											.getElementsByTagName("port-transceiver-data");
									for (int m = 0; m < childNodeList3.getLength(); m++) {

										Node ChildNode3 = childNodeList3.item(m);
										if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

											Element elementchild3 = (Element) ChildNode3;
											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild3, header));
											}

											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}

				}
			}

			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					// if ("rx-power".equalsIgnoreCase(resultTableData.getKey())) {
					//
					// if (NumberUtils.isNumber(resultTableData.getValue())) {
					// Double txPower = Double.parseDouble(resultTableData.getValue());
					//
					// if (txPower >= -7.3 && txPower <= 2.4) {
					// tableData.append("<td align=center>" + resultTableData.getValue() +
					// "</td>\n");
					// } else {
					// auditIssue1.append("rx-power: " + tdData.get("rx-power") + "\n");
					// tableData.append("<td align=center bgcolor ='#fa8c8c'>"
					// + resultTableData.getValue() + "</td>\n");
					// }
					// } else{
					//
					// tableData.append("<td align=center bgcolor ='#fa8c8c'>" +
					// resultTableData.getValue()
					// + "</td>\n");
					// }
					//
					// } else if ("tx-power".equalsIgnoreCase(resultTableData.getKey())) {
					//
					// if (NumberUtils.isNumber(resultTableData.getValue())) {
					// Double rxPower = Double.parseDouble(resultTableData.getValue());
					//
					// if (rxPower >= -8.3 && rxPower <= 2.4) {
					// tableData.append("<td align=center>" + resultTableData.getValue() +
					// "</td>\n");
					// } else {
					// auditIssue2.append("tx-power: " + tdData.get("tx-power") + "\n");
					// tableData.append("<td align=center bgcolor ='#fa8c8c'>"
					// + resultTableData.getValue() + "</td>\n");
					// }
					// } else{
					//
					// //tableData.append("<td align=center bgcolor ='#fa8c8c'>" +
					// resultTableData.getValue()
					// + "</td>\n");
					// }
					//
					// } else {
					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					// }

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			
			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(52, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(52, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(52, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(53, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(53, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(53, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getFSUVRU(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("vru-id");
			headerList1.add("connected-fsu-port-id");
			headerList1.add("connected-ru-port-id");
			headerList1.add("support-cell-number");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("fsu-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("vru-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}

				}
			}

			if (tabelData1.size() == 0) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				return htmlContent;
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getFsuPreAudit(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			/*String softwareVersion = "";
			softwareVersion = ge5gGsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_VDU_PREAUDIT, enbId,
					dbcollectionFileName, runTestEntity);
			String neVersion = StringUtils.substringBefore(softwareVersion, "-");*/
			String softwareVersion = "";
			String softwareVersionnetwork = "";
			List<CIQDetailsModel> listOfCiqDetailssv = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailssv)) {
				if (listOfCiqDetailssv.get(0).getCiqMap().containsKey("vDU_Version")) {
					softwareVersion = listOfCiqDetailssv.get(0).getCiqMap().get("vDU_Version").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			softwareVersionnetwork = ge5gGsoftwareVersion(fullOutputLog, XmlCommandsConstants.DSS_VDU_PREAUDIT, enbId,
					dbcollectionFileName, runTestEntity);
			if(!softwareVersionnetwork.isEmpty() && !softwareVersionnetwork.equals("-") ) {
				softwareVersion=softwareVersionnetwork;
			}
			String neVersion = StringUtils.substringBefore(softwareVersion, "-");
			String vDUType = "";
			vDUType = get5gDSSVDUType(fullOutputLog, XmlCommandsConstants.DSS_VDU_PREAUDIT, enbId, dbcollectionFileName,
					runTestEntity);
			String entry1 = "mplane-ipv6-info";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("mplane-ipv6");

			String entry2 = "o-du-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("unit-type");
			headerList2.add("unit-id");
			headerList2.add("port-id");

			String entry3 = "ecpri-interfaces";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("cpu-id");
			headerList3.add("interface-name");
			headerList3.add("vlan-id");
			headerList3.add("mtu");
			headerList3.add("management");
			headerList3.add("control-user");
			headerList3.add("ieee1588");
			headerList3.add("synce");

			String entry4 = "ipv6-address";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cpu-id");
			headerList4.add("interface-name");
			headerList4.add("ip");
			headerList4.add("prefix-length");
			headerList4.add("address-state");
			headerList4.add("forwarding");
			headerList4.add("m-plane-marking");

			String entry5 = "ecpri-port-entries";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("unit-type");
			headerList5.add("unit-id");
			headerList5.add("port-id");
			headerList5.add("administrative-state");
			headerList5.add("user-label");
			headerList5.add("configured-speed");
			headerList5.add("fec-mode");

			String entry9 = "Y-Cable-Check ";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("unit-type");
			headerList9.add("unit-id");
			headerList9.add("port-id");
			headerList9.add("tx-power");
			headerList9.add("rx-power");

			String entry6 = "du-cpri-port-entries";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("unit-type");
			headerList6.add("unit-id");
			headerList6.add("port-id");
			headerList6.add("enb-ne-id");
			headerList6.add("enb-inode-id");
			headerList6.add("connected-enb-digital-unit-board-id");
			headerList6.add("connected-enb-digital-unit-port-id");
			headerList6.add("cascade-radio-unit-id");
			headerList6.add("cpri-speed-saved");
			headerList6.add("du-cpri-port-mode");
			headerList6.add("tx-wavelength");
			headerList6.add("tx-power");
			headerList6.add("rx-power");
			headerList6.add("temperature");
			headerList6.add("bit-rate");
			headerList6.add("voltage");
			headerList6.add("electric-current");

			String entry7 = "active-alarm-entries";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("alarm-unit-type");
			headerList7.add("alarm-type");
			headerList7.add("probable-cause");
			headerList7.add("specific-problem");
			headerList7.add("severity");
			headerList7.add("location");

			String entry8 = "ru-cpri-port-entries";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("unit-type");
			headerList8.add("unit-id");
			headerList8.add("port-id");
			headerList8.add("group-id");
			headerList8.add("connected-du-cpri-port-id");
			headerList8.add("tx-wavelength");
			headerList8.add("tx-power");
			headerList8.add("rx-power");
			headerList8.add("temperature");
			headerList8.add("bit-rate");
			headerList8.add("voltage");
			headerList8.add("electric-current");
			headerList8.add("cpri-speed-saved");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("active-alarm-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList7.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData7.add(objtableData);
						}
					}

					NodeList childNodeList2 = elementchild1.getElementsByTagName("o-du-entries");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;
							NodeList childNodeList3 = elementchild2.getElementsByTagName("mplane-ipv6-info");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild2, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild2, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild2, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData1.add(objtableData);
								}
							}

							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList2.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild2, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild2, header));
							}
							tabelData2.add(objtableData);
						}
					}

					childNodeList2 = elementchild1.getElementsByTagName("cpu");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;

							NodeList childNodeList3 = elementchild2.getElementsByTagName("ecpri-interfaces");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									NodeList childNodeList4 = elementchild3.getElementsByTagName("ipv6-address");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList4.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData4.add(objtableData);
										}
									}

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList3.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild2, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild3, header));
									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild3, header));
									}
									tabelData3.add(objtableData);
								}
							}
						}
					}

					childNodeList2 = elementchild1.getElementsByTagName("digital-unit");
					for (int j = 0; j < childNodeList2.getLength(); j++) {

						Node ChildNode2 = childNodeList2.item(j);
						if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
							Element elementchild2 = (Element) ChildNode2;

							NodeList childNodeList3 = elementchild2.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList3.getLength(); k++) {
								Node ChildNode3 = childNodeList3.item(k);
								if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
									Element elementchild3 = (Element) ChildNode3;

									NodeList childNodeList4 = elementchild3.getElementsByTagName("ecpri-port-entries");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList5.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData5.add(objtableData);

										}
									}
									childNodeList4 = elementchild3.getElementsByTagName("ecpri-port-entries");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList9.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData9.add(objtableData);

										}
									}
									childNodeList4 = elementchild3.getElementsByTagName("du-cpri-port-entries");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList6.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData6.add(objtableData);
										}
									}
									childNodeList4 = elementchild3.getElementsByTagName("ru-cpri-port-entries");
									for (int c = 0; c < childNodeList4.getLength(); c++) {
										Node ChildNode4 = childNodeList4.item(c);
										if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {
											Element elementchild4 = (Element) ChildNode4;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList8.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild4, header));
											}
											tabelData8.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			StringBuilder auditIssue9 = new StringBuilder();
			StringBuilder auditIssue10 = new StringBuilder();
			StringBuilder auditIssue11 = new StringBuilder();
			StringBuilder auditIssue12 = new StringBuilder();
			StringBuilder auditIssue13 = new StringBuilder();
			StringBuilder auditIssue14 = new StringBuilder();
			StringBuilder auditIssue15 = new StringBuilder();
			StringBuilder auditIssue16 = new StringBuilder();
			StringBuilder auditIssue17 = new StringBuilder();
			StringBuilder auditIssue20 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			String fsuType = "";
			for (LinkedHashMap<String, String> tdData1 : tabelData1) {
				if (tdData1.get("unit-type").equals("fsip") || tdData1.get("unit-type").equals("fsmp")) {

					fsuType = "FSU-10";
				} else {
					fsuType = "FSU-20";
				}
			}
			/*String portIDU = "";
			if (fsuType.equals("FSU-10") && vDUType.equals("medium-icl")) {
				portIDU = "1";
			}else if (fsuType.equals("FSU-20") && vDUType.equals("medium-icl")) {
				portIDU = "1";
			} else {
				portIDU = "0";
			}*/
			Set<String> interfaceSet = new HashSet<>();
			if (fsuType.equals("FSU-10") && vDUType.equals("medium")) {
				interfaceSet.add("fh_0_1_0_0");
				interfaceSet.add("fh_0_1_0_1");

			} else if (fsuType.equals("FSU-20") && vDUType.equals("medium")) {
				interfaceSet.add("fh_0_0_0_0");
				interfaceSet.add("fh_0_0_0_1");

			} else if (fsuType.equals("FSU-10") && vDUType.equals("medium-icl")) {
				interfaceSet.add("fh_0_1_0_0");
				interfaceSet.add("fh_0_1_1_0");
				interfaceSet.add("fh_0_1_0_1");
				interfaceSet.add("fh_0_1_1_1");

			} else if (fsuType.equals("FSU-20") && vDUType.equals("medium-icl")) {
				interfaceSet.add("fh_0_0_0_0");
				interfaceSet.add("fh_0_0_1_0");
				interfaceSet.add("fh_0_0_0_1");
				interfaceSet.add("fh_0_0_1_1");

			}

			// StringBuilder auditIssue6 = new StringBuilder();

			String neid = "";
			String mplaneIP = "";
			String enb4G = "";
			String vlanid1 = "";
			String mtu1 = "";
			String management1 = "";
			String controluser1 = "";
			String ieee1 = "";
			String synce1 = "";
			String vlanid2 = "";
			String mtu2 = "";
			String management2 = "";
			String controluser2 = "";
			String ieee2 = "";
			String synce2 = "";
			String interfaceIp = "";
			String portId = "";
			String administrativeState = "";
			String configuredSpeed = "";
			String fecmode = "";
			String interfaceName1 = "";
			String interfaceName2 = "";
			String interfaceName3 = "";
			String interfaceName4 = "";
			String mtu3 = "";
			String management3 = "";
			String controluser3 = "";
			String ieee3 = "";
			String synce3 = "";
			String mtu4 = "";
			String management4 = "";
			String controluser4 = "";
			String ieee4 = "";
			String synce4 = "";
			String vlanid3 = "";
			String vlanid4 = "";

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("NEID")) {
					neid = listOfCiqDetails.get(0).getCiqMap().get("NEID").getHeaderValue().replaceAll("^0+(?!$)", "");
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetails.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}

			listOfCiqDetails = getCiqDetailsForRuleValidationsheet(neid, dbcollectionFileName, "DSS_MOP_Parameters-1",
					"eNBName");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("mplane-ipv6")) {
					mplaneIP = listOfCiqDetails.get(0).getCiqMap().get("mplane-ipv6").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ip")) {
					interfaceIp = listOfCiqDetails.get(0).getCiqMap().get("ip").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("vlan-id1")) {
					vlanid1 = listOfCiqDetails.get(0).getCiqMap().get("vlan-id1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("mtu1")) {
					mtu1 = listOfCiqDetails.get(0).getCiqMap().get("mtu1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("management1")) {
					management1 = listOfCiqDetails.get(0).getCiqMap().get("management1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("control-user1")) {
					controluser1 = listOfCiqDetails.get(0).getCiqMap().get("control-user1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("vlan-id2")) {
					vlanid2 = listOfCiqDetails.get(0).getCiqMap().get("vlan-id2").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("mtu2")) {
					mtu2 = listOfCiqDetails.get(0).getCiqMap().get("mtu2").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("management2")) {
					management2 = listOfCiqDetails.get(0).getCiqMap().get("management2").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("control-user2")) {
					controluser2 = listOfCiqDetails.get(0).getCiqMap().get("control-user2").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ecpri-pi")) {
					portId = listOfCiqDetails.get(0).getCiqMap().get("ecpri-pi").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ecpri-as")) {
					administrativeState = listOfCiqDetails.get(0).getCiqMap().get("ecpri-as").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("configured-speed")) {
					configuredSpeed = listOfCiqDetails.get(0).getCiqMap().get("configured-speed").getHeaderValue()
							.trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("fec-mode")) {
					fecmode = listOfCiqDetails.get(0).getCiqMap().get("fec-mode").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("interface-name1")) {
					interfaceName1 = listOfCiqDetails.get(0).getCiqMap().get("interface-name1").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("interface-name2")) {
					interfaceName2 = listOfCiqDetails.get(0).getCiqMap().get("interface-name2").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ieee1588a")) {
					ieee1 = listOfCiqDetails.get(0).getCiqMap().get("ieee1588a").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ieee1588b")) {
					ieee2 = listOfCiqDetails.get(0).getCiqMap().get("ieee1588b").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("syncea")) {
					synce1 = listOfCiqDetails.get(0).getCiqMap().get("syncea").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("synceb")) {
					synce2 = listOfCiqDetails.get(0).getCiqMap().get("synceb").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("interface-name-mgmt2")) {
					interfaceName3 = listOfCiqDetails.get(0).getCiqMap().get("interface-name-mgmt2").getHeaderValue()
							.trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("interface-name-cu2")) {
					interfaceName4 = listOfCiqDetails.get(0).getCiqMap().get("interface-name-cu2").getHeaderValue()
							.trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("vlan-id3")) {
					vlanid3 = listOfCiqDetails.get(0).getCiqMap().get("vlan-id3").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("mtu3")) {
					mtu3 = listOfCiqDetails.get(0).getCiqMap().get("mtu3").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("management3")) {
					management3 = listOfCiqDetails.get(0).getCiqMap().get("management3").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("control-user3")) {
					controluser3 = listOfCiqDetails.get(0).getCiqMap().get("control-user3").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ieee15883")) {
					ieee3 = listOfCiqDetails.get(0).getCiqMap().get("ieee15883").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("ieee15884")) {
					ieee4 = listOfCiqDetails.get(0).getCiqMap().get("ieee15884").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("vlan-id4")) {
					vlanid4 = listOfCiqDetails.get(0).getCiqMap().get("vlan-id4").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("mtu4")) {
					mtu4 = listOfCiqDetails.get(0).getCiqMap().get("mtu4").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("management4")) {
					management4 = listOfCiqDetails.get(0).getCiqMap().get("management4").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("control-user4")) {
					controluser4 = listOfCiqDetails.get(0).getCiqMap().get("control-user4").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("synce3")) {
					synce3 = listOfCiqDetails.get(0).getCiqMap().get("synce3").getHeaderValue().trim();
				}
				if (listOfCiqDetails.get(0).getCiqMap().containsKey("synce4")) {
					synce4 = listOfCiqDetails.get(0).getCiqMap().get("synce4").getHeaderValue().trim();
				}
			}
			List<CIQDetailsModel> listOfCiqDetails3 = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"vDUDay_2", "eNBId");
			
			Set<String> nrFreq=new HashSet<>();
			if (!ObjectUtils.isEmpty(listOfCiqDetails3)) {
				for (CIQDetailsModel ciqData : listOfCiqDetails3) {
					
					if (ciqData.getCiqMap().containsKey("nrfrequency")) {
						nrFreq.add(ciqData.getCiqMap().get("nrfrequency").getHeaderValue().trim());
					}
				}
			}
			
			
			List<CIQDetailsModel> listOfCiqDetailsd1 = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"FSUCIQ", "eNBId");
			
			// mplane-ipv6-info
			if (!mplaneIP.isEmpty() && !ObjectUtils.isEmpty(tabelData1)) {
				if (compareIPAddr(mplaneIP, tabelData1.get(0).get("mplane-ipv6"))) {
					mplaneIP = tabelData1.get(0).get("mplane-ipv6");
				}
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			if (tabelData1.size() != 1) {
				auditIssue10.append("Mplane ipv6 should have 1 entry only\n");
			}
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("mplane-ipv6")) {
						if (value.equals(mplaneIP)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue10.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id") + " mplane-ipv6 : "
									+ tdData.get("mplane-ipv6") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			// o-du-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			/*if (tabelData2.size() != 1) {
				auditIssue20.append("Only 1 entry should be there for connected vDU\n");
			}
*/
			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					/*	if (key.equals("unit-id") && neVersion.contains("21.D")) {
						if (value.equals("0")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue20.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("port-id") && neVersion.contains("21.D")) {
						if (value.equals(portIDU)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue20.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {*/
						tableData.append("<td align=center>" + value + "</td>\n");
					//}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			// ecpri-interfaces
			Set<String> interfaceSetNetwork = new HashSet<>();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				if (!tdData.get("interface-name").isEmpty()) {
					interfaceSetNetwork.add(tdData.get("interface-name"));
				}
			}
			/*for (String iData : interfaceSet) {
				if (!interfaceSetNetwork.contains(iData)) {
					auditIssue3.append("Interface should have " + iData + " entries\n");
				}
			}*/
			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");

				/*boolean auditfailure = false;
				if (tdData.get("interface-name").equals(interfaceName1)) {
					if ((!tdData.get("vlan-id").equals(vlanid1)) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals(mtu1)) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase(management1)) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase(controluser1)) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase(ieee1)) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase(synce1)) {
						auditfailure = true;
					}
				} else if (tdData.get("interface-name").equals(interfaceName2)) {
					if ((!tdData.get("vlan-id").equals(vlanid2)) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals(mtu2)) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase(management2)) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase(controluser2)) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase(ieee2)) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase(synce2)) {
						auditfailure = true;
					}
				} else if (tdData.get("interface-name").equals(interfaceName3) && vDUType.equals("medium-icl")) {
					if ((!tdData.get("vlan-id").equals(vlanid3)) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals(mtu3)) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase(management3)) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase(controluser3)) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase(ieee3)) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase(synce3)) {
						auditfailure = true;
					}
				} else if (tdData.get("interface-name").equals(interfaceName4) && vDUType.equals("medium-icl")) {
					if ((!tdData.get("vlan-id").equals(vlanid4)) && (!tdData.get("vlan-id").equals("-"))) {
						auditfailure = true;
					}
					if (!tdData.get("mtu").equals(mtu4)) {
						auditfailure = true;
					}
					if (!tdData.get("management").equalsIgnoreCase(management4)) {
						auditfailure = true;
					}
					if (!tdData.get("control-user").equalsIgnoreCase(controluser4)) {
						auditfailure = true;
					}
					if (!tdData.get("ieee1588").equalsIgnoreCase(ieee4)) {
						auditfailure = true;
					}
					if (!tdData.get("synce").equalsIgnoreCase(synce4)) {
						auditfailure = true;
					}
				}*/
				//boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					//String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					/*if (auditfailure) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						if (!entryPresent) {
							auditIssue3.append("interface-name : " + tdData.get("interface-name") + " vlan-id : "
									+ tdData.get("vlan-id") + " mtu : " + tdData.get("mtu") + " management : "
									+ tdData.get("management") + " control-user : " + tdData.get("control-user")
									+ " ieee1588 : " + tdData.get("ieee1588") + " synce : " + tdData.get("synce")
									+ "\n");
							entryPresent = true;
						}

					} else {*/
						tableData.append("<td align=center>" + value + "</td>\n");
				//	}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// ipv6-address
			if (!interfaceIp.isEmpty() && !ObjectUtils.isEmpty(tabelData4)) {
				if (compareIPAddr(interfaceIp, tabelData4.get(0).get("ip"))) {
					interfaceIp = tabelData4.get(0).get("ip");
				}
			}

			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			if (tabelData4.size() != 1) {
				auditIssue4.append("Mplane ipv6 should have 1 entry\n");
			}
			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");
				List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository
						.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_5G_DSS, fsuType.trim(), vDUType.trim());
				String interfaceName = "";
				if (!ObjectUtils.isEmpty(auditConstantsList)) {
					interfaceName = auditConstantsList.get(0).getParameterValue().trim();
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("ip")) {
						if (value.equals(interfaceIp)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("interface-namee : " + tdData.get("interface-name") + " ip : "
									+ tdData.get("ip") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("interface-name")  && vDUType.equals("medium")) {
						if (value.equals(interfaceName)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("interface-namee : " + tdData.get("interface-name") + " ip : "
									+ tdData.get("ip") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// ecpri-port-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList5) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData5) {
				/*boolean auditFailure = false;
				if (tdData.get("port-id").equals(portId)) {
					if (!tdData.get("administrative-state").equalsIgnoreCase(administrativeState)) {
						auditFailure = true;
					}
					if (!tdData.get("configured-speed").equalsIgnoreCase(configuredSpeed)) {
						auditFailure = true;
					}
					if (!tdData.get("fec-mode").equalsIgnoreCase(fecmode)) {
						auditFailure = true;
					}
				}*/
				tableData.append("<tr>\n");
				boolean entryPresent = false;
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					//String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					/*if (auditFailure) {
						tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						if (!entryPresent) {
							auditIssue5.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id")
									+ " administrative-state : " + tdData.get("administrative-state")
									+ " configured-speed : " + tdData.get("configured-speed") + " fec-mode : "
									+ tdData.get("fec-mode") + "\n");
							entryPresent = true;
						}

					} else {*/
						tableData.append("<td align=center>" + value + "</td>\n");
					//}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			 if(!(tabelData7.size()==0)) {
			htmlContent.append(
					"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList7) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData7) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (!value.equals("-")) {
							auditIssue6.append("FSU ALARMS : alarm-type : " + tdData.get("alarm-type")
									+ " probable-cause : " + tdData.get("probable-cause") + " location : "
									+ tdData.get("location") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
		 }else {
         	htmlContent.append(
 					"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");
         	htmlContent.append("<tr>\n<td align=center colspan=" + headerList7.size() + " bgcolor=FFFF00>NO DATA</td></tr>\n");	
         }
			String txPowerUl = "2.4";
			String txPowerLl = "-8.4";
			String rxPowerUl = "2.4";
			String rxPowerLl = "-7.3";
			List<AuditConstantsEntity> auditConstantsList1 = auditConstantsRepository
					.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_5G_DSS, AuditConstants.TXPOWERUPPERLIMIT);

			if (!ObjectUtils.isEmpty(auditConstantsList1)) {
				txPowerUl = auditConstantsList1.get(0).getParameterValue();
			}
			auditConstantsList1 = auditConstantsRepository
					.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_5G_DSS, AuditConstants.TXPOWELOWERLIMIT);

			if (!ObjectUtils.isEmpty(auditConstantsList1)) {
				txPowerLl = auditConstantsList1.get(0).getParameterValue();
			}
			auditConstantsList1 = auditConstantsRepository
					.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_5G_DSS, AuditConstants.RXPOWERUPPERLIMIT);

			if (!ObjectUtils.isEmpty(auditConstantsList1)) {
				rxPowerUl = auditConstantsList1.get(0).getParameterValue();
			}
			auditConstantsList1 = auditConstantsRepository
					.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_5G_DSS, AuditConstants.RXPOWELOWERLIMIT);

			if (!ObjectUtils.isEmpty(auditConstantsList1)) {
				rxPowerLl = auditConstantsList1.get(0).getParameterValue();
			}
			Double txPowerUlD = 2.4;
			Double txPowerLlD = -8.4;
			Double rxPowerUlD = 2.4;
			Double rxPowerLlD = -7.3;
			if (NumberUtils.isNumber(txPowerUl)) {
				txPowerUlD = Double.parseDouble(txPowerUl);
			}
			if (NumberUtils.isNumber(txPowerLl)) {
				txPowerLlD = Double.parseDouble(txPowerLl);
			}
			if (NumberUtils.isNumber(rxPowerUl)) {
				rxPowerUlD = Double.parseDouble(rxPowerUl);
			}
			if (NumberUtils.isNumber(rxPowerLl)) {
				rxPowerLlD = Double.parseDouble(rxPowerLl);
			}
			htmlContent.append(
					"<tr><td colspan=" + headerList9.size() + " bgcolor=#EEEEEE><b>" + entry9 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList9) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData9) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if ("tx-power".equalsIgnoreCase(key)) {
						if (NumberUtils.isNumber(value)) {
							Double txPower = Double.parseDouble(value);
							if ((txPower >= txPowerLlD && txPower <= txPowerUlD)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditIssue1.append("tx-power : " + tdData.get("tx-power") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue1.append("tx-power : " + tdData.get("tx-power") + "\n");
						}
					} else if ("rx-power".equalsIgnoreCase(key)) {
						if (NumberUtils.isNumber(value)) {
							Double vswr = Double.parseDouble(value);
							if (vswr >= rxPowerLlD && vswr <= rxPowerUlD) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditIssue2.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
										+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id") + " rx-power : "
										+ tdData.get("rx-power") + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue2.append("unit-type : " + tdData.get("unit-type") + " unit-id : "
									+ tdData.get("unit-id") + " port-id : " + tdData.get("port-id") + " rx-power : "
									+ tdData.get("rx-power") + "\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			// du-cpri-port-entries
			htmlContent.append(
					"<tr><td colspan=" + headerList6.size() + " bgcolor=#EEEEEE><b>" + entry6 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList6) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData6) {
				tableData.append("<tr>\n");

				String lcc = "";
				String crpi = "";
				String port = "";
				String enb = "";
				String crpi2 = "";
				String UnitType = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsd1) {
						if (ciqData.getCiqMap().containsKey("RU_PortID")
								&& ciqData.getCiqMap().get("RU_PortID").getHeaderValue().trim()
										.equals(tdData.get("port-id").trim())
								&& ciqData.getCiqMap().containsKey("Connected_DU_PortID")
								&& ciqData.getCiqMap().get("Connected_DU_PortID").getHeaderValue().trim()
										.equals(tdData.get("port-id").trim())) {
							port = tdData.get("port-id");
							if (ciqData.getCiqMap().containsKey("LCC_Card_Port")) {
								crpi = ciqData.getCiqMap().get("LCC_Card_Port").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("lcc_card_no")) {
								lcc = ciqData.getCiqMap().get("lcc_card_no").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("4G_enB")) {
								enb = ciqData.getCiqMap().get("4G_enB").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("LCC_Card_Port2")) {
								crpi2 = ciqData.getCiqMap().get("LCC_Card_Port2").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("Unit_Type")) {
								UnitType = ciqData.getCiqMap().get("Unit_Type").getHeaderValue().trim();
							}
						}
					}
				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					if (key.equals("connected-enb-digital-unit-board-id")) {
						if (value.equals(lcc)) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue7.append(
									"port-id: " + tdData.get("port-id") + " connected-enb-digital-unit-board-id: "
											+ tdData.get("connected-enb-digital-unit-board-id") + "\n");

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("connected-enb-digital-unit-port-id")) {
						if (value.equals(crpi) || value.equals(crpi2)) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue8.append(
									"port-id: " + tdData.get("port-id") + " connected-enb-digital-unit-port-id: "
											+ tdData.get("connected-enb-digital-unit-port-id") + "\n");

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("port-id")) {
						if (value.equals(port)) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue9.append("port-id: " + tdData.get("port-id") + "\n");

							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("enb-ne-id")) {
						if (value.equals(enb)) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue11.append("port-id: " + tdData.get("port-id") + " enb-ne-id: "
									+ tdData.get("enb-ne-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} /*else if (key.equals("du-cpri-port-mode")) {
						if (value.equals("pass-through")) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							auditIssue12.append("port-id: " + tdData.get("port-id") + " du-cpri-port-mode: "
									+ tdData.get("du-cpri-port-mode") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					}*/ else if (key.equals("unit-type")) {
						if (value.equals(UnitType)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue16.append("port-id: " + tdData.get("port-id") + " unit-type: "
									+ tdData.get("unit-type") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center >" + value + "</td>\n");

					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			// ru-cipriport
			/*for (LinkedHashMap<String, String> tdData : tabelData8) {
				if (!(tdData.get("port-id").equals(tdData.get("connected-du-cpri-port-id")))) {
					auditIssue17.append("port-id: " + tdData.get("port-id") + " should match with "
							+ " connected-du-cpri-port-id: " + tdData.get("connected-du-cpri-port-id") + "\n");
				}
			}*/
			htmlContent.append(
					"<tr><td colspan=" + headerList8.size() + " bgcolor=#EEEEEE><b>" + entry8 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList8) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData8) {
				tableData.append("<tr>\n");

				/*String portid = "";
				String Duport = "";
				String groupId = "";
				String UnitType = "";
				if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {
					for (CIQDetailsModel ciqData : listOfCiqDetailsd1) {
						if (ciqData.getCiqMap().containsKey("RU_PortID")
								&& ciqData.getCiqMap().get("RU_PortID").getHeaderValue().trim()
										.equals(tdData.get("port-id").trim())
								&& ciqData.getCiqMap().containsKey("Connected_DU_PortID")
								&& ciqData.getCiqMap().get("Connected_DU_PortID").getHeaderValue().trim()
										.equals(tdData.get("connected-du-cpri-port-id").trim())) {
							portid = tdData.get("port-id");
							if (ciqData.getCiqMap().containsKey("Connected_DU_PortID")) {
								Duport = ciqData.getCiqMap().get("Connected_DU_PortID").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("Group_ID")) {
								groupId = ciqData.getCiqMap().get("Group_ID").getHeaderValue().trim();
							}
							if (ciqData.getCiqMap().containsKey("Unit_Type")) {
								UnitType = ciqData.getCiqMap().get("Unit_Type").getHeaderValue().trim();
							}
						}
					}
				}*/

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
				//	String key = resultTableData.getKey();
					String value = resultTableData.getValue();

				/*	if (key.equals("port-id")) {
						if (value.equals(portid)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue13.append("port-id: " + tdData.get("port-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("connected-du-cpri-port-id")) {
						if (value.equals(Duport)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue14.append("port-id: " + tdData.get("port-id") + " connected-du-cpri-port-id: "
									+ tdData.get("connected-du-cpri-port-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("group-id")&& (nrFreq.contains("66") || nrFreq.contains("2"))) {
						if (value.equals(groupId)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue15.append("port-id: " + tdData.get("port-id") + " group-id: "
									+ tdData.get("group-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else {*/
						tableData.append("<td align=center>" + value + "</td>\n");
					//}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			auditIssueAll.append(auditIssue7);
			auditIssueAll.append(auditIssue8);
			auditIssueAll.append(auditIssue9);
			auditIssueAll.append(auditIssue10);
			auditIssueAll.append(auditIssue11);
			auditIssueAll.append(auditIssue12);
			auditIssueAll.append(auditIssue13);
			auditIssueAll.append(auditIssue14);
			auditIssueAll.append(auditIssue15);
			auditIssueAll.append(auditIssue16);
			auditIssueAll.append(auditIssue17);
			auditIssueAll.append(auditIssue20);
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData6, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData7, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData8, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData9, auditIssueAll);

			if (auditIssue6.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(59, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(59, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(59, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(72, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(72, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(72, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(73, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(73, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(73, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue10.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue10.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			/*if (auditIssue20.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(38, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue20.toString());
			}*/
			/*if (auditIssue3.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(39, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
			}*/
			if (auditIssue4.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			/*if (auditIssue5.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
			}*/
			if (auditIssue7.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(78, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(78, runTestEntity.getId(),
					 	enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(78, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue8.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(79, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue8.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(79, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(79, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue9.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(80, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue9.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(80, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(80, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue11.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(81, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue11.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(81, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(81, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			/*if (auditIssue12.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(82, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue12.toString());
			}*/
			/*if (auditIssue13.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(83, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue13.toString());
			}
			if (auditIssue14.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(84, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue14.toString());
			}
			if (auditIssue15.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(85, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue15.toString());
			}*/
			if (auditIssue16.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(86, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue16.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(86, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(86, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			/*if (auditIssue17.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(87, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue17.toString());
			}*/

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getCrrierRssioutput(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			List<CIQDetailsModel> listCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");

			String diff = "3.00";
			List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository.getAuditConstantsEntityList(
					AuditConstants.PROGRAMNAME_4G_USM_LIVE, AuditConstants.RSSI_TEST_RSSIDIFF);

			if (!ObjectUtils.isEmpty(auditConstantsList)) {
				diff = auditConstantsList.get(0).getParameterValue();
			}
			String pathDiff = "3.00";
			List<AuditConstantsEntity> auditConstantsList1 = auditConstantsRepository.getAuditConstantsEntityList(
					AuditConstants.PROGRAMNAME_4G_USM_LIVE, AuditConstants.RSSI_TEST_PATHDIFF);

			if (!ObjectUtils.isEmpty(auditConstantsList1)) {
				pathDiff = auditConstantsList1.get(0).getParameterValue();
			}

			int runLength = 15;
			List<AuditConstantsEntity> auditConstantslength = auditConstantsRepository.getAuditConstantsEntityList(
					AuditConstants.PROGRAMNAME_4G_USM_LIVE, AuditConstants.RSSI_TEST_LENGTH);

			if (!ObjectUtils.isEmpty(auditConstantslength)
					&& NumberUtils.isNumber(auditConstantslength.get(0).getParameterValue())) {
				runLength = NumberUtils.toInt(auditConstantslength.get(0).getParameterValue());
			}

			StringBuilder htmlContentcombined = new StringBuilder();
			StringBuilder rssiAuditIssue = new StringBuilder();
			htmlContentcombined.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContentcombined.append("<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>"
					+ "4GAudit_Carrier_Rssi_Imbalance" + "</b></td></tr>\n");
			htmlContentcombined.append("</table>\n");
			if (!ObjectUtils.isEmpty(listCiqDetails)) {
				for (CIQDetailsModel ciqDetails : listCiqDetails) {
					List<LinkedHashMap<String, String>> tabelData101 = new ArrayList<>();
					String cellnum = "";
					String lcccard = "";
					String crpiportno = "";
					String outputPower = "";
					String bandName = "";
					String bandwidth = "";
					String txDiversity = "";
					String rssiValue = "";
					if (ciqDetails.getCiqMap().containsKey("Cell_ID") && ciqDetails.getCiqMap().containsKey("lCCCard")
							&& ciqDetails.getCiqMap().containsKey("CRPIPortID")) {
						cellnum = ciqDetails.getCiqMap().get("Cell_ID").getHeaderValue().trim();
						lcccard = ciqDetails.getCiqMap().get("lCCCard").getHeaderValue().trim();
						crpiportno = ciqDetails.getCiqMap().get("CRPIPortID").getHeaderValue().trim();
					}
					if (ciqDetails.getCiqMap().containsKey("Output_Power(dBm)")) {
						outputPower = ciqDetails.getCiqMap().get("Output_Power(dBm)").getHeaderValue().trim();
					}
					if (ciqDetails.getCiqMap().containsKey("BandName")
							&& ciqDetails.getCiqMap().containsKey("Bandwidth(MHz)")
							&& ciqDetails.getCiqMap().containsKey("Tx_Diversity")) {
						bandName = ciqDetails.getCiqMap().get("BandName").getHeaderValue().trim();
						bandwidth = ciqDetails.getCiqMap().get("Bandwidth(MHz)").getHeaderValue().trim();
						txDiversity = ciqDetails.getCiqMap().get("Tx_Diversity").getHeaderValue().trim();
					}
					for (int run = 1; run <= runLength; run++) {
						if (run == 1) {
							createtaleRun1(fullOutputLog, command, enbId, dbcollectionFileName, rssiValue, cellnum,
									bandName, txDiversity, diff, pathDiff, run, tabelData101);
						} else {
							createtaleRun2(fullOutputLog, command, enbId, dbcollectionFileName, rssiValue, cellnum,
									bandName, txDiversity, diff, pathDiff, run, tabelData101);
						}
					}
					modifyTable(tabelData101);
					String commandModified1 = "Cell-Num : " + cellnum;
					JSONObject rssiResult1 = get4GrssiHtmlContent1(fullOutputLog, commandModified1, enbId,
							dbcollectionFileName, rssiValue, cellnum, bandName, txDiversity, diff, pathDiff,
							tabelData101);
					if (rssiResult1.containsKey("htmlContent")) {
						htmlContentcombined.append(rssiResult1.get("htmlContent").toString());
					}
					if (rssiResult1.containsKey("auditIssue")) {
						rssiAuditIssue.append(rssiResult1.get("auditIssue").toString());
					}

				}
			}
			htmlContent.append(htmlContentcombined);

			for (int run = 1; run <= runLength; run++) {
				StringBuilder htmlContentRssi = new StringBuilder();
				htmlContentRssi.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContentRssi.append("<tr><td colspan=" + 25 + " bgcolor=#EEEEEE><b>" + "4GAudit_Carrier_Rssi_Run_id"
						+ run + "</b></td></tr>\n");
				htmlContentRssi.append("</table>\n");
				if (!ObjectUtils.isEmpty(listCiqDetails)) {
					for (CIQDetailsModel ciqDetails : listCiqDetails) {
						String cellnum = "";
						String lcccard = "";
						String crpiportno = "";
						String outputPower = "";
						String bandName = "";
						String bandwidth = "";
						String txDiversity = "";
						String rssiValue = "";
						if (ciqDetails.getCiqMap().containsKey("Cell_ID")
								&& ciqDetails.getCiqMap().containsKey("lCCCard")
								&& ciqDetails.getCiqMap().containsKey("CRPIPortID")) {
							cellnum = ciqDetails.getCiqMap().get("Cell_ID").getHeaderValue().trim();
							lcccard = ciqDetails.getCiqMap().get("lCCCard").getHeaderValue().trim();
							crpiportno = ciqDetails.getCiqMap().get("CRPIPortID").getHeaderValue().trim();
						}
						if (ciqDetails.getCiqMap().containsKey("Output_Power(dBm)")) {
							outputPower = ciqDetails.getCiqMap().get("Output_Power(dBm)").getHeaderValue().trim();
						}
						if (ciqDetails.getCiqMap().containsKey("BandName")
								&& ciqDetails.getCiqMap().containsKey("Bandwidth(MHz)")
								&& ciqDetails.getCiqMap().containsKey("Tx_Diversity")) {
							bandName = ciqDetails.getCiqMap().get("BandName").getHeaderValue().trim();
							bandwidth = ciqDetails.getCiqMap().get("Bandwidth(MHz)").getHeaderValue().trim();
							txDiversity = ciqDetails.getCiqMap().get("Tx_Diversity").getHeaderValue().trim();
						}
						rssiValue = getrssiValue(bandName, bandwidth);

						if (NumberUtils.isNumber(cellnum) && NumberUtils.isNumber(lcccard)
								&& NumberUtils.isNumber(crpiportno)) {
							String commandModified = "Cell-Num : " + cellnum;

							JSONObject rssiResult = get4GrssiHtmlContent(fullOutputLog, commandModified, enbId,
									dbcollectionFileName, rssiValue, cellnum, bandName, txDiversity, diff, pathDiff,
									run);
							if (rssiResult.containsKey("htmlContent")) {
								htmlContentRssi.append(rssiResult.get("htmlContent").toString());
							}

						}
					}
				}
				htmlContent.append(htmlContentRssi);
			}

			if (rssiAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(49, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), rssiAuditIssue.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(49, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(49, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	private void modifyTable(List<LinkedHashMap<String, String>> tabelData101) {
		try {
			int runLength = 15;
			List<AuditConstantsEntity> auditConstantslength = auditConstantsRepository.getAuditConstantsEntityList(
					AuditConstants.PROGRAMNAME_4G_USM_LIVE, AuditConstants.RSSI_TEST_LENGTH);

			if (!ObjectUtils.isEmpty(auditConstantslength)
					&& NumberUtils.isNumber(auditConstantslength.get(0).getParameterValue())) {
				runLength = NumberUtils.toInt(auditConstantslength.get(0).getParameterValue());
			}
			for (LinkedHashMap<String, String> tdData1 : tabelData101) {
				Double rssiTotal = 0.0;
				if (NumberUtils.isNumber(tdData1.get("carrier-rssi"))) {
					rssiTotal = Double.parseDouble(tdData1.get("carrier-rssi"));
				}

				rssiTotal = (double) rssiTotal / runLength;
				rssiTotal = Math.round(rssiTotal * 100.0) / 100.0;
				tdData1.put("carrier-rssi", rssiTotal.toString());
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private List<LinkedHashMap<String, String>> createtaleRun2(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, String rssiValue, String cellnum, String bandName, String txDiversity,
			String diff, String pathDiff, int run, List<LinkedHashMap<String, String>> tabelData101) {
		JSONObject result = new JSONObject();
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog,
					XmlCommandsConstants.AUDIT_4G_CARRIER_RSSI + cellnum + "cellnum" + "runid" + run);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("path");
			headerList1.add("carrier-index");
			headerList1.add("carrier-rssi");

			List<LinkedHashMap<String, String>> tabelData100 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			tabelData2 = getCarrierInfo(fullOutputLog, XmlCommandsConstants.AUDIT_4G_RSSIIMBALANCE, enbId,
					dbcollectionFileName);

			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("path-control");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("carrier-control");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData100.add(objtableData);

												}
											}
										}
									}
								}
							}
						}
					}

				}
			}

			String carrierID = getCellCarrierMapping(tabelData2, cellnum);
			List<String> pathList1 = getPathList(bandName, txDiversity);
			Set<String> gnodebIdset = new HashSet<>();
			gnodebIdset.add(carrierID);
			trimTabledataString1(tabelData100, gnodebIdset, "carrier-index");

			trimTabledataString2(tabelData100, pathList1, "path");

			addCarrierRssi(tabelData100, tabelData101);

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}

		return tabelData101;
	}

	@SuppressWarnings("unchecked")
	private JSONObject get4GrssiHtmlContent1(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, String rssiValue, String cellnum, String bandName, String txDiversity,
			String diff, String pathDiff, List<LinkedHashMap<String, String>> tabelData101) {
		JSONObject result = new JSONObject();
		StringBuilder htmlContent = new StringBuilder();
		try {

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("path");
			headerList1.add("carrier-index");
			headerList1.add("carrier-rssi");

			headerList1.add("rssi-imbalance");

			for (LinkedHashMap<String, String> tdData2 : tabelData101) {
				tdData2.put("rssi-imbalance", "-");
			}

			htmlContent.append(
					"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			List<String> pathList = getPathList(bandName, txDiversity);

			Double rssi = 0.0;
			if (NumberUtils.isNumber(rssiValue)) {
				rssi = Double.parseDouble(rssiValue);
			}
			Double rssicomp = 3.0;
			if (NumberUtils.isNumber(diff)) {
				rssicomp = Double.parseDouble(diff);
			}
			Double pathDiff1 = 3.0;
			if (NumberUtils.isNumber(pathDiff)) {
				pathDiff1 = Double.parseDouble(pathDiff);
			}
			StringBuilder auditIssue = new StringBuilder();

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData101) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					if ("path".equalsIgnoreCase(resultTableData.getKey())
							&& pathList.contains(tdData.get("path").trim())) {

						if (NumberUtils.isNumber(resultTableData.getValue())
								&& NumberUtils.isNumber(tdData.get("carrier-rssi"))) {
							Double carrierRssi1 = Double.parseDouble(tdData.get("carrier-rssi"));
							JSONObject rssIimb = getRssiImbalanceaac(tabelData101, carrierRssi1, tdData.get("path"),
									enbId, pathDiff1);
							if (rssIimb.containsKey("Status") && rssIimb.get("Status").equals("fail")) {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								if (rssIimb.containsKey("auditIssuePathImbalance")) {
									auditIssue.append(rssIimb.get("auditIssuePathImbalance"));
								}
							} else {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						}

					} else if ("rssi-imbalance".equalsIgnoreCase(resultTableData.getKey())) {

						if (NumberUtils.isNumber(tdData.get("carrier-rssi"))
								&& NumberUtils.isNumber(tdData.get("carrier-rssi"))) {
							Double carrierRssi1 = Double.parseDouble(tdData.get("carrier-rssi"));
							JSONObject rssIimb2 = getRssiImbalanceaacpath(tabelData101, carrierRssi1,
									tdData.get("path"), enbId, pathDiff1);
							if (rssIimb2.containsKey("Status") && rssIimb2.get("Status").equals("fail")) {
								tableData.append(
										"<td align=center bgcolor ='#fa8c8c'>" + rssIimb2.get("pathIssue") + "</td>\n");

							} else {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							}
						} else {
							tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
						}

					} else {
						tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			if (auditIssue.length() != 0) {
				result.put("auditIssue", auditIssue);
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		result.put("htmlContent", htmlContent);
		return result;
	}

	private List<LinkedHashMap<String, String>> createtaleRun1(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, String rssiValue, String cellnum, String bandName, String txDiversity,
			String diff, String pathDiff, int run, List<LinkedHashMap<String, String>> tabelData100) {
		JSONObject result = new JSONObject();
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog,
					XmlCommandsConstants.AUDIT_4G_CARRIER_RSSI + cellnum + "cellnum" + "runid" + run);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("path");
			headerList1.add("carrier-index");
			headerList1.add("carrier-rssi");

			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			tabelData2 = getCarrierInfo(fullOutputLog, XmlCommandsConstants.AUDIT_4G_RSSIIMBALANCE, enbId,
					dbcollectionFileName);

			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("path-control");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("carrier-control");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData100.add(objtableData);

												}
											}
										}
									}
								}
							}
						}
					}

				}
			}

			String carrierID = getCellCarrierMapping(tabelData2, cellnum);
			List<String> pathList1 = getPathList(bandName, txDiversity);
			Set<String> gnodebIdset = new HashSet<>();
			gnodebIdset.add(carrierID);
			trimTabledataString1(tabelData100, gnodebIdset, "carrier-index");

			trimTabledataString2(tabelData100, pathList1, "path");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}

		return tabelData100;
	}

	public String getrssiValue(String bandName, String bandwidth) {
		String rssiValue = "0";
		try {
			if (bandName.contains(AuditConstants.BANDNAME_AWS)) {
				bandName = AuditConstants.BANDNAME_AWS;
			} else if (bandName.contains(AuditConstants.BANDNAME_PCS)) {
				bandName = AuditConstants.BANDNAME_PCS;
			} else if (bandName.contains(AuditConstants.BANDNAME_LAA)) {
				bandName = AuditConstants.BANDNAME_LAA;
			} else if (bandName.contains(AuditConstants.BANDNAME_CBRS)) {
				bandName = AuditConstants.BANDNAME_CBRS;
			} else if (bandName.contains(AuditConstants.BANDNAME_700)) {
				bandName = AuditConstants.BANDNAME_700;
			} else if (bandName.contains(AuditConstants.BANDNAME_850)) {
				bandName = AuditConstants.BANDNAME_850;
			}

			if (bandwidth.contains("5") && !bandwidth.contains("15")) {
				bandwidth = AuditConstants.BANDWIDTH_5MHZ;
			} else if (bandwidth.contains("10")) {
				bandwidth = AuditConstants.BANDWIDTH_10MHZ;
			} else if (bandwidth.contains("15")) {
				bandwidth = AuditConstants.BANDWIDTH_15MHZ;
			} else if (bandwidth.contains("20")) {
				bandwidth = AuditConstants.BANDWIDTH_20MHZ;
			}

			List<AuditConstantsEntity> auditConstantsList = auditConstantsRepository
					.getAuditConstantsEntityList(AuditConstants.PROGRAMNAME_4G_USM_LIVE, bandName, bandwidth);

			if (!ObjectUtils.isEmpty(auditConstantsList)) {
				rssiValue = auditConstantsList.get(0).getParameterValue();
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return rssiValue;
	}

	public List<String> getPathList(String bandName, String txDiversity) {
		List<String> pathList = new ArrayList<>();
		if (bandName.contains(AuditConstants.BANDNAME_AWS)) {
			if (txDiversity.equals("2")) {
				pathList.add("1");
				pathList.add("2");
			} else if (txDiversity.equals("4")) {
				pathList.add("1");
				pathList.add("2");
				pathList.add("3");
				pathList.add("4");
			}
		} else if (bandName.contains(AuditConstants.BANDNAME_PCS)) {
			if (txDiversity.equals("2")) {
				pathList.add("5");
				pathList.add("6");
			} else if (txDiversity.equals("4")) {
				pathList.add("5");
				pathList.add("6");
				pathList.add("7");
				pathList.add("8");
			}
		} else if (bandName.contains(AuditConstants.BANDNAME_LAA)) {
			pathList.add("1");
			pathList.add("2");
			pathList.add("3");
			pathList.add("4");
		} else if (bandName.contains(AuditConstants.BANDNAME_CBRS)) {
			pathList.add("1");
			pathList.add("2");
			pathList.add("3");
			pathList.add("4");
		} else if (bandName.contains(AuditConstants.BANDNAME_700)) {
			if (txDiversity.equals("2")) {
				pathList.add("1");
				pathList.add("2");
			} else if (txDiversity.equals("4")) {
				pathList.add("1");
				pathList.add("2");
				pathList.add("3");
				pathList.add("4");
			}
		} else if (bandName.contains(AuditConstants.BANDNAME_850)) {
			if (txDiversity.equals("2")) {
				pathList.add("5");
				pathList.add("6");
			} else if (txDiversity.equals("4")) {
				pathList.add("5");
				pathList.add("6");
				pathList.add("7");
				pathList.add("8");
			}
		}
		return pathList;
	}

	@SuppressWarnings("unchecked")
	public JSONObject get4GrssiHtmlContent(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, String rssiValue, String cellnum, String bandName, String txDiversity,
			String diff, String pathDiff, int run) {
		JSONObject result = new JSONObject();
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog,
					XmlCommandsConstants.AUDIT_4G_CARRIER_RSSI + cellnum + "cellnum" + "runid" + run);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("path");
			headerList1.add("carrier-index");
			headerList1.add("carrier-rssi");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			tabelData2 = getCarrierInfo(fullOutputLog, XmlCommandsConstants.AUDIT_4G_RSSIIMBALANCE, enbId,
					dbcollectionFileName);

			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("radio-unit");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("path-control");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											NodeList childNodeList3 = elementchild2
													.getElementsByTagName("carrier-control");
											for (int m = 0; m < childNodeList3.getLength(); m++) {
												Node ChildNode3 = childNodeList3.item(m);
												if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

													Element elementchild3 = (Element) ChildNode3;

													LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
													Iterator<String> itr = headerList1.iterator();
													String header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild1, header));
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));

													while (itr.hasNext()) {
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
													}
													tabelData1.add(objtableData);

												}
											}
										}
									}
								}
							}
						}
					}

				}
			}
			if (tabelData1.isEmpty()) {
				htmlContent.setLength(0);
				htmlContent.append(
						"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
				result.put("htmlContent", htmlContent);
				return result;
			}

			String carrierID = getCellCarrierMapping(tabelData2, cellnum);
			List<String> pathList1 = getPathList(bandName, txDiversity);
			Set<String> gnodebIdset = new HashSet<>();
			gnodebIdset.add(carrierID);
			trimTabledataString1(tabelData1, gnodebIdset, "carrier-index");

			trimTabledataString2(tabelData1, pathList1, "path");

			htmlContent.append(
					"<table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			List<String> pathList = getPathList(bandName, txDiversity);

			Double rssi = 0.0;
			if (NumberUtils.isNumber(rssiValue)) {
				rssi = Double.parseDouble(rssiValue);
			}
			Double rssicomp = 3.0;
			if (NumberUtils.isNumber(diff)) {
				rssicomp = Double.parseDouble(diff);
			}
			Double pathDiff1 = 3.0;
			if (NumberUtils.isNumber(pathDiff)) {
				pathDiff1 = Double.parseDouble(pathDiff);
			}
			StringBuilder auditIssue = new StringBuilder();

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					/*
					 * if ("carrier-rssi".equalsIgnoreCase(resultTableData.getKey()) &&
					 * pathList.contains(tdData.get("path").trim())) {
					 * 
					 * if (NumberUtils.isNumber(resultTableData.getValue())) { Double carrierRssi =
					 * Double.parseDouble(resultTableData.getValue());
					 * 
					 * if ((rssi - carrierRssi) > rssicomp || (rssi - carrierRssi) < -rssicomp) {
					 * auditIssue.append( "connected-digital-unit-board-id : " +
					 * tdData.get("connected-digital-unit-board-id") +
					 * " connected-digital-unit-port-id : " +
					 * tdData.get("connected-digital-unit-port-id") + " path : " +
					 * tdData.get("path") + " carrier-index : " + tdData.get("carrier-index") +
					 * " carrier-rssi : " + tdData.get("carrier-rssi") + "\n"); tableData.append(
					 * "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() +
					 * "</td>\n"); } else { tableData.append("<td align=center>" +
					 * resultTableData.getValue() + "</td>\n"); } } else { auditIssue.append(
					 * "connected-digital-unit-board-id : " +
					 * tdData.get("connected-digital-unit-board-id") +
					 * " connected-digital-unit-port-id : " +
					 * tdData.get("connected-digital-unit-port-id") + " path : " +
					 * tdData.get("path") + " carrier-index : " + tdData.get("carrier-index") +
					 * " carrier-rssi : " + tdData.get("carrier-rssi") + "\n"); tableData.append(
					 * "<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue() +
					 * "</td>\n"); }
					 * 
					 * } else {
					 */
					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
					/* } */

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			if (auditIssue.length() != 0) {
				result.put("auditIssue", auditIssue);
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		result.put("htmlContent", htmlContent);
		return result;
	}

	private void addCarrierRssi(List<LinkedHashMap<String, String>> tabelData1,
			List<LinkedHashMap<String, String>> tabelData100) {
		for (LinkedHashMap<String, String> tdData1 : tabelData1) {
			for (LinkedHashMap<String, String> tdData2 : tabelData100) {
				if (tdData1.get("connected-digital-unit-board-id")
						.equals(tdData2.get("connected-digital-unit-board-id"))
						&& tdData1.get("connected-digital-unit-port-id")
								.equals(tdData2.get("connected-digital-unit-port-id"))
						&& tdData1.get("path").equals(tdData2.get("path"))
						&& tdData1.get("carrier-index").equals(tdData2.get("carrier-index"))) {
					Double rssiCurr = 0.0;
					if (NumberUtils.isNumber(tdData1.get("carrier-rssi"))) {
						rssiCurr = Double.parseDouble(tdData1.get("carrier-rssi"));
					}
					Double rssiTotal = 0.0;
					if (NumberUtils.isNumber(tdData2.get("carrier-rssi"))) {
						rssiTotal = Double.parseDouble(tdData2.get("carrier-rssi"));
					}
					rssiTotal = rssiTotal + rssiCurr;
					tdData2.put("carrier-rssi", rssiTotal.toString());
				}
			}
		}

	}

	private void trimTabledataString2(List<LinkedHashMap<String, String>> tabelData, List<String> pathList1,
			String key) {
		try {
			List<LinkedHashMap<String, String>> deleteData = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData) {
				if (tdData.containsKey(key) && !ObjectUtils.isEmpty(pathList1)) {
					if (!pathList1.contains(tdData.get(key).replaceAll("^0+(?!$)", ""))) {
						deleteData.add(tdData);
					}
				}
			}

			for (LinkedHashMap<String, String> tdData : deleteData) {
				tabelData.remove(tdData);
			}
		} catch (Exception e) {
			logger.error("AuditXmlRuleServiceUtil trimTabledata() " + ExceptionUtils.getFullStackTrace(e));
		}
	}

	private void trimTabledataString1(List<LinkedHashMap<String, String>> tabelData1, Set<String> gnodebIdset,
			String key) {
		try {
			List<LinkedHashMap<String, String>> deleteData = new ArrayList<>();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.containsKey(key) && !ObjectUtils.isEmpty(gnodebIdset)) {
					if (!gnodebIdset.contains(tdData.get(key).replaceAll("^0+(?!$)", ""))) {
						deleteData.add(tdData);
					}
				}
			}

			for (LinkedHashMap<String, String> tdData : deleteData) {
				tabelData1.remove(tdData);
			}
		} catch (Exception e) {
			logger.error("AuditXmlRuleServiceUtil trimTabledata() " + ExceptionUtils.getFullStackTrace(e));
		}
	}

	private String getCellCarrierMapping(List<LinkedHashMap<String, String>> tabelData1, String cellnum) {
		String carrierInfo = "";
		try {
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("cell-number").equals(cellnum)) {
					carrierInfo = tdData.get("carrier-index");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return carrierInfo;
		}
		return carrierInfo;

	}

	private List<LinkedHashMap<String, String>> getCarrierInfo(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName) {

		List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("carrier-index");
			headerList1.add("cell-number");

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild = (Element) inChildNode;
					NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("carrier-control-info");
							for (int l = 0; l < childNodeList2.getLength(); l++) {
								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList1.iterator();
									String header = itr.next();

									objtableData.put(header, getXmlElementData(elementchild1, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
									}
									tabelData1.add(objtableData);
								}
							}
						}
					}
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));

		}
		return tabelData1;
	}

	@SuppressWarnings("unchecked")
	private JSONObject getRssiImbalanceaac(List<LinkedHashMap<String, String>> tabelData1, Double carrierRssi,
			String string, String enbId, Double pathDiff1) {
		StringBuilder auditIssuePathImbalance = new StringBuilder();
		JSONObject result = new JSONObject();
		try {
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (NumberUtils.isNumber(tdData.get("carrier-rssi")) && NumberUtils.isNumber(tdData.get("path"))) {
					Double carrierRssi1 = Double.parseDouble(tdData.get("carrier-rssi").trim());
					String path1 = tdData.get("path").trim();

					if (string.trim().contains("1")
							&& (path1.contains("2") || path1.contains("3") || path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					} else if (string.trim().contains("2") && (path1.contains("3") || path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					} else if (string.trim().contains("3") && (path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					} else if (string.trim().contains("5")
							&& (path1.contains("6") || path1.contains("7") || path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					} else if (string.trim().contains("6") && (path1.contains("7") || path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					} else if (string.trim().contains("7") && (path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							auditIssuePathImbalance.append("(" + string + "-" + path1 + ")" + "RSSI Diff: "
									+ (carrierRssi1 - carrierRssi) + " connected-digital-unit-board-id : "
									+ tdData.get("connected-digital-unit-board-id")
									+ " connected-digital-unit-port-id : "
									+ tdData.get("connected-digital-unit-port-id") + " path : " + tdData.get("path")
									+ " carrier-index : " + tdData.get("carrier-index") + " carrier-rssi : "
									+ tdData.get("carrier-rssi") + "\n");
						}
					}

				}

			}
			if (auditIssuePathImbalance.length() != 0) {
				result.put("Status", "fail");
				result.put("auditIssuePathImbalance", auditIssuePathImbalance);

			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}

		return result;
	}

	@SuppressWarnings("unchecked")
	private JSONObject getRssiImbalanceaacpath(List<LinkedHashMap<String, String>> tabelData1, Double carrierRssi,
			String string, String enbId, Double pathDiff1) {

		StringBuilder pathIssue = new StringBuilder();
		JSONObject result = new JSONObject();
		try {
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (NumberUtils.isNumber(tdData.get("carrier-rssi")) && NumberUtils.isNumber(tdData.get("path"))) {
					Double carrierRssi1 = Double.parseDouble(tdData.get("carrier-rssi").trim());
					String path1 = tdData.get("path").trim();

					if (string.trim().contains("1")
							&& (path1.contains("2") || path1.contains("3") || path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					} else if (string.trim().contains("2") && (path1.contains("3") || path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					} else if (string.trim().contains("3") && (path1.contains("4"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					} else if (string.trim().contains("5")
							&& (path1.contains("6") || path1.contains("7") || path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					} else if (string.trim().contains("6") && (path1.contains("7") || path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					} else if (string.trim().contains("7") && (path1.contains("8"))) {
						if ((carrierRssi1 - carrierRssi) > pathDiff1 || (carrierRssi1 - carrierRssi) < -pathDiff1) {
							pathIssue.append("(" + string + "-" + path1 + ")");
						}
					}

				}

			}
			if (pathIssue.length() != 0) {
				result.put("Status", "fail");

				result.put("pathIssue", pathIssue);
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}

		return result;
	}

	
	public String getInvocationId(String fullOutputLog, String command, String neId, String dbcollectionFileName,
			NetworkConfigEntity networkConfigEntity) {
		String invocationId = "";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {
					Element element = (Element) inChildNode;
					invocationId = getXmlElementData(element, "user-label").trim();
				}
			}
			
			
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return invocationId;
	}

	public StringBuilder getGrowPrefixRemovalHtml(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("du-reparenting");
			headerList1.add("ne-id");
			headerList1.add("user-label");
			headerList1.add("administrative-state");
			headerList1.add("rack-id");
			headerList1.add("operational-mode");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("managed-element");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}
			

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>"
					+ command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			if(fullOutputLog.contains(XmlCommandsConstants.AUDIT4G_GROW_PREFIX_REMOVAL)) {
			String outputLog1 = StringUtils.substringAfter(fullOutputLog, XmlCommandsConstants.AUDIT4G_GROW_PREFIX_REMOVAL);
			outputLog1 = StringUtils.substringBefore(outputLog1, XmlCommandsConstants.ENDTEXT5G);
			if(!outputLog1.toLowerCase().contains("ok")) {
				audit4GFsuSummaryService.createAudit4GFsuSummaryEntity(301, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "FAILED TO REMOVE GROW PREFIX");
			}
			
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getGrowPrefixRemovalDSS(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("du-reparenting");
			headerList1.add("ne-id");
			headerList1.add("user-label");
			headerList1.add("administrative-state");
			headerList1.add("gpl-version");
			headerList1.add("operational-mode");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("managed-element");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}
			

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>"
					+ command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			if(fullOutputLog.contains(XmlCommandsConstants.AUDIT4G_GROW_PREFIX_REMOVAL)) {
			String outputLog1 = StringUtils.substringAfter(fullOutputLog, XmlCommandsConstants.AUDIT4G_GROW_PREFIX_REMOVAL);
			outputLog1 = StringUtils.substringBefore(outputLog1, XmlCommandsConstants.ENDTEXT5G);
			if(!outputLog1.toLowerCase().contains("ok")) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(301, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "FAILED TO REMOVE GROW PREFIX");
			}
			
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getGrowPrefixRemovalCband(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("du-reparenting");
			headerList1.add("ne-id");
			headerList1.add("user-label");
			headerList1.add("administrative-state");
			headerList1.add("gpl-version");
			headerList1.add("operational-mode");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("managed-element");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			if (fullOutputLog.contains(XmlCommandsConstants.AUDIT4G_GROW_PREFIX_REMOVAL)) {
				String outputLog1 = StringUtils.substringAfter(fullOutputLog,
						XmlCommandsConstants.AUDIT4G_GROW_PREFIX_REMOVAL);
				outputLog1 = StringUtils.substringBefore(outputLog1, XmlCommandsConstants.ENDTEXT5G);
				if (!outputLog1.toLowerCase().contains("ok")) {
					audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(301, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), "FAILED TO REMOVE GROW PREFIX");
				}

			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	public StringBuilder getGrowPrefixRemoval4GUSM(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("administrative-state");
			headerList1.add("system-type");
			headerList1.add("user-label");
			headerList1.add("customer-ne-type");
			headerList1.add("rack-id");
			headerList1.add("operational-mode");
			

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("managed-element");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}
			

			

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>"
					+ command + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			if(fullOutputLog.contains(XmlCommandsConstants.AUDIT4G_GROW_PREFIX_REMOVAL)) {
			String outputLog1 = StringUtils.substringAfter(fullOutputLog, XmlCommandsConstants.AUDIT4G_GROW_PREFIX_REMOVAL);
			outputLog1 = StringUtils.substringBefore(outputLog1, XmlCommandsConstants.ENDTEXT5G);
			if(!outputLog1.toLowerCase().contains("ok")) {
				audit4GSummaryService.createAudit4GSummaryEntity(301, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "FAILED TO REMOVE GROW PREFIX");
			}
			
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	public StringBuilder getHtmlTableCbrsChecks(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String entry1 = "cbrs-mode";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("cbrs-mode");
			String entry2 = "cbsd-info";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("cbsd-index");
			headerList2.add("user-id");
			headerList2.add("fcc-id");
			headerList2.add("connected-ru");			
			headerList2.add("call-sign");
			headerList2.add("tech");
			headerList2.add("cbsd-category");
			String entry3 = "cbsd-state";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("cbsd-index");
			headerList3.add("cbsd-id");
			headerList3.add("cbsd-state");
			String entry4 = "grant-info";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cbsd-index");
			headerList4.add("grant-index");
			headerList4.add("grant-id");
			headerList4.add("cell-num");
			headerList4.add("grant-state");
			
			String entry5 = "group-info";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("cbsd-index");
			headerList5.add("group-id");
			headerList5.add("group-type");
			

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			
			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("cbrs-function");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();

							objtableData.put(header, getXmlElementData(elementchild, header));

							tabelData1.add(objtableData);
						}
					}
					childNodeList = element.getElementsByTagName("cbrs-function");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;
							NodeList childNodeList1 = elementchild.getElementsByTagName("cbsd-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList2.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData2.add(objtableData);
								}
							}
							childNodeList1 = elementchild.getElementsByTagName("cbsd-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList3.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData3.add(objtableData);
								}
							}
							childNodeList1 = elementchild.getElementsByTagName("cbsd-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									NodeList childNodeList2 = elementchild1.getElementsByTagName("grant-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList4.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData4.add(objtableData);
										}
									}
								}
							}
							childNodeList1 = elementchild.getElementsByTagName("cbsd-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									NodeList childNodeList2 = elementchild1.getElementsByTagName("group-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList5.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData5.add(objtableData);
										}
									}
								}
							}
							
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			ArrayList<String> al1 = new ArrayList<>();
			ArrayList<String> al2 = new ArrayList<>();
			ArrayList<String> al3 = new ArrayList<>();

			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				for (CIQDetailsModel ciqDetailsModel : listOfCiqDetails) {
					if (!ObjectUtils.isEmpty(ciqDetailsModel)) {
						if (ciqDetailsModel.getCiqMap().containsKey("CBRS_FCC_ID")) {
							al1.add(ciqDetailsModel.getCiqMap().get("CBRS_FCC_ID").getHeaderValue().trim());
						}
						if (ciqDetailsModel.getCiqMap().containsKey("CBSD_Category")) {
							al2.add(ciqDetailsModel.getCiqMap().get("CBSD_Category").getHeaderValue().trim());
						}
						if (ciqDetailsModel.getCiqMap().containsKey("CBRS_user_id")) {
							al3.add(ciqDetailsModel.getCiqMap().get("CBRS_user_id").getHeaderValue().trim());
						}

					}

				}
			}
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			// cbrs mode
			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cbrs-mode")) {
						if (value.equals("cbrs-on")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("cbrs-mode : " + tdData.get("cbrs-mode") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					}

					else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			// call -sign fcc id
			
			List<String> listOfRuwithwithdate = getCBRSTablewithdate(fullOutputLog, XmlCommandsConstants.AUDIT_4G_CBRS_RETRIEVE_RADIO_UNIT_INVENTORY, enbId,
					dbcollectionFileName);
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					String s2="";
					if(tdData.containsKey("connected-ru")) {
					s2=tdData.get("connected-ru");
					s2=StringUtils.substringAfter(s2, "ru-");
					}
					
					if (key.equals("fcc-id")) {
						if (value.equals("A3LRT4401-48A1") && listOfRuwithwithdate.contains(s2)) {
							tableData.append("<td align=center>" + value + "</td>\n");							
						}else if(value.equals("A3LRT4401-48A") && !listOfRuwithwithdate.contains(s2)){
							tableData.append("<td align=center>" + value + "</td>\n");
							
						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue8.append("cbsd-index : " + tdData.get("cbsd-index") + " fcc-id : "
									+ tdData.get("fcc-id") + "\n");
						}

					} else if (key.equals("cbsd-category")) {
						if (al2.contains(value)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue3.append("cbsd-index : " + tdData.get("cbsd-index") + " cbsd-category : "
									+ tdData.get("cbsd-category") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("call-sign")) {
						if (value.equals("123")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue4.append("cbsd-index : " + tdData.get("cbsd-index") + " call-sign : "
									+ tdData.get("call-sign") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("user-id")) {
						if (al3.contains(value)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue5.append("cbsd-index : " + tdData.get("cbsd-index") + " user-id : "
									+ tdData.get("user-id") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			// cbsd-state
			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("cbsd-state")) {
						if (value.equals("cbrs-registered")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue6.append("cbsd-index : " + tdData.get("cbsd-index") + " cbsd-state : "
									+ tdData.get("cbsd-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			// grant-state
			if (tabelData4.size() != 4 * tabelData3.size()) {
				auditIssue7.append("Each cbsd-index should have 4 eNB" + "\n");
			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("grant-state")) {
						if (value.equals("cbrs-authorized")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue7.append("cbsd-index : " + tdData.get("cbsd-index") + " cell-num : "
									+ tdData.get("cell-num") + "grant-state : " + tdData.get("grant-state") + "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");
			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList5) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData5) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String value = resultTableData.getValue();
					tableData.append("<td align=center>" + value + "</td>\n");
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			
			htmlContent.append(getCBRSTablewithHardware(fullOutputLog, XmlCommandsConstants.AUDIT_4G_CBRS_RETRIEVE_RADIO_UNIT_INVENTORY, enbId,
					dbcollectionFileName));
			

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			auditIssueAll.append(auditIssue7);
			auditIssueAll.append(auditIssue8);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(33, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(33, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
				
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(33, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(35, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(36, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(36, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(36, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			} 
			if (auditIssue4.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(37, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue5.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(34, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue6.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(40, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue7.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(41, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue8.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(115, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue8.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(115, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(115, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	private Object getCBRSTablewithHardware(String fullOutputLog, String command,
			String enbId, String dbcollectionFileName) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList nodeList1 = element.getChildNodes();

					for (int j = 0; j < nodeList1.getLength(); j++) {
						Node nodeList2 = nodeList1.item(j);
						if (Node.ELEMENT_NODE == nodeList2.getNodeType()) {

							Element element1 = (Element) nodeList2;
							NodeList nodeList3 = element1.getChildNodes();
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							for (int k = 0; k < nodeList3.getLength(); k++) {

								Node n1 = nodeList3.item(k);
								if (Node.ELEMENT_NODE == n1.getNodeType()) {
									headerList1.add(n1.getNodeName().trim());
									objtableData.put(n1.getNodeName().trim(), n1.getTextContent());
								}
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command  + "</b></td></tr>\n");
			

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String value = resultTableData.getValue();
					tableData.append("<td align=center>" + value + "</td>\n");
					
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	private List<String> getCBRSTablewithdate(String fullOutputLog, String command,
			String enbId, String dbcollectionFileName) {
		List<String> listOfRus=new ArrayList<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList nodeList1 = element.getChildNodes();

					for (int j = 0; j < nodeList1.getLength(); j++) {
						Node nodeList2 = nodeList1.item(j);
						if (Node.ELEMENT_NODE == nodeList2.getNodeType()) {

							Element element1 = (Element) nodeList2;
							NodeList nodeList3 = element1.getChildNodes();
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							for (int k = 0; k < nodeList3.getLength(); k++) {

								Node n1 = nodeList3.item(k);
								if (Node.ELEMENT_NODE == n1.getNodeType()) {
									headerList1.add(n1.getNodeName().trim());
									objtableData.put(n1.getNodeName().trim(), n1.getTextContent());
								}
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					boolean hardwareDate = false;
					try {
						DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
						Date sCreationDate = dateFormat.parse(tdData.get("manufactured-date"));
						Date sCreationDate2 = dateFormat.parse("2022-05-03");
						hardwareDate = sCreationDate.after(sCreationDate2);
					} catch (Exception e) {
						hardwareDate=false;
					}
					if (key.equals("hardware-name") && hardwareDate) {
						if (value.equals("RT4401-48A")) {
							String s= tdData.get("unit-id");
							s=StringUtils.substringBetween(s, "[", "]");
							s=s.replaceAll("_", "-");
							listOfRus.add(s);
						}
					}
				}

			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return listOfRus;
	}

	public StringBuilder getHtmlTableDSSACPFPreAudit(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("gnodeb-id");
			headerList1.add("cell-identity");
			headerList1.add("nr-ul-coverage-method");
			headerList1.add("nr-dc-nr-ul-coverage-method");
			headerList1.add("ul-primary-path-mode");
			headerList1.add("dss-enabled");
			headerList1.add("imd-interference-detection");
			headerList1.add("imd-interference-detection-per-duplex");
			headerList1.add("cbrs-carrier-update-enable");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("gnb-cu-cp-function-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("gutran-cu-cell");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("gutran-cu-cell-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			String enb4G = "";
			List<CIQDetailsModel> listOfCiqDetailsd1 = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"vDUGrowSiteLevel(Day1)CQ", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetailsd1)) {

				if (listOfCiqDetailsd1.get(0).getCiqMap().containsKey("4GeNB")) {
					enb4G = listOfCiqDetailsd1.get(0).getCiqMap().get("4GeNB").getHeaderValue().trim()
							.replaceAll("^0+(?!$)", "");
				}
			}
			Set<String> gnodebIdset = new HashSet<>();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (!tdData.get("cell-identity").isEmpty()) {
					gnodebIdset.add(tdData.get("cell-identity"));
				}
			}
			StringBuilder AuditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enb4G, dbcollectionFileName,
					"vDUDay_2", "eNBId");
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				for (CIQDetailsModel ciqData : listOfCiqDetails) {

					if (ciqData.getCiqMap().containsKey("cell-identity") && !gnodebIdset
							.contains(ciqData.getCiqMap().get("cell-identity").getHeaderValue().trim())) {
						AuditIssue1.append("cell-identity :"
								+ ciqData.getCiqMap().get("cell-identity").getHeaderValue().trim() + "\n");

					}
				}
			}
			String CellId = "";
			Set<String> cellidday2Set2 = new HashSet<>();
			if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
				for (CIQDetailsModel ciqData : listOfCiqDetails) {
					if (!ObjectUtils.isEmpty(listOfCiqDetails) && ciqData.getCiqMap().containsKey("cell-identity")) {
						CellId = ciqData.getCiqMap().get("cell-identity").getHeaderValue().trim();
						cellidday2Set2.add(CellId);
					}
				}
			}
			trimTabledataString(tabelData1, cellidday2Set2, "cell-identity");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					tableData.append("<td align=center>" + value + "</td>\n");
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(AuditIssue1);

			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (AuditIssue1.length() != 0) {
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(74, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), AuditIssue1.toString());
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(74, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GDSSSummaryService.createAudit5GDSSPassFailEntity(74, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder getDuOpticLevel(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("administrative-state");
			headerList1.add("connected-radio-unit-type");
			headerList1.add("cpri-connection-type");
			headerList1.add("tx-wavelength");
			headerList1.add("tx-power");
			headerList1.add("rx-power");
			headerList1.add("cpri-speed-running");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList1 = element.getElementsByTagName("digital-unit-entries");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("external-port");
							for (int l = 0; l < childNodeList2.getLength(); l++) {

								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									NodeList childNodeList3 = elementchild2.getElementsByTagName("cpri-port-entries");
									for (int m = 0; m < childNodeList3.getLength(); m++) {

										Node ChildNode3 = childNodeList3.item(m);
										if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

											Element elementchild3 = (Element) ChildNode3;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();

											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild3, header));
											}

											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}

				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				String portId = tdData.get("port-id");
				String unitId = tdData.get("unit-id");
				String hw = "";
				String vn = "";
				String txPowerUl = "+1.5";
				String txPowerLl = "-5.0";
				String rxPowerUl = "-5.0";
				String rxPowerLl = "-8.0";
				String wavelengthDB = "";
				String wl = "";
				String txPowerMax = "1.5";
				String txPowerMin = "-5.0";
				String attun = "no";
				boolean isWarningPowerPresent = false;
				boolean isLcccprithere = false;
				//ciqData.getCiqMap().containsKey("RU_port")
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("lCCCard")
								&& ciqData.getCiqMap().get("lCCCard").getHeaderValue().trim()
										.equals(tdData.get("unit-id").trim())
								&& ((ciqData.getCiqMap().containsKey("CRPIPortID")
										&& ciqData.getCiqMap().get("CRPIPortID").getHeaderValue().trim()
												.equalsIgnoreCase(tdData.get("port-id").trim()))
										|| (ciqData.getCiqMap().containsKey("RU_port")
												&& ciqData.getCiqMap().get("RU_port").getHeaderValue().trim()
														.equalsIgnoreCase(tdData.get("port-id").trim())))) {
							isLcccprithere = true;

						}
					}
				}
				HashMap<String, String> map = gethadwareAndVenderDu(fullOutputLog,
						XmlCommandsConstants.AUDIT_4G_SFP_INVENTORY, portId, unitId);
				if (!map.isEmpty()) {
					hw = map.get("hardwareName").trim();
				}
				if (!map.isEmpty()) {
					vn = map.get("vendorName").trim();
				}
				if (!map.isEmpty()) {
					wl = StringUtils.substringBefore(map.get("waveLength").trim(), "(");
				}
				List<AuditHardwareDetailsEntity> auditConstantsList1 = auditHardwareDetailsRepository
						.getAuditHardwareDetailsEntityListRx(hw, vn, "DU", wl);

				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					txPowerUl = auditConstantsList1.get(0).getFailRxPowerUL();
				}

				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					txPowerLl = auditConstantsList1.get(0).getFailRxPowerLL();
				}
				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					rxPowerUl = auditConstantsList1.get(0).getWarningRxPowerUL();
				}

				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					rxPowerLl = auditConstantsList1.get(0).getWarningRxPowerLL();
				}
				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					wavelengthDB = auditConstantsList1.get(0).getWaveLength();
				}
				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					txPowerMax = auditConstantsList1.get(0).gettXPowerUL();
				}

				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					txPowerMin = auditConstantsList1.get(0).gettXPowerLL();

				}
				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					attun = auditConstantsList1.get(0).getAttenuatorReq();

				}
				if (!ObjectUtils.isEmpty(auditConstantsList1)
						&& NumberUtils.isNumber(auditConstantsList1.get(0).getWarningRxPowerLL())) {
					isWarningPowerPresent = true;
				}
				Double txPowerUlD = +1.5;
				Double txPowerLlD = -5.0;
				Double rxPowerUlD = -5.0;
				Double rxPowerLlD = -8.0;
				Double txPowerMaxLimit = 1.5;
				Double txPowerMinLimit = -5.0;
				String attunStr = "";
				if (NumberUtils.isNumber(txPowerUl)) {
					txPowerUlD = Double.parseDouble(txPowerUl);
				}
				if (NumberUtils.isNumber(txPowerLl)) {
					txPowerLlD = Double.parseDouble(txPowerLl);
				}
				if (NumberUtils.isNumber(rxPowerUl)) {
					rxPowerUlD = Double.parseDouble(rxPowerUl);
				}
				if (NumberUtils.isNumber(rxPowerLl)) {
					rxPowerLlD = Double.parseDouble(rxPowerLl);
				}
				if (NumberUtils.isNumber(txPowerMax)) {
					txPowerMaxLimit = Double.parseDouble(txPowerMax);
				}
				if (NumberUtils.isNumber(txPowerMin)) {
					txPowerMinLimit = Double.parseDouble(txPowerMin);
				}
				if (!ObjectUtils.isEmpty(attun)) {
					attunStr = attun;

				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("rx-power")) {

						if (NumberUtils.isNumber(value)) {
							Double rxPower = Double.parseDouble(value);

							if (rxPower >= txPowerLlD && rxPower <= txPowerUlD) {
								tableData.append("<td align=center>" + value + "</td>\n");
							}else if (!isLcccprithere) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (rxPower >= rxPowerLlD && rxPower <= rxPowerUlD && isWarningPowerPresent) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue3.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power : " + tdData.get("rx-power")
										+ " [RX pass range: " + txPowerUlD + "~" + txPowerLlD + "]" + "\n");
							} else if (rxPower > txPowerUlD && !attunStr.isEmpty()
									&& attunStr.equalsIgnoreCase("Yes")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue7.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power : " + tdData.get("rx-power")
										+ " [RX pass range: " + txPowerUlD + "~" + txPowerLlD + "]" + "\n");
							} else if (rxPower > txPowerUlD) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue2.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power : " + tdData.get("rx-power")
										+ " [RX pass range: " + txPowerUlD + "~" + txPowerLlD + "]" + "\n");
							} else {
								auditIssue3.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power : " + tdData.get("rx-power")
										+ " [RX pass range: " + txPowerUlD + "~" + txPowerLlD + "]" + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {
							if (isLcccprithere) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue3.append(" unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " rx-power: " + tdData.get("rx-power") + "\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}

						}
					} else if (key.equals("tx-power")) {

						if (NumberUtils.isNumber(value)) {
							Double txPower = Double.parseDouble(value);

							if (txPower >= txPowerMinLimit && txPower <= txPowerMaxLimit) {
								tableData.append("<td align=center>" + value + "</td>\n");
							}else if (!isLcccprithere) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditIssue4.append("unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " tx-power : " + tdData.get("tx-power")
										+ " [TX pass range: " + txPowerMaxLimit + "~" + txPowerMinLimit + "]" + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {
							if (isLcccprithere) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue4.append(" unit-id :" + tdData.get("unit-id") + " port-id :"
										+ tdData.get("port-id") + " tx-power : " + tdData.get("tx-power") + "\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}

						}
					} else if (key.equals("cpri-speed-running")) {

						if (value.equalsIgnoreCase("9820-mbps")) {
							tableData.append("<td align=center>" + value + "</td>\n");

						} else {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue6
									.append("unit-id :" + tdData.get("unit-id") + " port-id :" + tdData.get("port-id")
											+ " cpri-speed-running : " + tdData.get("cpri-speed-running") + "\n");
						}
					} else {
						tableData.append("<td align=center >" + value + "</td>\n");

					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			if (auditIssue4.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue6.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(6, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue5.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(52, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(52, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(52, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(53, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(53, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(53, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(54, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(54, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(54, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue7.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(7, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	private HashMap<String, String> gethadwareAndVenderDu(String fullOutputLog, String command,
			String portId, String unitId) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("processor-unit-id");
			headerList1.add("port-id");
			headerList1.add("hardware-name");
			headerList1.add("vendor-name");
			headerList1.add("wave-length");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("optic-module-inventory");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("port-id").equals(portId) && tdData.get("processor-unit-id").equals(unitId)) {
					map.put("hardwareName", tdData.get("hardware-name"));
					map.put("vendorName", tdData.get("vendor-name"));
					map.put("waveLength", tdData.get("wave-length"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}
	
	private HashMap<String, String> gethadwareAndVenderDuFSU(String fullOutputLog, String command,
			String portId, String unitId, String type1) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("processor-unit-id");
			headerList1.add("port-id");
			headerList1.add("port-type");
			headerList1.add("hardware-name");
			headerList1.add("vendor-name");
			headerList1.add("wave-length");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("optic-module-inventory");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("port-id").equals(portId) && tdData.get("processor-unit-id").equals(unitId) 
						&& tdData.get("port-type").equals(type1)) {
					map.put("hardwareName", tdData.get("hardware-name"));
					map.put("vendorName", tdData.get("vendor-name"));
					map.put("waveLength", tdData.get("wave-length"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	public StringBuilder getRuOpticLevel(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("port-id");
			headerList1.add("bit-rate");
			headerList1.add("tx-wavelength");
			headerList1.add("tx-power");
			headerList1.add("rx-power");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList1 = element.getElementsByTagName("radio-unit-info");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("external-port");
							for (int l = 0; l < childNodeList2.getLength(); l++) {

								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									NodeList childNodeList3 = elementchild2.getElementsByTagName("cpri-port-entries");
									for (int m = 0; m < childNodeList3.getLength(); m++) {

										Node ChildNode3 = childNodeList3.item(m);
										if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

											Element elementchild3 = (Element) ChildNode3;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();

											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild3, header));
											}

											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}

				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId,
					dbcollectionFileName, "CIQUpstateNY", "eNBId");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				HashMap<String, String> map = new HashMap<>();
				String boardId = tdData.get("connected-digital-unit-board-id");
				String cduportId = tdData.get("connected-digital-unit-port-id");
				String unitId = tdData.get("port-id");
				String hw = "";
				String vn = "";
				String wl = "";
				String txPowerUl = "1.5";
				String txPowerLl = "-5.0";
				String rxPowerUl = "-5.0";
				String rxPowerLl = "-8.0";
				String wavelengthDB = "";
				String txPowerMax = "1.5";
				String txPowerMin = "-5.0";
				String attun = "no";
				boolean isWarningPowerPresent = false;
				boolean isLcccprithere = false;
				int ruportid=0;
				String port="";
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("lCCCard")
								&& ciqData.getCiqMap().get("lCCCard").getHeaderValue().trim()
										.equals(tdData.get("connected-digital-unit-board-id").trim())
								&& ciqData.getCiqMap().containsKey("CRPIPortID")
								&& ciqData.getCiqMap().get("CRPIPortID").getHeaderValue().trim()
										.equalsIgnoreCase(tdData.get("connected-digital-unit-port-id").trim())) {

							if (ciqData.getCiqMap().containsKey("RU_port")) {
								port = ciqData.getCiqMap().get("RU_port").getHeaderValue().trim();
							}
							if (NumberUtils.isNumber(port)) {
								ruportid = ruportid + Integer.parseInt(port);
							}
						}
					}
				}
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("lCCCard")
								&& ciqData.getCiqMap().get("lCCCard").getHeaderValue().trim()
										.equals(tdData.get("connected-digital-unit-board-id").trim())
								&& ciqData.getCiqMap().containsKey("CRPIPortID")
								&& ciqData.getCiqMap().get("CRPIPortID").getHeaderValue().trim()
										.equalsIgnoreCase(tdData.get("connected-digital-unit-port-id").trim())) {
                      if(tdData.get("port-id").trim().equals("0")) {
                    	  isLcccprithere = true;
                      }else if(tdData.get("port-id").trim().equals("1") && ruportid>0) {
                    	  isLcccprithere = true;
                      }
							

						}
					}
				}
				map = gethadwareAndVender(fullOutputLog, XmlCommandsConstants.AUDIT_4G_RADIO_UNIT_SFP_INVENTORY,
						cduportId, unitId, boardId);
				if (!map.isEmpty()) {
					hw = map.get("hardwareName").trim();
				}
				if (!map.isEmpty()) {
					vn = map.get("vendorName").trim();
				}
				if (!map.isEmpty()) {
					wl = StringUtils.substringBefore(map.get("waveLength").trim(), "(");
				}
				List<AuditHardwareDetailsEntity> auditConstantsList1 = auditHardwareDetailsRepository
						.getAuditHardwareDetailsEntityListRx(hw, vn, "RU", wl);

				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					txPowerUl = auditConstantsList1.get(0).getFailRxPowerUL();
				}

				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					txPowerLl = auditConstantsList1.get(0).getFailRxPowerLL();
				}
				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					rxPowerUl = auditConstantsList1.get(0).getWarningRxPowerUL();
				}

				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					rxPowerLl = auditConstantsList1.get(0).getWarningRxPowerLL();

				}
				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					txPowerMax = auditConstantsList1.get(0).gettXPowerUL();
				}

				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					txPowerMin = auditConstantsList1.get(0).gettXPowerLL();

				}
				if (!ObjectUtils.isEmpty(auditConstantsList1)) {
					wavelengthDB = auditConstantsList1.get(0).getWaveLength();
				}
				if (!ObjectUtils.isEmpty(auditConstantsList1)
						&& !auditConstantsList1.get(0).getAttenuatorReq().isEmpty()) {
					attun = auditConstantsList1.get(0).getAttenuatorReq();

				}
				if (!ObjectUtils.isEmpty(auditConstantsList1)
						&& NumberUtils.isNumber(auditConstantsList1.get(0).getWarningRxPowerLL())) {

					isWarningPowerPresent = true;
				}

				Double txPowerUlD = 1.5;
				Double txPowerLlD = -5.0;
				Double rxPowerUlD = -5.0;
				Double rxPowerLlD = -8.0;
				Double txPowerMaxLimit = 1.5;
				Double txPowerMinLimit = -5.0;
				String attunStr = "";
				if (NumberUtils.isNumber(txPowerUl)) {
					txPowerUlD = Double.parseDouble(txPowerUl);
				}
				if (NumberUtils.isNumber(txPowerLl)) {
					txPowerLlD = Double.parseDouble(txPowerLl);
				}
				if (NumberUtils.isNumber(rxPowerUl)) {
					rxPowerUlD = Double.parseDouble(rxPowerUl);
				}
				if (NumberUtils.isNumber(rxPowerLl)) {
					rxPowerLlD = Double.parseDouble(rxPowerLl);
				}
				if (NumberUtils.isNumber(txPowerMax)) {
					txPowerMaxLimit = Double.parseDouble(txPowerMax);
				}
				if (NumberUtils.isNumber(txPowerMin)) {
					txPowerMinLimit = Double.parseDouble(txPowerMin);
				}
				if (!ObjectUtils.isEmpty(attun)) {
					attunStr = attun;

				}
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("rx-power")) {

						if (NumberUtils.isNumber(value)) {
							Double rxPower = Double.parseDouble(value);

							if (rxPower >= txPowerLlD && rxPower <= txPowerUlD) {
								tableData.append("<td align=center>" + value + "</td>\n");
							}else if (!isLcccprithere) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else if (rxPower >= rxPowerLlD && rxPower <= rxPowerUlD && isWarningPowerPresent) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue3.append(" RRH[" + tdData.get("connected-digital-unit-board-id") + "_"
										+ tdData.get("connected-digital-unit-port-id") + "_"
										+ tdData.get("cascade-radio-unit-id") + "]" + " port-id:  "
										+ tdData.get("port-id") + " rx-power:  " + tdData.get("rx-power")
										+ " [RX pass range: " + txPowerUlD + "~" + txPowerLlD  + "]" + "\n");
							} else if (rxPower > txPowerUlD && !attunStr.isEmpty()
									&& attunStr.equalsIgnoreCase("Yes")) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue6.append(" RRH[" + tdData.get("connected-digital-unit-board-id") + "_"
										+ tdData.get("connected-digital-unit-port-id") + "_"
										+ tdData.get("cascade-radio-unit-id") + "]" + " port-id:  "
										+ tdData.get("port-id") + " rx-power:  " + tdData.get("rx-power")
										+ " [RX pass range: " + txPowerUlD + "~" + txPowerLlD  + "]" + "\n");
							} else if (rxPower >= txPowerUlD) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue2.append(" RRH[" + tdData.get("connected-digital-unit-board-id") + "_"
										+ tdData.get("connected-digital-unit-port-id") + "_"
										+ tdData.get("cascade-radio-unit-id") + "]" + " port-id:  "
										+ tdData.get("port-id") + " rx-power:  " + tdData.get("rx-power")
										+ " [RX pass range: " + txPowerUlD + "~" + txPowerLlD  + "]" + "\n");
							} else {
								auditIssue3.append(" RRH[" + tdData.get("connected-digital-unit-board-id") + "_"
										+ tdData.get("connected-digital-unit-port-id") + "_"
										+ tdData.get("cascade-radio-unit-id") + "]" + " port-id:  "
										+ tdData.get("port-id") + " rx-power:  " + tdData.get("rx-power")
										+ " [RX pass range: " + txPowerUlD + "~" + txPowerLlD  + "]" + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {
							if (isLcccprithere) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue3.append("RRH["
										+ tdData.get("connected-digital-unit-board-id") + "_"
										+ tdData.get("connected-digital-unit-port-id") + "_"
										+ tdData.get("cascade-radio-unit-id") + "]" + " port-id:  "
										+ tdData.get("port-id") + " rx-power:  " + tdData.get("rx-power") + "\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}

						}
					} else if (key.equals("tx-power")) {

						if (NumberUtils.isNumber(value)) {
							Double txPower = Double.parseDouble(value);

							if (txPower >= txPowerMinLimit && txPower <= txPowerMaxLimit) {
								tableData.append("<td align=center>" + value + "</td>\n");
							}else if (!isLcccprithere) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditIssue4.append(" RRH[" + tdData.get("connected-digital-unit-board-id") + "_"
										+ tdData.get("connected-digital-unit-port-id") + "_"
										+ tdData.get("cascade-radio-unit-id") + "]" + " port-id:  "
										+ tdData.get("port-id") + " tx-power:  " + tdData.get("tx-power")
										+ " [TX pass range: " + txPowerMinLimit + "~" + txPowerMaxLimit + "]" + "\n");
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							if (isLcccprithere) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue4.append(" RRH[" + tdData.get("connected-digital-unit-board-id") + "_"
										+ tdData.get("connected-digital-unit-port-id") + "_"
										+ tdData.get("cascade-radio-unit-id") + "]" + " port-id:  "
										+ tdData.get("port-id") + " tx-power:  " + tdData.get("tx-power") + "\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}

						

						}
					} else {
						tableData.append("<td align=center >" + value + "</td>\n");

					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(55, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(55, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(55, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(56, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(56, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(56, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(57, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(57, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(57, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(50, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue6.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(8, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	private HashMap<String, String> gethadwareAndVender(String fullOutputLog2, String command,
			String cduportId, String unitId, String boardId) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog2, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("radio-unit-port-id");
			headerList1.add("hardware-name");
			headerList1.add("vendor-name");
			headerList1.add("wave-length");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("optic-module-inventory");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("connected-digital-unit-port-id").equals(cduportId)
						&& tdData.get("radio-unit-port-id").equals(unitId)
						&& tdData.get("connected-digital-unit-board-id").equals(boardId)) {
					map.put("hardwareName", tdData.get("hardware-name"));
					map.put("vendorName", tdData.get("vendor-name"));
					map.put("waveLength", tdData.get("wave-length"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}
	public StringBuilder getHtmlTablesoftwareslot(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			String softwareVersion = "";
			softwareVersion = get4GsoftwareVersion(fullOutputLog, XmlCommandsConstants.CBAND_VDU_PACKAGEINVENTORY,
					enbId, dbcollectionFileName, runTestEntity);

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("o-ran-ru-id");
			headerList1.add("name");
			headerList1.add("status");
			headerList1.add("active");
			headerList1.add("running");
			headerList1.add("access");
			headerList1.add("product-code");
			headerList1.add("vendor-code");
			headerList1.add("build-id");
			headerList1.add("build-name");
			headerList1.add("build-version");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList = element.getElementsByTagName("o-ran-radio-unit-info");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("operations");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1.getElementsByTagName("software-slot");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild, header));
											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			StringBuilder auditIssue32 = new StringBuilder();
			StringBuilder auditIssue33 = new StringBuilder();
			StringBuilder auditIssue34 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String neVersion1 = StringUtils.substringBefore(softwareVersion, "-");
			String relVersion1 = StringUtils.substringAfter(StringUtils.substringBefore(softwareVersion, "("), "-");

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				String firmwareName = tdData.get("name");
				String runningstate = "true";
				String activeState = "true";
				String buildVersion = "";
				String prodCode = "";
				if (!tdData.get("product-code").isEmpty()) {
					prodCode = tdData.get("product-code").trim();
				}
				List<Audit5GCbandFirmwareDetailsEntity> auditFirmwareList = audit5GCbandFirmwareDetailsRepository
						.getAuditFirmwareDetailsEntityList(firmwareName, relVersion1, neVersion1, prodCode);
				ArrayList<String> ipList2 =new ArrayList<>();
				if (!ObjectUtils.isEmpty(auditFirmwareList)) {
					//buildVersion = auditFirmwareList.get(0).getBuildVersion().trim();
					String[] ipList = auditFirmwareList.get(0).getBuildVersion().trim().split(",");
					for(int i=0;i<ipList.length;i++) {
						ipList2.add(ipList[i]);
					}
				}
				
				
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("build-version") && tdData.get("running").equalsIgnoreCase(runningstate)
							&& tdData.get("active").equalsIgnoreCase(activeState)) {
						if (ipList2.contains(value)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							if (tdData.get("o-ran-ru-id").equals("0")) {
								auditIssue32.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " name : "
										+ tdData.get("name") + " product-code : " + tdData.get("product-code")
										+ " vendor-code : " + tdData.get("vendor-code") + " build-version : "
										+ tdData.get("build-version") + "\n");
							} else if (tdData.get("o-ran-ru-id").equals("1")) {
								auditIssue33.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " name : "
										+ tdData.get("name") + " product-code : " + tdData.get("product-code")
										+ " vendor-code : " + tdData.get("vendor-code") + " build-version : "
										+ tdData.get("build-version") + "\n");
							} else if (tdData.get("o-ran-ru-id").equals("2")) {
								auditIssue34.append("o-ran-ru-id : " + tdData.get("o-ran-ru-id") + " name : "
										+ tdData.get("name") + " product-code : " + tdData.get("product-code")
										+ " vendor-code : " + tdData.get("vendor-code") + " build-version : "
										+ tdData.get("build-version") + "\n");
							}
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue32);
			auditIssueAll.append(auditIssue33);
			auditIssueAll.append(auditIssue34);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (auditIssue32.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(75, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue32.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(75, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(75, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue33.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(76, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue33.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(76, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(76, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue34.length() != 0) {
				audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(77, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue34.toString());
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(77, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit5GCBandSummaryService.createAudit5GCBandPassFailEntity(77, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	public String get4GsoftwareVersion(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		String softwareVersion = "";
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			// gnb-cu-cp-function
			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;
					NodeList nodeList1 = element.getChildNodes();

					for (int j = 0; j < nodeList1.getLength(); j++) {
						Node nodeList2 = nodeList1.item(j);
						if (Node.ELEMENT_NODE == nodeList2.getNodeType()) {

							Element element1 = (Element) nodeList2;
							NodeList nodeList3 = element1.getChildNodes();
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							for (int k = 0; k < nodeList3.getLength(); k++) {

								Node n1 = nodeList3.item(k);
								if (Node.ELEMENT_NODE == n1.getNodeType()) {
									headerList1.add(n1.getNodeName().trim());
									objtableData.put(n1.getNodeName().trim(), n1.getTextContent());
								}
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.containsKey("package-id") && tdData.get("package-id").equalsIgnoreCase("active-software")
						&& tdData.containsKey("software-version")) {
					softwareVersion = tdData.get("software-version");
				}

			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return softwareVersion;
	}
	public StringBuilder getHtmlTablefwautofusing(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("auto-fusing-flag");
			headerList1.add("start-hour");
			headerList1.add("start-min");
			headerList1.add("end-hour");
			headerList1.add("end-min");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("managed-element");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("auto-fusing-flag")) {
						if (value.equals("off")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("auto-fusing-flag : " + tdData.get("auto-fusing-flag")+ "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);


			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(68, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(68, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(68, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getHtmlTableradiofirmware(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
		    headerList1.add("connected-digital-unit-board-id");
		    headerList1.add("connected-digital-unit-port-id");
		    headerList1.add("radio-unit-port-id");
		    headerList1.add("cpri-index");
		    headerList1.add("additional-connected-digital-unit-board-id");
		    headerList1.add("additional-connected-digital-unit-port-id");
		    headerList1.add("radio-unit-additional-port-id");
		  
		 
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("radio-unit-info");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "4GAudit_Cpri_Swap" + "</b></td></tr>\n");
			List<CIQDetailsModel> listOfCiqDetails = getCiqDetailsForRuleValidationsheet(enbId, dbcollectionFileName,
					"CIQUpstateNY", "eNBId");
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				boolean addCpri=false;
				if (!ObjectUtils.isEmpty(listOfCiqDetails)) {
					for (CIQDetailsModel ciqData : listOfCiqDetails) {
						if (ciqData.getCiqMap().containsKey("lCCCard")
								&& ciqData.getCiqMap().get("lCCCard").getHeaderValue().trim()
										.equals(tdData.get("connected-digital-unit-board-id").trim())
								&& ciqData.getCiqMap().containsKey("CRPIPortID")
								&& ciqData.getCiqMap().get("CRPIPortID").getHeaderValue().trim()
										.equalsIgnoreCase(tdData.get("connected-digital-unit-port-id").trim())) {

							if (ciqData.getCiqMap().containsKey("RU_port") &&
									ciqData.getCiqMap().get("RU_port").getHeaderValue().trim().equals(tdData.get("additional-connected-digital-unit-port-id").trim())) {
								addCpri=true;
							}
							
						}
					}
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					 if (key.equals("additional-connected-digital-unit-port-id")) {
						if (addCpri || value.equals("-")) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditIssue1.append("connected-digital-unit-board-id: " + tdData.get("connected-digital-unit-board-id") 
							+ " connected-digital-unit-port-id: "
									+ tdData.get("connected-digital-unit-port-id") + " additional-connected-digital-unit-port-id: "
									+ tdData.get("additional-connected-digital-unit-port-id") +"\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");

						}
					} else if (key.equals("radio-unit-additional-port-id")) {
						if (addCpri && !value.equals("1")) {
							auditIssue1.append("connected-digital-unit-board-id: " + tdData.get("connected-digital-unit-board-id") 
							+ " connected-digital-unit-port-id: "
							+ tdData.get("connected-digital-unit-port-id") + " radio-unit-additional-port-id: "
							+ tdData.get("radio-unit-additional-port-id") +"\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");	

						}
					} else if (key.equals("radio-unit-port-id")) {
						if (!value.equals("0")) {
							auditIssue2.append("connected-digital-unit-board-id: " + tdData.get("connected-digital-unit-board-id") 
							+ " connected-digital-unit-port-id: "
							+ tdData.get("connected-digital-unit-port-id") + " radio-unit-port-id: "
							+ tdData.get("radio-unit-port-id") +"\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");	

						}
					}else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(83, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(83, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(83, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(84, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(84, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(83, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	public StringBuilder getHtmlTablesgrowcheck(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";
			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("administrative-state");
			headerList1.add("system-type");
			headerList1.add("user-label");
			headerList1.add("customer-ne-type");
			headerList1.add("rack-id");
			headerList1.add("operational-mode");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("managed-element");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("user-label")) {
						if (value.toLowerCase().contains("grow")) {
							
							auditIssue1.append("user-label : " + tdData.get("user-label")+ "\n");
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center>" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(auditIssue1);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(67, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(67, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(67, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	public StringBuilder get4GAuditRet1(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("antenna-line-device-id");
			headerList1.add("antenna-serial-number");
			headerList1.add("antenna-id");
			headerList1.add("user-label");
			headerList1.add("config-tilt");
			headerList1.add("current-tilt");
			headerList1.add("maximum-tilt");
			headerList1.add("minimum-tilt");
			headerList1.add("config-install-date");
			headerList1.add("current-install-date");
			headerList1.add("config-installer-id");
			headerList1.add("current-installer-id");
			headerList1.add("config-base-station-id");
			headerList1.add("current-base-station-id");
			headerList1.add("config-sector-id");
			headerList1.add("current-sector-id");
			headerList1.add("config-antenna-bearing");
			headerList1.add("current-antenna-bearing");
			headerList1.add("config-installed-tilt");
			headerList1.add("current-installed-tilt");
			headerList1.add("antenna-model-number");
			headerList1.add("antenna-serial-number");
			headerList1.add("antenna-operating-band");
			headerList1.add("beam-width");
			headerList1.add("gain");
			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, List<String>>> tabelData2 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList1 = element.getElementsByTagName("radio-unit-info");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("antenna-line-device-info");
							for (int l = 0; l < childNodeList2.getLength(); l++) {

								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									NodeList childNodeList3 = elementchild2.getElementsByTagName("ret-info");
									for (int m = 0; m < childNodeList3.getLength(); m++) {

										Node ChildNode3 = childNodeList3.item(m);
										if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

											Element elementchild3 = (Element) ChildNode3;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();

											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild3, header));
											}

											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}

				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			List<RetTestEntity> auditRetDetailsEntityList1 = retRepository.getAuditRetEntity(enbId);

			Set<String> uqi = new HashSet<>();
			for (RetTestEntity ciqData : auditRetDetailsEntityList1) {
				if (!ObjectUtils.isEmpty(auditRetDetailsEntityList1)) {
					uqi.add(ciqData.getUniqueId().trim());
				}
			}
			int max = 0;
			for (String r : uqi) {
				if (NumberUtils.isNumber(r)) {
					int s = Integer.parseInt(r);

					if (s > max) {
						max = s;
					}
				}
			}
			String uqidm = Integer.toString(max);
			String uniqueId = Integer.toString(runTestEntity.getId());
			System.out.println("run test id  " + uniqueId);
			if (max != 0) {
				uniqueId = uqidm;
			}
			System.out.println("uniqueId  " + uniqueId);
			List<RetTestEntity> auditRetDetailsEntityList = retRepository.getAuditRetDetailsEntityList(enbId, uniqueId);
			Map<String, List<String>> sectorIdMaps = new HashMap<>();
			Map<String, List<String>> antennaModelMaps = new HashMap<>();
			Map<String, List<String>> remotecellIdMaps = new HashMap<>();
			Map<String, List<String>> antennaSerialNumberMap = new HashMap<>();
			Map<String, List<String>> electricaltiltMap = new HashMap<>();
			Set<String> userLvl = new HashSet<>();
			if (!ObjectUtils.isEmpty(auditRetDetailsEntityList)) {
				for (RetTestEntity item : auditRetDetailsEntityList) {
					if (!sectorIdMaps.containsKey(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""))) {
						sectorIdMaps.put(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""),
								new ArrayList<String>());
					}
					if (!antennaModelMaps.containsKey(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""))) {
						antennaModelMaps.put(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""),
								new ArrayList<String>());
					}
					if (!remotecellIdMaps.containsKey(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""))) {
						remotecellIdMaps.put(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""),
								new ArrayList<String>());
					}
					if (!antennaSerialNumberMap.containsKey(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""))) {
						antennaSerialNumberMap.put(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""),
								new ArrayList<String>());
					}
					if (!electricaltiltMap.containsKey(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""))) {
						electricaltiltMap.put(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""),
								new ArrayList<String>());
					}
					sectorIdMaps.get(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", "")).add(item.getSectorId());
					antennaModelMaps.get(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""))
							.add(item.getAntennaModel());
					remotecellIdMaps.get(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""))
							.add(item.getRemoteCellID().replaceAll("[^a-zA-Z0-9]", ""));
					antennaSerialNumberMap.get(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""))
							.add(item.getAntennaSerialNumber());
					electricaltiltMap.get(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""))
							.add(item.getElectricalTilt());
					userLvl.add(item.getRetName().trim().replaceAll("[^a-zA-Z0-9]", ""));
				}
			}

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}
			StringBuilder auditIssue1 = new StringBuilder();
			StringBuilder auditIssue2 = new StringBuilder();
			StringBuilder auditIssue3 = new StringBuilder();
			StringBuilder auditIssue4 = new StringBuilder();
			StringBuilder auditIssue5 = new StringBuilder();
			StringBuilder auditIssue6 = new StringBuilder();
			StringBuilder auditIssue7 = new StringBuilder();
			StringBuilder auditIssue8 = new StringBuilder();
			
			StringBuilder auditpass1 = new StringBuilder();
			StringBuilder auditpass2 = new StringBuilder();
			StringBuilder auditpass3 = new StringBuilder();
			StringBuilder auditpass4 = new StringBuilder();
			StringBuilder auditpass5 = new StringBuilder();
			StringBuilder auditpass6 = new StringBuilder();
			StringBuilder auditpass7 = new StringBuilder();
			StringBuilder auditpass8 = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			System.out.println(tabelData1.size() + "    " + auditRetDetailsEntityList.size());

			if (tabelData1.size() != auditRetDetailsEntityList.size()) {
				auditIssue1
						.append("Number of RETs detected on USM not match with the number of RET present in RET Form");

			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (!tdData.get("config-tilt").equals(tdData.get("current-tilt"))) {
					auditIssue7.append("For each RET, “config-tilt” and “current-tilt” should be same");
				}
			}
			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					String userLevelValue = tdData.get("user-label").trim().replaceAll("[^a-zA-Z0-9]", "");

					if (key.equals("antenna-model-number")) {
						if (!ObjectUtils.isEmpty(antennaSerialNumberMap.get(userLevelValue))) {
							if (!antennaModelMaps.get(userLevelValue).contains(value)) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue2.append("connected-digital-unit-board-id : "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " antenna-model-number : "
										+ tdData.get("antenna-model-number") + "\n");

							} else {
								tableData.append("<td align=center>" + value + "</td>\n");

							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else if (key.equals("antenna-serial-number")) {
						if (!ObjectUtils.isEmpty(antennaSerialNumberMap.get(userLevelValue))) {
							if (!antennaSerialNumberMap.get(userLevelValue).contains(value)) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue3.append("connected-digital-unit-board-id : "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " antenna-serial-number : "
										+ tdData.get("antenna-serial-number") + "\n");

							} else {
								tableData.append("<td align=center>" + value + "</td>\n");

							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else if (key.equals("current-base-station-id")) {
						String abc = value.replaceAll("[^a-zA-Z0-9]", "");
						if (!ObjectUtils.isEmpty(remotecellIdMaps.get(userLevelValue))) {
							if (!remotecellIdMaps.get(userLevelValue).contains(abc)) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue4.append("connected-digital-unit-board-id : "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " current-base-station-id : "
										+ tdData.get("current-base-station-id") + "\n");

							} else {
								tableData.append("<td align=center>" + value + "</td>\n");

							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else if (key.equals("current-sector-id")) {
						if (!ObjectUtils.isEmpty(sectorIdMaps.get(userLevelValue))) {
							if (!sectorIdMaps.get(userLevelValue).contains(value)) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue5.append("connected-digital-unit-board-id : "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " current-sector-id : "
										+ tdData.get("current-sector-id") + "\n");

							} else {
								tableData.append("<td align=center>" + value + "</td>\n");

							}
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else if (key.equals("user-label")) {
						if (!(userLvl.contains(value.replaceAll("[^a-zA-Z0-9]", "")))) {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							auditIssue6.append(
									"connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id : "
											+ tdData.get("connected-digital-unit-port-id") + " user-label : "
											+ tdData.get("user-label") + "\n");

						} else {
							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else if (key.equals("current-tilt")) {
						if (!ObjectUtils.isEmpty(electricaltiltMap.get(userLevelValue))) {
							if (!electricaltiltMap.get(userLevelValue)
									.contains(value.substring(0, value.length() - 1))) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditIssue5.append("connected-digital-unit-board-id : "
										+ tdData.get("connected-digital-unit-board-id")
										+ " connected-digital-unit-port-id : "
										+ tdData.get("connected-digital-unit-port-id") + " current-tilt: "
										+ tdData.get("current-tilt") + "\n");

							} else {
								tableData.append("<td align=center>" + value + "</td>\n");

							}
						} else {
							tableData.append("<td align=center >" + value + "</td>\n");
						}
					} else {
						tableData.append("<td align=center >" + value + "</td>\n");
					}

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append("</table>\n");
	
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());
			auditIssueAll.append(auditIssue1);
			auditIssueAll.append(auditIssue2);
			auditIssueAll.append(auditIssue3);
			auditIssueAll.append(auditIssue4);
			auditIssueAll.append(auditIssue5);
			auditIssueAll.append(auditIssue6);
			auditIssueAll.append(auditIssue7);
			auditIssueAll.append(auditIssue8);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);

			if (auditIssue2.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(71, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue2.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(71, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(71, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue1.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(70, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue1.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(70, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(70, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue3.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(72, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue3.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(72, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(72, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue4.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(73, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue4.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(73, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(73, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue5.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(74, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue5.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(74, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(74, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue6.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(75, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue6.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(75, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(75, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue7.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(76, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue7.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(76, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(76, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}
			if (auditIssue8.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(77, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), auditIssue8.toString());
				audit4GSummaryService.createAudit4GPassFailEntity(77, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "fail");
			} else {
				audit4GSummaryService.createAudit4GPassFailEntity(77, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "pass");
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	public StringBuilder get4GAuditRet2(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {

		StringBuilder htmlContent = new StringBuilder();
		try {
			StringBuilder htmlContent1 = new StringBuilder();
			StringBuilder htmlContent2 = new StringBuilder();
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("unit-type");
			headerList1.add("board-type");
			headerList1.add("user-label");
			headerList1.add("longitude");
			headerList1.add("height");
			headerList1.add("radio-unit-port-id");
			headerList1.add("radio-unit-serial-number");
			headerList1.add("vswr-fail-alarm-threshold");
			headerList1.add("operational-state");
			headerList1.add("firmware-mode");
			headerList1.add("number-of-carrier");
			headerList1.add("cascade-optic-delay");
			headerList1.add("dc-input-voltage");
			headerList1.add("dc-input-current");
			headerList1.add("energy-saving-pa-bias-voltage-mode");
			headerList1.add("dynamic-power-amplifier-control-switch");
			headerList1.add("antenna-line-device-power-feeding-switch");
			headerList1.add("pim-detect-cancel-control-switch");
			headerList1.add("pim-detect-cancel-alarm-threshold");
			headerList1.add("rx-vswr-fail-alarm-switch");
			headerList1.add("rx-vswr-fail-alarm-threshold");
			headerList1.add("rx-vswr-fail-alarm-detect-period");
			headerList1.add("first-sector-start-earfcn");
			headerList1.add("second-sector-start-earfcn");
			headerList1.add("function-split-option");
			headerList1.add("flag-pa-backoff-2percent-evm");
			headerList1.add("pa-backoff-2percent-evm");
			headerList1.add("multi-path-disabled-threshold");
			headerList1.add("multi-path-degraded-threshold");
			headerList1.add("operational-mode");
			headerList1.add("auto-fusing-flag");

			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("RET NAME");
			headerList2.add("RemoteCellID");
			headerList2.add("SECTOR_ID");
			headerList2.add("Antenna Position");
			headerList2.add("Mount Type");
			headerList2.add("Band");
			headerList2.add("ANTENNA MODEL");
			headerList2.add("RET SERIAL NUMBER");
			headerList2.add("ELECTRICAL TILT");
			headerList2.add("ANTENNA AISG RF PORT Number");
			headerList2.add("RRH SERIAL NUMBER");
			headerList2.add("Is Diplexer Present?");
			headerList2.add("Power Feeding Switch");
			headerList2.add("ANTENNA SERIAL NUMBER");
			headerList2.add("Comments");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					NodeList childNodeList1 = element.getElementsByTagName("hardware-management");
					for (int k = 0; k < childNodeList1.getLength(); k++) {

						Node ChildNode1 = childNodeList1.item(k);
						if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

							Element elementchild1 = (Element) ChildNode1;

							NodeList childNodeList2 = elementchild1.getElementsByTagName("radio-unit");
							for (int l = 0; l < childNodeList2.getLength(); l++) {

								Node ChildNode2 = childNodeList2.item(l);
								if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

									Element elementchild2 = (Element) ChildNode2;

									NodeList childNodeList3 = elementchild2.getElementsByTagName("radio-unit-info");
									for (int m = 0; m < childNodeList3.getLength(); m++) {

										Node ChildNode3 = childNodeList3.item(m);
										if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

											Element elementchild3 = (Element) ChildNode3;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();

											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));

											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild3, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild3, header));
											}

											tabelData1.add(objtableData);
										}
									}
								}
							}
						}
					}

				}
			}

			htmlContent1.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent1.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			List<RetTestEntity> auditRetDetailsEntityList1 = retRepository.getAuditRetEntity(enbId);

			Set<String> uqi = new HashSet<>();
			for (RetTestEntity ciqData : auditRetDetailsEntityList1) {
				if (!ObjectUtils.isEmpty(auditRetDetailsEntityList1)) {
					uqi.add(ciqData.getUniqueId().trim());
				}
			}
			int max = 0;
			for (String r : uqi) {
				if (NumberUtils.isNumber(r)) {
					int s = Integer.parseInt(r);

					if (s > max) {
						max = s;
					}
				}
			}
			String uqidm = Integer.toString(max);
			String uniqueId = Integer.toString(runTestEntity.getId());
			if (max != 0) {
				uniqueId = uqidm;
			}
			List<RetTestEntity> auditRetDetailsEntityList = retRepository.getAuditRetDetailsEntityList(enbId, uniqueId);
			String powerFeed = "";
			if (!ObjectUtils.isEmpty(auditRetDetailsEntityList)) {
				powerFeed = auditRetDetailsEntityList.get(0).getPowerFeedingSwitch().replaceAll("\\s", "").trim();
			}

			StringBuilder alarmTypeAuditIssue = new StringBuilder();
			StringBuilder auditIssueAll = new StringBuilder();
			
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("antenna-line-device-power-feeding-switch")) {
						if (!value.contains("power-feeding-on-path-1-3") && powerFeed.contains("ON-1-3")
								&& tdData.get("board-type").equals("rfv01u-d20")) {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							alarmTypeAuditIssue.append(
									"connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id : "
											+ tdData.get("connected-digital-unit-port-id")
											+ " antenna-line-device-power-feeding-switch : "
											+ tdData.get("antenna-line-device-power-feeding-switch") + "\n");

						} else if (!value.contains("power-feeding-off") && powerFeed.contains("OFF-")
								&& tdData.get("board-type").equals("rfv01u-d20")) {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							alarmTypeAuditIssue.append(
									"connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id : "
											+ tdData.get("connected-digital-unit-port-id")
											+ " antenna-line-device-power-feeding-switch : "
											+ tdData.get("antenna-line-device-power-feeding-switch") + "\n");

						} else if (!value.contains("power-feeding-on-path-1-5") && powerFeed.contains("ON-1-5")
								&& tdData.get("board-type").equals("rfv01u-d10")) {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							alarmTypeAuditIssue.append(
									"connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id : "
											+ tdData.get("connected-digital-unit-port-id")
											+ " antenna-line-device-power-feeding-switch : "
											+ tdData.get("antenna-line-device-power-feeding-switch") + "\n");

						} else if (!value.contains("power-feeding-off") && powerFeed.contains("OFF-")
								&& tdData.get("board-type").equals("rfv01u-d10")) {
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							alarmTypeAuditIssue.append(
									"connected-digital-unit-board-id : " + tdData.get("connected-digital-unit-board-id")
											+ " connected-digital-unit-port-id : "
											+ tdData.get("connected-digital-unit-port-id")
											+ " antenna-line-device-power-feeding-switch : "
											+ tdData.get("antenna-line-device-power-feeding-switch") + "\n");

						} else {
							tableData.append("<td align=center>" + value + "</td>\n");

						}
					} else {
						tableData.append("<td align=center >" + value + "</td>\n");

					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent1.append(tableHeader);
			htmlContent1.append(tableData);

			htmlContent1.append("</table>\n");

			List<String> userLevel = new ArrayList<>();
			List<String> remotecellId = new ArrayList<>();
			List<String> sectorid = new ArrayList<>();
			List<String> AntennaPosition = new ArrayList<>();
			List<String> MountType = new ArrayList<>();
			List<String> band = new ArrayList<>();
			List<String> ANTENNAMODEL = new ArrayList<>();
			List<String> RETSERIALNUMBER = new ArrayList<>();
			List<String> electricalTilt = new ArrayList<>();
			List<String> ANTENNAAISGRFPORTNumber = new ArrayList<>();
			List<String> RRHSERIALNUMBER = new ArrayList<>();
			List<String> IsDiplexerPresent = new ArrayList<>();
			List<String> PowerFeedingSwitch = new ArrayList<>();
			List<String> antennaSN = new ArrayList<>();
			List<String> Comments = new ArrayList<>();

			if (!ObjectUtils.isEmpty(auditRetDetailsEntityList)) {
				for (RetTestEntity ciqData : auditRetDetailsEntityList) {

					if (!ObjectUtils.isEmpty(ciqData.getAntennaAisgRFPortNumber())) {
						ANTENNAAISGRFPORTNumber.add(ciqData.getAntennaAisgRFPortNumber());
					} else {
						ANTENNAAISGRFPORTNumber.add("-");
					}

					if (!ObjectUtils.isEmpty(ciqData.getDiplexerPresent())) {
						IsDiplexerPresent.add(ciqData.getDiplexerPresent());
					} else {
						IsDiplexerPresent.add("-");
					}

					if (!ObjectUtils.isEmpty(ciqData.getPowerFeedingSwitch())) {
						PowerFeedingSwitch.add(ciqData.getPowerFeedingSwitch());
					} else {
						PowerFeedingSwitch.add("-");
					}

					if (!ObjectUtils.isEmpty(ciqData.getComments())) {
						Comments.add(ciqData.getComments());
					} else {
						Comments.add("-");
					}

					if (!ObjectUtils.isEmpty(ciqData.getAntennaModel())) {
						ANTENNAMODEL.add(ciqData.getAntennaModel());
					} else {
						ANTENNAMODEL.add("-");
					}
					if (!ObjectUtils.isEmpty(ciqData.getRemoteCellID().trim())) {
						remotecellId.add(ciqData.getRemoteCellID().trim());
					} else {
						remotecellId.add("-");
					}
					if (!ObjectUtils.isEmpty(ciqData.getSectorId().trim())) {
						sectorid.add(ciqData.getSectorId().trim());
					} else {
						sectorid.add("-");
					}
					if (!ObjectUtils.isEmpty(auditRetDetailsEntityList)) {
						antennaSN.add(ciqData.getAntennaSerialNumber().trim());
					} else {
						antennaSN.add("-");
					}
					if (!ObjectUtils.isEmpty(auditRetDetailsEntityList)) {
						electricalTilt.add(ciqData.getElectricalTilt().trim());
					} else {
						electricalTilt.add("-");
					}
					if (!ObjectUtils.isEmpty(ciqData.getRetName().trim())) {
						userLevel.add(ciqData.getRetName().trim());
					} else {
						userLevel.add("-");
					}
					if (!ObjectUtils.isEmpty(ciqData.getAntennaPosition())) {
						AntennaPosition.add(ciqData.getAntennaPosition());
					} else {
						AntennaPosition.add("-");
					}
					if (!ObjectUtils.isEmpty(ciqData.getMountType())) {
						MountType.add(ciqData.getMountType());
					} else {
						MountType.add("-");
					}
					if (!ObjectUtils.isEmpty(ciqData.getRetSerialNumber())) {
						RETSERIALNUMBER.add(ciqData.getRetSerialNumber());
					} else {
						RETSERIALNUMBER.add("-");
					}
					if (!ObjectUtils.isEmpty(ciqData.getBand())) {
						band.add(ciqData.getBand());
					} else {
						band.add("-");
					}
					if (!ObjectUtils.isEmpty(ciqData.getRrhSerialNumber())) {
						RRHSERIALNUMBER.add(ciqData.getRrhSerialNumber());
					} else {
						RRHSERIALNUMBER.add("-");
					}

				}
			}

			for (int m = 0; m < auditRetDetailsEntityList.size(); m++) {
				LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
				Iterator<String> itr = headerList1.iterator();
				String header = itr.next();
				objtableData.put(header, userLevel.get(m));
				header = itr.next();
				objtableData.put(header, remotecellId.get(m));
				header = itr.next();
				objtableData.put(header, sectorid.get(m));
				header = itr.next();
				objtableData.put(header, AntennaPosition.get(m));
				header = itr.next();
				objtableData.put(header, MountType.get(m));
				header = itr.next();
				objtableData.put(header, band.get(m));
				header = itr.next();
				objtableData.put(header, ANTENNAMODEL.get(m));
				header = itr.next();
				objtableData.put(header, RETSERIALNUMBER.get(m));
				header = itr.next();
				objtableData.put(header, electricalTilt.get(m));
				header = itr.next();
				objtableData.put(header, ANTENNAAISGRFPORTNumber.get(m));
				header = itr.next();
				objtableData.put(header, RRHSERIALNUMBER.get(m));
				header = itr.next();
				objtableData.put(header, IsDiplexerPresent.get(m));
				header = itr.next();
				objtableData.put(header, PowerFeedingSwitch.get(m));
				header = itr.next();
				objtableData.put(header, antennaSN.get(m));
				header = itr.next();
				objtableData.put(header, Comments.get(m));
				tabelData2.add(objtableData);
			}
			htmlContent2.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent2.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + "RET FORM" + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String value = resultTableData.getValue();
					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent2.append(tableHeader);
			htmlContent2.append(tableData);

			htmlContent2.append("</table>\n");
			htmlContent.append(htmlContent1);
			htmlContent.append(htmlContent2);
			
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditIssueAll.append(alarmTypeAuditIssue);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);

			if (alarmTypeAuditIssue.length() != 0) {
				audit4GSummaryService.createAudit4GSummaryEntity(78, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), alarmTypeAuditIssue.toString());
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}
	public StringBuilder getENBAuditDSSMIGAUDIT(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry1 = "path-control";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("path");
			headerList1.add("tx-rf-power");
			headerList1.add("vswr");

			String entry2 = "active-alarm-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("alarm-unit-type");
			headerList2.add("alarm-type");
			headerList2.add("location");
			headerList2.add("raised-time");
			headerList2.add("alarm-group");
			headerList2.add("probable-cause");
			headerList2.add("specific-problem");
			headerList2.add("severity");
			headerList2.add("alarm-code");
			headerList2.add("sequence-number");
			headerList2.add("time-info");
			
			String entry3 = "cpri-port-entries";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("unit-type");
			headerList3.add("unit-id");
			headerList3.add("port-id");
			headerList3.add("connected-radio-unit-type");
			headerList3.add("cpri-connection-type");
			headerList3.add("bit-rate");
			headerList3.add("tx-wavelength");
			headerList3.add("tx-power");
			headerList3.add("rx-power");
			
			String entry4 = "cell-call-count-status";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cell-num");
			headerList4.add("active-ue-count");

			String entry5 = "operational-state RU";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("connected-digital-unit-board-type");
			headerList5.add("connected-digital-unit-board-id");
			headerList5.add("connected-digital-unit-port-id");
			headerList5.add("cascade-radio-unit-id");
			headerList5.add("operational-mode");
			headerList5.add("operational-state");
			String entry6 = "operational-state";
			
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("administrative-state");
			headerList6.add("operational-mode");
			headerList6.add("operational-state");
			
			String entry7 = "dl-max-tx-power";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("connected-digital-unit-board-type");
			headerList7.add("connected-digital-unit-board-id");
			headerList7.add("connected-digital-unit-port-id");
			headerList7.add("cascade-radio-unit-id");
			headerList7.add("carrier-index");
			headerList7.add("dl-max-tx-power");
			headerList7.add("cell-number");
		
			String entry8 = "eutran-cell-fdd-tdd";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("cell-num");
			headerList8.add("internal-cell-num");
			headerList8.add("administrative-state");
			headerList8.add("operational-state");
			headerList8.add("usage-state");
			headerList8.add("s1-ap-state");
			

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("path-control");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
									childNodeList2 = elementchild1.getElementsByTagName("carrier-control-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList7.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData7.add(objtableData);
										}
									}
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList5.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));
									while (itr.hasNext()) {
										header = itr.next();
										if (header.equalsIgnoreCase("operational-state")
												&& elementchild1.getElementsByTagName(header) != null
												&& elementchild1.getElementsByTagName(header).getLength() > 0) {
											for (int z = 0; z < elementchild1.getElementsByTagName(header)
													.getLength(); z++) {
												if (elementchild1.getElementsByTagName(header).item(z).getParentNode()
														.getNodeName().equalsIgnoreCase("radio-unit-info")) {
													objtableData.put(header, elementchild1.getElementsByTagName(header)
															.item(z).getTextContent());
												}
											}
										} else {
											objtableData.put(header, getXmlElementData(elementchild1, header));
										}
									}
									tabelData5.add(objtableData);
								}
							}
						}
					}

					childNodeList = element.getElementsByTagName("fault-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("active-alarm-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("digital-unit-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("cpri-port-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList3.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData3.add(objtableData);
								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("enb-function");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList8.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData8.add(objtableData);
								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("cell-call-count-status");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList4.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData4.add(objtableData);
								}
							}
						}
					}
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Iterator<String> itr = headerList6.iterator();
					String header ;
					while (itr.hasNext()) {
						header = itr.next();
						if ((header.equalsIgnoreCase("administrative-state")
								|| header.equalsIgnoreCase("operational-state")
								|| header.equalsIgnoreCase("operational-mode"))
								&& element.getElementsByTagName(header) != null
								&& element.getElementsByTagName(header).getLength() > 0) {
							for (int z = 0; z < element.getElementsByTagName(header).getLength(); z++) {
								if (element.getElementsByTagName(header).item(z).getParentNode().getNodeName()
										.equalsIgnoreCase("managed-element")) {
									objtableData.put(header,
											element.getElementsByTagName(header).item(z).getTextContent());
								}
							}
						} else {
							objtableData.put(header, getXmlElementData(element, header));
						}
					}

					tabelData6.add(objtableData);

				}
			}

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			
			if(command.equals(XmlCommandsConstants.DSS_ENB_IMPACT_AUDIT)) {
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "DSS_eNB_Pre_Impact_Audit" + "</b></td></tr>\n");
			}else {
				htmlContent.append(
						"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");	
			}

			String entry = "path-control";

			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");
			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			entry = "active-alarm-entries";
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {

					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			entry = "cpri-port-entries";
			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			entry = "operation-State RRH";
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList5) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData5) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			entry = "cell-call-count-status";
			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();

					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			entry = "operational-state";
			htmlContent.append(
					"<tr><td colspan=" + headerList6.size() + " bgcolor=#EEEEEE><b>" + entry + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList6) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData6) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String value = resultTableData.getValue();
					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append(
					"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList7) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData7) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String value = resultTableData.getValue();
					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append(
					"<tr><td colspan=" + headerList8.size() + " bgcolor=#EEEEEE><b>" + entry8 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList8) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData8) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String value = resultTableData.getValue();
					tableData.append("<td align=center>" + value + "</td>\n");

				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
	public StringBuilder getENBAuditDSSMIGAUDITDIFFHTML(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String entry1 = "path-control";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("connected-digital-unit-board-type");
			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("cascade-radio-unit-id");
			headerList1.add("path");
			headerList1.add("tx-rf-power");
			headerList1.add("vswr");

			String entry2 = "active-alarm-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("alarm-unit-type");
			headerList2.add("alarm-type");
			headerList2.add("location");
			headerList2.add("raised-time");
			headerList2.add("alarm-group");
			headerList2.add("probable-cause");
			headerList2.add("specific-problem");
			headerList2.add("severity");
			headerList2.add("alarm-code");
			headerList2.add("sequence-number");
			headerList2.add("time-info");
			
			String entry3 = "cpri-port-entries";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("unit-type");
			headerList3.add("unit-id");
			headerList3.add("port-id");
			headerList3.add("connected-radio-unit-type");
			headerList3.add("cpri-connection-type");
			headerList3.add("bit-rate");
			headerList3.add("tx-wavelength");
			headerList3.add("tx-power");
			headerList3.add("rx-power");
			
			String entry4 = "operational-state RRH";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("cell-num");
			headerList4.add("active-ue-count");

			String entry5 = "cell-call-count-status";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("connected-digital-unit-board-type");
			headerList5.add("connected-digital-unit-board-id");
			headerList5.add("connected-digital-unit-port-id");
			headerList5.add("cascade-radio-unit-id");
			headerList5.add("operational-mode");
			headerList5.add("operational-state");
			String entry6 = "operational-state";
			
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("administrative-state");
			headerList6.add("operational-mode");
			headerList6.add("operational-state");
			
			String entry7 = "dl-max-tx-power";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("connected-digital-unit-board-type");
			headerList7.add("connected-digital-unit-board-id");
			headerList7.add("connected-digital-unit-port-id");
			headerList7.add("cascade-radio-unit-id");
			headerList7.add("carrier-index");
			headerList7.add("dl-max-tx-power");
			headerList7.add("cell-number");
			
			String entry8 = "eutran-cell-fdd-tdd";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("cell-num");
			headerList8.add("internal-cell-num");
			headerList8.add("administrative-state");
			headerList8.add("operational-state");
			headerList8.add("usage-state");
			headerList8.add("s1-ap-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element element = (Element) inChildNode;

					// digital-unit
					NodeList childNodeList = element.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("radio-unit-info");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1.getElementsByTagName("path-control");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
									childNodeList2 = elementchild1.getElementsByTagName("carrier-control-info");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList7.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData7.add(objtableData);
										}
									}
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList5.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));
									while (itr.hasNext()) {
										header = itr.next();
										if (header.equalsIgnoreCase("operational-state")
												&& elementchild1.getElementsByTagName(header) != null
												&& elementchild1.getElementsByTagName(header).getLength() > 0) {
											for (int z = 0; z < elementchild1.getElementsByTagName(header)
													.getLength(); z++) {
												if (elementchild1.getElementsByTagName(header).item(z).getParentNode()
														.getNodeName().equalsIgnoreCase("radio-unit-info")) {
													objtableData.put(header, elementchild1.getElementsByTagName(header)
															.item(z).getTextContent());
												}
											}
										} else {
											objtableData.put(header, getXmlElementData(elementchild1, header));
										}
									}
									tabelData5.add(objtableData);
								}
							}
						}
					}

					childNodeList = element.getElementsByTagName("fault-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// ucr
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("active-alarm-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("digital-unit-entries");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("cpri-port-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList3.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));
									header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData3.add(objtableData);
								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("enb-function");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("eutran-cell-fdd-tdd");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList8.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild1, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData8.add(objtableData);
								}
							}
						}
					}
					childNodeList = element.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// clock-unit
							NodeList childNodeList1 = elementchild.getElementsByTagName("cell-call-count-status");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;
									LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
									Iterator<String> itr = headerList4.iterator();
									String header = itr.next();
									objtableData.put(header, getXmlElementData(elementchild, header));

									while (itr.hasNext()) {
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild1, header));
									}
									tabelData4.add(objtableData);
								}
							}
						}
					}
					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Iterator<String> itr = headerList6.iterator();
					String header ;
					
					while (itr.hasNext()) {
						header = itr.next();
						if ((header.equalsIgnoreCase("administrative-state")
								|| header.equalsIgnoreCase("operational-state")
								|| header.equalsIgnoreCase("operational-mode"))
								&& element.getElementsByTagName(header) != null
								&& element.getElementsByTagName(header).getLength() > 0) {
							for (int z = 0; z < element.getElementsByTagName(header).getLength(); z++) {
								if (element.getElementsByTagName(header).item(z).getParentNode().getNodeName()
										.equalsIgnoreCase("managed-element")) {
									objtableData.put(header,
											element.getElementsByTagName(header).item(z).getTextContent());
								}
							}
						} else {
							objtableData.put(header, getXmlElementData(element, header));
						}
					}

					tabelData6.add(objtableData);

				}
			}
			if (fullOutputLog.contains(XmlCommandsConstants.DSS_ENB_IMPACT_AUDIT)) {
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "DIFF HTML "
						+ command + "</b></td></tr>\n");
				boolean auditFailue = false;
				htmlContent.append(
						"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList1) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				int alarm = getNoOfAlarmPresent(fullOutputLog, XmlCommandsConstants.DSS_ENB_IMPACT_AUDIT);
				boolean alarmpresent = false;
				if (tabelData2.size() != alarm) {
					alarmpresent = true;
				}
                      System.out.println(tabelData2.size()+" != "+alarm);
				tableHeader = tableHeader + "</tr>\n";
				StringBuilder tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData1) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String boardId = tdData.get("connected-digital-unit-board-id");
					String cduportId = tdData.get("connected-digital-unit-port-id");
					String unitId = tdData.get("path");
					String txrfPower = "";
					String vswr = "";
					double power = 0.0;
					double vswrPre = 0.0;
					map = gettxrxvswr(fullOutputLog, XmlCommandsConstants.DSS_ENB_IMPACT_AUDIT, boardId, cduportId,
							unitId);
					if (!map.isEmpty()) {
						txrfPower = map.get("tx-rf-power");
						if (NumberUtils.isNumber(txrfPower)) {
							power = Double.parseDouble(txrfPower);
						}
					}
					if (!map.isEmpty()) {
						vswr = map.get("vswr");
						if (NumberUtils.isNumber(vswr)) {
							vswrPre = Double.parseDouble(vswr);
						}
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("tx-rf-power")) {

							if (NumberUtils.isNumber(resultTableData.getValue())) {
								Double txPower = Double.parseDouble(resultTableData.getValue());

								if (power + 3.0 >= txPower && power - 3.0 <= txPower) {
									tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								} else if (power > 26.0 && txPower > 26.0) {
									tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								} else if (power < 26.0 && txPower < 26.0) {
									tableData.append("<td align=center bgcolor ='#FFA500'>" + resultTableData.getValue()
											+ "</td>\n");
								} else if (power > 26.0 && txPower < 26.0) {
									auditFailue = true;
									tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n");
								} else {
									tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								}
							} else {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							}

						} else if (key.equals("vswr")) {

							if (NumberUtils.isNumber(resultTableData.getValue())) {
								Double vswrPost = Double.parseDouble(resultTableData.getValue());

								if (vswrPost <= 1.5) {
									tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								} else {
									auditFailue = true;
									tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
											+ "</td>\n");
								}
							} else {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							}

						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append(
						"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList2) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData2) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("alarm-type")) {
							if (alarmpresent) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditFailue = true;
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append(
						"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList3) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData3) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String boardId = tdData.get("unit-id");
					String cduportId = tdData.get("port-id");

					String cpriConnType = "";

					map = getcipriportentry(fullOutputLog, XmlCommandsConstants.DSS_ENB_IMPACT_AUDIT, boardId,
							cduportId);
					if (!map.isEmpty()) {
						cpriConnType = map.get("cpri-connection-type");
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("cpri-connection-type")) {
							if (value.equals(cpriConnType)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append(
						"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList5) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData5) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String boardId = tdData.get("connected-digital-unit-board-id");
					String cduportId = tdData.get("connected-digital-unit-port-id");

					String operMode = "";
					String  operState= "";

					map = gettoperrrh(fullOutputLog, XmlCommandsConstants.DSS_ENB_IMPACT_AUDIT, boardId, cduportId);
					if (!map.isEmpty()) {
						operMode = map.get("operational-mode").trim();
					}
					if (!map.isEmpty()) {
						operState = map.get("operational-state").trim();
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("operational-mode")) {
							if (value.equals(operMode)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("operational-state")) {
							if (value.equals(operState)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append(
						"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList4) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData4) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String cellNum = tdData.get("cell-num");

					String activeUeCount = "";

					map = cellcallcountstatu(fullOutputLog, XmlCommandsConstants.DSS_ENB_IMPACT_AUDIT, cellNum);
					if (!map.isEmpty()) {
						activeUeCount = map.get("active-ue-count").trim();
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("active-ue-count")) {
							if (!value.equals("0") && activeUeCount.equals("0") ) {
								
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");	
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append(
						"<tr><td colspan=" + headerList6.size() + " bgcolor=#EEEEEE><b>" + entry6 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList6) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData6) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();

					String state = "";
					String admState = "";
					String mode = "";

					map = getOpertaionState(fullOutputLog, XmlCommandsConstants.DSS_ENB_IMPACT_AUDIT);
					if (!map.isEmpty()) {
						state = map.get("operational-state");
						admState = map.get("administrative-state");
						mode = map.get("operational-mode");
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("operational-state")) {
							if (value.equals(state)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("administrative-state")) {
							if (value.equals(admState)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("operational-mode")) {
							if (value.equals(mode)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				htmlContent.append(
						"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList7) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData7) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String cellNum = tdData.get("cell-number");

					String dlMaxTxPower = "";

					map = getDlMaxTxPower(fullOutputLog, XmlCommandsConstants.DSS_ENB_IMPACT_AUDIT, cellNum);
					if (!map.isEmpty()) {
						dlMaxTxPower = map.get("dl-max-tx-power").trim();
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("dl-max-tx-power")) {
							if (!value.equals(dlMaxTxPower)  ) {
								
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");	
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				
				htmlContent.append(
						"<tr><td colspan=" + headerList8.size() + " bgcolor=#EEEEEE><b>" + entry8 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList8) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData8) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String cellNum = tdData.get("cell-num");

					String s1ap = "";
					String state = "";
					String admState = "";
					String usageState = "";
					map = cellFddTDDTable(fullOutputLog, XmlCommandsConstants.DSS_ENB_IMPACT_AUDIT, cellNum);
					if (map.containsKey("operational-state")) {
						state = map.get("operational-state");						
					}
					if (map.containsKey("administrative-state")) {						
						admState = map.get("administrative-state");						
					}
					if (map.containsKey("usage-state")) {						
						usageState = map.get("usage-state");						
					}
					if (map.containsKey("s1-ap-state")) {						
						s1ap=map.get("s1-ap-state");
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("operational-state")) {
							if (value.equals(state)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("administrative-state")) {
							if (value.equals(admState)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("usage-state")) {
							if (value.equals(usageState)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						}else if (key.equals("s1-ap-state")) {
							if (value.equals(s1ap)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append("</table>\n");
				AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

				StringBuilder auditIssueAll = new StringBuilder();
				if (auditFailue) {
					auditIssueAll.append("PRE POST ENB AUDIT FAILED");
				}
				auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
				auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
				auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
				auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
				auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
				auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData6, auditIssueAll);
				auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData7, auditIssueAll);
				auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData8, auditIssueAll);
				if (auditFailue) {
					audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(88, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), "PRE POST ENB AUDIT FAILED");
				}
			}else if (fullOutputLog.contains(XmlCommandsConstants.CBAND_ENB_IMPACT_AUDIT)) {
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "DIFF HTML "
						+ command + "</b></td></tr>\n");
				boolean auditFailue = false;
				htmlContent.append(
						"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
				String tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList1) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				int alarm = getNoOfAlarmPresent(fullOutputLog, XmlCommandsConstants.CBAND_ENB_IMPACT_AUDIT);
				boolean alarmpresent = false;
				if (tabelData2.size() != alarm) {
					alarmpresent = true;
				}
                      System.out.println(tabelData2.size()+" != "+alarm);
				tableHeader = tableHeader + "</tr>\n";
				StringBuilder tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData1) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String boardId = tdData.get("connected-digital-unit-board-id");
					String cduportId = tdData.get("connected-digital-unit-port-id");
					String unitId = tdData.get("path");
					String txrfPower = "";
					String vswr = "";
					double power = 0.0;
					double vswrPre = 0.0;
					map = gettxrxvswr(fullOutputLog, XmlCommandsConstants.CBAND_ENB_IMPACT_AUDIT, boardId, cduportId,
							unitId);
					if (!map.isEmpty()) {
						txrfPower = map.get("tx-rf-power");
						if (NumberUtils.isNumber(txrfPower)) {
							power = Double.parseDouble(txrfPower);
						}
					}
					if (!map.isEmpty()) {
						vswr = map.get("vswr");
						if (NumberUtils.isNumber(vswr)) {
							vswrPre = Double.parseDouble(vswr);
						}
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("tx-rf-power")) {

							if (NumberUtils.isNumber(resultTableData.getValue())) {
								Double txPower = Double.parseDouble(resultTableData.getValue());

								if (power + 3.0 >= txPower && power - 3.0 <= txPower) {
									tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								} else if (power > 26.0 && txPower > 26.0) {
									tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								} else if (power < 26.0 && txPower < 26.0) {
									tableData.append("<td align=center bgcolor ='#FFA500'>" + resultTableData.getValue()
											+ "</td>\n");
								} else if (power > 26.0 && txPower < 26.0) {
									auditFailue = true;
									tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
									+ "</td>\n");
								} else {
									tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								}
							} else {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							}

						} else if (key.equals("vswr")) {

							if (NumberUtils.isNumber(resultTableData.getValue())) {
								Double vswrPost = Double.parseDouble(resultTableData.getValue());

								if (vswrPost <= 1.5) {
									tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
								} else {
									auditFailue = true;
									tableData.append("<td align=center bgcolor ='#fa8c8c'>" + resultTableData.getValue()
											+ "</td>\n");
								}
							} else {
								tableData.append("<td align=center>" + resultTableData.getValue() + "</td>\n");
							}

						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append(
						"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList2) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData2) {
					tableData.append("<tr>\n");

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("alarm-type")) {
							if (alarmpresent) {
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
								auditFailue = true;
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append(
						"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList3) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData3) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String boardId = tdData.get("unit-id");
					String cduportId = tdData.get("port-id");

					String cpriConnType = "";

					map = getcipriportentry(fullOutputLog, XmlCommandsConstants.CBAND_ENB_IMPACT_AUDIT, boardId,
							cduportId);
					if (!map.isEmpty()) {
						cpriConnType = map.get("cpri-connection-type");
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("cpri-connection-type")) {
							if (value.equals(cpriConnType)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append(
						"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList5) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData5) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String boardId = tdData.get("connected-digital-unit-board-id");
					String cduportId = tdData.get("connected-digital-unit-port-id");

					String operMode = "";
					String  operState= "";

					map = gettoperrrh(fullOutputLog, XmlCommandsConstants.CBAND_ENB_IMPACT_AUDIT, boardId, cduportId);
					if (!map.isEmpty()) {
						operMode = map.get("operational-mode").trim();
					}
					if (!map.isEmpty()) {
						operState = map.get("operational-state").trim();
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("operational-mode")) {
							if (value.equals(operMode)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("operational-state")) {
							if (value.equals(operState)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append(
						"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList4) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData4) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String cellNum = tdData.get("cell-num");

					String activeUeCount = "";

					map = cellcallcountstatu(fullOutputLog, XmlCommandsConstants.CBAND_ENB_IMPACT_AUDIT, cellNum);
					if (!map.isEmpty()) {
						activeUeCount = map.get("active-ue-count").trim();
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("active-ue-count")) {
							if (!value.equals("0") && activeUeCount.equals("0") ) {
								
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");	
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append(
						"<tr><td colspan=" + headerList6.size() + " bgcolor=#EEEEEE><b>" + entry6 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList6) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData6) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();

					String state = "";
					String admState = "";
					String mode = "";

					map = getOpertaionState(fullOutputLog, XmlCommandsConstants.CBAND_ENB_IMPACT_AUDIT);
					if (!map.isEmpty()) {
						state = map.get("operational-state");
						admState = map.get("administrative-state");
						mode = map.get("operational-mode");
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("operational-state")) {
							if (value.equals(state)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("administrative-state")) {
							if (value.equals(admState)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("operational-mode")) {
							if (value.equals(mode)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				htmlContent.append(
						"<tr><td colspan=" + headerList7.size() + " bgcolor=#EEEEEE><b>" + entry7 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList7) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData7) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String cellNum = tdData.get("cell-number");

					String dlMaxTxPower = "";

					map = getDlMaxTxPower(fullOutputLog, XmlCommandsConstants.CBAND_ENB_IMPACT_AUDIT, cellNum);
					if (!map.isEmpty()) {
						dlMaxTxPower = map.get("dl-max-tx-power").trim();
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("dl-max-tx-power")) {
							if (!value.equals(dlMaxTxPower)  ) {
								
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							} else {
								tableData.append("<td align=center>" + value + "</td>\n");	
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);
				
				htmlContent.append(
						"<tr><td colspan=" + headerList8.size() + " bgcolor=#EEEEEE><b>" + entry8 + "</b></td></tr>\n");

				tableHeader = "";
				tableHeader = tableHeader + "<tr>\n";
				for (String headerName : headerList8) {
					tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
				}

				tableHeader = tableHeader + "</tr>\n";
				tableData = new StringBuilder();
				for (LinkedHashMap<String, String> tdData : tabelData8) {
					tableData.append("<tr>\n");
					HashMap<String, String> map = new HashMap<>();
					String cellNum = tdData.get("cell-num");

					String s1ap = "";
					String state = "";
					String admState = "";
					String usageState = "";
					map = cellFddTDDTable(fullOutputLog, XmlCommandsConstants.CBAND_ENB_IMPACT_AUDIT, cellNum);
					if (map.containsKey("operational-state")) {
						state = map.get("operational-state");						
					}
					if (map.containsKey("administrative-state")) {						
						admState = map.get("administrative-state");						
					}
					if (map.containsKey("usage-state")) {						
						usageState = map.get("usage-state");						
					}
					if (map.containsKey("s1-ap-state")) {						
						s1ap=map.get("s1-ap-state");
					}

					for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
						String key = resultTableData.getKey();
						String value = resultTableData.getValue();
						if (key.equals("operational-state")) {
							if (value.equals(state)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("administrative-state")) {
							if (value.equals(admState)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else if (key.equals("usage-state")) {
							if (value.equals(usageState)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						}else if (key.equals("s1-ap-state")) {
							if (value.equals(s1ap)) {
								tableData.append("<td align=center>" + value + "</td>\n");
							} else {
								auditFailue = true;
								tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
							}
						} else {

							tableData.append("<td align=center>" + value + "</td>\n");
						}
					}
					tableData.append("</tr>\n");

				}
				htmlContent.append(tableHeader);
				htmlContent.append(tableData);

				htmlContent.append("</table>\n");
				if (auditFailue) {
					audit5GCBandSummaryService.createAudit5GCBandSummaryEntity(302, runTestEntity.getId(),
							enbId.replaceAll("^0+(?!$)", ""), "PRE POST ENB AUDIT FAILED");
				}
			} else {
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command
						+ "</b></td></tr>\n");
				htmlContent.append(createHtmltableDSS(headerList1, entry1, tabelData1, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList2, entry2, tabelData2, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList3, entry3, tabelData3, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList4, entry4, tabelData4, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList5, entry5, tabelData5, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList6, entry6, tabelData6, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList7, entry7, tabelData7, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList8, entry8, tabelData8, new HashMap<>()));
				htmlContent.append("</table>\n");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}

	private HashMap<String, String> cellFddTDDTable(String fullOutputLog, String command, String cellNum) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("cell-num");
			headerList1.add("internal-cell-num");
			headerList1.add("administrative-state");
			headerList1.add("operational-state");
			headerList1.add("usage-state");
			headerList1.add("s1-ap-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("enb-function");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("eutran-cell-fdd-tdd");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));

							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("cell-num").equals(cellNum)) {
					map.put("administrative-state", tdData.get("administrative-state"));
					map.put("operational-state", tdData.get("operational-state"));
					map.put("usage-state", tdData.get("usage-state"));
					map.put("s1-ap-state", tdData.get("s1-ap-state"));
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	private HashMap<String, String> getDlMaxTxPower(String fullOutputLog, String command, String cellNum) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("connected-digital-unit-board-type");
			headerList7.add("connected-digital-unit-board-id");
			headerList7.add("connected-digital-unit-port-id");
			headerList7.add("cascade-radio-unit-id");
			headerList7.add("carrier-index");
			headerList7.add("dl-max-tx-power");
			headerList7.add("cell-number");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("carrier-control-info");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList7.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));

							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("cell-number").equals(cellNum)

				) {
					map.put("dl-max-tx-power", tdData.get("dl-max-tx-power"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	private HashMap<String, String> getcipriportentry(String fullOutputLog, String command, String boardId,
			String cduportId) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("cpri-connection-type");
			

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("digital-unit-entries");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("cpri-port-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("unit-id").equals(boardId)
						&& tdData.get("port-id").equals(cduportId)) {
					map.put("cpri-connection-type", tdData.get("cpri-connection-type"));
				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	private int getNoOfAlarmPresent(String fullOutputLog, String command) {
		int map = 0;
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("alarm-unit-type");
			headerList2.add("alarm-type");
			headerList2.add("location");
			headerList2.add("raised-time");
			headerList2.add("alarm-group");
			headerList2.add("probable-cause");
			headerList2.add("specific-problem");
			headerList2.add("severity");
			headerList2.add("alarm-code");
			headerList2.add("sequence-number");
			headerList2.add("time-info");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("fault-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("active-alarm-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList2.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}
			map = tabelData1.size();
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	private HashMap<String, String> getOpertaionState(String fullOutputLog, String command) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();

			headerList6.add("administrative-state");
			headerList6.add("cat-nb1-operational-state");
			headerList6.add("operational-mode");
			headerList6.add("operational-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Iterator<String> itr = headerList6.iterator();
					String header ;
					while (itr.hasNext()) {
						header = itr.next();
						if ((header.equalsIgnoreCase("administrative-state")
								|| header.equalsIgnoreCase("operational-state")
								|| header.equalsIgnoreCase("operational-mode"))
								&& elementchild1.getElementsByTagName(header) != null
								&& elementchild1.getElementsByTagName(header).getLength() > 0) {
							for (int z = 0; z < elementchild1.getElementsByTagName(header).getLength(); z++) {
								if (elementchild1.getElementsByTagName(header).item(z).getParentNode().getNodeName()
										.equalsIgnoreCase("managed-element")) {
									objtableData.put(header,
											elementchild1.getElementsByTagName(header).item(z).getTextContent());
								}
							}
						} else {
							objtableData.put(header, getXmlElementData(elementchild1, header));
						}
					}
					
						tabelData1.add(objtableData);
					
				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				
					map.put("administrative-state", tdData.get("administrative-state"));
					map.put("operational-state", tdData.get("operational-state"));
					map.put("operational-mode", tdData.get("operational-mode"));

				
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	private HashMap<String, String> cellcallcountstatu(String fullOutputLog, String command, String boardId) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("cell-num");
			headerList1.add("active-ue-count");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("eutran-cell-fdd-tdd");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("cell-call-count-status");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));

							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("cell-num").equals(boardId)

				) {
					map.put("active-ue-count", tdData.get("active-ue-count"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	private HashMap<String, String> gettoperrrh(String fullOutputLog, String command, String boardId,
			String cduportId) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("operational-state");
			headerList1.add("operational-mode");
			

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("hardware-management");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("radio-unit-info");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								if (header.equalsIgnoreCase("operational-state")
										&& elementchild6.getElementsByTagName(header) != null
										&& elementchild6.getElementsByTagName(header).getLength() > 0) {
									for (int z = 0; z < elementchild6.getElementsByTagName(header)
											.getLength(); z++) {
										if (elementchild6.getElementsByTagName(header).item(z).getParentNode()
												.getNodeName().equalsIgnoreCase("radio-unit-info")) {
											objtableData.put(header, elementchild6.getElementsByTagName(header)
													.item(z).getTextContent());
										}
									}
								} else {
									objtableData.put(header, getXmlElementData(elementchild6, header));
								}
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("connected-digital-unit-board-id").equals(boardId)
						&& tdData.get("connected-digital-unit-port-id").equals(cduportId)
						) {
					map.put("operational-state", tdData.get("operational-state"));
					map.put("operational-mode", tdData.get("operational-mode"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}
	private HashMap<String, String> gettxrxvswr(String fullOutputLog, String command, String boardId,
			String cduportId, String unitId) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("connected-digital-unit-board-id");
			headerList1.add("connected-digital-unit-port-id");
			headerList1.add("path");
			headerList1.add("tx-rf-power");
			headerList1.add("vswr");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("radio-unit-info");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("path-control");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("connected-digital-unit-board-id").equals(boardId)
						&& tdData.get("connected-digital-unit-port-id").equals(cduportId)
						&& tdData.get("path").equals(unitId)) {
					map.put("tx-rf-power", tdData.get("tx-rf-power"));
					map.put("vswr", tdData.get("vswr"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}
	public StringBuilder getAuditAuditDSSPostMIGAUDIT(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String entry1 = "ru-cpri-port-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("group-id");
			headerList1.add("connected-du-cpri-port-id");
			headerList1.add("tx-wavelength");
			headerList1.add("tx-power");
			headerList1.add("rx-power");
			headerList1.add("temperature");
			headerList1.add("bit-rate");
			headerList1.add("voltage");
			headerList1.add("electric-current");
			headerList1.add("cpri-speed-saved");
			String entry2 = "du-cpri-port-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("unit-type");
			headerList2.add("unit-id");
			headerList2.add("port-id");
			headerList2.add("enb-ne-id");
			headerList2.add("enb-inode-id");
			headerList2.add("connected-enb-digital-unit-board-id");
			headerList2.add("connected-enb-digital-unit-port-id");
			headerList2.add("cascade-radio-unit-id");
			headerList2.add("tx-wavelength");
			headerList2.add("tx-power");
			headerList2.add("rx-power");
			headerList2.add("temperature");
			headerList2.add("bit-rate");
			headerList2.add("voltage");
			headerList2.add("electric-current");
			headerList2.add("cpri-speed-saved");
			headerList2.add("du-cpri-port-mode");

			String entry3 = "operational-mode";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("ne-id");
			headerList3.add("ne-type");
			headerList3.add("system-type");
			headerList3.add("user-label");
			headerList3.add("administrative-state");
			headerList3.add("rack-id");
			headerList3.add("sw-version");
			headerList3.add("operational-mode");

			String entry4 = "active-alarm";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("alarm-unit-type");
			headerList4.add("alarm-type");
			headerList4.add("location");
			headerList4.add("name");
			headerList4.add("value");
			String entry5 = "cpu";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("unit-type");
			headerList5.add("unit-id");
			headerList5.add("cpu-id");
			headerList5.add("operational-state");
			

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild11 = (Element) inChildNode;

					NodeList nodelist1 = elementchild11.getElementsByTagName("managed-element");
					for (int x = 0; x < nodelist1.getLength(); x++) {
						Node ChildNode = nodelist1.item(x);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList3.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData3.add(objtableData);
						}
					}
					// gnb-cu-cp-function-entries
					NodeList childNodeList = elementchild11.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// end-point-x2
							NodeList childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-x2-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("ru-cpri-port-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}

							// end-point-f1c
							childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-f1c-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("du-cpri-port-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}
							childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-f1c-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("cpu");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList5.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												if (header.equalsIgnoreCase("operational-state")
														&& elementchild2.getElementsByTagName(header) != null
														&& elementchild2.getElementsByTagName(header).getLength() > 0) {
													for (int z = 0; z < elementchild2.getElementsByTagName(header)
															.getLength(); z++) {
														if (elementchild2.getElementsByTagName(header).item(z).getParentNode()
																.getNodeName().equalsIgnoreCase("cpu")) {
															objtableData.put(header, elementchild2.getElementsByTagName(header)
																	.item(z).getTextContent());
														}
													}
												} else {
													objtableData.put(header, getXmlElementData(elementchild2, header));
												}
											}
											tabelData5.add(objtableData);
										}
									}
								}
							}

						}
					}

					childNodeList = elementchild11.getElementsByTagName("fault-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("additional-information");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList4.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData4.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			

			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "DSS_FSU_Pre_Impact_Audit" + "</b></td></tr>\n");
			htmlContent.append(createHtmltableDSS(headerList1, entry1, tabelData1, new HashMap<>()));
			htmlContent.append(createHtmltableDSS(headerList2, entry2, tabelData2, new HashMap<>()));
			htmlContent.append(createHtmltableDSS(headerList3, entry3, tabelData3, new HashMap<>()));
			htmlContent.append(createHtmltableDSS(headerList4, entry4, tabelData4, new HashMap<>()));
			htmlContent.append(createHtmltableDSS(headerList5, entry5, tabelData5, new HashMap<>()));
			htmlContent.append("</table>\n");
		
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	
		
	
		
	}
	public StringBuilder getAuditAuditDSSMIGAUDIT(String fullOutputLog, String command, String enbId,
			String dbcollectionFileName, RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));
			String entry1 = "ru-cpri-port-entries";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("unit-type");
			headerList1.add("unit-id");
			headerList1.add("port-id");
			headerList1.add("group-id");
			headerList1.add("connected-du-cpri-port-id");
			headerList1.add("tx-wavelength");
			headerList1.add("tx-power");
			headerList1.add("rx-power");
			headerList1.add("temperature");
			headerList1.add("bit-rate");
			headerList1.add("voltage");
			headerList1.add("electric-current");
			headerList1.add("cpri-speed-saved");
			String entry2 = "du-cpri-port-entries";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("unit-type");
			headerList2.add("unit-id");
			headerList2.add("port-id");
			headerList2.add("enb-ne-id");
			headerList2.add("enb-inode-id");
			headerList2.add("connected-enb-digital-unit-board-id");
			headerList2.add("connected-enb-digital-unit-port-id");
			headerList2.add("cascade-radio-unit-id");
			headerList2.add("tx-wavelength");
			headerList2.add("tx-power");
			headerList2.add("rx-power");
			headerList2.add("temperature");
			headerList2.add("bit-rate");
			headerList2.add("voltage");
			headerList2.add("electric-current");
			headerList2.add("cpri-speed-saved");
			headerList2.add("du-cpri-port-mode");

			String entry3 = "operational-mode";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("ne-id");
			headerList3.add("ne-type");
			headerList3.add("system-type");
			headerList3.add("user-label");
			headerList3.add("administrative-state");
			headerList3.add("rack-id");
			headerList3.add("sw-version");
			headerList3.add("operational-mode");

			String entry4 = "active-alarm";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("alarm-unit-type");
			headerList4.add("alarm-type");
			headerList4.add("location");
			headerList4.add("name");
			headerList4.add("value");
			String entry5 = "cpu";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("unit-type");
			headerList5.add("unit-id");
			headerList5.add("cpu-id");
			headerList5.add("operational-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("rpc-reply");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node inChildNode = nodeList.item(i);
				if (Node.ELEMENT_NODE == inChildNode.getNodeType()) {

					Element elementchild11 = (Element) inChildNode;

					NodeList nodelist1 = elementchild11.getElementsByTagName("managed-element");
					for (int x = 0; x < nodelist1.getLength(); x++) {
						Node ChildNode = nodelist1.item(x);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList3.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData3.add(objtableData);
						}
					}
					// gnb-cu-cp-function-entries
					NodeList childNodeList = elementchild11.getElementsByTagName("hardware-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							// end-point-x2
							NodeList childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-x2-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("ru-cpri-port-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList1.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData1.add(objtableData);
										}
									}
								}
							}

							// end-point-f1c
							childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-f1c-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("du-cpri-port-entries");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList2.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData2.add(objtableData);
										}
									}
								}
							}
							childNodeList1 = elementchild.getElementsByTagName("digital-unit-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									// end-point-f1c-entries
									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("cpu");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList5.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												if (header.equalsIgnoreCase("operational-state")
														&& elementchild2.getElementsByTagName(header) != null
														&& elementchild2.getElementsByTagName(header).getLength() > 0) {
													for (int z = 0; z < elementchild2.getElementsByTagName(header)
															.getLength(); z++) {
														if (elementchild2.getElementsByTagName(header).item(z).getParentNode()
																.getNodeName().equalsIgnoreCase("cpu")) {
															objtableData.put(header, elementchild2.getElementsByTagName(header)
																	.item(z).getTextContent());
														}
													}
												} else {
													objtableData.put(header, getXmlElementData(elementchild2, header));
												}
											}
											tabelData5.add(objtableData);
										}
									}
								}
							}

						}
					}

					childNodeList = elementchild11.getElementsByTagName("fault-management");
					for (int j = 0; j < childNodeList.getLength(); j++) {

						Node ChildNode = childNodeList.item(j);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

							Element elementchild = (Element) ChildNode;

							NodeList childNodeList1 = elementchild.getElementsByTagName("active-alarm-entries");
							for (int k = 0; k < childNodeList1.getLength(); k++) {

								Node ChildNode1 = childNodeList1.item(k);
								if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

									Element elementchild1 = (Element) ChildNode1;

									NodeList childNodeList2 = elementchild1
											.getElementsByTagName("additional-information");
									for (int l = 0; l < childNodeList2.getLength(); l++) {
										Node ChildNode2 = childNodeList2.item(l);
										if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

											Element elementchild2 = (Element) ChildNode2;

											LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
											Iterator<String> itr = headerList4.iterator();
											String header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild1, header));

											while (itr.hasNext()) {
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
											}
											tabelData4.add(objtableData);
										}
									}
								}
							}
						}
					}
				}
			}

			
			if(fullOutputLog.contains(XmlCommandsConstants.DSS_FSU_IMPACT_AUDIT)) {
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + "DIFF HTML  "
					+ command + "</b></td></tr>\n");

			htmlContent.append(
					"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + entry1 + "</b></td></tr>\n");
			boolean auditFailue=false;
			int alarm = getNoOfAlarmPresentFSU(fullOutputLog, XmlCommandsConstants.DSS_FSU_IMPACT_AUDIT);
			boolean alarmpresent = false;
			if (tabelData4.size() != alarm) {
				alarmpresent = true;
			}
			System.out.println(tabelData4.size()+" != "+alarm);

			String tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList1) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			StringBuilder tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData1) {
				tableData.append("<tr>\n");
				HashMap<String, String> map = new HashMap<>();
				String portId = tdData.get("port-id");

				String connectedDuCpriPortId = "";

				map = getDucipriPortId(fullOutputLog, XmlCommandsConstants.DSS_FSU_IMPACT_AUDIT, portId);
				if (!map.isEmpty()) {
					connectedDuCpriPortId = map.get("connected-du-cpri-port-id").trim();
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("connected-du-cpri-port-id")) {
						if (value.equals(connectedDuCpriPortId)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditFailue=true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {

						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append(
					"<tr><td colspan=" + headerList2.size() + " bgcolor=#EEEEEE><b>" + entry2 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList2) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData2) {
				tableData.append("<tr>\n");
				HashMap<String, String> map = new HashMap<>();
				String portId = tdData.get("port-id");

				String duCpriPortMode = "";

				map = getRuCipriPortId(fullOutputLog, XmlCommandsConstants.DSS_FSU_IMPACT_AUDIT, portId);
				if (!map.isEmpty()) {
					duCpriPortMode = map.get("du-cpri-port-mode").trim();
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("du-cpri-port-mode")) {
						if (value.equals(duCpriPortMode)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditFailue=true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {

						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append(
					"<tr><td colspan=" + headerList3.size() + " bgcolor=#EEEEEE><b>" + entry3 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList3) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData3) {
				tableData.append("<tr>\n");
				HashMap<String, String> map = new HashMap<>();

				String admState = "";
				String operMode = "";

				map = getOpertaionStateFsu(fullOutputLog, XmlCommandsConstants.DSS_FSU_IMPACT_AUDIT);
				if (!map.isEmpty()) {

					admState = map.get("administrative-state").trim();
					operMode = map.get("operational-mode").trim();
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("administrative-state")) {
						if (value.equals(admState)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditFailue=true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else if (key.equals("operational-mode")) {
						if (value.equals(operMode)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditFailue=true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {

						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);

			htmlContent.append(
					"<tr><td colspan=" + headerList4.size() + " bgcolor=#EEEEEE><b>" + entry4 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList4) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData4) {
				tableData.append("<tr>\n");

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("alarm-type")) {
						if (alarmpresent) {
							auditFailue=true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						} else {
							tableData.append("<td align=center>" + value + "</td>\n");
						}
					} else {

						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append(
					"<tr><td colspan=" + headerList5.size() + " bgcolor=#EEEEEE><b>" + entry5 + "</b></td></tr>\n");

			tableHeader = "";
			tableHeader = tableHeader + "<tr>\n";
			for (String headerName : headerList5) {
				tableHeader = tableHeader + "<th align=center>" + headerName + "</th>\n";
			}

			tableHeader = tableHeader + "</tr>\n";
			tableData = new StringBuilder();
			for (LinkedHashMap<String, String> tdData : tabelData5) {
				tableData.append("<tr>\n");
				HashMap<String, String> map = new HashMap<>();
				String unitID = tdData.get("unit-type");

				String cpuOperState = "";

				map = getCpuOperationState(fullOutputLog, XmlCommandsConstants.DSS_FSU_IMPACT_AUDIT, unitID);
				if (!map.isEmpty()) {
					cpuOperState = map.get("operational-state").trim();
				}

				for (Map.Entry<String, String> resultTableData : tdData.entrySet()) {
					String key = resultTableData.getKey();
					String value = resultTableData.getValue();
					if (key.equals("operational-state")) {
						if (value.equals(cpuOperState)) {
							tableData.append("<td align=center>" + value + "</td>\n");
						} else {
							auditFailue=true;
							tableData.append("<td align=center bgcolor ='#fa8c8c'>" + value + "</td>\n");
						}
					} else {

						tableData.append("<td align=center>" + value + "</td>\n");
					}
				}
				tableData.append("</tr>\n");

			}
			htmlContent.append(tableHeader);
			htmlContent.append(tableData);
			htmlContent.append("</table>\n");

			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService
					.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			StringBuilder auditIssueAll = new StringBuilder();
			if(auditFailue) {
				auditIssueAll.append("PRE POST FSU AUDIT FAILED");
			}
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
			if(auditFailue){
				audit5GDSSSummaryService.createAudit5GDSSSummaryEntity(88, runTestEntity.getId(),
						enbId.replaceAll("^0+(?!$)", ""), "PRE POST FSU AUDIT FAILED");	
			}
			}else {
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append(
						"<tr><td colspan=" + headerList1.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append(createHtmltableDSS(headerList1, entry1, tabelData1, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList2, entry2, tabelData2, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList3, entry3, tabelData3, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList4, entry4, tabelData4, new HashMap<>()));
				htmlContent.append(createHtmltableDSS(headerList5, entry5, tabelData5, new HashMap<>()));
				htmlContent.append("</table>\n");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	private HashMap<String, String> getCpuOperationState(String fullOutputLog, String command,
			String portId) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry5 = "cpu";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("unit-type");
			headerList5.add("unit-id");
			headerList5.add("cpu-id");
			headerList5.add("operational-state");


			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("digital-unit-entries");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("cpu");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList5.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));

							while (itr.hasNext()) {
								header = itr.next();
								if (header.equalsIgnoreCase("operational-state")
										&& elementchild6.getElementsByTagName(header) != null
										&& elementchild6.getElementsByTagName(header).getLength() > 0) {
									for (int z = 0; z < elementchild6.getElementsByTagName(header)
											.getLength(); z++) {
										if (elementchild6.getElementsByTagName(header).item(z).getParentNode()
												.getNodeName().equalsIgnoreCase("cpu")) {
											objtableData.put(header, elementchild6.getElementsByTagName(header)
													.item(z).getTextContent());
										}
									}
								} else {
									objtableData.put(header, getXmlElementData(elementchild6, header));
								}
							}
							tabelData5.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData5) {
				if (tdData.get("unit-type").equals(portId)) {
					map.put("operational-state", tdData.get("operational-state"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	private int getNoOfAlarmPresentFSU(String fullOutputLog, String command) {
		int map = 0;
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("alarm-unit-type");
			headerList2.add("alarm-type");
			headerList2.add("location");
			headerList2.add("name");
			headerList2.add("value");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			
			NodeList nodeList = document.getElementsByTagName("active-alarm-entries");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("additional-information");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList2.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild1, header));
							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}
			map = tabelData1.size();
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	private HashMap<String, String> getOpertaionStateFsu(String fullOutputLog, String command) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();

			headerList6.add("administrative-state");
			
			headerList6.add("operational-mode");
			headerList6.add("operational-state");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("managed-element");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
					Iterator<String> itr = headerList6.iterator();
					String header = itr.next();
					objtableData.put(header, getXmlElementData(elementchild1, header));
					while (itr.hasNext()) {
						header = itr.next();
						if ((header.equalsIgnoreCase("administrative-state")
								
								|| header.equalsIgnoreCase("operational-mode"))
								&& elementchild1.getElementsByTagName(header) != null
								&& elementchild1.getElementsByTagName(header).getLength() > 0) {
							for (int z = 0; z < elementchild1.getElementsByTagName(header).getLength(); z++) {
								if (elementchild1.getElementsByTagName(header).item(z).getParentNode().getNodeName()
										.equalsIgnoreCase("managed-element")) {
									objtableData.put(header,
											elementchild1.getElementsByTagName(header).item(z).getTextContent());
								}
							}
						} else {
							objtableData.put(header, getXmlElementData(elementchild1, header));
						}
					}
					
						tabelData1.add(objtableData);
					
				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				
					map.put("administrative-state", tdData.get("administrative-state"));
					
					map.put("operational-mode", tdData.get("operational-mode"));

				
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	private HashMap<String, String> getRuCipriPortId(String fullOutputLog, String command, String portId) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("port-id");
			headerList1.add("du-cpri-port-mode");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("digital-unit-entries");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("du-cpri-port-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));

							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("port-id").equals(portId)

				) {
					map.put("du-cpri-port-mode", tdData.get("du-cpri-port-mode"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	private HashMap<String, String> getDucipriPortId(String fullOutputLog, String command, String portId) {
		HashMap<String, String> map = new HashMap<>();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();

			headerList1.add("port-id");
			headerList1.add("connected-du-cpri-port-id");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();

			NodeList nodeList = document.getElementsByTagName("digital-unit-entries");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);
				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild1 = (Element) ChildNode1;

					NodeList nodelist1 = elementchild1.getElementsByTagName("ru-cpri-port-entries");
					for (int k = 0; k < nodelist1.getLength(); k++) {
						Node ChildNode = nodelist1.item(k);
						if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {
							Element elementchild6 = (Element) ChildNode;
							LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
							Iterator<String> itr = headerList1.iterator();
							String header = itr.next();
							objtableData.put(header, getXmlElementData(elementchild6, header));

							while (itr.hasNext()) {
								header = itr.next();
								objtableData.put(header, getXmlElementData(elementchild6, header));
							}
							tabelData1.add(objtableData);
						}
					}

				}
			}

			for (LinkedHashMap<String, String> tdData : tabelData1) {
				if (tdData.get("port-id").equals(portId)

				) {
					map.put("connected-du-cpri-port-id", tdData.get("connected-du-cpri-port-id"));

				}
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		return map;
	}

	public StringBuilder getAuditEndc(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, "outputends");
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			outputLog = "<parent>" + outputLog + "</parent>";

			Document document = builder.parse(new InputSource(new StringReader(outputLog)));

			String entry = "ca-requested-frequency-band-info";
			LinkedHashSet<String> headerList = new LinkedHashSet<>();
			headerList.add("requested-frequency-band1");
			headerList.add("requested-frequency-band2");
			headerList.add("requested-frequency-band3");
			headerList.add("requested-frequency-band4");
			headerList.add("requested-frequency-band5");
			headerList.add("requested-frequency-band6");
			headerList.add("requested-frequency-band7");
			headerList.add("requested-frequency-band8");
			headerList.add("requested-frequency-band9");
			headerList.add("requested-frequency-band10");
			headerList.add("requested-frequency-band11");
			headerList.add("requested-frequency-band12");
			headerList.add("requested-frequency-band13");
			headerList.add("requested-frequency-band14");
			headerList.add("requested-frequency-band15");
			headerList.add("requested-frequency-band16");
			headerList.add("requested-nr-band1");
			headerList.add("requested-nr-band2");
			headerList.add("requested-nr-band3");
			headerList.add("requested-nr-band4");
			headerList.add("requested-nr-band5");
			headerList.add("requested-nr-band6");
			headerList.add("requested-nr-band7");
			headerList.add("requested-nr-band8");
			headerList.add("requested-nr-band9");
			headerList.add("requested-nr-band10");
			String entry1 = "en-dc-ue-type-for-load-balancing";
			LinkedHashSet<String> headerList1 = new LinkedHashSet<>();
			headerList1.add("plmn-index");
			headerList1.add("ue-type-index");
			headerList1.add("type-priority");
			headerList1.add("nr-band-0-usage");
			headerList1.add("bandIndicator-0");
			headerList1.add("nr-band-1-usage");
			headerList1.add("bandIndicator-1");
			headerList1.add("nr-band-2-usage");
			headerList1.add("bandIndicator-2");
			headerList1.add("nr-band-3-usage");
			headerList1.add("bandIndicator-3");
			headerList1.add("nr-band-4-usage");
			headerList1.add("bandIndicator-4");
			headerList1.add("earfcn-dl-0");
			headerList1.add("search-rate-0");
			headerList1.add("weight-for-imc-0");
			headerList1.add("earfcn-dl-1");
			headerList1.add("search-rate-1");
			headerList1.add("weight-for-imc-1");
			headerList1.add("earfcn-dl-2");
			headerList1.add("search-rate-2");
			headerList1.add("weight-for-imc-2");
			headerList1.add("earfcn-dl-3");
			headerList1.add("search-rate-3");
			headerList1.add("weight-for-imc-3");
			headerList1.add("earfcn-dl-4");
			headerList1.add("search-rate-4");
			headerList1.add("weight-for-imc-4");

			String entry2 = "en-dc-option";
			LinkedHashSet<String> headerList2 = new LinkedHashSet<>();
			headerList2.add("intra-lte-ho-sgnb-option");
			headerList2.add("gnb-fail-option");
			headerList2.add("sgnb-activity-notification-mode");
			headerList2.add("x2-partial-reset-bearer-change-period");
			headerList2.add("x2-partial-reset-bearer-change-count");
			headerList2.add("gnb-overload-protect-timer");
			headerList2.add("en-dc-scc-selection-priority1");
			headerList2.add("operator-preferred-dl-band1");
			headerList2.add("en-dc-scc-selection-priority2");
			headerList2.add("operator-preferred-dl-band2");
			headerList2.add("en-dc-scc-selection-priority3");
			headerList2.add("operator-preferred-dl-band3");
			headerList2.add("ue-ambr-mn-dl-ratio");
			headerList2.add("ue-ambr-mn-ul-ratio");
			headerList2.add("scg-failure-mode-t310-expired");
			headerList2.add("scg-failure-mode-rap");
			headerList2.add("scg-failure-mode-rmr");
			headerList2.add("scg-failure-mode-scg-change-failure");
			headerList2.add("scg-failure-mode-scg-reconfig-failure");
			headerList2.add("scg-failure-mode-srb3-integrity-failure");
			headerList2.add("scg-failure-mode-sgnb");
			headerList2.add("black-cell-lasting-timer-usage");
			headerList2.add("black-cell-lasting-time");
			headerList2.add("desired-activity-notification-level");
			headerList2.add("short-m-gap-usage");
			headerList2.add("per-fr-m-gap-usage");
			headerList2.add("simultaneous-erabmodi-bearertypechange");
			headerList2.add("mbr-mn-dl-ratio");
			headerList2.add("mbr-mn-ul-ratio");
			headerList2.add("gbr-mn-dl-ratio");
			headerList2.add("gbr-mn-ul-ratio");
			headerList2.add("sgnb-init-bearer-chg-usage");
			headerList2.add("dup-pci-selection-usage");
			headerList2.add("time-interval-endc-pri-grp0");
			headerList2.add("time-interval-endc-pri-grp1");
			headerList2.add("time-interval-endc-pri-grp2");
			headerList2.add("nr-restrict-for-all-fr");
			headerList2.add("fallback-combination-check-usage");
			headerList2.add("black-gnb-for-fr2-usage");
			headerList2.add("non-spid-ue-periodic-b1-usage");
			headerList2.add("b1-deact-time");
			headerList2.add("b1-react-time");
			headerList2.add("measurement-gap-mode");
			headerList2.add("measurement-gap-mode-for-nr-mobility");
			headerList2.add("overheating-control-usage");
			headerList2.add("rre-accept-during-endc-add");
			headerList2.add("check-nbr-for-b1");

			String entry3 = "endc-band-combination-info";
			LinkedHashSet<String> headerList3 = new LinkedHashSet<>();
			headerList3.add("band-combination-list-index");
			headerList3.add("status");
			headerList3.add("band0-for-dl-usage");
			headerList3.add("band0-for-ul-usage");
			headerList3.add("band-indicator0");
			headerList3.add("ca-bandwidth-class-dl0");
			headerList3.add("ca-bandwidth-class-ul0");
			headerList3.add("band1-for-dl-usage");
			headerList3.add("band1-for-ul-usage");
			headerList3.add("band-indicator1");
			headerList3.add("ca-bandwidth-class-dl1");
			headerList3.add("ca-bandwidth-class-ul1");
			headerList3.add("band2-for-dl-usage");
			headerList3.add("band2-for-ul-usage");
			headerList3.add("band-indicator2");
			headerList3.add("ca-bandwidth-class-dl2");
			headerList3.add("ca-bandwidth-class-ul2");
			headerList3.add("band3-for-dl-usage");
			headerList3.add("band3-for-ul-usage");
			headerList3.add("band-indicator3");
			headerList3.add("ca-bandwidth-class-dl3");
			headerList3.add("ca-bandwidth-class-ul3");
			headerList3.add("band4-for-dl-usage");
			headerList3.add("band4-for-ul-usage");
			headerList3.add("band-indicator4");
			headerList3.add("ca-bandwidth-class-dl4");
			headerList3.add("ca-bandwidth-class-ul4");
			headerList3.add("band5-for-dl-usage");
			headerList3.add("band5-for-ul-usage");
			headerList3.add("band-indicator5");
			headerList3.add("ca-bandwidth-class-dl5");
			headerList3.add("ca-bandwidth-class-ul5");
			headerList3.add("band6-for-dl-usage");
			headerList3.add("band6-for-ul-usage");
			headerList3.add("band-indicator6");
			headerList3.add("ca-bandwidth-class-dl6");
			headerList3.add("ca-bandwidth-class-ul6");
			headerList3.add("band7-for-dl-usage");
			headerList3.add("band7-for-ul-usage");
			headerList3.add("band-indicator7");
			headerList3.add("ca-bandwidth-class-dl7");
			headerList3.add("ca-bandwidth-class-ul7");
			headerList3.add("band8-for-dl-usage");
			headerList3.add("band8-for-ul-usage");
			headerList3.add("band-indicator8");
			headerList3.add("ca-bandwidth-class-dl8");
			headerList3.add("ca-bandwidth-class-ul8");
			headerList3.add("nr-band0-usage");
			headerList3.add("nr-band-indicator0");
			headerList3.add("nr-band1-usage");
			headerList3.add("nr-band-indicator1");
			headerList3.add("nr-band2-usage");
			headerList3.add("nr-band-indicator2");
			headerList3.add("nr-band3-usage");
			headerList3.add("nr-band-indicator3");
			headerList3.add("nr-band4-usage");
			headerList3.add("nr-band-indicator4");
			headerList3.add("nr-band5-usage");
			headerList3.add("nr-band-indicator5");
			headerList3.add("nr-band6-usage");
			headerList3.add("nr-band-indicator6");
			headerList3.add("nr-band7-usage");
			headerList3.add("nr-band-indicator7");
			headerList3.add("nr-band8-usage");
			headerList3.add("nr-band-indicator8");
			headerList3.add("nr-band9-usage");
			headerList3.add("nr-band-indicator9");

			String entry4 = "emergency-bearer-control-info";
			LinkedHashSet<String> headerList4 = new LinkedHashSet<>();
			headerList4.add("plmn-index");
			headerList4.add("emergency-bearer-control-option");
			headerList4.add("qci");
			headerList4.add("arp");
			headerList4.add("emergency-arp-priority");
			headerList4.add("qci-group-index");

			String entry5 = "nr-data-usage-report";
			LinkedHashSet<String> headerList5 = new LinkedHashSet<>();
			headerList5.add("nr-data-usage-report-enable");
			headerList5.add("periodic-report-support");
			headerList5.add("procedure-based-report-support");

			String entry6 = "cell-cac-info-func";
			LinkedHashSet<String> headerList6 = new LinkedHashSet<>();
			headerList6.add("cell-num");
			headerList6.add("call-count-cac-enable");
			headerList6.add("max-call-count");
			headerList6.add("call-cac-threshold-for-normal");
			headerList6.add("call-cac-threshold-for-emergency");
			headerList6.add("call-cac-threshold-for-handover");
			headerList6.add("call-cac-threshold-for-mo-sig");
			headerList6.add("call-cac-threshold-for-mo-voice-call");
			headerList6.add("call-cac-threshold-for-mt-access");
			headerList6.add("call-cac-threshold-for-high-priority-access");
			headerList6.add("drb-count-cac-enable");
			headerList6.add("max-drb-count");
			headerList6.add("drb-cac-threshold-for-normal");
			headerList6.add("drb-cac-threshold-for-emergency-handover");
			headerList6.add("drb-cac-threshold-for-high-priority-access");
			headerList6.add("qos-cac-option");
			headerList6.add("qos-policy-option");
			headerList6.add("prb-report-period");
			headerList6.add("estimation-option");
			headerList6.add("preemption-enable");
			headerList6.add("bh-bw-cac-enable");
			headerList6.add("bh-bw-cac-option");
			headerList6.add("qci-drb-cac-enable");
			headerList6.add("qci-drb-cac-option");
			headerList6.add("load-based-redirection-enable");
			headerList6.add("adaptive-sharing-enable");
			headerList6.add("ran-sharing-preemption-option");
			headerList6.add("low-call-release-option");
			headerList6.add("emergency-arp-priority");
			headerList6.add("drb-cac-notification-threshold");
			headerList6.add("call-cac-notification-threshold");
			headerList6.add("partial-cac-enable");
			headerList6.add("call-threshold-for-sib14-high");
			headerList6.add("backoff-timer-for-sib14");
			headerList6.add("emtc-call-threshold-for-sib14-high");
			headerList6.add("emtc-backoff-timer-for-sib14");
			headerList6.add("delay-qos-cac-enable");
			headerList6.add("delay-qos-cac-bearer-count-thresh");
			headerList6.add("qci-1-2-sum-cac-enable");
			headerList6.add("point-0-enable");
			headerList6.add("qci-1-point0");
			headerList6.add("qci-2-point0");
			headerList6.add("point-1-enable");
			headerList6.add("qci-1-point1");
			headerList6.add("qci-2-point1");
			headerList6.add("point-2-enable");
			headerList6.add("qci-1-point2");
			headerList6.add("qci-2-point2");
			headerList6.add("point-3-enable");
			headerList6.add("qci-1-point3");
			headerList6.add("qci-2-point3");
			headerList6.add("point-4-enable");
			headerList6.add("qci-1-point4");
			headerList6.add("qci-2-point4");
			headerList6.add("arp-group-based-cac-enable");
			headerList6.add("uplink-lcg1-threshold");
			headerList6.add("uplink-lcg2-threshold");
			headerList6.add("use-traffic-per-ue-enable");
			headerList6.add("category1-cac-cell-enable");
			headerList6.add("category1-call-count-cac-threshold");
			headerList6.add("category1-drb-count-cac-threshold");
			headerList6.add("category1-total-prb-cac-threshold-downlink");
			headerList6.add("category1-total-prb-cac-threshold-uplink");
			headerList6.add("category1-ue-redirection-enable");
			headerList6.add("category1-ue-redirection-call-threshold");
			headerList6.add("category1-ue-redirection-bearer-threshold");
			headerList6.add("max-call-count-for-pooling");
			headerList6.add("max-drb-count-for-pooling");
			headerList6.add("reserved-call-count-for-pooling");
			headerList6.add("reserved-drb-count-for-pooling");
			headerList6.add("pooling-group-id");
			headerList6.add("pooling-capability");
			headerList6.add("inter-cell-preemption-enable");
			headerList6.add("high-priority-access-arp-priority");
			headerList6.add("emtc-cac-cell-enable");
			headerList6.add("reserved-emtc-call-count");
			headerList6.add("emtc-threshold-follow-legacy-flag");
			headerList6.add("scheduled-bearer-threshold-uplink");
			headerList6.add("scheduled-bearer-threshold-downlink");
			headerList6.add("max-emtc-call-threshold");
			headerList6.add("max-emtc-drb-threshold");
			headerList6.add("max-call-threshold-for-endc");
			headerList6.add("max-drb-threshold-for-endc");

			String entry7 = "endc-cell-info";
			LinkedHashSet<String> headerList7 = new LinkedHashSet<>();
			headerList7.add("cell-num");
			headerList7.add("endc-support");
			headerList7.add("endc-operation-mode");
			headerList7.add("freq-distribute-option");
			headerList7.add("num-lte-freq-for-fr1");
			headerList7.add("num-lte-freq-for-fr2");
			headerList7.add("harmonics-imd-nr-fr");
			headerList7.add("endc-anchor-type");
			headerList7.add("data-traffic-threshold");
			headerList7.add("imd-option");
			headerList7.add("gnb-conf-volte-regular");
			headerList7.add("gnb-conf-volte-emergency");
			headerList7.add("data-traffic-threshold-for-readdition");
			headerList7.add("data-traffic-threshold-low");
			headerList7.add("data-traffic-threshold-for-readdition-low");
			headerList7.add("data-traffic-threshold-mode");

			String entry8 = "en-dc-meas-priority";
			LinkedHashSet<String> headerList8 = new LinkedHashSet<>();
			headerList8.add("cell-num");
			headerList8.add("non-gbr-qci");
			headerList8.add("nr-band-freq");
			headerList8.add("priority");

			String entry9 = "traffic-manage-func-cell-control";
			LinkedHashSet<String> headerList9 = new LinkedHashSet<>();
			headerList9.add("cell-num");
			headerList9.add("load-equalization-enable");
			headerList9.add("intra-group-offloading-enable");
			headerList9.add("inter-group-offloading-enable");
			headerList9.add("offload-to-hrpd-enable");
			headerList9.add("idle-mode-load-balancing-enable");
			headerList9.add("idle-ca-usage");
			headerList9.add("plmn-option-for-idle-load-balancing");
			headerList9.add("redistribution-mode");
			headerList9.add("ul-sinr-measure-load-balancing-option");
			headerList9.add("ca-option-for-load-balancing");
			headerList9.add("emtc-idle-mode-load-balancing-enable");
			headerList9.add("plmn-option-for-emtc-idle-load-balancing");
			headerList9.add("idle-mode-endc-support-enable");
			headerList9.add("plmn-option-for-idle-endc-support");
			headerList9.add("anchor-selection-enable");
			headerList9.add("anchor-area-option-for-Idle-endc");
			headerList9.add("nr-priority-option-for-idle-endc");
			headerList9.add("scg-band-selection-mode");
			headerList9.add("endc-band-combination-option-for-idle-endc");

			String entry10 = "eutran-cell-info";
			LinkedHashSet<String> headerList10 = new LinkedHashSet<>();
			headerList10.add("cell-num");
			headerList10.add("cell-size");
			headerList10.add("hnb-name");
			headerList10.add("additional-spectrum-emission");
			headerList10.add("ims-emergency-support");
			headerList10.add("barring-state");
			headerList10.add("category-0-allowed");
			headerList10.add("tracking-area-code");
			headerList10.add("cell-dl-total-power");
			headerList10.add("plmn-info-list-r15-usage");

			String entry11 = "eutran-dedicated-priority-info-func";
			LinkedHashSet<String> headerList11 = new LinkedHashSet<>();
			headerList11.add("cell-num");
			headerList11.add("plmn-index");
			headerList11.add("fa-index");
			headerList11.add("spid-index");
			headerList11.add("spid");
			headerList11.add("dedicated-priority");
			headerList11.add("spid-mobility-option");
			headerList11.add("spid-measure-option");
			headerList11.add("restrict-mobility-by-spid");
			headerList11.add("endc-ue-enable");
			headerList11.add("cell-reselection-sub-priority");

			String entry12 = "nr-b1-criteria-info";
			LinkedHashSet<String> headerList12 = new LinkedHashSet<>();
			headerList12.add("cell-num");
			headerList12.add("purpose");
			headerList12.add("fa-index");
			headerList12.add("qci-group-index");
			headerList12.add("b1-enable");
			headerList12.add("b1-threshold-nr-rsrp");
			headerList12.add("b1-threshold-nr-rsrq");
			headerList12.add("b1-threshold-nr-sinr");
			headerList12.add("hysteresis");
			headerList12.add("time-to-trigger");
			headerList12.add("trigger-quantity");
			headerList12.add("report-quantity-cell-nr-ss-rsrp");
			headerList12.add("report-quantity-cell-nr-ss-rsrq");
			headerList12.add("report-quantity-cell-nr-ss-sinr");
			headerList12.add("max-report-rs-index");
			headerList12.add("report-quantity-rs-index-nr-ss-rsrp");
			headerList12.add("report-quantity-rs-index-nr-ss-rsrq");
			headerList12.add("report-quantity-rs-index-nr-ss-sinr");
			headerList12.add("report-interval");
			headerList12.add("report-amount");
			headerList12.add("b1-report-on-leave");

			String entry13 = "en-dc-scheduler-func";
			LinkedHashSet<String> headerList13 = new LinkedHashSet<>();
			headerList13.add("cell-num");
			headerList13.add("p-max-eutra-ratio-fr1");
			headerList13.add("lte-ul-out-max-tbs-threshold-fr1");
			headerList13.add("lte-ul-out-pcell-max-tbs-count-threshold-fr1");
			headerList13.add("lte-ul-in-max-tbs-threshold-fr1");
			headerList13.add("lte-ul-in-pcell-max-tbs-count-threshold-fr1");
			headerList13.add("en-dc-ul-traffic-based-sn-add-support");
			headerList13.add("en-dc-ul-heavy-traffic-volume-threshold");
			headerList13.add("en-dc-ul-heavy-traffic-count-threshold");
			headerList13.add("lte-ul-out-max-tbs-threshold-fr1-qci1");
			headerList13.add("lte-ul-in-max-tbs-threshold-fr1-qci1");
			headerList13.add("power-sharing-mode");
			headerList13.add("semi-static2-offset");
			headerList13.add("p-max-eutra-offset-pc3-dps-ue");
			headerList13.add("p-max-eutra-offset-pc2-dps-ue");
			headerList13.add("p-max-nr-offset-pc3-dps-ue");
			headerList13.add("p-max-nr-offset-pc2-dps-ue");

			String entry14 = "nr-fa-prior-info-func";
			LinkedHashSet<String> headerList14 = new LinkedHashSet<>();
			headerList14.add("cell-num");
			headerList14.add("fa-index");
			headerList14.add("duplex-type");
			headerList14.add("arfcn-nr-dl");
			headerList14.add("arfcn-nr-ul");
			headerList14.add("mtc-ssb-nr-period");
			headerList14.add("mtc-ssb-nr-offset");
			headerList14.add("mtc-ssb-nr-duration");
			headerList14.add("sub-carrier-spacing-ssb");
			headerList14.add("abs-thresh-rs-index-rsrp");
			headerList14.add("abs-thresh-rs-index-rsrq");
			headerList14.add("abs-thresh-rs-index-sinr");
			headerList14.add("max-rs-index-cell-qual");
			headerList14.add("quantity-config-set");
			headerList14.add("nr-band");
			headerList14.add("offset-freq");
			headerList14.add("preference0");
			headerList14.add("preference1");
			headerList14.add("preference2");
			headerList14.add("preference3");
			headerList14.add("preference4");
			headerList14.add("preference5");
			headerList14.add("min-nrt-ratio-carrier");
			headerList14.add("cell-reselection-priority");
			headerList14.add("thresh-xhigh");
			headerList14.add("thresh-xlow");
			headerList14.add("thresh-xhigh-q");
			headerList14.add("thresh-xlow-q");
			headerList14.add("q-rx-lev-min");
			headerList14.add("q-qual-min-usage");
			headerList14.add("q-qual-min");
			headerList14.add("derive-ssb-index-from-cell");
			headerList14.add("p-max-nr");
			headerList14.add("anr-ue-search-rate");
			headerList14.add("arfcn-point-a-nr-ul");
			headerList14.add("arfcn-point-a-nr-dl");
			headerList14.add("sa-capable");
			headerList14.add("measurement-gap-usage");
			headerList14.add("mobility-preference");
			headerList14.add("mo-priority");
			headerList14.add("nr-frequency-low");
			headerList14.add("nr-frequency-high");
			headerList14.add("endc-priority-group");
			headerList14.add("cell-reselection-sub-priority");
			headerList14.add("target-for-spid-based-mo");

			String entry15 = "nr-fa-prior-qci-info-func";
			LinkedHashSet<String> headerList15 = new LinkedHashSet<>();
			headerList15.add("cell-num");
			headerList15.add("fa-index");
			headerList15.add("qci-group-index");
			headerList15.add("offset-freq");
			headerList15.add("mo-priority");

			String entry16 = "external-new-radio-cell";
			LinkedHashSet<String> headerList16 = new LinkedHashSet<>();
			headerList16.add("cell-num");
			headerList16.add("relation-index");
			headerList16.add("gnb-id-bit-length");
			headerList16.add("gnb-id");
			headerList16.add("target-cell-id-nr");
			headerList16.add("phy-cell-id-nr");
			headerList16.add("five-gs-tac");
			headerList16.add("configured-tac");
			headerList16.add("duplex-type");
			headerList16.add("arfcn-ul");
			headerList16.add("arfcn-dl");
			headerList16.add("bandwidth-ul-scs");
			headerList16.add("bandwidth-dl-scs");
			headerList16.add("bandwidth-ul-nrb");
			headerList16.add("bandwidth-dl-nrb");
			headerList16.add("ul-nr-frequency-band-0");
			headerList16.add("dl-nr-frequency-band-0");
			headerList16.add("ul-nr-frequency-band-1");
			headerList16.add("dl-nr-frequency-band-1");
			headerList16.add("ul-nr-frequency-band-2");
			headerList16.add("dl-nr-frequency-band-2");
			headerList16.add("ul-nr-frequency-band-3");
			headerList16.add("dl-nr-frequency-band-3");
			headerList16.add("is-remove-allowed");
			headerList16.add("is-en-dc-allowed");
			headerList16.add("owner-type");
			headerList16.add("current-rank");
			headerList16.add("previous-rank");
			headerList16.add("is-colocated");
			headerList16.add("is-colocated-for-es-cell-off");
			headerList16.add("ssb-frequency");
			headerList16.add("is-handover-allowed");
			headerList16.add("dss-cell-indicator");
			headerList16.add("gnb-mcc");
			headerList16.add("gnb-mnc");
			headerList16.add("mcc0");
			headerList16.add("mnc0");
			headerList16.add("mcc1");
			headerList16.add("mnc1");
			headerList16.add("mcc2");
			headerList16.add("mnc2");
			headerList16.add("mcc3");
			headerList16.add("mnc3");
			headerList16.add("mcc4");
			headerList16.add("mnc4");
			headerList16.add("mcc5");
			headerList16.add("mnc5");
			headerList16.add("mcc6");
			headerList16.add("mnc6");
			headerList16.add("mcc7");
			headerList16.add("mnc7");

			String entry17 = "dc-control-param";
			LinkedHashSet<String> headerList17 = new LinkedHashSet<>();
			headerList17.add("dc-index");
			headerList17.add("bearer-type-usage");
			headerList17.add("qci");
			headerList17.add("arp");
			headerList17.add("bearer-type");
			headerList17.add("nr-band-freq");
			headerList17.add("priority");

			String entry18 = "idle-mode-load-balancing-conf";
			LinkedHashSet<String> headerList18 = new LinkedHashSet<>();
			headerList18.add("idle-load-balancing-enter-threshold");
			headerList18.add("number-of-neighbor-for-idle-load-balancing");
			headerList18.add("period-for-idle-load-balancing");
			headerList18.add("imc-for-endc-operation-mode");
			headerList18.add("per-endc-ue-type-option");
			headerList18.add("imd-avoid-for-endc-option");
			headerList18.add("valid-carrier-threshold-for-idle-load-balancing-endc");

			String entry19 = "term-point-to-gnb";
			LinkedHashSet<String> headerList19 = new LinkedHashSet<>();
			headerList19.add("neighbor-gnb-index");
			headerList19.add("no-x2");
			headerList19.add("gnb-id-bit-length");
			headerList19.add("gnb-id");
			headerList19.add("ip-ver");
			headerList19.add("neighbor-gnb-ipv4");
			headerList19.add("neighbor-gnb-ipv6");
			headerList19.add("secondary-neighbor-gnb-ipv4");
			headerList19.add("secondary-neighbor-gnb-ipv6");
			headerList19.add("owner-type");
			headerList19.add("current-x2-rank");
			headerList19.add("previous-x2-rank");
			headerList19.add("no-remove");
			headerList19.add("is-samsung-gnb");
			headerList19.add("interface-state");
			headerList19.add("direct-forwarding-available");
			headerList19.add("mcc");
			headerList19.add("mnc");

			List<LinkedHashMap<String, String>> tabelData1 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData2 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData3 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData4 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData5 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData6 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData7 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData8 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData9 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData10 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData11 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData12 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData13 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData14 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData15 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData16 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData17 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData18 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData19 = new ArrayList<>();
			List<LinkedHashMap<String, String>> tabelData20 = new ArrayList<>();
			StringBuilder auditIssueAll = new StringBuilder();
			NodeList nodeList = document.getElementsByTagName("managed-element");

			for (int i = 0; i < nodeList.getLength(); i++) {
				Node ChildNode1 = nodeList.item(i);

				if (Node.ELEMENT_NODE == ChildNode1.getNodeType()) {

					Element elementchild5 = (Element) ChildNode1;

					NodeList childNodeList3 = elementchild5.getElementsByTagName("enb-function");
					for (int q = 0; q < childNodeList3.getLength(); q++) {
						if (q == 0) {
							Node ChildNode4 = childNodeList3.item(q);
							if (Node.ELEMENT_NODE == ChildNode4.getNodeType()) {

								Element elementchild1 = (Element) ChildNode4;

								NodeList childNodeList = elementchild1.getElementsByTagName("carrier-aggregation");

								for (int j = 0; j < childNodeList.getLength(); j++) {

									Node ChildNode = childNodeList.item(j);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild
												.getElementsByTagName("ca-requested-frequency-band-info");
										for (int l = 0; l < childNodeList1.getLength(); l++) {

											Node ChildNode2 = childNodeList1.item(l);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												Iterator<String> itr = headerList.iterator();
												String header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
												while (itr.hasNext()) {
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));
												}
												tabelData1.add(objtableData);
											}
										}

									}
								}

								childNodeList = elementchild1.getElementsByTagName("en-dc-ue-type-for-load-balancing");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode2 = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

										Element elementchild2 = (Element) ChildNode2;
										LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
										Iterator<String> itr = headerList1.iterator();
										String header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
										while (itr.hasNext()) {
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
										}
										tabelData2.add(objtableData);
									}
								}
								childNodeList = elementchild1.getElementsByTagName("enb-information");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild
												.getElementsByTagName("emergency-bearer-control-info");
										for (int k = 0; k < childNodeList1.getLength(); k++) {

											Node ChildNode2 = childNodeList1.item(k);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												Iterator<String> itr = headerList4.iterator();
												String header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
												while (itr.hasNext()) {
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));
												}
												tabelData5.add(objtableData);
											}
										}
									}
								}
								childNodeList = elementchild1.getElementsByTagName("eutra-nr-dual-connectivity");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild.getElementsByTagName("en-dc-option");
										for (int k = 0; k < childNodeList1.getLength(); k++) {

											Node ChildNode2 = childNodeList1.item(k);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												Iterator<String> itr = headerList2.iterator();
												String header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
												while (itr.hasNext()) {
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));
												}
												tabelData3.add(objtableData);
											}
										}

										NodeList childNodeList2 = elementchild
												.getElementsByTagName("endc-band-combination-info");
										for (int k = 0; k < childNodeList2.getLength(); k++) {

											Node ChildNode2 = childNodeList2.item(k);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												Iterator<String> itr = headerList3.iterator();
												String header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
												while (itr.hasNext()) {
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));
												}
												tabelData4.add(objtableData);
											}
										}

									}
								}

								childNodeList = elementchild1.getElementsByTagName("nr-data-usage-report");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode2 = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

										Element elementchild2 = (Element) ChildNode2;
										LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
										Iterator<String> itr = headerList5.iterator();
										String header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
										while (itr.hasNext()) {
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
										}
										tabelData6.add(objtableData);
									}
								}

								childNodeList = elementchild1.getElementsByTagName("eutran-generic-cell");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild
												.getElementsByTagName("eutran-cell-fdd-tdd");
										for (int k = 0; k < childNodeList1.getLength(); k++) {

											Node ChildNode2 = childNodeList1.item(k);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;

												NodeList childNodeList2 = elementchild2
														.getElementsByTagName("cell-admission-control");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("cell-cac-info-func");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																Iterator<String> itr = headerList6.iterator();
																String header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild2, header));
																while (itr.hasNext()) {
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild4, header));
																}
																tabelData7.add(objtableData);

															}
														}

													}
												}
												childNodeList2 = elementchild2
														.getElementsByTagName("cell-endc-function");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("endc-cell-info");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																Iterator<String> itr = headerList7.iterator();
																String header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild2, header));
																while (itr.hasNext()) {
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild4, header));
																}
																tabelData8.add(objtableData);

															}
														}
														childNodeList4 = elementchild3
																.getElementsByTagName("en-dc-meas-priority");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																Iterator<String> itr = headerList8.iterator();
																String header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild2, header));
																while (itr.hasNext()) {
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild4, header));
																}
																tabelData9.add(objtableData);

															}
														}
													}
												}

												childNodeList2 = elementchild2.getElementsByTagName("cell-son");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("cell-load-balancing");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																NodeList childNodeList5 = elementchild4
																		.getElementsByTagName(
																				"traffic-manage-func-cell-control");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		Iterator<String> itr = headerList9.iterator();
																		String header = itr.next();
																		objtableData.put(header, getXmlElementData(
																				elementchild2, header));
																		while (itr.hasNext()) {
																			header = itr.next();
																			objtableData.put(header, getXmlElementData(
																					elementchild4, header));
																		}
																		tabelData10.add(objtableData);

																	}
																}

															}
														}

													}
												}
												childNodeList2 = elementchild2.getElementsByTagName("eutran-cell-info");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;

														LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
														Iterator<String> itr = headerList10.iterator();
														String header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild2, header));
														while (itr.hasNext()) {
															header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild3, header));
														}
														tabelData11.add(objtableData);
													}
												}

												childNodeList2 = elementchild2
														.getElementsByTagName("rat-frequency-priority");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3.getElementsByTagName(
																"eutran-dedicated-priority-info-func");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																Iterator<String> itr = headerList11.iterator();
																String header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild2, header));
																while (itr.hasNext()) {
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild4, header));
																}
																tabelData12.add(objtableData);

															}
														}
													}
												}

												childNodeList2 = elementchild2
														.getElementsByTagName("ue-measurement-control");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("nr-b1-criteria-info");
														for (int o = 0; o < childNodeList4.getLength(); o++) {

															Node ChildNode5 = childNodeList4.item(o);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																Iterator<String> itr = headerList12.iterator();
																String header = itr.next();
																objtableData.put(header,
																		getXmlElementData(elementchild2, header));
																while (itr.hasNext()) {
																	header = itr.next();
																	objtableData.put(header,
																			getXmlElementData(elementchild4, header));
																}
																tabelData13.add(objtableData);

															}
														}

													}
												}
												childNodeList2 = elementchild2
														.getElementsByTagName("scheduling-config");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("uplink-downlink-common");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																NodeList childNodeList5 = elementchild4
																		.getElementsByTagName("en-dc-scheduler-func");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		Iterator<String> itr = headerList13.iterator();
																		String header = itr.next();
																		objtableData.put(header, getXmlElementData(
																				elementchild2, header));
																		while (itr.hasNext()) {
																			header = itr.next();
																			objtableData.put(header, getXmlElementData(
																					elementchild4, header));
																		}
																		tabelData14.add(objtableData);

																	}
																}

															}
														}
														childNodeList4 = elementchild3
																.getElementsByTagName("uplink-scheduling-config");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																NodeList childNodeList5 = elementchild4
																		.getElementsByTagName("pusch-config-logic");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		objtableData.put("cell-num", getXmlElementData(
																				elementchild2, "cell-num"));
																		objtableData.put("pusch-hopping-enabled",
																				getXmlElementData(elementchild6,
																						"pusch-hopping-enabled"));
																		objtableData.put("coordinated-cellnum",
																				getXmlElementData(elementchild6,
																						"coordinated-cellnum"));

																		tabelData17.add(objtableData);

																	}
																}
																childNodeList4 = elementchild4
																		.getElementsByTagName("trch-info-func");
																for (int o = 0; o < childNodeList4.getLength(); o++) {

																	Node ChildNode6 = childNodeList4.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;
																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		objtableData.put("cell-num", getXmlElementData(
																				elementchild2, "cell-num"));
																		objtableData.put("max-ttib-ue-num-thresh",
																				getXmlElementData(elementchild6,
																						"max-ttib-ue-num-thresh"));
																		tabelData18.add(objtableData);

																	}
																}

															}
														}

													}
												}

												childNodeList2 = elementchild2
														.getElementsByTagName("nr-frequency-relation");
												for (int m = 0; m < childNodeList2.getLength(); m++) {

													Node ChildNode3 = childNodeList2.item(m);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {

														Element elementchild3 = (Element) ChildNode3;
														NodeList childNodeList4 = elementchild3
																.getElementsByTagName("nr-fa-information");
														for (int n = 0; n < childNodeList4.getLength(); n++) {

															Node ChildNode5 = childNodeList4.item(n);
															if (Node.ELEMENT_NODE == ChildNode5.getNodeType()) {

																Element elementchild4 = (Element) ChildNode5;
																NodeList childNodeList5 = elementchild3
																		.getElementsByTagName("nr-fa-prior-info-func");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;

																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		Iterator<String> itr = headerList14.iterator();
																		String header = itr.next();
																		objtableData.put(header, getXmlElementData(
																				elementchild2, header));
																		header = itr.next();
																		objtableData.put(header, getXmlElementData(
																				elementchild4, header));
																		while (itr.hasNext()) {
																			header = itr.next();
																			objtableData.put(header, getXmlElementData(
																					elementchild6, header));
																		}
																		tabelData15.add(objtableData);
																	}
																}
																childNodeList5 = elementchild3
																		.getElementsByTagName("nr-fa-prior-info-func");
																for (int o = 0; o < childNodeList5.getLength(); o++) {

																	Node ChildNode6 = childNodeList5.item(o);
																	if (Node.ELEMENT_NODE == ChildNode6.getNodeType()) {

																		Element elementchild6 = (Element) ChildNode6;

																		LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
																		Iterator<String> itr = headerList15.iterator();
																		String header = itr.next();
																		objtableData.put(header, getXmlElementData(
																				elementchild2, header));
																		header = itr.next();
																		objtableData.put(header, getXmlElementData(
																				elementchild4, header));
																		while (itr.hasNext()) {
																			header = itr.next();
																			objtableData.put(header, getXmlElementData(
																					elementchild6, header));
																		}
																		tabelData16.add(objtableData);
																	}
																}
															}
														}

													}
												}

											}

										}

									}
								}
								childNodeList = elementchild1.getElementsByTagName("new-radio-network");
								for (int m = 0; m < childNodeList.getLength(); m++) {

									Node ChildNode = childNodeList.item(m);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild.getElementsByTagName("dc-control-param");
										for (int n = 0; n < childNodeList1.getLength(); n++) {

											Node ChildNode2 = childNodeList1.item(n);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												Iterator<String> itr = headerList17.iterator();
												String header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild2, header));
												while (itr.hasNext()) {
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild2, header));
												}
												tabelData18.add(objtableData);
											}
										}
										NodeList childNodeList1X = elementchild
												.getElementsByTagName("external-new-radio-cell");
										for (int s = 0; s < childNodeList1X.getLength(); s++) {
											Node ChildNode8 = childNodeList1X.item(s);
											if (Node.ELEMENT_NODE == ChildNode8.getNodeType()) {

												Element elementchild9 = (Element) ChildNode8;
												LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
												Iterator<String> itr = headerList16.iterator();
												String header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild9, header));
												header = itr.next();
												objtableData.put(header, getXmlElementData(elementchild9, header));
												while (itr.hasNext()) {
													header = itr.next();
													objtableData.put(header, getXmlElementData(elementchild9, header));
												}
												tabelData17.add(objtableData);
											}
										}

									}
								}
								childNodeList = elementchild1.getElementsByTagName("son");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode.getNodeType()) {

										Element elementchild = (Element) ChildNode;
										NodeList childNodeList1 = elementchild.getElementsByTagName("load-balancing");
										for (int m = 0; m < childNodeList1.getLength(); m++) {

											Node ChildNode2 = childNodeList1.item(m);
											if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {
												Element elementchild2 = (Element) ChildNode2;
												NodeList childNodeList2 = elementchild2
														.getElementsByTagName("idle-mode-load-balancing-conf");
												for (int n = 0; n < childNodeList2.getLength(); n++) {

													Node ChildNode3 = childNodeList2.item(n);
													if (Node.ELEMENT_NODE == ChildNode3.getNodeType()) {
														Element elementchild3 = (Element) ChildNode3;
														LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
														Iterator<String> itr = headerList18.iterator();
														String header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
														header = itr.next();
														objtableData.put(header,
																getXmlElementData(elementchild3, header));
														while (itr.hasNext()) {
															header = itr.next();
															objtableData.put(header,
																	getXmlElementData(elementchild3, header));
														}
														tabelData19.add(objtableData);
													}
												}

											}
										}

									}
								}
								childNodeList = elementchild1.getElementsByTagName("term-point-to-gnb");
								for (int l = 0; l < childNodeList.getLength(); l++) {

									Node ChildNode2 = childNodeList.item(l);
									if (Node.ELEMENT_NODE == ChildNode2.getNodeType()) {

										Element elementchild2 = (Element) ChildNode2;
										LinkedHashMap<String, String> objtableData = new LinkedHashMap<>();
										Iterator<String> itr = headerList19.iterator();
										String header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
										header = itr.next();
										objtableData.put(header, getXmlElementData(elementchild2, header));
										while (itr.hasNext()) {
											header = itr.next();
											objtableData.put(header, getXmlElementData(elementchild2, header));
										}
										tabelData20.add(objtableData);
									}
								}
							}
						}

					}

				}
			}
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append(
					"<tr><td colspan=" + headerList.size() + " bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");

			HashMap<String, List<String>> validationMap = new HashMap<>();
			htmlContent.append(createHtmltableDSS(headerList, entry, tabelData1, validationMap));
			htmlContent.append(createHtmltableDSS(headerList1, entry1, tabelData2, validationMap));
			htmlContent.append(createHtmltableDSS(headerList2, entry2, tabelData3, validationMap));
			htmlContent.append(createHtmltableDSS(headerList3, entry3, tabelData4, validationMap));
			htmlContent.append(createHtmltableDSS(headerList4, entry4, tabelData5, validationMap));
			htmlContent.append(createHtmltableDSS(headerList5, entry5, tabelData6, validationMap));
			htmlContent.append(createHtmltableDSS(headerList6, entry6, tabelData7, validationMap));
			htmlContent.append(createHtmltableDSS(headerList7, entry7, tabelData8, validationMap));
			htmlContent.append(createHtmltableDSS(headerList8, entry8, tabelData9, validationMap));
			htmlContent.append(createHtmltableDSS(headerList9, entry9, tabelData10, validationMap));
			htmlContent.append(createHtmltableDSS(headerList10, entry10, tabelData11, validationMap));
			htmlContent.append(createHtmltableDSS(headerList11, entry11, tabelData12, validationMap));
			htmlContent.append(createHtmltableDSS(headerList12, entry12, tabelData13, validationMap));
			htmlContent.append(createHtmltableDSS(headerList13, entry13, tabelData14, validationMap));
			htmlContent.append(createHtmltableDSS(headerList14, entry14, tabelData15, validationMap));
			htmlContent.append(createHtmltableDSS(headerList15, entry15, tabelData16, validationMap));
			htmlContent.append(createHtmltableDSS(headerList16, entry16, tabelData17, validationMap));
			htmlContent.append(createHtmltableDSS(headerList17, entry17, tabelData18, validationMap));
			htmlContent.append(createHtmltableDSS(headerList18, entry18, tabelData19, validationMap));
			htmlContent.append(createHtmltableDSS(headerList19, entry19, tabelData20, validationMap));

			htmlContent.append("</table>\n");
	
			AuditCriticalParamsSummaryEntity auditCriticalParamsEntity = auditCriticalParamsService.createAuditCriticalParamsSummaryEntity(enbId, runTestEntity.getId());

			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData1, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData2, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData3, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData4, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData5, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData6, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData7, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData8, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData9, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData10, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData11, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData12, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData13, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData14, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData15, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData16, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData17, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData18, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData19, auditIssueAll);
			auditCriticalParamsService.storeAuditCriticalParams(auditCriticalParamsEntity, tabelData20, auditIssueAll);
			
		}

		catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;

	}

	public StringBuilder getAuditmh1Ip(String fullOutputLog, String command, String enbId, String dbcollectionFileName,
			RunTestEntity runTestEntity) {
		StringBuilder htmlContent = new StringBuilder();
		try {
			String outputLog = StringUtils.substringAfter(fullOutputLog, command);
			outputLog = StringUtils.substringBefore(outputLog, XmlCommandsConstants.ENDTEXT5G);
			outputLog = StringUtils.substringAfter(outputLog, "clusters");
			outputLog = StringUtils.substringBefore(outputLog, "cluster");
			outputLog = StringUtils.substringAfter(outputLog, "name");
			outputLog = outputLog.trim().replaceAll("[^a-zA-Z0-9]", "");

			if (!outputLog.isEmpty()) {
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center >" + outputLog.trim() + "</td></tr>\n");
				htmlContent.append("</table>");
			} else {
				htmlContent.setLength(0);
				htmlContent.append(
						"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
				htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
				htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
				htmlContent.append("</table>");
			}
		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
			htmlContent.setLength(0);
			htmlContent.append(
					"<br><br><table cellspacing=0 cellpadding=5 border=1 bordercolor=#000000 style=\"min-width: 100%;table-layout: fixed;white-space: pre;\">\n");
			htmlContent.append("<tr><td  bgcolor=#EEEEEE><b>" + command + "</b></td></tr>\n");
			htmlContent.append("<tr>\n<td align=center bgcolor=FFFF00>NO DATA</td></tr>\n");
			htmlContent.append("</table>");
		}
		return htmlContent;
	}
}
